
0_CAN_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c35c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d4  0800c468  0800c468  0001c468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce3c  0800ce3c  000204c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce3c  0800ce3c  000204c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce3c  0800ce3c  000204c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce3c  0800ce3c  0001ce3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce40  0800ce40  0001ce40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c0  20000000  0800ce44  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  200004c0  0800d304  000204c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  20000ba8  0800d304  00020ba8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000204e9  2**0
                  CONTENTS, READONLY
 13 .debug_info   000243fe  00000000  00000000  0002052c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c31  00000000  00000000  0004492a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  00049560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012c6  00000000  00000000  0004ac90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cda8  00000000  00000000  0004bf56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020052  00000000  00000000  00068cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a407  00000000  00000000  00088d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069a4  00000000  00000000  00123158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  00129afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200004c0 	.word	0x200004c0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c450 	.word	0x0800c450

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200004c4 	.word	0x200004c4
 8000148:	0800c450 	.word	0x0800c450

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CO_getUint8>:
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t
CO_getUint8(const void* buf) {
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	781b      	ldrb	r3, [r3, #0]
    uint8_t value;
    (void)memmove((void*)&value, buf, sizeof(value));
 8000168:	73fb      	strb	r3, [r7, #15]
    return value;
 800016a:	7bfb      	ldrb	r3, [r7, #15]
}
 800016c:	4618      	mov	r0, r3
 800016e:	3714      	adds	r7, #20
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr

08000176 <CO_setUint8>:
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t
CO_setUint8(void* buf, uint8_t value) {
 8000176:	b480      	push	{r7}
 8000178:	b083      	sub	sp, #12
 800017a:	af00      	add	r7, sp, #0
 800017c:	6078      	str	r0, [r7, #4]
 800017e:	460b      	mov	r3, r1
 8000180:	70fb      	strb	r3, [r7, #3]
 8000182:	78fa      	ldrb	r2, [r7, #3]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	701a      	strb	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8000188:	2301      	movs	r3, #1
}
 800018a:	4618      	mov	r0, r3
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <CO_setUint32>:
    return (uint8_t)(sizeof(value));
}

/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t
CO_setUint32(void* buf, uint32_t value) {
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
 800019c:	6039      	str	r1, [r7, #0]
 800019e:	683a      	ldr	r2, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 80001a4:	2304      	movs	r3, #4
}
 80001a6:	4618      	mov	r0, r3
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr

080001b0 <OD_getIndex>:
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t
OD_getIndex(const OD_entry_t* entry) {
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d002      	beq.n	80001c4 <OD_getIndex+0x14>
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	881b      	ldrh	r3, [r3, #0]
 80001c2:	e000      	b.n	80001c6 <OD_getIndex+0x16>
 80001c4:	2300      	movs	r3, #0
}
 80001c6:	4618      	mov	r0, r3
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr

080001d0 <OD_extension_init>:
 * NULL, extension will be removed.
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d101      	bne.n	80001e4 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80001e0:	2305      	movs	r3, #5
 80001e2:	e003      	b.n	80001ec <OD_extension_init+0x1c>
    }
    entry->extension = extension;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	683a      	ldr	r2, [r7, #0]
 80001e8:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80001ea:	2300      	movs	r3, #0
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	370c      	adds	r7, #12
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr

080001f6 <OD_get_u32>:
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80001f6:	b580      	push	{r7, lr}
 80001f8:	b086      	sub	sp, #24
 80001fa:	af02      	add	r7, sp, #8
 80001fc:	60f8      	str	r0, [r7, #12]
 80001fe:	607a      	str	r2, [r7, #4]
 8000200:	603b      	str	r3, [r7, #0]
 8000202:	460b      	mov	r3, r1
 8000204:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000206:	7af9      	ldrb	r1, [r7, #11]
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	9300      	str	r3, [sp, #0]
 800020c:	2304      	movs	r3, #4
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	68f8      	ldr	r0, [r7, #12]
 8000212:	f001 fb81 	bl	8001918 <OD_get_value>
 8000216:	4603      	mov	r3, r0
}
 8000218:	4618      	mov	r0, r3
 800021a:	3710      	adds	r7, #16
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <OD_read_1014_default>:
 * Custom functions for read/write OD object "COB-ID EMCY"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1014_default(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count < sizeof(uint32_t))
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d00c      	beq.n	800024e <OD_read_1014_default+0x2e>
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	7d1b      	ldrb	r3, [r3, #20]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d108      	bne.n	800024e <OD_read_1014_default+0x2e>
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d005      	beq.n	800024e <OD_read_1014_default+0x2e>
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b03      	cmp	r3, #3
 8000246:	d902      	bls.n	800024e <OD_read_1014_default+0x2e>
        || (countRead == NULL)) {
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d101      	bne.n	8000252 <OD_read_1014_default+0x32>
        return ODR_DEV_INCOMPAT;
 800024e:	2309      	movs	r3, #9
 8000250:	e01a      	b.n	8000288 <OD_read_1014_default+0x68>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0U : 0x80000000U;
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <OD_read_1014_default+0x44>
 8000260:	2300      	movs	r3, #0
 8000262:	e001      	b.n	8000268 <OD_read_1014_default+0x48>
 8000264:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000268:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + (uint32_t)em->nodeId;
 800026a:	697b      	ldr	r3, [r7, #20]
 800026c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000270:	3380      	adds	r3, #128	; 0x80
 8000272:	693a      	ldr	r2, [r7, #16]
 8000274:	4313      	orrs	r3, r2
 8000276:	613b      	str	r3, [r7, #16]
    (void)CO_setUint32(buf, COB_IDEmergency32);
 8000278:	6939      	ldr	r1, [r7, #16]
 800027a:	68b8      	ldr	r0, [r7, #8]
 800027c:	f7ff ff8a 	bl	8000194 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	2204      	movs	r2, #4
 8000284:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000286:	2300      	movs	r3, #0
}
 8000288:	4618      	mov	r0, r3
 800028a:	3718      	adds	r7, #24
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <OD_read_1003>:
 * Custom functions for read/write OD object _OD_statusBits_, optional
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1003(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
 800029c:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL) || ((count < 4U) && (stream->subIndex > 0U))
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d00f      	beq.n	80002c4 <OD_read_1003+0x34>
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <OD_read_1003+0x34>
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d009      	beq.n	80002c4 <OD_read_1003+0x34>
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d803      	bhi.n	80002be <OD_read_1003+0x2e>
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	7d1b      	ldrb	r3, [r3, #20]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d102      	bne.n	80002c4 <OD_read_1003+0x34>
        || (count < 1U)) {
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d101      	bne.n	80002c8 <OD_read_1003+0x38>
        return ODR_DEV_INCOMPAT;
 80002c4:	2309      	movs	r3, #9
 80002c6:	e04d      	b.n	8000364 <OD_read_1003+0xd4>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2U) {
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	7f1b      	ldrb	r3, [r3, #28]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d801      	bhi.n	80002da <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 80002d6:	2309      	movs	r3, #9
 80002d8:	e044      	b.n	8000364 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0U) {
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	7d1b      	ldrb	r3, [r3, #20]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d10b      	bne.n	80002fa <OD_read_1003+0x6a>
        (void)CO_setUint8(buf, em->fifoCount);
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002e8:	4619      	mov	r1, r3
 80002ea:	68b8      	ldr	r0, [r7, #8]
 80002ec:	f7ff ff43 	bl	8000176 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	2201      	movs	r2, #1
 80002f4:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80002f6:	2300      	movs	r3, #0
 80002f8:	e034      	b.n	8000364 <OD_read_1003+0xd4>
    } else if (stream->subIndex <= em->fifoCount) {
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	7d1a      	ldrb	r2, [r3, #20]
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000304:	429a      	cmp	r2, r3
 8000306:	d82c      	bhi.n	8000362 <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - (int16_t)stream->subIndex;
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	7f5b      	ldrb	r3, [r3, #29]
 800030c:	b29a      	uxth	r2, r3
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	7d1b      	ldrb	r3, [r3, #20]
 8000312:	b29b      	uxth	r3, r3
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	b29b      	uxth	r3, r3
 8000318:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 800031a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800031e:	2b00      	cmp	r3, #0
 8000320:	da07      	bge.n	8000332 <OD_read_1003+0xa2>
            index += (int16_t)em->fifoSize;
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	7f1b      	ldrb	r3, [r3, #28]
 8000326:	b29a      	uxth	r2, r3
 8000328:	8afb      	ldrh	r3, [r7, #22]
 800032a:	4413      	add	r3, r2
 800032c:	b29b      	uxth	r3, r3
 800032e:	82fb      	strh	r3, [r7, #22]
 8000330:	e007      	b.n	8000342 <OD_read_1003+0xb2>
        } else if (index >= (int16_t)(em->fifoSize)) {
 8000332:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000336:	693a      	ldr	r2, [r7, #16]
 8000338:	7f12      	ldrb	r2, [r2, #28]
 800033a:	4293      	cmp	r3, r2
 800033c:	db01      	blt.n	8000342 <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 800033e:	2309      	movs	r3, #9
 8000340:	e010      	b.n	8000364 <OD_read_1003+0xd4>
        } else { /* MISRA C 2004 14.10 */
        }
        (void)CO_setUint32(buf, em->fifo[index].msg);
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	699a      	ldr	r2, [r3, #24]
 8000346:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800034a:	00db      	lsls	r3, r3, #3
 800034c:	4413      	add	r3, r2
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4619      	mov	r1, r3
 8000352:	68b8      	ldr	r0, [r7, #8]
 8000354:	f7ff ff1e 	bl	8000194 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2204      	movs	r2, #4
 800035c:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 800035e:	2300      	movs	r3, #0
 8000360:	e000      	b.n	8000364 <OD_read_1003+0xd4>
    } else {
        return ODR_NO_DATA;
 8000362:	2319      	movs	r3, #25
    }
}
 8000364:	4618      	mov	r0, r3
 8000366:	3718      	adds	r7, #24
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <OD_write_1003>:

static ODR_t
OD_write_1003(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != 1U) || (countWritten == NULL)) {
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d00c      	beq.n	800039a <OD_write_1003+0x2e>
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	7d1b      	ldrb	r3, [r3, #20]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d108      	bne.n	800039a <OD_write_1003+0x2e>
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d005      	beq.n	800039a <OD_write_1003+0x2e>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2b01      	cmp	r3, #1
 8000392:	d102      	bne.n	800039a <OD_write_1003+0x2e>
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d101      	bne.n	800039e <OD_write_1003+0x32>
        return ODR_DEV_INCOMPAT;
 800039a:	2309      	movs	r3, #9
 800039c:	e012      	b.n	80003c4 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0U) {
 800039e:	68b8      	ldr	r0, [r7, #8]
 80003a0:	f7ff fedc 	bl	800015c <CO_getUint8>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 80003aa:	230f      	movs	r3, #15
 80003ac:	e00a      	b.n	80003c4 <OD_write_1003+0x58>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	2200      	movs	r2, #0
 80003b8:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3718      	adds	r7, #24
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <CO_EM_init>:
           OD_entry_t* OD_statusBits,
#endif
#if (((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0) || defined CO_DOXYGEN
           CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#endif
           const uint8_t nodeId, uint32_t* errInfo) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af02      	add	r7, sp, #8
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
 80003d8:	603b      	str	r3, [r7, #0]
    (void)nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 80003da:	2300      	movs	r3, #0
 80003dc:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((em == NULL) || (OD_1001_errReg == NULL)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d01a      	beq.n	800041a <CO_EM_init+0x4e>
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d017      	beq.n	800041a <CO_EM_init+0x4e>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        || ((fifo == NULL) && (fifoSize >= 2U))
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d103      	bne.n	80003f8 <CO_EM_init+0x2c>
 80003f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d810      	bhi.n	800041a <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        || (OD_1014_cobIdEm == NULL) || (CANdevTx == NULL) || (nodeId < 1U) || (nodeId > 127U)
 80003f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d00d      	beq.n	800041a <CO_EM_init+0x4e>
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d00a      	beq.n	800041a <CO_EM_init+0x4e>
 8000404:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000408:	2b00      	cmp	r3, #0
 800040a:	d006      	beq.n	800041a <CO_EM_init+0x4e>
 800040c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8000410:	2b00      	cmp	r3, #0
 8000412:	db02      	blt.n	800041a <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
        || (OD_1003_preDefErr == NULL)
 8000414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000416:	2b00      	cmp	r3, #0
 8000418:	d102      	bne.n	8000420 <CO_EM_init+0x54>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
        || (CANdevRx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800041a:	f04f 33ff 	mov.w	r3, #4294967295
 800041e:	e0a7      	b.n	8000570 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    (void)memset(em, 0, sizeof(CO_EM_t));
 8000420:	2250      	movs	r2, #80	; 0x50
 8000422:	2100      	movs	r1, #0
 8000424:	68f8      	ldr	r0, [r7, #12]
 8000426:	f00b fbcb 	bl	800bbc0 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	68ba      	ldr	r2, [r7, #8]
 800042e:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 8000430:	2300      	movs	r3, #0
 8000432:	2201      	movs	r2, #1
 8000434:	2100      	movs	r1, #0
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f001 fae8 	bl	8001a0c <OD_getPtr>
 800043c:	4602      	mov	r2, r0
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d10c      	bne.n	8000464 <CO_EM_init+0x98>
        if (errInfo != NULL) {
 800044a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800044c:	2b00      	cmp	r3, #0
 800044e:	d006      	beq.n	800045e <CO_EM_init+0x92>
            *errInfo = OD_getIndex(OD_1001_errReg);
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff fead 	bl	80001b0 <OD_getIndex>
 8000456:	4603      	mov	r3, r0
 8000458:	461a      	mov	r2, r3
 800045a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800045c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800045e:	f06f 030b 	mvn.w	r3, #11
 8000462:	e085      	b.n	8000570 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    em->fifo = fifo;
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	683a      	ldr	r2, [r7, #0]
 8000470:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000478:	771a      	strb	r2, [r3, #28]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 800047a:	f107 0210 	add.w	r2, r7, #16
 800047e:	2301      	movs	r3, #1
 8000480:	2100      	movs	r1, #0
 8000482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000484:	f7ff feb7 	bl	80001f6 <OD_get_u32>
 8000488:	4603      	mov	r3, r0
 800048a:	75bb      	strb	r3, [r7, #22]
    if ((odRet != ODR_OK) || ((COB_IDEmergency32 & 0x7FFFF800U) != 0U)) {
 800048c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d104      	bne.n	800049e <CO_EM_init+0xd2>
 8000494:	693a      	ldr	r2, [r7, #16]
 8000496:	4b38      	ldr	r3, [pc, #224]	; (8000578 <CO_EM_init+0x1ac>)
 8000498:	4013      	ands	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	d010      	beq.n	80004c0 <CO_EM_init+0xf4>
        if (errInfo != NULL) {
 800049e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d006      	beq.n	80004b2 <CO_EM_init+0xe6>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80004a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004a6:	f7ff fe83 	bl	80001b0 <OD_getIndex>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461a      	mov	r2, r3
 80004ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004b0:	601a      	str	r2, [r3, #0]
        }
        /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) {
 80004b2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d002      	beq.n	80004c0 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 80004ba:	f06f 030b 	mvn.w	r3, #11
 80004be:	e057      	b.n	8000570 <CO_EM_init+0x1a4>
     * memory. In that case it is necessary to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) {
        producerCanId += nodeId;
    }
#else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + (uint16_t)nodeId;
 80004c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	3380      	adds	r3, #128	; 0x80
 80004c8:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000U) == 0U;
 80004ca:	693b      	ldr	r3, [r7, #16]
 80004cc:	43db      	mvns	r3, r3
 80004ce:	0fdb      	lsrs	r3, r3, #31
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	461a      	mov	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	4a26      	ldr	r2, [pc, #152]	; (800057c <CO_EM_init+0x1b0>)
 80004e2:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a26      	ldr	r2, [pc, #152]	; (8000580 <CO_EM_init+0x1b4>)
 80004e8:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3330      	adds	r3, #48	; 0x30
 80004ee:	4619      	mov	r1, r3
 80004f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004f2:	f7ff fe6d 	bl	80001d0 <OD_extension_init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80004fa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d00c      	beq.n	800051c <CO_EM_init+0x150>
        if (errInfo != NULL) {
 8000502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000504:	2b00      	cmp	r3, #0
 8000506:	d006      	beq.n	8000516 <CO_EM_init+0x14a>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8000508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800050a:	f7ff fe51 	bl	80001b0 <OD_getIndex>
 800050e:	4603      	mov	r3, r0
 8000510:	461a      	mov	r2, r3
 8000512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000514:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8000516:	f06f 030b 	mvn.w	r3, #11
 800051a:	e029      	b.n	8000570 <CO_EM_init+0x1a4>
    }
#endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, producerCanId, false, 8U, false);
 8000526:	8aba      	ldrh	r2, [r7, #20]
 8000528:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800052a:	2300      	movs	r3, #0
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2308      	movs	r3, #8
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2300      	movs	r3, #0
 8000534:	68b8      	ldr	r0, [r7, #8]
 8000536:	f006 f8c1 	bl	80066bc <CO_CANtxBufferInit>
 800053a:	4602      	mov	r2, r0
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (em->CANtxBuff == NULL) {
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000544:	2b00      	cmp	r3, #0
 8000546:	d102      	bne.n	800054e <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	e010      	b.n	8000570 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT */
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <CO_EM_init+0x1b8>)
 8000558:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <CO_EM_init+0x1bc>)
 800055e:	649a      	str	r2, [r3, #72]	; 0x48
    (void)OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3340      	adds	r3, #64	; 0x40
 8000564:	4619      	mov	r1, r3
 8000566:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000568:	f7ff fe32 	bl	80001d0 <OD_extension_init>
    em->pFunctSignalRx = NULL;
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CO_CAN_ID_EMERGENCY, 0x780, false, (void*)em, CO_EM_receive);
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 800056c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	7ffff800 	.word	0x7ffff800
 800057c:	08000221 	.word	0x08000221
 8000580:	0800152f 	.word	0x0800152f
 8000584:	08000291 	.word	0x08000291
 8000588:	0800036d 	.word	0x0800036d

0800058c <CO_EM_process>:
    }
}
#endif

void
CO_EM_process(CO_EM_t* em, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af02      	add	r7, sp, #8
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) == 0
    (void)timeDifference_us; /* may be unused */
#endif

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	8a5b      	ldrh	r3, [r3, #18]
 80005a0:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	8a1b      	ldrh	r3, [r3, #16]
 80005a6:	8aba      	ldrh	r2, [r7, #20]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	f000 80a3 	beq.w	80006f4 <CO_EM_process+0x168>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	8a1a      	ldrh	r2, [r3, #16]
 80005b2:	8abb      	ldrh	r3, [r7, #20]
 80005b4:	4053      	eors	r3, r2
 80005b6:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	8aba      	ldrh	r2, [r7, #20]
 80005bc:	821a      	strh	r2, [r3, #16]

        if ((CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U) {
 80005be:	8a7a      	ldrh	r2, [r7, #18]
 80005c0:	f240 1301 	movw	r3, #257	; 0x101
 80005c4:	4013      	ands	r3, r2
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d010      	beq.n	80005ec <CO_EM_process+0x60>
            CO_error(em, (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U, CO_EM_CAN_BUS_WARNING,
 80005ca:	8aba      	ldrh	r2, [r7, #20]
 80005cc:	f240 1301 	movw	r3, #257	; 0x101
 80005d0:	4013      	ands	r3, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	bf14      	ite	ne
 80005d6:	2301      	movne	r3, #1
 80005d8:	2300      	moveq	r3, #0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	2300      	movs	r3, #0
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	2201      	movs	r2, #1
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f000 f91b 	bl	8000822 <CO_error>
                     CO_EMC_NO_ERROR, 0);
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PASSIVE) != 0U) {
 80005ec:	8a7b      	ldrh	r3, [r7, #18]
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d010      	beq.n	8000618 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0U, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 80005f6:	8abb      	ldrh	r3, [r7, #20]
 80005f8:	f003 0302 	and.w	r3, r3, #2
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf14      	ite	ne
 8000600:	2301      	movne	r3, #1
 8000602:	2300      	moveq	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	2300      	movs	r3, #0
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	f248 1320 	movw	r3, #33056	; 0x8120
 8000610:	2207      	movs	r2, #7
 8000612:	68f8      	ldr	r0, [r7, #12]
 8000614:	f000 f905 	bl	8000822 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) != 0U) {
 8000618:	8a7b      	ldrh	r3, [r7, #18]
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	2b00      	cmp	r3, #0
 8000620:	d010      	beq.n	8000644 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0U, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
 8000622:	8abb      	ldrh	r3, [r7, #20]
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	2b00      	cmp	r3, #0
 800062a:	bf14      	ite	ne
 800062c:	2301      	movne	r3, #1
 800062e:	2300      	moveq	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	4619      	mov	r1, r3
 8000634:	2300      	movs	r3, #0
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	f248 1340 	movw	r3, #33088	; 0x8140
 800063c:	2212      	movs	r2, #18
 800063e:	68f8      	ldr	r0, [r7, #12]
 8000640:	f000 f8ef 	bl	8000822 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) != 0U) {
 8000644:	8a7b      	ldrh	r3, [r7, #18]
 8000646:	f003 0308 	and.w	r3, r3, #8
 800064a:	2b00      	cmp	r3, #0
 800064c:	d010      	beq.n	8000670 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0U, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 800064e:	8abb      	ldrh	r3, [r7, #20]
 8000650:	f003 0308 	and.w	r3, r3, #8
 8000654:	2b00      	cmp	r3, #0
 8000656:	bf14      	ite	ne
 8000658:	2301      	movne	r3, #1
 800065a:	2300      	moveq	r3, #0
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	2300      	movs	r3, #0
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	f248 1310 	movw	r3, #33040	; 0x8110
 8000668:	2214      	movs	r2, #20
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f000 f8d9 	bl	8000822 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) != 0U) {
 8000670:	8a7b      	ldrh	r3, [r7, #18]
 8000672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000676:	2b00      	cmp	r3, #0
 8000678:	d010      	beq.n	800069c <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0U, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
 800067a:	8abb      	ldrh	r3, [r7, #20]
 800067c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	2300      	movs	r3, #0
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000694:	2215      	movs	r2, #21
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f000 f8c3 	bl	8000822 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_PASSIVE) != 0U) {
 800069c:	8a7b      	ldrh	r3, [r7, #18]
 800069e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d010      	beq.n	80006c8 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0U, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 80006a6:	8abb      	ldrh	r3, [r7, #20]
 80006a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf14      	ite	ne
 80006b0:	2301      	movne	r3, #1
 80006b2:	2300      	moveq	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4619      	mov	r1, r3
 80006b8:	2300      	movs	r3, #0
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	f248 1320 	movw	r3, #33056	; 0x8120
 80006c0:	2206      	movs	r2, #6
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f000 f8ad 	bl	8000822 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) != 0U) {
 80006c8:	8a7b      	ldrh	r3, [r7, #18]
 80006ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d010      	beq.n	80006f4 <CO_EM_process+0x168>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0U, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 80006d2:	8abb      	ldrh	r3, [r7, #20]
 80006d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006d8:	2b00      	cmp	r3, #0
 80006da:	bf14      	ite	ne
 80006dc:	2301      	movne	r3, #1
 80006de:	2300      	moveq	r3, #0
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	2300      	movs	r3, #0
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	f248 1310 	movw	r3, #33040	; 0x8110
 80006ec:	2213      	movs	r2, #19
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f000 f897 	bl	8000822 <CO_error>
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 80006f4:	2300      	movs	r3, #0
 80006f6:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	795b      	ldrb	r3, [r3, #5]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <CO_EM_process+0x17c>
        errorRegister |= (uint8_t)CO_ERR_REG_GENERIC_ERR;
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= (uint8_t)CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	789b      	ldrb	r3, [r3, #2]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d103      	bne.n	8000718 <CO_EM_process+0x18c>
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	78db      	ldrb	r3, [r3, #3]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <CO_EM_process+0x194>
        errorRegister |= (uint8_t)CO_ERR_REG_COMMUNICATION;
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= (uint8_t)CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	7a1b      	ldrb	r3, [r3, #8]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d103      	bne.n	8000730 <CO_EM_process+0x1a4>
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	7a5b      	ldrb	r3, [r3, #9]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d003      	beq.n	8000738 <CO_EM_process+0x1ac>
        errorRegister |= (uint8_t)CO_ERR_REG_MANUFACTURER;
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000736:	75fb      	strb	r3, [r7, #23]
    }
    *em->errorRegister = errorRegister;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	7dfa      	ldrb	r2, [r7, #23]
 800073e:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d067      	beq.n	8000816 <CO_EM_process+0x28a>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    if (em->fifoSize >= 2U) {
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	7f1b      	ldrb	r3, [r3, #28]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d965      	bls.n	800081a <CO_EM_process+0x28e>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	7f9b      	ldrb	r3, [r3, #30]
 8000752:	747b      	strb	r3, [r7, #17]

        if (!em->CANtxBuff->bufferFull && (fifoPpPtr != em->fifoWrPtr)
            && (em->inhibitEmTimer >= em->inhibitEmTime_us)) {
            em->inhibitEmTimer = 0;
#else
        if ((!em->CANtxBuff->bufferFull) && (fifoPpPtr != em->fifoWrPtr)) {
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d15d      	bne.n	800081a <CO_EM_process+0x28e>
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	7f5b      	ldrb	r3, [r3, #29]
 8000762:	7c7a      	ldrb	r2, [r7, #17]
 8000764:	429a      	cmp	r2, r3
 8000766:	d058      	beq.n	800081a <CO_EM_process+0x28e>
#endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t)errorRegister << 16;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	7c7b      	ldrb	r3, [r7, #17]
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	4413      	add	r3, r2
 8000772:	6819      	ldr	r1, [r3, #0]
 8000774:	7dfb      	ldrb	r3, [r7, #23]
 8000776:	041a      	lsls	r2, r3, #16
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	6998      	ldr	r0, [r3, #24]
 800077c:	7c7b      	ldrb	r3, [r7, #17]
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	4403      	add	r3, r0
 8000782:	430a      	orrs	r2, r1
 8000784:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            (void)memcpy((void*)em->CANtxBuff->data, (void*)&em->fifo[fifoPpPtr].msg, sizeof(em->CANtxBuff->data));
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078a:	1d58      	adds	r0, r3, #5
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	699a      	ldr	r2, [r3, #24]
 8000790:	7c7b      	ldrb	r3, [r7, #17]
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	4413      	add	r3, r2
 8000796:	2208      	movs	r2, #8
 8000798:	4619      	mov	r1, r3
 800079a:	f00b fa9b 	bl	800bcd4 <memcpy>
            (void)CO_CANsend(em->CANdevTx, em->CANtxBuff);
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	695a      	ldr	r2, [r3, #20]
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a6:	4619      	mov	r1, r3
 80007a8:	4610      	mov	r0, r2
 80007aa:	f006 f801 	bl	80067b0 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
#endif

            /* increment pointer */
            fifoPpPtr++;
 80007ae:	7c7b      	ldrb	r3, [r7, #17]
 80007b0:	3301      	adds	r3, #1
 80007b2:	747b      	strb	r3, [r7, #17]
            em->fifoPpPtr = (fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0U;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	7f1b      	ldrb	r3, [r3, #28]
 80007b8:	7c7a      	ldrb	r2, [r7, #17]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d201      	bcs.n	80007c2 <CO_EM_process+0x236>
 80007be:	7c7a      	ldrb	r2, [r7, #17]
 80007c0:	e000      	b.n	80007c4 <CO_EM_process+0x238>
 80007c2:	2200      	movs	r2, #0
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all messages from fifo buffer are processed */
            if (em->fifoOverflow == 1U) {
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	7fdb      	ldrb	r3, [r3, #31]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10c      	bne.n	80007ea <CO_EM_process+0x25e>
                em->fifoOverflow = 2;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2202      	movs	r2, #2
 80007d4:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0);
 80007d6:	2300      	movs	r3, #0
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007de:	2220      	movs	r2, #32
 80007e0:	2101      	movs	r1, #1
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	f000 f81d 	bl	8000822 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 80007e8:	e017      	b.n	800081a <CO_EM_process+0x28e>
            } else if ((em->fifoOverflow == 2U) && (em->fifoPpPtr == em->fifoWrPtr)) {
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	7fdb      	ldrb	r3, [r3, #31]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d113      	bne.n	800081a <CO_EM_process+0x28e>
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	7f9a      	ldrb	r2, [r3, #30]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	7f5b      	ldrb	r3, [r3, #29]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d10d      	bne.n	800081a <CO_EM_process+0x28e>
                em->fifoOverflow = 0;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2200      	movs	r2, #0
 8000802:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000804:	2300      	movs	r3, #0
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2300      	movs	r3, #0
 800080a:	2220      	movs	r2, #32
 800080c:	2100      	movs	r1, #0
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f000 f807 	bl	8000822 <CO_error>
    return;
 8000814:	e001      	b.n	800081a <CO_EM_process+0x28e>
        return;
 8000816:	bf00      	nop
 8000818:	e000      	b.n	800081c <CO_EM_process+0x290>
    return;
 800081a:	bf00      	nop
}
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <CO_error>:

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 8000822:	b480      	push	{r7}
 8000824:	b08d      	sub	sp, #52	; 0x34
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	4611      	mov	r1, r2
 800082e:	461a      	mov	r2, r3
 8000830:	460b      	mov	r3, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) {
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	f000 80a6 	beq.w	800098c <CO_error+0x16a>
        return;
    }

    uint8_t index = errorBit >> 3;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	08db      	lsrs	r3, r3, #3
 8000844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	2201      	movs	r2, #1
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 8000858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800085c:	2b09      	cmp	r3, #9
 800085e:	d90a      	bls.n	8000876 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000860:	2305      	movs	r3, #5
 8000862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 8000866:	2301      	movs	r3, #1
 8000868:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 800086c:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8000870:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 8000876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000882:	781a      	ldrb	r2, [r3, #0]
 8000884:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000888:	4013      	ands	r3, r2
 800088a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d004      	beq.n	800089e <CO_error+0x7c>
        if (errorStatusBitMasked != 0U) {
 8000894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000898:	2b00      	cmp	r3, #0
 800089a:	d006      	beq.n	80008aa <CO_error+0x88>
            return;
 800089c:	e079      	b.n	8000992 <CO_error+0x170>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 800089e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d074      	beq.n	8000990 <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 80008a6:	2300      	movs	r3, #0
 80008a8:	80bb      	strh	r3, [r7, #4]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	061a      	lsls	r2, r3, #24
 80008ae:	88bb      	ldrh	r3, [r7, #4]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 80008b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008b6:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80008bc:	f3ef 8210 	mrs	r2, PRIMASK
 80008c0:	617a      	str	r2, [r7, #20]
  return(result);
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 80008c6:	b672      	cpsid	i
}
 80008c8:	bf00      	nop
    if (setError) {
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d008      	beq.n	80008e2 <CO_error+0xc0>
        *errorStatusBits |= bitmask;
 80008d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80008d8:	4313      	orrs	r3, r2
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	e00b      	b.n	80008fa <CO_error+0xd8>
    } else {
        *errorStatusBits &= ~bitmask;
 80008e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b25a      	sxtb	r2, r3
 80008e8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80008ec:	43db      	mvns	r3, r3
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4013      	ands	r3, r2
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f8:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	7f1b      	ldrb	r3, [r3, #28]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d93c      	bls.n	800097c <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	7f5b      	ldrb	r3, [r3, #29]
 8000906:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 8000908:	7efb      	ldrb	r3, [r7, #27]
 800090a:	3301      	adds	r3, #1
 800090c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	7f1b      	ldrb	r3, [r3, #28]
 8000914:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000918:	429a      	cmp	r2, r3
 800091a:	d302      	bcc.n	8000922 <CO_error+0x100>
            fifoWrPtrNext = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	7f9b      	ldrb	r3, [r3, #30]
 8000926:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800092a:	429a      	cmp	r2, r3
 800092c:	d103      	bne.n	8000936 <CO_error+0x114>
            em->fifoOverflow = 1;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2201      	movs	r2, #1
 8000932:	77da      	strb	r2, [r3, #31]
 8000934:	e022      	b.n	800097c <CO_error+0x15a>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	699a      	ldr	r2, [r3, #24]
 800093a:	7efb      	ldrb	r3, [r7, #27]
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	4413      	add	r3, r2
 8000940:	6a3a      	ldr	r2, [r7, #32]
 8000942:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	699a      	ldr	r2, [r3, #24]
 8000948:	7efb      	ldrb	r3, [r7, #27]
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	4413      	add	r3, r2
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000958:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000960:	461a      	mov	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	7f1b      	ldrb	r3, [r3, #28]
 8000966:	3b01      	subs	r3, #1
 8000968:	429a      	cmp	r2, r3
 800096a:	d207      	bcs.n	800097c <CO_error+0x15a>
                em->fifoCount++;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000972:	3301      	adds	r3, #1
 8000974:	b2da      	uxtb	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	f383 8810 	msr	PRIMASK, r3
}
 800098a:	e002      	b.n	8000992 <CO_error+0x170>
        return;
 800098c:	bf00      	nop
 800098e:	e000      	b.n	8000992 <CO_error+0x170>
            return;
 8000990:	bf00      	nop
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
#endif
#endif
}
 8000992:	3734      	adds	r7, #52	; 0x34
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <CO_getUint32>:
CO_getUint32(const void* buf) {
 800099a:	b480      	push	{r7}
 800099c:	b085      	sub	sp, #20
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 80009a6:	60fb      	str	r3, [r7, #12]
    return value;
 80009a8:	68fb      	ldr	r3, [r7, #12]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <OD_getIndex+0x14>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	e000      	b.n	80009ca <OD_getIndex+0x16>
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d101      	bne.n	80009e8 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80009e4:	2305      	movs	r3, #5
 80009e6:	e003      	b.n	80009f0 <OD_extension_init+0x1c>
    entry->extension = extension;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af02      	add	r7, sp, #8
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	460b      	mov	r3, r1
 8000a08:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000a0a:	7af9      	ldrb	r1, [r7, #11]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2304      	movs	r3, #4
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f000 ff7f 	bl	8001918 <OD_get_value>
 8000a1a:	4603      	mov	r3, r0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_HBcons_receive(void* object, void* msg) {
 8000a24:	b480      	push	{r7}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t* HBconsNode = object;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	3305      	adds	r3, #5
 8000a3c:	60fb      	str	r3, [r7, #12]

    if (DLC == 1U) {
 8000a3e:	7cfb      	ldrb	r3, [r7, #19]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d107      	bne.n	8000a54 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b25a      	sxtb	r2, r3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	2201      	movs	r2, #1
 8000a52:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000a54:	bf00      	nop
 8000a56:	371c      	adds	r7, #28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <OD_write_1016>:
 * Custom function for writing OD object "Consumer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1016(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b088      	sub	sp, #32
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t* HBcons = stream->object;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	61fb      	str	r3, [r7, #28]

    if ((stream == NULL) || (buf == NULL) || (stream->subIndex < 1U)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d012      	beq.n	8000a9e <OD_write_1016+0x40>
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00f      	beq.n	8000a9e <OD_write_1016+0x40>
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	7d1b      	ldrb	r3, [r3, #20]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00b      	beq.n	8000a9e <OD_write_1016+0x40>
        || (stream->subIndex > HBcons->numberOfMonitoredNodes) || (count != sizeof(uint32_t))
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	7d1a      	ldrb	r2, [r3, #20]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	7a1b      	ldrb	r3, [r3, #8]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d805      	bhi.n	8000a9e <OD_write_1016+0x40>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d102      	bne.n	8000a9e <OD_write_1016+0x40>
        || (countWritten == NULL)) {
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <OD_write_1016+0x44>
        return ODR_DEV_INCOMPAT;
 8000a9e:	2309      	movs	r3, #9
 8000aa0:	e020      	b.n	8000ae4 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000aa2:	68b8      	ldr	r0, [r7, #8]
 8000aa4:	f7ff ff79 	bl	800099a <CO_getUint32>
 8000aa8:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	0c1b      	lsrs	r3, r3, #16
 8000aae:	75fb      	strb	r3, [r7, #23]
    uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1U, nodeId, consumer_time);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	7d1b      	ldrb	r3, [r3, #20]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	b2d9      	uxtb	r1, r3
 8000abc:	8abb      	ldrh	r3, [r7, #20]
 8000abe:	7dfa      	ldrb	r2, [r7, #23]
 8000ac0:	69f8      	ldr	r0, [r7, #28]
 8000ac2:	f000 f8bd 	bl	8000c40 <CO_HBconsumer_initEntry>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	74fb      	strb	r3, [r7, #19]
    if (ret != CO_ERROR_NO) {
 8000aca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	e006      	b.n	8000ae4 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	68b9      	ldr	r1, [r7, #8]
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f000 fd26 	bl	800152e <OD_writeOriginal>
 8000ae2:	4603      	mov	r3, r0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <CO_HBconsumer_init>:
#endif

CO_ReturnError_t
CO_HBconsumer_init(CO_HBconsumer_t* HBcons, CO_EM_t* em, CO_HBconsNode_t* monitoredNodes, uint8_t monitoredNodesCount,
                   OD_entry_t* OD_1016_HBcons, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdxStart, uint32_t* errInfo) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if ((HBcons == NULL) || (em == NULL) || (monitoredNodes == NULL) || (OD_1016_HBcons == NULL)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <CO_HBconsumer_init+0x2c>
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d008      	beq.n	8000b18 <CO_HBconsumer_init+0x2c>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d005      	beq.n	8000b18 <CO_HBconsumer_init+0x2c>
 8000b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <CO_HBconsumer_init+0x2c>
        || (CANdevRx == NULL)) {
 8000b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <CO_HBconsumer_init+0x32>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1c:	e087      	b.n	8000c2e <CO_HBconsumer_init+0x142>
    }

    /* Configure object variables */
    (void)memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000b1e:	2230      	movs	r2, #48	; 0x30
 8000b20:	2100      	movs	r1, #0
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f00b f84c 	bl	800bbc0 <memset>
    HBcons->em = em;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b38:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000b3e:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
                                         ? (OD_1016_HBcons->subEntriesCount - 1U)
                                         : monitoredNodesCount;
 8000b40:	78fa      	ldrb	r2, [r7, #3]
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b44:	789b      	ldrb	r3, [r3, #2]
 8000b46:	3b01      	subs	r3, #1
                                         : monitoredNodesCount;
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	bf28      	it	cs
 8000b4c:	4613      	movcs	r3, r2
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000b54:	2300      	movs	r3, #0
 8000b56:	77fb      	strb	r3, [r7, #31]
 8000b58:	e041      	b.n	8000bde <CO_HBconsumer_init+0xf2>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1U, &val, true);
 8000b5a:	7ffb      	ldrb	r3, [r7, #31]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	b2d9      	uxtb	r1, r3
 8000b60:	f107 0214 	add.w	r2, r7, #20
 8000b64:	2301      	movs	r3, #1
 8000b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b68:	f7ff ff47 	bl	80009fa <OD_get_u32>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8000b70:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d00c      	beq.n	8000b92 <CO_HBconsumer_init+0xa6>
            if (errInfo != NULL) {
 8000b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d006      	beq.n	8000b8c <CO_HBconsumer_init+0xa0>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8000b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b80:	f7ff ff18 	bl	80009b4 <OD_getIndex>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b8a:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8000b8c:	f06f 030b 	mvn.w	r3, #11
 8000b90:	e04d      	b.n	8000c2e <CO_HBconsumer_init+0x142>
        }

        uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	0c1b      	lsrs	r3, r3, #16
 8000b96:	777b      	strb	r3, [r7, #29]
        uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, consumer_time);
 8000b9c:	8b7b      	ldrh	r3, [r7, #26]
 8000b9e:	7f7a      	ldrb	r2, [r7, #29]
 8000ba0:	7ff9      	ldrb	r1, [r7, #31]
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f000 f84c 	bl	8000c40 <CO_HBconsumer_initEntry>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8000bac:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d011      	beq.n	8000bd8 <CO_HBconsumer_init+0xec>
            if (errInfo != NULL) {
 8000bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <CO_HBconsumer_init+0xdc>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8000bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000bbc:	f7ff fefa 	bl	80009b4 <OD_getIndex>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc6:	601a      	str	r2, [r3, #0]
            }
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) {
 8000bc8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000bcc:	f113 0f0c 	cmn.w	r3, #12
 8000bd0:	d002      	beq.n	8000bd8 <CO_HBconsumer_init+0xec>
                return ret;
 8000bd2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000bd6:	e02a      	b.n	8000c2e <CO_HBconsumer_init+0x142>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000bd8:	7ffb      	ldrb	r3, [r7, #31]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	77fb      	strb	r3, [r7, #31]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	7a1b      	ldrb	r3, [r3, #8]
 8000be2:	7ffa      	ldrb	r2, [r7, #31]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d3b8      	bcc.n	8000b5a <CO_HBconsumer_init+0x6e>
        }
    }

    /* configure extension for OD */
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    HBcons->OD_1016_extension.object = HBcons;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <CO_HBconsumer_init+0x14c>)
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <CO_HBconsumer_init+0x150>)
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3320      	adds	r3, #32
 8000bfe:	4619      	mov	r1, r3
 8000c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c02:	f7ff fee7 	bl	80009d4 <OD_extension_init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8000c0a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00c      	beq.n	8000c2c <CO_HBconsumer_init+0x140>
        if (errInfo != NULL) {
 8000c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d006      	beq.n	8000c26 <CO_HBconsumer_init+0x13a>
            *errInfo = OD_getIndex(OD_1016_HBcons);
 8000c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c1a:	f7ff fecb 	bl	80009b4 <OD_getIndex>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c24:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8000c26:	f06f 030b 	mvn.w	r3, #11
 8000c2a:	e000      	b.n	8000c2e <CO_HBconsumer_init+0x142>
    }
#endif

    return CO_ERROR_NO;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	0800147f 	.word	0x0800147f
 8000c3c:	08000a5f 	.word	0x08000a5f

08000c40 <CO_HBconsumer_initEntry>:

static CO_ReturnError_t
CO_HBconsumer_initEntry(CO_HBconsumer_t* HBcons, uint8_t idx, uint8_t nodeId, uint16_t consumerTime_ms) {
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b08d      	sub	sp, #52	; 0x34
 8000c44:	af04      	add	r7, sp, #16
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	4608      	mov	r0, r1
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4603      	mov	r3, r0
 8000c50:	70fb      	strb	r3, [r7, #3]
 8000c52:	460b      	mov	r3, r1
 8000c54:	70bb      	strb	r3, [r7, #2]
 8000c56:	4613      	mov	r3, r2
 8000c58:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if ((HBcons == NULL) || (idx >= HBcons->numberOfMonitoredNodes)) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d004      	beq.n	8000c6e <CO_HBconsumer_initEntry+0x2e>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7a1b      	ldrb	r3, [r3, #8]
 8000c68:	78fa      	ldrb	r2, [r7, #3]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d302      	bcc.n	8000c74 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e076      	b.n	8000d62 <CO_HBconsumer_initEntry+0x122>
    }

    /* verify for duplicate entries */
    if ((consumerTime_ms != 0U) && (nodeId != 0U)) {
 8000c74:	883b      	ldrh	r3, [r7, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d024      	beq.n	8000cc4 <CO_HBconsumer_initEntry+0x84>
 8000c7a:	78bb      	ldrb	r3, [r7, #2]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d021      	beq.n	8000cc4 <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	77bb      	strb	r3, [r7, #30]
 8000c84:	e019      	b.n	8000cba <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	7fbb      	ldrb	r3, [r7, #30]
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	4413      	add	r3, r2
 8000c90:	f107 0408 	add.w	r4, r7, #8
 8000c94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if ((idx != i) && (node.time_us != 0U) && (node.nodeId == nodeId)) {
 8000c9a:	78fa      	ldrb	r2, [r7, #3]
 8000c9c:	7fbb      	ldrb	r3, [r7, #30]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d008      	beq.n	8000cb4 <CO_HBconsumer_initEntry+0x74>
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d005      	beq.n	8000cb4 <CO_HBconsumer_initEntry+0x74>
 8000ca8:	7a3b      	ldrb	r3, [r7, #8]
 8000caa:	78ba      	ldrb	r2, [r7, #2]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d101      	bne.n	8000cb4 <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 8000cb0:	23f4      	movs	r3, #244	; 0xf4
 8000cb2:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000cb4:	7fbb      	ldrb	r3, [r7, #30]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	77bb      	strb	r3, [r7, #30]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7a1b      	ldrb	r3, [r3, #8]
 8000cbe:	7fba      	ldrb	r2, [r7, #30]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d3e0      	bcc.n	8000c86 <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8000cc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d148      	bne.n	8000d5e <CO_HBconsumer_initEntry+0x11e>
        uint16_t COB_ID;

        CO_HBconsNode_t* monitoredNode = &HBcons->monitoredNodes[idx];
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	4413      	add	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	78ba      	ldrb	r2, [r7, #2]
 8000cdc:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (uint32_t)consumerTime_ms * 1000U;
 8000cde:	883b      	ldrh	r3, [r7, #0]
 8000ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce4:	fb03 f202 	mul.w	r2, r3, r2
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	22ff      	movs	r2, #255	; 0xff
 8000cf0:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if ((monitoredNode->nodeId != 0U) && (monitoredNode->time_us != 0U)) {
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d00d      	beq.n	8000d1c <CO_HBconsumer_initEntry+0xdc>
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d009      	beq.n	8000d1c <CO_HBconsumer_initEntry+0xdc>
            COB_ID = monitoredNode->nodeId + (uint16_t)CO_CAN_ID_HEARTBEAT;
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000d12:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	2201      	movs	r2, #1
 8000d18:	709a      	strb	r2, [r3, #2]
 8000d1a:	e007      	b.n	8000d2c <CO_HBconsumer_initEntry+0xec>
        } else {
            COB_ID = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6998      	ldr	r0, [r3, #24]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	8b9a      	ldrh	r2, [r3, #28]
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	4413      	add	r3, r2
 8000d3a:	b299      	uxth	r1, r3
                                 (void*)&HBcons->monitoredNodes[idx], CO_HBcons_receive);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8000d46:	8bba      	ldrh	r2, [r7, #28]
 8000d48:	4c08      	ldr	r4, [pc, #32]	; (8000d6c <CO_HBconsumer_initEntry+0x12c>)
 8000d4a:	9402      	str	r4, [sp, #8]
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d56:	f005 fc55 	bl	8006604 <CO_CANrxBufferInit>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	77fb      	strb	r3, [r7, #31]
    }
    return ret;
 8000d5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	08000a25 	.word	0x08000a25

08000d70 <CO_HBconsumer_process>:
}
#endif /* (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI */

void
CO_HBconsumer_process(CO_HBconsumer_t* HBcons, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                      uint32_t* timerNext_us) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8000d82:	2301      	movs	r3, #1
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d077      	beq.n	8000e7c <CO_HBconsumer_process+0x10c>
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d073      	beq.n	8000e7c <CO_HBconsumer_process+0x10c>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d9a:	e068      	b.n	8000e6e <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000da8:	011b      	lsls	r3, r3, #4
 8000daa:	4413      	add	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	789b      	ldrb	r3, [r3, #2]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d055      	beq.n	8000e62 <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d022      	beq.n	8000e04 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d112      	bne.n	8000dee <CO_HBconsumer_process+0x7e>
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
                        monitoredNode->pFunctSignalRemoteReset(monitoredNode->nodeId, i,
                                                               monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	789b      	ldrb	r3, [r3, #2]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d10a      	bne.n	8000de6 <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	f248 1330 	movw	r3, #33072	; 0x8130
 8000dde:	221c      	movs	r2, #28
 8000de0:	2101      	movs	r1, #1
 8000de2:	f7ff fd1e 	bl	8000822 <CO_error>
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	2201      	movs	r2, #1
 8000dea:	709a      	strb	r2, [r3, #2]
 8000dec:	e007      	b.n	8000dfe <CO_HBconsumer_process+0x8e>
                        && monitoredNode->pFunctSignalHbStarted != NULL) {
                        monitoredNode->pFunctSignalHbStarted(monitoredNode->nodeId, i,
                                                             monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	2202      	movs	r2, #2
 8000df2:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	2200      	movs	r2, #0
 8000df8:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	789b      	ldrb	r3, [r3, #2]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d11c      	bne.n	8000e46 <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	441a      	add	r2, r3
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d310      	bcc.n	8000e46 <CO_HBconsumer_process+0xd6>
                    if (monitoredNode->pFunctSignalTimeout != NULL) {
                        monitoredNode->pFunctSignalTimeout(monitoredNode->nodeId, i,
                                                           monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	6818      	ldr	r0, [r3, #0]
 8000e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	f248 1330 	movw	r3, #33072	; 0x8130
 8000e32:	221b      	movs	r2, #27
 8000e34:	2101      	movs	r1, #1
 8000e36:	f7ff fcf4 	bl	8000822 <CO_error>
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	22ff      	movs	r2, #255	; 0xff
 8000e3e:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2203      	movs	r2, #3
 8000e44:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	789b      	ldrb	r3, [r3, #2]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d001      	beq.n	8000e52 <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000e58:	2b05      	cmp	r3, #5
 8000e5a:	d003      	beq.n	8000e64 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e60:	e000      	b.n	8000e64 <CO_HBconsumer_process+0xf4>
                continue;
 8000e62:	bf00      	nop
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e68:	3301      	adds	r3, #1
 8000e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	7a1b      	ldrb	r3, [r3, #8]
 8000e72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d390      	bcc.n	8000d9c <CO_HBconsumer_process+0x2c>
 8000e7a:	e028      	b.n	8000ece <CO_HBconsumer_process+0x15e>
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    } else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d103      	bne.n	8000e8a <CO_HBconsumer_process+0x11a>
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d021      	beq.n	8000ece <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	77fb      	strb	r3, [r7, #31]
 8000e8e:	e015      	b.n	8000ebc <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	7ffb      	ldrb	r3, [r7, #31]
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4413      	add	r3, r2
 8000e9a:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	22ff      	movs	r2, #255	; 0xff
 8000ea0:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	789b      	ldrb	r3, [r3, #2]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d002      	beq.n	8000eb6 <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000eb6:	7ffb      	ldrb	r3, [r7, #31]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	77fb      	strb	r3, [r7, #31]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	7a1b      	ldrb	r3, [r3, #8]
 8000ec0:	7ffa      	ldrb	r2, [r7, #31]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d3e4      	bcc.n	8000e90 <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d114      	bne.n	8000f00 <CO_HBconsumer_process+0x190>
 8000ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d011      	beq.n	8000f00 <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	221b      	movs	r2, #27
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f7ff fc9a 	bl	8000822 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6818      	ldr	r0, [r3, #0]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	221c      	movs	r2, #28
 8000efa:	2100      	movs	r1, #0
 8000efc:	f7ff fc91 	bl	8000822 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f04:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f0a:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	615a      	str	r2, [r3, #20]
}
 8000f12:	bf00      	nop
 8000f14:	3730      	adds	r7, #48	; 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <CO_getUint16>:
CO_getUint16(const void* buf) {
 8000f1a:	b480      	push	{r7}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 8000f28:	81fb      	strh	r3, [r7, #14]
    return value;
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <OD_getIndex+0x14>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	e000      	b.n	8000f4c <OD_getIndex+0x16>
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8000f66:	2305      	movs	r3, #5
 8000f68:	e003      	b.n	8000f72 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000f8c:	7af9      	ldrb	r1, [r7, #11]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2302      	movs	r3, #2
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f000 fcbe 	bl	8001918 <OD_get_value>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <CO_isError>:
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8000fa6:	b480      	push	{r7}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	08db      	lsrs	r3, r3, #3
 8000fb6:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
            || (em->errorStatusBits[index] & bitmask) != 0)
               ? true
               : false;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00a      	beq.n	8000fe2 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	d807      	bhi.n	8000fe2 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	5cd2      	ldrb	r2, [r2, r3]
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
               : false;
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <CO_isError+0x40>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <CO_isError+0x42>
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <CO_getErrorRegister>:
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t
CO_getErrorRegister(CO_EM_t* em) {
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d007      	beq.n	8001010 <CO_getErrorRegister+0x1e>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <CO_getErrorRegister+0x1e>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	e000      	b.n	8001012 <CO_getErrorRegister+0x20>
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_NMT_receive(void* object, void* msg) {
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	791b      	ldrb	r3, [r3, #4]
 800102a:	75fb      	strb	r3, [r7, #23]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3305      	adds	r3, #5
 8001030:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	3301      	adds	r3, #1
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t* NMT = (CO_NMT_t*)object;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	60bb      	str	r3, [r7, #8]

    if ((DLC == 2U) && ((nodeId == 0U) || (nodeId == NMT->nodeId))) {
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d10a      	bne.n	8001060 <CO_NMT_receive+0x44>
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d004      	beq.n	800105a <CO_NMT_receive+0x3e>
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	78db      	ldrb	r3, [r3, #3]
 8001054:	7bba      	ldrb	r2, [r7, #14]
 8001056:	429a      	cmp	r2, r3
 8001058:	d102      	bne.n	8001060 <CO_NMT_receive+0x44>
        NMT->internalCommand = command;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <OD_write_1017>:
 * Custom function for writing OD object "Producer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1017(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint16_t))
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00c      	beq.n	8001098 <OD_write_1017+0x2e>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	7d1b      	ldrb	r3, [r3, #20]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d108      	bne.n	8001098 <OD_write_1017+0x2e>
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <OD_write_1017+0x2e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d102      	bne.n	8001098 <OD_write_1017+0x2e>
        || (countWritten == NULL)) {
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <OD_write_1017+0x32>
        return ODR_DEV_INCOMPAT;
 8001098:	2309      	movs	r3, #9
 800109a:	e017      	b.n	80010cc <OD_write_1017+0x62>
    }

    CO_NMT_t* NMT = (CO_NMT_t*)stream->object;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000U;
 80010a2:	68b8      	ldr	r0, [r7, #8]
 80010a4:	f7ff ff39 	bl	8000f1a <CO_getUint16>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b0:	fb03 f202 	mul.w	r2, r3, r2
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f000 fa32 	bl	800152e <OD_writeOriginal>
 80010ca:	4603      	mov	r3, r0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <CO_NMT_init>:
CO_NMT_init(CO_NMT_t* NMT, OD_entry_t* OD_1017_ProducerHbTime, CO_EM_t* em, uint8_t nodeId, uint16_t NMTcontrol,
            uint16_t firstHBTime_ms, CO_CANmodule_t* NMT_CANdevRx, uint16_t NMT_rxIdx, uint16_t CANidRxNMT,
#if (((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0) || defined CO_DOXYGEN
            CO_CANmodule_t* NMT_CANdevTx, uint16_t NMT_txIdx, uint16_t CANidTxNMT,
#endif
            CO_CANmodule_t* HB_CANdevTx, uint16_t HB_txIdx, uint16_t CANidTxHB, uint32_t* errInfo) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af04      	add	r7, sp, #16
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80010e2:	2300      	movs	r3, #0
 80010e4:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((NMT == NULL) || (OD_1017_ProducerHbTime == NULL) || (em == NULL) || (NMT_CANdevRx == NULL)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00b      	beq.n	8001104 <CO_NMT_init+0x30>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d008      	beq.n	8001104 <CO_NMT_init+0x30>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <CO_NMT_init+0x30>
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <CO_NMT_init+0x30>
        || (HB_CANdevTx == NULL)
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <CO_NMT_init+0x36>
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
        || (NMT_CANdevTx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
 8001108:	e097      	b.n	800123a <CO_NMT_init+0x166>
    }

    /* clear the object */
    (void)memset(NMT, 0, sizeof(CO_NMT_t));
 800110a:	222c      	movs	r2, #44	; 0x2c
 800110c:	2100      	movs	r1, #0
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f00a fd56 	bl	800bbc0 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	78fa      	ldrb	r2, [r7, #3]
 8001124:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	8c3a      	ldrh	r2, [r7, #32]
 800112a:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (uint32_t)firstHBTime_ms * 1000U;
 8001132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001138:	fb03 f202 	mul.w	r2, r3, r2
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001140:	f107 0214 	add.w	r2, r7, #20
 8001144:	2301      	movs	r3, #1
 8001146:	2100      	movs	r1, #0
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f7ff ff17 	bl	8000f7c <OD_get_u16>
 800114e:	4603      	mov	r3, r0
 8001150:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001152:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00c      	beq.n	8001174 <CO_NMT_init+0xa0>
        if (errInfo != NULL) {
 800115a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <CO_NMT_init+0x9a>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f7ff fee8 	bl	8000f36 <OD_getIndex>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800116c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800116e:	f06f 030b 	mvn.w	r3, #11
 8001172:	e062      	b.n	800123a <CO_NMT_init+0x166>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000U;
 8001174:	8abb      	ldrh	r3, [r7, #20]
 8001176:	461a      	mov	r2, r3
 8001178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117c:	fb03 f202 	mul.w	r2, r3, r2
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4a2d      	ldr	r2, [pc, #180]	; (8001244 <CO_NMT_init+0x170>)
 800118e:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4a2d      	ldr	r2, [pc, #180]	; (8001248 <CO_NMT_init+0x174>)
 8001194:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3310      	adds	r3, #16
 800119a:	4619      	mov	r1, r3
 800119c:	68b8      	ldr	r0, [r7, #8]
 800119e:	f7ff feda 	bl	8000f56 <OD_extension_init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80011a6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00c      	beq.n	80011c8 <CO_NMT_init+0xf4>
        if (errInfo != NULL) {
 80011ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <CO_NMT_init+0xee>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80011b4:	68b8      	ldr	r0, [r7, #8]
 80011b6:	f7ff febe 	bl	8000f36 <OD_getIndex>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011c0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80011c2:	f06f 030b 	mvn.w	r3, #11
 80011c6:	e038      	b.n	800123a <CO_NMT_init+0x166>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d903      	bls.n	80011dc <CO_NMT_init+0x108>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(NMT_CANdevRx, NMT_rxIdx, CANidRxNMT, 0x7FF, false, (void*)NMT, CO_NMT_receive);
 80011dc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80011de:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <CO_NMT_init+0x178>)
 80011e2:	9302      	str	r3, [sp, #8]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2300      	movs	r3, #0
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011f2:	f005 fa07 	bl	8006604 <CO_CANrxBufferInit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	75fb      	strb	r3, [r7, #23]
    if (ret != CO_ERROR_NO) {
 80011fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <CO_NMT_init+0x134>
        return ret;
 8001202:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001206:	e018      	b.n	800123a <CO_NMT_init+0x166>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(HB_CANdevTx, HB_txIdx, CANidTxHB, false, 1, false);
 800120e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001210:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001212:	2300      	movs	r3, #0
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2301      	movs	r3, #1
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800121e:	f005 fa4d 	bl	80066bc <CO_CANtxBufferInit>
 8001222:	4602      	mov	r2, r0
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
    if (NMT->HB_TXbuff == NULL) {
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <CO_NMT_init+0x162>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	e001      	b.n	800123a <CO_NMT_init+0x166>
    }

    return ret;
 8001236:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	0800147f 	.word	0x0800147f
 8001248:	0800106b 	.word	0x0800106b
 800124c:	0800101d 	.word	0x0800101d

08001250 <CO_NMT_process>:
    }
}
#endif

CO_NMT_reset_cmd_t
CO_NMT_process(CO_NMT_t* NMT, CO_NMT_internalState_t* NMTstate, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	; 0x38
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 800126c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	633b      	str	r3, [r7, #48]	; 0x30

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us) ? (NMT->HBproducerTimer - timeDifference_us) : 0U;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	429a      	cmp	r2, r3
 8001284:	d204      	bcs.n	8001290 <CO_NMT_process+0x40>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	e000      	b.n	8001292 <CO_NMT_process+0x42>
 8001290:	2300      	movs	r3, #0
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed */
    if (NNTinit
 8001296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10e      	bne.n	80012ba <CO_NMT_process+0x6a>
        || ((NMT->HBproducerTime_us != 0U)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d02b      	beq.n	80012fc <CO_NMT_process+0xac>
            && ((NMT->HBproducerTimer == 0U) || (NMTstateCpy != NMT->operatingStatePrev)))) {
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <CO_NMT_process+0x6a>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012b2:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d020      	beq.n	80012fc <CO_NMT_process+0xac>
        NMT->HB_TXbuff->data[0] = (uint8_t)NMTstateCpy;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012be:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80012c2:	715a      	strb	r2, [r3, #5]
        (void)CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4610      	mov	r0, r2
 80012d0:	f005 fa6e 	bl	80067b0 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 80012d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d10b      	bne.n	80012f4 <CO_NMT_process+0xa4>
            /* NMT slave self starting */
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	889b      	ldrh	r3, [r3, #4]
 80012e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
                              ? CO_NMT_OPERATIONAL
                              : CO_NMT_PRE_OPERATIONAL;
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <CO_NMT_process+0x9c>
 80012e8:	2305      	movs	r3, #5
 80012ea:	e000      	b.n	80012ee <CO_NMT_process+0x9e>
 80012ec:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 80012ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012f2:	e003      	b.n	80012fc <CO_NMT_process+0xac>
        } else {
            /* Start timer from the beginning. If OS is slow, time sliding may occur. However,
             * heartbeat is not for synchronization, it is for health report. In case of
             * initializing, timer is set in the CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001302:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	789b      	ldrb	r3, [r3, #2]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d02a      	beq.n	8001362 <CO_NMT_process+0x112>
        switch (NMT->internalCommand) {
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	789b      	ldrb	r3, [r3, #2]
 8001310:	2b82      	cmp	r3, #130	; 0x82
 8001312:	d01e      	beq.n	8001352 <CO_NMT_process+0x102>
 8001314:	2b82      	cmp	r3, #130	; 0x82
 8001316:	dc20      	bgt.n	800135a <CO_NMT_process+0x10a>
 8001318:	2b81      	cmp	r3, #129	; 0x81
 800131a:	d016      	beq.n	800134a <CO_NMT_process+0xfa>
 800131c:	2b81      	cmp	r3, #129	; 0x81
 800131e:	dc1c      	bgt.n	800135a <CO_NMT_process+0x10a>
 8001320:	2b80      	cmp	r3, #128	; 0x80
 8001322:	d00e      	beq.n	8001342 <CO_NMT_process+0xf2>
 8001324:	2b80      	cmp	r3, #128	; 0x80
 8001326:	dc18      	bgt.n	800135a <CO_NMT_process+0x10a>
 8001328:	2b01      	cmp	r3, #1
 800132a:	d002      	beq.n	8001332 <CO_NMT_process+0xe2>
 800132c:	2b02      	cmp	r3, #2
 800132e:	d004      	beq.n	800133a <CO_NMT_process+0xea>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
            case CO_NMT_NO_COMMAND:
            default:
                /* done */
                break;
 8001330:	e013      	b.n	800135a <CO_NMT_process+0x10a>
            case CO_NMT_ENTER_OPERATIONAL: NMTstateCpy = CO_NMT_OPERATIONAL; break;
 8001332:	2305      	movs	r3, #5
 8001334:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001338:	e010      	b.n	800135c <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_STOPPED: NMTstateCpy = CO_NMT_STOPPED; break;
 800133a:	2304      	movs	r3, #4
 800133c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001340:	e00c      	b.n	800135c <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_PRE_OPERATIONAL: NMTstateCpy = CO_NMT_PRE_OPERATIONAL; break;
 8001342:	237f      	movs	r3, #127	; 0x7f
 8001344:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001348:	e008      	b.n	800135c <CO_NMT_process+0x10c>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
 800134a:	2302      	movs	r3, #2
 800134c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001350:	e004      	b.n	800135c <CO_NMT_process+0x10c>
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
 8001352:	2301      	movs	r3, #1
 8001354:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001358:	e000      	b.n	800135c <CO_NMT_process+0x10c>
                break;
 800135a:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t ErrOnBusOffHB = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_BUSOFF_HB) != 0U);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	889b      	ldrh	r3, [r3, #4]
 8001366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136a:	2b00      	cmp	r3, #0
 800136c:	bf14      	ite	ne
 800136e:	2301      	movne	r3, #1
 8001370:	2300      	moveq	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t ErrBusOff = CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	2112      	movs	r1, #18
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe12 	bl	8000fa6 <CO_isError>
 8001382:	62b8      	str	r0, [r7, #40]	; 0x28
    bool_t ErrHbCons = CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	211b      	movs	r1, #27
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe0b 	bl	8000fa6 <CO_isError>
 8001390:	6278      	str	r0, [r7, #36]	; 0x24
    bool_t ErrHbConsRemote = CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	211c      	movs	r1, #28
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fe04 	bl	8000fa6 <CO_isError>
 800139e:	6238      	str	r0, [r7, #32]
    bool_t busOff_HB = ErrOnBusOffHB && (ErrBusOff || ErrHbCons || ErrHbConsRemote);
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00a      	beq.n	80013bc <CO_NMT_process+0x16c>
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d105      	bne.n	80013b8 <CO_NMT_process+0x168>
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <CO_NMT_process+0x168>
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <CO_NMT_process+0x16c>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <CO_NMT_process+0x16e>
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]

    bool_t ErrNMTErrReg = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_ERR_REG) != 0U);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	889b      	ldrh	r3, [r3, #4]
 80013c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf14      	ite	ne
 80013cc:	2301      	movne	r3, #1
 80013ce:	2300      	moveq	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	61bb      	str	r3, [r7, #24]
    bool_t ErrNMTcontrol = ((CO_getErrorRegister(NMT->em) & (uint8_t)NMT->NMTcontrol) != 0U);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fe0a 	bl	8000ff2 <CO_getErrorRegister>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	889b      	ldrh	r3, [r3, #4]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4013      	ands	r3, r2
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf14      	ite	ne
 80013f0:	2301      	movne	r3, #1
 80013f2:	2300      	moveq	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = ErrNMTErrReg && ErrNMTcontrol;
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <CO_NMT_process+0x1b8>
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <CO_NMT_process+0x1b8>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <CO_NMT_process+0x1ba>
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]

    if ((NMTstateCpy == CO_NMT_OPERATIONAL) && (busOff_HB || errRegMasked)) {
 800140c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001410:	2b05      	cmp	r3, #5
 8001412:	d111      	bne.n	8001438 <CO_NMT_process+0x1e8>
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <CO_NMT_process+0x1d0>
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00b      	beq.n	8001438 <CO_NMT_process+0x1e8>
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	889b      	ldrh	r3, [r3, #4]
 8001424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                                                                                            : CO_NMT_PRE_OPERATIONAL;
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <CO_NMT_process+0x1e0>
 800142c:	2304      	movs	r3, #4
 800142e:	e000      	b.n	8001432 <CO_NMT_process+0x1e2>
 8001430:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8001432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001436:	e011      	b.n	800145c <CO_NMT_process+0x20c>
    } else if ((((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0U)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	889b      	ldrh	r3, [r3, #4]
 800143c:	b21b      	sxth	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	da0c      	bge.n	800145c <CO_NMT_process+0x20c>
               && (NMTstateCpy == CO_NMT_PRE_OPERATIONAL) && (!busOff_HB && !errRegMasked)) {
 8001442:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001446:	2b7f      	cmp	r3, #127	; 0x7f
 8001448:	d108      	bne.n	800145c <CO_NMT_process+0x20c>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <CO_NMT_process+0x20c>
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <CO_NMT_process+0x20c>
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8001456:	2305      	movs	r3, #5
 8001458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001462:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) {
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <CO_NMT_process+0x222>
        *NMTstate = NMTstateCpy;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001470:	701a      	strb	r2, [r3, #0]
    }

    return resetCommand;
 8001472:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8001476:	4618      	mov	r0, r3
 8001478:	3738      	adds	r7, #56	; 0x38
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <OD_readOriginal>:
#include <string.h>
#define OD_DEFINITION
#include "301/CO_ODinterface.h"

ODR_t
OD_readOriginal(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800147e:	b580      	push	{r7, lr}
 8001480:	b088      	sub	sp, #32
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL)) {
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <OD_readOriginal+0x20>
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <OD_readOriginal+0x20>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 800149e:	2309      	movs	r3, #9
 80014a0:	e041      	b.n	8001526 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61fb      	str	r3, [r7, #28]
    const uint8_t* dataOrig = stream->dataOrig;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80014b4:	230e      	movs	r3, #14
 80014b6:	e036      	b.n	8001526 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d103      	bne.n	80014cc <OD_readOriginal+0x4e>
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d922      	bls.n	8001512 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d801      	bhi.n	80014da <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80014d6:	2309      	movs	r3, #9
 80014d8:	e025      	b.n	8001526 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4413      	add	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d90a      	bls.n	800150c <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	441a      	add	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001506:	23ff      	movs	r3, #255	; 0xff
 8001508:	75fb      	strb	r3, [r7, #23]
 800150a:	e002      	b.n	8001512 <OD_readOriginal+0x94>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
        }
    }

    (void)memcpy((void*)buf, (const void*)dataOrig, dataLenToCopy);
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	69b9      	ldr	r1, [r7, #24]
 8001516:	68b8      	ldr	r0, [r7, #8]
 8001518:	f00a fbdc 	bl	800bcd4 <memcpy>

    *countRead = dataLenToCopy;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001522:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <OD_writeOriginal>:

ODR_t
OD_writeOriginal(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800152e:	b580      	push	{r7, lr}
 8001530:	b088      	sub	sp, #32
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <OD_writeOriginal+0x20>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <OD_writeOriginal+0x20>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 800154e:	2309      	movs	r3, #9
 8001550:	e056      	b.n	8001600 <OD_writeOriginal+0xd2>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61fb      	str	r3, [r7, #28]
    OD_size_t dataLenRemain = dataLenToCopy;      /* remaining length of dataOrig buffer */
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	61bb      	str	r3, [r7, #24]
    uint8_t* dataOrig = stream->dataOrig;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	617b      	str	r3, [r7, #20]

    if (dataOrig == NULL) {
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <OD_writeOriginal+0x3e>
        return ODR_SUB_NOT_EXIST;
 8001568:	230e      	movs	r3, #14
 800156a:	e049      	b.n	8001600 <OD_writeOriginal+0xd2>
    }

    ODR_t returnCode = ODR_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	74fb      	strb	r3, [r7, #19]

    /* If previous write was partial or OD variable length is larger than current buffer size,
     * then data was (will be) written in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d103      	bne.n	8001580 <OD_writeOriginal+0x52>
 8001578:	69fa      	ldr	r2, [r7, #28]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	d924      	bls.n	80015ca <OD_writeOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	429a      	cmp	r2, r3
 8001588:	d801      	bhi.n	800158e <OD_writeOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 800158a:	2309      	movs	r3, #9
 800158c:	e038      	b.n	8001600 <OD_writeOriginal+0xd2>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	61fb      	str	r3, [r7, #28]
        dataLenRemain = dataLenToCopy;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	61bb      	str	r3, [r7, #24]
        dataOrig += stream->dataOffset;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	4413      	add	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]

        if (dataLenToCopy > count) {
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d90a      	bls.n	80015c4 <OD_writeOriginal+0x96>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	441a      	add	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80015be:	23ff      	movs	r3, #255	; 0xff
 80015c0:	74fb      	strb	r3, [r7, #19]
 80015c2:	e002      	b.n	80015ca <OD_writeOriginal+0x9c>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d201      	bcs.n	80015d6 <OD_writeOriginal+0xa8>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 80015d2:	230c      	movs	r3, #12
 80015d4:	e014      	b.n	8001600 <OD_writeOriginal+0xd2>
    }

    /* additional check for Misra c compliance */
    if ((dataLenToCopy <= dataLenRemain) && (dataLenToCopy <= count)) {
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d80f      	bhi.n	80015fe <OD_writeOriginal+0xd0>
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d80b      	bhi.n	80015fe <OD_writeOriginal+0xd0>
        (void)memcpy((void*)dataOrig, (const void*)buf, dataLenToCopy);
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f00a fb72 	bl	800bcd4 <memcpy>
 80015f0:	bf00      	nop
    } else {
        return ODR_DEV_INCOMPAT;
    }

    *countWritten = dataLenToCopy;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	601a      	str	r2, [r3, #0]
    return returnCode;
 80015f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015fc:	e000      	b.n	8001600 <OD_writeOriginal+0xd2>
        return ODR_DEV_INCOMPAT;
 80015fe:	2309      	movs	r3, #9
}
 8001600:	4618      	mov	r0, r3
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_readDisabled(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countRead;
    return ODR_UNSUPP_ACCESS;
 8001616:	2302      	movs	r3, #2
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_writeDisabled(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countWritten;
    return ODR_UNSUPP_ACCESS;
 8001630:	2302      	movs	r3, #2
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <OD_find>:

OD_entry_t*
OD_find(OD_t* od, uint16_t index) {
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
    if ((od == NULL) || (od->size == 0U)) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <OD_find+0x1a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <OD_find+0x1e>
        return NULL;
 8001656:	2300      	movs	r3, #0
 8001658:	e046      	b.n	80016e8 <OD_find+0xac>
    }

    uint16_t min = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1U;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	3b01      	subs	r3, #1
 8001664:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. If Object
     * Dictionary has up to N entries, then the max number of loop passes is log2(N) */
    while (min < max)
 8001666:	e026      	b.n	80016b6 <OD_find+0x7a>
    {
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001668:	8afa      	ldrh	r2, [r7, #22]
 800166a:	8abb      	ldrh	r3, [r7, #20]
 800166c:	4413      	add	r3, r2
 800166e:	105b      	asrs	r3, r3, #1
 8001670:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6859      	ldr	r1, [r3, #4]
 8001676:	89fa      	ldrh	r2, [r7, #14]
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) { return entry;}
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	887a      	ldrh	r2, [r7, #2]
 800168a:	429a      	cmp	r2, r3
 800168c:	d101      	bne.n	8001692 <OD_find+0x56>
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	e02a      	b.n	80016e8 <OD_find+0xac>



        if (index < entry->index) { max = (cur > 0U) ? (cur - 1U) : cur;}
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	429a      	cmp	r2, r3
 800169a:	d209      	bcs.n	80016b0 <OD_find+0x74>
 800169c:	89fb      	ldrh	r3, [r7, #14]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <OD_find+0x6e>
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	e000      	b.n	80016ac <OD_find+0x70>
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	82bb      	strh	r3, [r7, #20]
 80016ae:	e002      	b.n	80016b6 <OD_find+0x7a>
           	   	   	   	   	   	   else {min = cur + 1U;}
 80016b0:	89fb      	ldrh	r3, [r7, #14]
 80016b2:	3301      	adds	r3, #1
 80016b4:	82fb      	strh	r3, [r7, #22]
    while (min < max)
 80016b6:	8afa      	ldrh	r2, [r7, #22]
 80016b8:	8abb      	ldrh	r3, [r7, #20]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d3d4      	bcc.n	8001668 <OD_find+0x2c>


    }


    if (min == max) {
 80016be:	8afa      	ldrh	r2, [r7, #22]
 80016c0:	8abb      	ldrh	r3, [r7, #20]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d10f      	bne.n	80016e6 <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6859      	ldr	r1, [r3, #4]
 80016ca:	8afa      	ldrh	r2, [r7, #22]
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	887a      	ldrh	r2, [r7, #2]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d101      	bne.n	80016e6 <OD_find+0xaa>
            return entry;
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	e000      	b.n	80016e8 <OD_find+0xac>
        }
    }

    return NULL; /* entry does not exist in OD */
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	371c      	adds	r7, #28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
	...

080016f4 <OD_getSub>:

ODR_t
OD_getSub(const OD_entry_t* entry, uint8_t subIndex, OD_IO_t* io, bool_t odOrig) {
 80016f4:	b480      	push	{r7}
 80016f6:	b08d      	sub	sp, #52	; 0x34
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	460b      	mov	r3, r1
 8001702:	72fb      	strb	r3, [r7, #11]
    if ((entry == NULL) || (entry->odObject == NULL)) {
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <OD_getSub+0x1e>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <OD_getSub+0x22>
        return ODR_IDX_NOT_EXIST;
 8001712:	2305      	movs	r3, #5
 8001714:	e0d7      	b.n	80018c6 <OD_getSub+0x1d2>
    }
    if (io == NULL) {
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <OD_getSub+0x2c>
        return ODR_DEV_INCOMPAT;
 800171c:	2309      	movs	r3, #9
 800171e:	e0d2      	b.n	80018c6 <OD_getSub+0x1d2>
    }

    OD_stream_t* stream = &io->stream;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & (uint8_t)ODT_TYPE_MASK) {
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	78db      	ldrb	r3, [r3, #3]
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	2b03      	cmp	r3, #3
 800172e:	d051      	beq.n	80017d4 <OD_getSub+0xe0>
 8001730:	2b03      	cmp	r3, #3
 8001732:	f300 808d 	bgt.w	8001850 <OD_getSub+0x15c>
 8001736:	2b01      	cmp	r3, #1
 8001738:	d002      	beq.n	8001740 <OD_getSub+0x4c>
 800173a:	2b02      	cmp	r3, #2
 800173c:	d015      	beq.n	800176a <OD_getSub+0x76>
 800173e:	e087      	b.n	8001850 <OD_getSub+0x15c>
        case ODT_VAR: {
            if (subIndex > 0U) {
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <OD_getSub+0x56>
                return ODR_SUB_NOT_EXIST;
 8001746:	230e      	movs	r3, #14
 8001748:	e0bd      	b.n	80018c6 <OD_getSub+0x1d2>
            }
            CO_PROGMEM OD_obj_var_t* odo = entry->odObject;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	617b      	str	r3, [r7, #20]

            stream->attribute = odo->attribute;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	791a      	ldrb	r2, [r3, #4]
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	609a      	str	r2, [r3, #8]
            break;
 8001768:	e074      	b.n	8001854 <OD_getSub+0x160>
        }
        case ODT_ARR: {
            if (subIndex >= entry->subEntriesCount) {
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	789b      	ldrb	r3, [r3, #2]
 800176e:	7afa      	ldrb	r2, [r7, #11]
 8001770:	429a      	cmp	r2, r3
 8001772:	d301      	bcc.n	8001778 <OD_getSub+0x84>
                return ODR_SUB_NOT_EXIST;
 8001774:	230e      	movs	r3, #14
 8001776:	e0a6      	b.n	80018c6 <OD_getSub+0x1d2>
            }
            CO_PROGMEM OD_obj_array_t* odo = entry->odObject;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	61fb      	str	r3, [r7, #28]

            if (subIndex == 0U) {
 800177e:	7afb      	ldrb	r3, [r7, #11]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10b      	bne.n	800179c <OD_getSub+0xa8>
                stream->attribute = odo->attribute0;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	7a1a      	ldrb	r2, [r3, #8]
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	741a      	strb	r2, [r3, #16]
                stream->dataOrig = odo->dataOrig0;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	601a      	str	r2, [r3, #0]
                stream->dataLength = 1;
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	2201      	movs	r2, #1
 8001798:	609a      	str	r2, [r3, #8]
                stream->attribute = odo->attribute;
                uint8_t* ptr = odo->dataOrig;
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
                stream->dataLength = odo->dataElementLength;
            }
            break;
 800179a:	e05b      	b.n	8001854 <OD_getSub+0x160>
                stream->attribute = odo->attribute;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	7a5a      	ldrb	r2, [r3, #9]
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	741a      	strb	r2, [r3, #16]
                uint8_t* ptr = odo->dataOrig;
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	61bb      	str	r3, [r7, #24]
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <OD_getSub+0xd0>
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	7afa      	ldrb	r2, [r7, #11]
 80017b6:	3a01      	subs	r2, #1
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4413      	add	r3, r2
 80017c2:	e000      	b.n	80017c6 <OD_getSub+0xd2>
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c8:	6013      	str	r3, [r2, #0]
                stream->dataLength = odo->dataElementLength;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	609a      	str	r2, [r3, #8]
            break;
 80017d2:	e03f      	b.n	8001854 <OD_getSub+0x160>
        }
        case ODT_REC: {
            CO_PROGMEM OD_obj_record_t* odoArr = entry->odObject;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	623b      	str	r3, [r7, #32]
            CO_PROGMEM OD_obj_record_t* odo = NULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80017e4:	e01c      	b.n	8001820 <OD_getSub+0x12c>
                if (odoArr[i].subIndex == subIndex) {
 80017e6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	461a      	mov	r2, r3
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	4413      	add	r3, r2
 80017f8:	791b      	ldrb	r3, [r3, #4]
 80017fa:	7afa      	ldrb	r2, [r7, #11]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d10a      	bne.n	8001816 <OD_getSub+0x122>
                    odo = &odoArr[i];
 8001800:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	461a      	mov	r2, r3
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	4413      	add	r3, r2
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8001814:	e00a      	b.n	800182c <OD_getSub+0x138>
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001816:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800181a:	3301      	adds	r3, #1
 800181c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	789b      	ldrb	r3, [r3, #2]
 8001824:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001828:	429a      	cmp	r2, r3
 800182a:	d3dc      	bcc.n	80017e6 <OD_getSub+0xf2>
                }
            }
            if (odo == NULL) {
 800182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <OD_getSub+0x142>
                return ODR_SUB_NOT_EXIST;
 8001832:	230e      	movs	r3, #14
 8001834:	e047      	b.n	80018c6 <OD_getSub+0x1d2>
            }

            stream->attribute = odo->attribute;
 8001836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001838:	795a      	ldrb	r2, [r3, #5]
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	609a      	str	r2, [r3, #8]
            break;
 800184e:	e001      	b.n	8001854 <OD_getSub+0x160>
        }
        default: {
            return ODR_DEV_INCOMPAT;
 8001850:	2309      	movs	r3, #9
 8001852:	e038      	b.n	80018c6 <OD_getSub+0x1d2>
            break;
        }
    }

    /* Access data from the original OD location */
    if ((entry->extension == NULL) || odOrig) {
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <OD_getSub+0x16e>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <OD_getSub+0x182>
        io->read = OD_readOriginal;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <OD_getSub+0x1dc>)
 8001866:	619a      	str	r2, [r3, #24]
        io->write = OD_writeOriginal;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <OD_getSub+0x1e0>)
 800186c:	61da      	str	r2, [r3, #28]
        stream->object = NULL;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	2200      	movs	r2, #0
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	e01c      	b.n	80018b0 <OD_getSub+0x1bc>
    }
    /* Access data from extension specified by application */
    else {
        io->read = (entry->extension->read != NULL) ? entry->extension->read : OD_readDisabled;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <OD_getSub+0x194>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	e000      	b.n	800188a <OD_getSub+0x196>
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <OD_getSub+0x1e4>)
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6193      	str	r3, [r2, #24]
        io->write = (entry->extension->write != NULL) ? entry->extension->write : OD_writeDisabled;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <OD_getSub+0x1ac>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	e000      	b.n	80018a2 <OD_getSub+0x1ae>
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <OD_getSub+0x1e8>)
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	61d3      	str	r3, [r2, #28]
        stream->object = entry->extension->object;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]

    /* Add informative data */
    stream->index = entry->index;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	881a      	ldrh	r2, [r3, #0]
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	825a      	strh	r2, [r3, #18]
    stream->subIndex = subIndex;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	7afa      	ldrb	r2, [r7, #11]
 80018c2:	751a      	strb	r2, [r3, #20]

    return ODR_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3734      	adds	r7, #52	; 0x34
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	0800147f 	.word	0x0800147f
 80018d4:	0800152f 	.word	0x0800152f
 80018d8:	08001609 	.word	0x08001609
 80018dc:	08001623 	.word	0x08001623

080018e0 <OD_getSDOabCode>:

uint32_t
OD_getSDOabCode(ODR_t returnCode)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return ((returnCode < ODR_OK) || (returnCode >= ODR_COUNT)) ? abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db03      	blt.n	80018fa <OD_getSDOabCode+0x1a>
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b19      	cmp	r3, #25
 80018f8:	dd02      	ble.n	8001900 <OD_getSDOabCode+0x20>
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <OD_getSDOabCode+0x34>)
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	e004      	b.n	800190a <OD_getSDOabCode+0x2a>
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	4a03      	ldr	r2, [pc, #12]	; (8001914 <OD_getSDOabCode+0x34>)
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	0800c640 	.word	0x0800c640

08001918 <OD_get_value>:

ODR_t
OD_get_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b091      	sub	sp, #68	; 0x44
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	460b      	mov	r3, r1
 8001926:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <OD_get_value+0x1a>
        return ODR_DEV_INCOMPAT;
 800192e:	2309      	movs	r3, #9
 8001930:	e02b      	b.n	800198a <OD_get_value+0x72>
    }

    OD_IO_t io = {NULL};
 8001932:	f107 0318 	add.w	r3, r7, #24
 8001936:	2220      	movs	r2, #32
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f00a f940 	bl	800bbc0 <memset>
    OD_stream_t* stream = &io.stream;
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t countRd = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 800194a:	f107 0218 	add.w	r2, r7, #24
 800194e:	7af9      	ldrb	r1, [r7, #11]
 8001950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7ff fece 	bl	80016f4 <OD_getSub>
 8001958:	4603      	mov	r3, r0
 800195a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) {
 800195e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <OD_get_value+0x54>
        return ret;
 8001966:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800196a:	e00e      	b.n	800198a <OD_get_value+0x72>
    }
    if (stream->dataLength != len) {
 800196c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d001      	beq.n	800197a <OD_get_value+0x62>
        return ODR_TYPE_MISMATCH;
 8001976:	230b      	movs	r3, #11
 8001978:	e007      	b.n	800198a <OD_get_value+0x72>
    }

    return io.read(stream, val, len, &countRd);
 800197a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001986:	47a0      	blx	r4
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3744      	adds	r7, #68	; 0x44
 800198e:	46bd      	mov	sp, r7
 8001990:	bd90      	pop	{r4, r7, pc}

08001992 <OD_set_value>:

ODR_t
OD_set_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001992:	b590      	push	{r4, r7, lr}
 8001994:	b091      	sub	sp, #68	; 0x44
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	460b      	mov	r3, r1
 80019a0:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <OD_set_value+0x1a>
        return ODR_DEV_INCOMPAT;
 80019a8:	2309      	movs	r3, #9
 80019aa:	e02b      	b.n	8001a04 <OD_set_value+0x72>
    }

    OD_IO_t io = {NULL};
 80019ac:	f107 0318 	add.w	r3, r7, #24
 80019b0:	2220      	movs	r2, #32
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00a f903 	bl	800bbc0 <memset>
    OD_stream_t* stream = &io.stream;
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t countWritten = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 80019c4:	f107 0218 	add.w	r2, r7, #24
 80019c8:	7af9      	ldrb	r1, [r7, #11]
 80019ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff fe91 	bl	80016f4 <OD_getSub>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) {
 80019d8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <OD_set_value+0x54>
        return ret;
 80019e0:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80019e4:	e00e      	b.n	8001a04 <OD_set_value+0x72>
    }
    if (stream->dataLength != len) {
 80019e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <OD_set_value+0x62>
        return ODR_TYPE_MISMATCH;
 80019f0:	230b      	movs	r3, #11
 80019f2:	e007      	b.n	8001a04 <OD_set_value+0x72>
    }

    return io.write(stream, val, len, &countWritten);
 80019f4:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a00:	47a0      	blx	r4
 8001a02:	4603      	mov	r3, r0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3744      	adds	r7, #68	; 0x44
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}

08001a0c <OD_getPtr>:

void*
OD_getPtr(const OD_entry_t* entry, uint8_t subIndex, OD_size_t len, ODR_t* err) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t* stream = &io.stream;
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001a22:	f107 0210 	add.w	r2, r7, #16
 8001a26:	7af9      	ldrb	r1, [r7, #11]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff fe62 	bl	80016f4 <OD_getSub>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 8001a36:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d116      	bne.n	8001a6c <OD_getPtr+0x60>
        if ((stream->dataOrig == NULL) || (stream->dataLength == 0U)) {
 8001a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <OD_getPtr+0x42>
 8001a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001a4e:	2309      	movs	r3, #9
 8001a50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a54:	e00a      	b.n	8001a6c <OD_getPtr+0x60>
        } else if ((len != 0U) && (len != stream->dataLength)) {
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <OD_getPtr+0x60>
 8001a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d002      	beq.n	8001a6c <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001a66:	230b      	movs	r3, #11
 8001a68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }

    if (err != NULL) {
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <OD_getPtr+0x6e>
        *err = errCopy;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001a78:	701a      	strb	r2, [r3, #0]
    }

    return (errCopy == ODR_OK) ? stream->dataOrig : NULL;
 8001a7a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <OD_getPtr+0x7c>
 8001a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	e000      	b.n	8001a8a <OD_getPtr+0x7e>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3738      	adds	r7, #56	; 0x38
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001a9e:	73fb      	strb	r3, [r7, #15]
    return value;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <CO_getUint16>:
CO_getUint16(const void* buf) {
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 8001aba:	81fb      	strh	r3, [r7, #14]
    return value;
 8001abc:	89fb      	ldrh	r3, [r7, #14]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001ad4:	60fb      	str	r3, [r7, #12]
    return value;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
 8001aec:	683a      	ldr	r2, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8001af2:	2304      	movs	r3, #4
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <OD_getIndex+0x14>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	e000      	b.n	8001b14 <OD_getIndex+0x16>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e003      	b.n	8001b3a <OD_extension_init+0x1c>
    entry->extension = extension;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	460b      	mov	r3, r1
 8001b52:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001b54:	7af9      	ldrb	r1, [r7, #11]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff feda 	bl	8001918 <OD_get_value>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af02      	add	r7, sp, #8
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001b7e:	7af9      	ldrb	r1, [r7, #11]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2302      	movs	r3, #2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f7ff fec5 	bl	8001918 <OD_get_value>
 8001b8e:	4603      	mov	r3, r0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001ba8:	7af9      	ldrb	r1, [r7, #11]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2304      	movs	r3, #4
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f7ff feb0 	bl	8001918 <OD_get_value>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <OD_write_dummy>:
 * Custom function for write dummy OD object. Will be used only from RPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_dummy(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    if (countWritten != NULL) {
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <OD_write_dummy+0x1a>
        *countWritten = count;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	601a      	str	r2, [r3, #0]
    }
    return ODR_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <OD_read_dummy>:
 * Custom function for read dummy OD object. Will be used only from TPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_dummy(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
    if ((buf == NULL) || (stream == NULL) || (countRead == NULL)) {
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <OD_read_dummy+0x20>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <OD_read_dummy+0x20>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8001c08:	2309      	movs	r3, #9
 8001c0a:	e010      	b.n	8001c2e <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d902      	bls.n	8001c1c <OD_read_dummy+0x34>
        count = stream->dataLength;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	607b      	str	r3, [r7, #4]
    }

    (void)memset(buf, 0, count);
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	2100      	movs	r1, #0
 8001c20:	68b8      	ldr	r0, [r7, #8]
 8001c22:	f009 ffcd 	bl	800bbc0 <memset>

    *countRead = count;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <PDOconfigMap>:
 * @param OD Object Dictionary.
 *
 * @return ODR_OK on success, otherwise error reason.
 */
static ODR_t
PDOconfigMap(CO_PDO_common_t* PDO, uint32_t map, uint8_t mapIndex, bool_t isRPDO, OD_t* OD) {
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b092      	sub	sp, #72	; 0x48
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t)(map >> 16);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	0c1b      	lsrs	r3, r3, #16
 8001c4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t)(map >> 8);
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t)map;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 8001c5e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001c62:	08db      	lsrs	r3, r3, #3
 8001c64:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t* OD_IO = &PDO->OD_IO[mapIndex];
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	015b      	lsls	r3, r3, #5
 8001c6c:	3310      	adds	r3, #16
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4413      	add	r3, r2
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8001c74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d901      	bls.n	8001c80 <PDOconfigMap+0x48>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	e090      	b.n	8001da2 <PDOconfigMap+0x16a>
    }

    /* is there a reference to the dummy entry */
    if ((index < 0x20U) && (subIndex == 0U)) {
 8001c80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001c84:	2b1f      	cmp	r3, #31
 8001c86:	d81a      	bhi.n	8001cbe <PDOconfigMap+0x86>
 8001c88:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d116      	bne.n	8001cbe <PDOconfigMap+0x86>
        OD_stream_t* stream = &OD_IO->stream;
 8001c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c92:	63bb      	str	r3, [r7, #56]	; 0x38
        (void)memset(stream, 0, sizeof(OD_stream_t));
 8001c94:	2218      	movs	r2, #24
 8001c96:	2100      	movs	r1, #0
 8001c98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001c9a:	f009 ff91 	bl	800bbc0 <memset>
        stream->dataLength = mappedLength;
 8001c9e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca4:	609a      	str	r2, [r3, #8]
        stream->dataOffset = mappedLength;
 8001ca6:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cac:	60da      	str	r2, [r3, #12]
        OD_IO->read = OD_read_dummy;
 8001cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb0:	4a3e      	ldr	r2, [pc, #248]	; (8001dac <PDOconfigMap+0x174>)
 8001cb2:	619a      	str	r2, [r3, #24]
        OD_IO->write = OD_write_dummy;
 8001cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb6:	4a3e      	ldr	r2, [pc, #248]	; (8001db0 <PDOconfigMap+0x178>)
 8001cb8:	61da      	str	r2, [r3, #28]
        return ODR_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e071      	b.n	8001da2 <PDOconfigMap+0x16a>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t* entry = OD_find(OD, index);
 8001cbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001cc6:	f7ff fcb9 	bl	800163c <OD_find>
 8001cca:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8001ccc:	f107 0210 	add.w	r2, r7, #16
 8001cd0:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001cd8:	f7ff fd0c 	bl	80016f4 <OD_getSub>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 8001ce2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <PDOconfigMap+0xb8>
        return odRet;
 8001cea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001cee:	e058      	b.n	8001da2 <PDOconfigMap+0x16a>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? (OD_attr_t)(ODA_RPDO) : (OD_attr_t)(ODA_TPDO);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <PDOconfigMap+0xc2>
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	e000      	b.n	8001cfc <PDOconfigMap+0xc4>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if (((OD_IOcopy.stream.attribute & testAttribute) == 0U) || ((mappedLengthBits & 0x07U) != 0U)
 8001d00:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001d08:	4013      	ands	r3, r2
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00a      	beq.n	8001d26 <PDOconfigMap+0xee>
 8001d10:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d104      	bne.n	8001d26 <PDOconfigMap+0xee>
        || (OD_IOcopy.stream.dataLength < mappedLength)) {
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d201      	bcs.n	8001d2a <PDOconfigMap+0xf2>
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8001d26:	2306      	movs	r3, #6
 8001d28:	e03b      	b.n	8001da2 <PDOconfigMap+0x16a>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8001d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d2c:	461d      	mov	r5, r3
 8001d2e:	f107 0410 	add.w	r4, r7, #16
 8001d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    OD_IO->stream.dataOffset = mappedLength;
 8001d3e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d44:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d129      	bne.n	8001da0 <PDOconfigMap+0x168>
        if ((subIndex < (OD_FLAGS_PDO_SIZE * 8U)) && (entry->extension != NULL)) {
 8001d4c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001d50:	2b1f      	cmp	r3, #31
 8001d52:	d81f      	bhi.n	8001d94 <PDOconfigMap+0x15c>
 8001d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d01b      	beq.n	8001d94 <PDOconfigMap+0x15c>
            PDO->flagPDObyte[mapIndex] = &entry->extension->flagsPDO[subIndex >> 3];
 8001d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5e:	6899      	ldr	r1, [r3, #8]
 8001d60:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001d64:	08db      	lsrs	r3, r3, #3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	3308      	adds	r3, #8
 8001d6c:	440b      	add	r3, r1
 8001d6e:	1d19      	adds	r1, r3, #4
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3244      	adds	r2, #68	; 0x44
 8001d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1U << (subIndex & 0x07U);
 8001d78:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	2201      	movs	r2, #1
 8001d82:	409a      	lsls	r2, r3
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	b2d1      	uxtb	r1, r2
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8001d92:	e005      	b.n	8001da0 <PDOconfigMap+0x168>
        } else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8001d94:	79fa      	ldrb	r2, [r7, #7]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3244      	adds	r2, #68	; 0x44
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3748      	adds	r7, #72	; 0x48
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bdb0      	pop	{r4, r5, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	08001be9 	.word	0x08001be9
 8001db0:	08001bc3 	.word	0x08001bc3

08001db4 <PDO_initMapping>:
 *
 * @return #CO_ReturnError_t CO_ERROR_NO on success.
 */
static CO_ReturnError_t
PDO_initMapping(CO_PDO_common_t* PDO, OD_t* OD, OD_entry_t* OD_PDOMapPar, bool_t isRPDO, uint32_t* errInfo,
                uint32_t* erroneousMap) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8001dca:	f107 021b 	add.w	r2, r7, #27
 8001dce:	2301      	movs	r3, #1
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff feb6 	bl	8001b44 <OD_get_u8>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8001dde:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00c      	beq.n	8001e00 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8001de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fe86 	bl	8001afe <OD_getIndex>
 8001df2:	4603      	mov	r3, r0
 8001df4:	021a      	lsls	r2, r3, #8
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001dfa:	f06f 030b 	mvn.w	r3, #11
 8001dfe:	e07f      	b.n	8001f00 <PDO_initMapping+0x14c>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001e06:	e05b      	b.n	8001ec0 <PDO_initMapping+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8001e08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e0c:	015b      	lsls	r3, r3, #5
 8001e0e:	3310      	adds	r3, #16
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1U, &map, true);
 8001e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b2d9      	uxtb	r1, r3
 8001e22:	f107 0214 	add.w	r2, r7, #20
 8001e26:	2301      	movs	r3, #1
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff feb5 	bl	8001b98 <OD_get_u32>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 8001e34:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001e38:	2b0e      	cmp	r3, #14
 8001e3a:	d03b      	beq.n	8001eb4 <PDO_initMapping+0x100>
            continue;
        }
        if (odRet != ODR_OK) {
 8001e3c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00f      	beq.n	8001e64 <PDO_initMapping+0xb0>
            if (errInfo != NULL) {
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <PDO_initMapping+0xaa>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8) | i;
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fe57 	bl	8001afe <OD_getIndex>
 8001e50:	4603      	mov	r3, r0
 8001e52:	021a      	lsls	r2, r3, #8
 8001e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5c:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8001e5e:	f06f 030b 	mvn.w	r3, #11
 8001e62:	e04d      	b.n	8001f00 <PDO_initMapping+0x14c>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 8001e64:	6979      	ldr	r1, [r7, #20]
 8001e66:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fee1 	bl	8001c38 <PDOconfigMap>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 8001e7c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00c      	beq.n	8001e9e <PDO_initMapping+0xea>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	22ff      	movs	r2, #255	; 0xff
 8001e8e:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0U) {
 8001e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <PDO_initMapping+0xea>
                *erroneousMap = map;
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9c:	601a      	str	r2, [r3, #0]
            }
        }

        if (i < mappedObjectsCount) {
 8001e9e:	7efb      	ldrb	r3, [r7, #27]
 8001ea0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d206      	bcs.n	8001eb6 <PDO_initMapping+0x102>
            pdoDataLength += OD_IO->stream.dataOffset;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eae:	4413      	add	r3, r2
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	e000      	b.n	8001eb6 <PDO_initMapping+0x102>
            continue;
 8001eb4:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8001eb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001ec0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ec4:	2b07      	cmp	r3, #7
 8001ec6:	d99f      	bls.n	8001e08 <PDO_initMapping+0x54>
        }
    }
    if ((pdoDataLength > CO_PDO_MAX_SIZE) || ((pdoDataLength == 0U) && (mappedObjectsCount > 0U))) {
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d805      	bhi.n	8001eda <PDO_initMapping+0x126>
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <PDO_initMapping+0x134>
 8001ed4:	7efb      	ldrb	r3, [r7, #27]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d006      	beq.n	8001ee8 <PDO_initMapping+0x134>
        if (*erroneousMap == 0U) {
 8001eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <PDO_initMapping+0x134>
            *erroneousMap = 1;
 8001ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
        }
    }

    if (*erroneousMap == 0U) {
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <PDO_initMapping+0x14a>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8001ef8:	7efa      	ldrb	r2, [r7, #27]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <OD_write_PDO_mapping>:
 * Custom function for writing OD object "PDO mapping parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_PDO_mapping(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	; 0x38
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES)) {
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d009      	beq.n	8001f30 <OD_write_PDO_mapping+0x28>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <OD_write_PDO_mapping+0x28>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <OD_write_PDO_mapping+0x28>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	7d1b      	ldrb	r3, [r3, #20]
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d901      	bls.n	8001f34 <OD_write_PDO_mapping+0x2c>
        return ODR_DEV_INCOMPAT;
 8001f30:	2309      	movs	r3, #9
 8001f32:	e07e      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t* PDO = stream->object;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if ((PDO->valid) || ((PDO->mappedObjectsCount != 0U) && (stream->subIndex > 0U))) {
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d107      	bne.n	8001f52 <OD_write_PDO_mapping+0x4a>
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	7b5b      	ldrb	r3, [r3, #13]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <OD_write_PDO_mapping+0x4e>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	7d1b      	ldrb	r3, [r3, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8001f52:	2302      	movs	r3, #2
 8001f54:	e06d      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
    }

    if (stream->subIndex == 0U) {
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	7d1b      	ldrb	r3, [r3, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d145      	bne.n	8001fea <OD_write_PDO_mapping+0xe2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8001f5e:	68b8      	ldr	r0, [r7, #8]
 8001f60:	f7ff fd97 	bl	8001a92 <CO_getUint8>
 8001f64:	4603      	mov	r3, r0
 8001f66:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8001f6c:	7fbb      	ldrb	r3, [r7, #30]
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d901      	bls.n	8001f76 <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 8001f72:	2307      	movs	r3, #7
 8001f74:	e05d      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001f7c:	e01b      	b.n	8001fb6 <OD_write_PDO_mapping+0xae>
            OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8001f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f82:	015b      	lsls	r3, r3, #5
 8001f84:	3310      	adds	r3, #16
 8001f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f88:	4413      	add	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t)OD_IO->stream.dataLength;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t)OD_IO->stream.dataOffset;
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d901      	bls.n	8001fa4 <OD_write_PDO_mapping+0x9c>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8001fa0:	2306      	movs	r3, #6
 8001fa2:	e046      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
            }
            pdoDataLength += mappedLength;
 8001fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8001fac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001fb6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001fba:	7fbb      	ldrb	r3, [r7, #30]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d3de      	bcc.n	8001f7e <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d901      	bls.n	8001fca <OD_write_PDO_mapping+0xc2>
            return ODR_MAP_LEN;
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	e033      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
        }
        if ((pdoDataLength == 0U) && (mappedObjectsCount > 0U)) {
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d104      	bne.n	8001fda <OD_write_PDO_mapping+0xd2>
 8001fd0:	7fbb      	ldrb	r3, [r7, #30]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <OD_write_PDO_mapping+0xd2>
            return ODR_INVALID_VALUE;
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	e02b      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8001fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	7fba      	ldrb	r2, [r7, #30]
 8001fe6:	735a      	strb	r2, [r3, #13]
 8001fe8:	e01c      	b.n	8002024 <OD_write_PDO_mapping+0x11c>
    } else {
        uint32_t val = CO_getUint32(buf);
 8001fea:	68b8      	ldr	r0, [r7, #8]
 8001fec:	f7ff fd6c 	bl	8001ac8 <CO_getUint32>
 8001ff0:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex - 1U, PDO->isRPDO, PDO->OD);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	7d1b      	ldrb	r3, [r3, #20]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	460b      	mov	r3, r1
 800200a:	6a39      	ldr	r1, [r7, #32]
 800200c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800200e:	f7ff fe13 	bl	8001c38 <PDOconfigMap>
 8002012:	4603      	mov	r3, r0
 8002014:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8002016:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <OD_write_PDO_mapping+0x11c>
            return odRet;
 800201e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002022:	e006      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f7ff fa7f 	bl	800152e <OD_writeOriginal>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3730      	adds	r7, #48	; 0x30
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <OD_read_PDO_commParam>:
 * Custom function for reading OD object "PDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_PDO_commParam(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800203a:	b580      	push	{r7, lr}
 800203c:	b088      	sub	sp, #32
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7ff fa15 	bl	800147e <OD_readOriginal>
 8002054:	4603      	mov	r3, r0
 8002056:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if ((returnCode == ODR_OK) && (stream->subIndex == 1U) && (*countRead == 4U)) {
 8002058:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d134      	bne.n	80020ca <OD_read_PDO_commParam+0x90>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	7d1b      	ldrb	r3, [r3, #20]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d130      	bne.n	80020ca <OD_read_PDO_commParam+0x90>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d12c      	bne.n	80020ca <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t* PDO = stream->object;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002076:	68b8      	ldr	r0, [r7, #8]
 8002078:	f7ff fd26 	bl	8001ac8 <CO_getUint32>
 800207c:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	b29b      	uxth	r3, r3
 8002082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002086:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if ((CAN_ID != 0U) && (CAN_ID == (PDO->preDefinedCanId & 0xFF80U))) {
 8002088:	8a7b      	ldrh	r3, [r7, #18]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d011      	beq.n	80020b2 <OD_read_PDO_commParam+0x78>
 800208e:	8a7a      	ldrh	r2, [r7, #18]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8002096:	4619      	mov	r1, r3
 8002098:	f64f 7380 	movw	r3, #65408	; 0xff80
 800209c:	400b      	ands	r3, r1
 800209e:	429a      	cmp	r2, r3
 80020a0:	d107      	bne.n	80020b2 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000U) | PDO->preDefinedCanId;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	041b      	lsls	r3, r3, #16
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) {
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <OD_read_PDO_commParam+0x88>
            COB_ID |= 0x80000000U;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020c0:	61fb      	str	r3, [r7, #28]
        }

        (void)CO_setUint32(buf, COB_ID);
 80020c2:	69f9      	ldr	r1, [r7, #28]
 80020c4:	68b8      	ldr	r0, [r7, #8]
 80020c6:	f7ff fd0c 	bl	8001ae2 <CO_setUint32>
    }

    return returnCode;
 80020ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <OD_write_18xx>:
 * Custom function for writing OD object "TPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_18xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b093      	sub	sp, #76	; 0x4c
 80020dc:	af02      	add	r7, sp, #8
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <OD_write_18xx+0x26>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <OD_write_18xx+0x26>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <OD_write_18xx+0x26>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d901      	bls.n	8002102 <OD_write_18xx+0x2a>
		{
		 return ODR_DEV_INCOMPAT;
 80020fe:	2309      	movs	r3, #9
 8002100:	e136      	b.n	8002370 <OD_write_18xx+0x298>
		}

    CO_TPDO_t* TPDO = stream->object;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8002108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	4618      	mov	r0, r3
 8002116:	f009 fddd 	bl	800bcd4 <memcpy>

    switch (stream->subIndex) {
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	7d1b      	ldrb	r3, [r3, #20]
 800211e:	3b01      	subs	r3, #1
 8002120:	2b05      	cmp	r3, #5
 8002122:	f200 811a 	bhi.w	800235a <OD_write_18xx+0x282>
 8002126:	a201      	add	r2, pc, #4	; (adr r2, 800212c <OD_write_18xx+0x54>)
 8002128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212c:	08002145 	.word	0x08002145
 8002130:	0800227b 	.word	0x0800227b
 8002134:	080022dd 	.word	0x080022dd
 8002138:	0800235b 	.word	0x0800235b
 800213c:	0800230b 	.word	0x0800230b
 8002140:	0800232f 	.word	0x0800232f
        case 1: { /* COB-ID used by PDO */
            uint32_t COB_ID = CO_getUint32(buf);
 8002144:	68b8      	ldr	r0, [r7, #8]
 8002146:	f7ff fcbf 	bl	8001ac8 <CO_getUint32>
 800214a:	6238      	str	r0, [r7, #32]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	b29b      	uxth	r3, r3
 8002150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002154:	87fb      	strh	r3, [r7, #62]	; 0x3e
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	43db      	mvns	r3, r3
 800215a:	0fdb      	lsrs	r3, r3, #31
 800215c:	b2db      	uxtb	r3, r3
 800215e:	61fb      	str	r3, [r7, #28]

            /* bits 11...29 must be zero, PDO must be disabled on change, CAN_ID == 0 is
             * not allowed, mapping must be configured before enabling the PDO */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (PDO->valid && (CAN_ID != PDO->configuredCanId)))
 8002160:	6a3a      	ldr	r2, [r7, #32]
 8002162:	4b85      	ldr	r3, [pc, #532]	; (8002378 <OD_write_18xx+0x2a0>)
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d13d      	bne.n	80021e6 <OD_write_18xx+0x10e>
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d009      	beq.n	8002184 <OD_write_18xx+0xac>
 8002170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <OD_write_18xx+0xac>
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800217e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002180:	429a      	cmp	r2, r3
 8002182:	d130      	bne.n	80021e6 <OD_write_18xx+0x10e>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d026      	beq.n	80021d8 <OD_write_18xx+0x100>
 800218a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800218c:	2b7f      	cmp	r3, #127	; 0x7f
 800218e:	d92a      	bls.n	80021e6 <OD_write_18xx+0x10e>
 8002190:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002196:	d903      	bls.n	80021a0 <OD_write_18xx+0xc8>
 8002198:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800219a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800219e:	d922      	bls.n	80021e6 <OD_write_18xx+0x10e>
 80021a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80021a2:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80021a6:	d903      	bls.n	80021b0 <OD_write_18xx+0xd8>
 80021a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80021aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80021ae:	d31a      	bcc.n	80021e6 <OD_write_18xx+0x10e>
 80021b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80021b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80021b6:	d903      	bls.n	80021c0 <OD_write_18xx+0xe8>
 80021b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80021ba:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80021be:	d312      	bcc.n	80021e6 <OD_write_18xx+0x10e>
 80021c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80021c2:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80021c6:	d303      	bcc.n	80021d0 <OD_write_18xx+0xf8>
 80021c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80021ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021ce:	d30a      	bcc.n	80021e6 <OD_write_18xx+0x10e>
 80021d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80021d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021d6:	d806      	bhi.n	80021e6 <OD_write_18xx+0x10e>
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <OD_write_18xx+0x112>
 80021de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e0:	7b5b      	ldrb	r3, [r3, #13]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <OD_write_18xx+0x112>
                return ODR_INVALID_VALUE;
 80021e6:	230f      	movs	r3, #15
 80021e8:	e0c2      	b.n	8002370 <OD_write_18xx+0x298>
            }

            /* parameter changed? */
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId))
 80021ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d106      	bne.n	8002202 <OD_write_18xx+0x12a>
 80021f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f6:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 80021fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80021fc:	429a      	cmp	r2, r3
 80021fe:	f000 80ae 	beq.w	800235e <OD_write_18xx+0x286>
            {
                /* if default CAN-ID is written, store to OD without Node-ID */
                if (CAN_ID == PDO->preDefinedCanId)
 8002202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002204:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8002208:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800220a:	429a      	cmp	r2, r3
 800220c:	d108      	bne.n	8002220 <OD_write_18xx+0x148>
					{
					 (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fc61 	bl	8001ae2 <CO_setUint32>
					}

                if (!valid) {CAN_ID = 0; }
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <OD_write_18xx+0x152>
 8002226:	2300      	movs	r3, #0
 8002228:	87fb      	strh	r3, [r7, #62]	; 0x3e



                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 800222a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222c:	6858      	ldr	r0, [r3, #4]
 800222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002230:	f8b3 1140 	ldrh.w	r1, [r3, #320]	; 0x140
 8002234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002236:	7b1b      	ldrb	r3, [r3, #12]
                    PDO->CANdev, PDO->CANdevIdx, CAN_ID, false, PDO->dataLength,
                    TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8002238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800223a:	f892 216c 	ldrb.w	r2, [r2, #364]	; 0x16c
                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 800223e:	2af0      	cmp	r2, #240	; 0xf0
 8002240:	bf94      	ite	ls
 8002242:	2201      	movls	r2, #1
 8002244:	2200      	movhi	r2, #0
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	4614      	mov	r4, r2
 800224a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800224c:	9401      	str	r4, [sp, #4]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2300      	movs	r3, #0
 8002252:	f004 fa33 	bl	80066bc <CO_CANtxBufferInit>
 8002256:	61b8      	str	r0, [r7, #24]

                if (CANtxBuff == NULL) {return ODR_DEV_INCOMPAT;}
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <OD_write_18xx+0x18a>
 800225e:	2309      	movs	r3, #9
 8002260:	e086      	b.n	8002370 <OD_write_18xx+0x298>




                TPDO->CANtxBuff = CANtxBuff;
 8002262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                PDO->valid = valid;
 800226a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002274:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
            }
            break;
 8002278:	e071      	b.n	800235e <OD_write_18xx+0x286>
        }

        case 2:
        		{ /* transmission type */
        		uint8_t transmissionType = CO_getUint8(buf);
 800227a:	68b8      	ldr	r0, [r7, #8]
 800227c:	f7ff fc09 	bl	8001a92 <CO_getUint8>
 8002280:	4603      	mov	r3, r0
 8002282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
				if (
 8002286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800228a:	2bf0      	cmp	r3, #240	; 0xf0
 800228c:	d905      	bls.n	800229a <OD_write_18xx+0x1c2>
						(transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
					 && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
 800228e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002292:	2bfd      	cmp	r3, #253	; 0xfd
 8002294:	d801      	bhi.n	800229a <OD_write_18xx+0x1c2>
					) {return ODR_INVALID_VALUE;}
 8002296:	230f      	movs	r3, #15
 8002298:	e06a      	b.n	8002370 <OD_write_18xx+0x298>


				TPDO->CANtxBuff->syncFlag = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 800229a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800229e:	2bf0      	cmp	r3, #240	; 0xf0
 80022a0:	bf94      	ite	ls
 80022a2:	2301      	movls	r3, #1
 80022a4:	2300      	movhi	r3, #0
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022aa:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80022ae:	615a      	str	r2, [r3, #20]
				TPDO->syncCounter = 255;
 80022b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b2:	22ff      	movs	r2, #255	; 0xff
 80022b4:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#else
            if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
                	{return ODR_INVALID_VALUE; }

#endif
				TPDO->transmissionType = transmissionType;
 80022b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80022be:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
				TPDO->sendRequest = true;
 80022c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c4:	2201      	movs	r2, #1
 80022c6:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
				TPDO->inhibitTimer = 0;
 80022ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022cc:	2200      	movs	r2, #0
 80022ce:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
				TPDO->eventTimer = 0;
 80022d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d4:	2200      	movs	r2, #0
 80022d6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif
				break;
 80022da:	e041      	b.n	8002360 <OD_write_18xx+0x288>
        }

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        case 3: { /* inhibit time */
            if (PDO->valid) {
 80022dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <OD_write_18xx+0x210>
                return ODR_INVALID_VALUE;
 80022e4:	230f      	movs	r3, #15
 80022e6:	e043      	b.n	8002370 <OD_write_18xx+0x298>
            }
            uint32_t inhibitTime = CO_getUint16(buf);
 80022e8:	68b8      	ldr	r0, [r7, #8]
 80022ea:	f7ff fbdf 	bl	8001aac <CO_getUint16>
 80022ee:	4603      	mov	r3, r0
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
            TPDO->inhibitTime_us = inhibitTime * 100U;
 80022f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f4:	2264      	movs	r2, #100	; 0x64
 80022f6:	fb03 f202 	mul.w	r2, r3, r2
 80022fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            TPDO->inhibitTimer = 0;
 8002300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002302:	2200      	movs	r2, #0
 8002304:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
            break;
 8002308:	e02a      	b.n	8002360 <OD_write_18xx+0x288>
        }

        case 5: { /* event-timer */
            uint32_t eventTime = CO_getUint16(buf);
 800230a:	68b8      	ldr	r0, [r7, #8]
 800230c:	f7ff fbce 	bl	8001aac <CO_getUint16>
 8002310:	4603      	mov	r3, r0
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
            TPDO->eventTime_us = eventTime * 1000U;
 8002314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002316:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800231a:	fb03 f202 	mul.w	r2, r3, r2
 800231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002320:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            TPDO->eventTimer = 0;
 8002324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002326:	2200      	movs	r2, #0
 8002328:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            break;
 800232c:	e018      	b.n	8002360 <OD_write_18xx+0x288>
        }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        case 6: { /* SYNC start value */
            uint8_t syncStartValue = CO_getUint8(buf);
 800232e:	68b8      	ldr	r0, [r7, #8]
 8002330:	f7ff fbaf 	bl	8001a92 <CO_getUint8>
 8002334:	4603      	mov	r3, r0
 8002336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

            if (PDO->valid || (syncStartValue > 240U)) {
 800233a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d103      	bne.n	800234a <OD_write_18xx+0x272>
 8002342:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002346:	2bf0      	cmp	r3, #240	; 0xf0
 8002348:	d901      	bls.n	800234e <OD_write_18xx+0x276>
                return ODR_INVALID_VALUE;
 800234a:	230f      	movs	r3, #15
 800234c:	e010      	b.n	8002370 <OD_write_18xx+0x298>
            }
            TPDO->syncStartValue = syncStartValue;
 800234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002350:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002354:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
            break;
 8002358:	e002      	b.n	8002360 <OD_write_18xx+0x288>
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 800235a:	bf00      	nop
 800235c:	e000      	b.n	8002360 <OD_write_18xx+0x288>
            break;
 800235e:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002360:	f107 0114 	add.w	r1, r7, #20
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f7ff f8e0 	bl	800152e <OD_writeOriginal>
 800236e:	4603      	mov	r3, r0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3744      	adds	r7, #68	; 0x44
 8002374:	46bd      	mov	sp, r7
 8002376:	bd90      	pop	{r4, r7, pc}
 8002378:	3ffff800 	.word	0x3ffff800

0800237c <CO_TPDO_init>:
CO_TPDO_init(CO_TPDO_t* TPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_18xx_TPDOCommPar, OD_entry_t* OD_1Axx_TPDOMapPar,
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint32_t* errInfo) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b08e      	sub	sp, #56	; 0x38
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if ((TPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_18xx_TPDOCommPar == NULL) || (OD_1Axx_TPDOMapPar == NULL)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00e      	beq.n	80023b2 <CO_TPDO_init+0x36>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <CO_TPDO_init+0x36>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <CO_TPDO_init+0x36>
 80023a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <CO_TPDO_init+0x36>
 80023a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <CO_TPDO_init+0x36>
        || (CANdevTx == NULL)) {
 80023ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <CO_TPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	e144      	b.n	8002642 <CO_TPDO_init+0x2c6>
    }

    /* clear object */
    (void)memset(TPDO, 0, sizeof(CO_TPDO_t));
 80023b8:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80023bc:	2100      	movs	r1, #0
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f009 fbfe 	bl	800bbc0 <memset>

    /* Configure object variables */
    PDO->em = em;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023ce:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO, OD, OD_1Axx_TPDOMapPar, false, errInfo, &erroneousMap);
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2300      	movs	r3, #0
 80023e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023e6:	f7ff fce5 	bl	8001db4 <PDO_initMapping>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret != CO_ERROR_NO) {
 80023f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <CO_TPDO_init+0x82>
        return ret;
 80023f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80023fc:	e121      	b.n	8002642 <CO_TPDO_init+0x2c6>
    }

    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 80023fe:	23fe      	movs	r3, #254	; 0xfe
 8002400:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8002402:	f107 021b 	add.w	r2, r7, #27
 8002406:	2301      	movs	r3, #1
 8002408:	2102      	movs	r1, #2
 800240a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800240c:	f7ff fb9a 	bl	8001b44 <OD_get_u8>
 8002410:	4603      	mov	r3, r0
 8002412:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002416:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00e      	beq.n	800243c <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 800241e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2U;
 8002424:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002426:	f7ff fb6a 	bl	8001afe <OD_getIndex>
 800242a:	4603      	mov	r3, r0
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	f043 0202 	orr.w	r2, r3, #2
 8002432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002434:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002436:	f06f 030b 	mvn.w	r3, #11
 800243a:	e102      	b.n	8002642 <CO_TPDO_init+0x2c6>
    }
    if ((transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
 800243c:	7efb      	ldrb	r3, [r7, #27]
 800243e:	2bfd      	cmp	r3, #253	; 0xfd
 8002440:	d804      	bhi.n	800244c <CO_TPDO_init+0xd0>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 8002442:	7efb      	ldrb	r3, [r7, #27]
 8002444:	2bf0      	cmp	r3, #240	; 0xf0
 8002446:	d901      	bls.n	800244c <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8002448:	23fe      	movs	r3, #254	; 0xfe
 800244a:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 800244c:	7efa      	ldrb	r2, [r7, #27]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
    TPDO->sendRequest = true;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8002460:	f107 0214 	add.w	r2, r7, #20
 8002464:	2301      	movs	r3, #1
 8002466:	2101      	movs	r1, #1
 8002468:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800246a:	f7ff fb95 	bl	8001b98 <OD_get_u32>
 800246e:	4603      	mov	r3, r0
 8002470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002474:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00e      	beq.n	800249a <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 800247c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1U;
 8002482:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002484:	f7ff fb3b 	bl	8001afe <OD_getIndex>
 8002488:	4603      	mov	r3, r0
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002492:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002494:	f06f 030b 	mvn.w	r3, #11
 8002498:	e0d3      	b.n	8002642 <CO_TPDO_init+0x2c6>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	43db      	mvns	r3, r3
 800249e:	0fdb      	lsrs	r3, r3, #31
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ac:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 80024ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00d      	beq.n	80024d0 <CO_TPDO_init+0x154>
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	7b5b      	ldrb	r3, [r3, #13]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <CO_TPDO_init+0x146>
 80024bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <CO_TPDO_init+0x154>
        valid = false;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0U) {
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <CO_TPDO_init+0x154>
            erroneousMap = 1;
 80024cc:	2301      	movs	r3, #1
 80024ce:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00e      	beq.n	80024f4 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d001      	beq.n	80024e4 <CO_TPDO_init+0x168>
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	e000      	b.n	80024e6 <CO_TPDO_init+0x16a>
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80024ec:	221a      	movs	r2, #26
 80024ee:	2101      	movs	r1, #1
 80024f0:	f7fe f997 	bl	8000822 <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80024f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <CO_TPDO_init+0x182>
        CAN_ID = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 80024fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <CO_TPDO_init+0x19a>
 8002504:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002506:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002508:	f64f 7380 	movw	r3, #65408	; 0xff80
 800250c:	400b      	ands	r3, r1
 800250e:	429a      	cmp	r2, r3
 8002510:	d101      	bne.n	8002516 <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 8002512:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002514:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	7b1b      	ldrb	r3, [r3, #12]
                                         TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	f892 216c 	ldrb.w	r2, [r2, #364]	; 0x16c
    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 8002520:	2af0      	cmp	r2, #240	; 0xf0
 8002522:	bf94      	ite	ls
 8002524:	2201      	movls	r2, #1
 8002526:	2200      	movhi	r2, #0
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	4610      	mov	r0, r2
 800252c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800252e:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8002532:	9001      	str	r0, [sp, #4]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2300      	movs	r3, #0
 8002538:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800253a:	f004 f8bf 	bl	80066bc <CO_CANtxBufferInit>
 800253e:	4602      	mov	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    if (TPDO->CANtxBuff == NULL) {
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002550:	f04f 33ff 	mov.w	r3, #4294967295
 8002554:	e075      	b.n	8002642 <CO_TPDO_init+0x2c6>
    }

    PDO->valid = valid;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800255a:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    uint16_t inhibitTime = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	823b      	strh	r3, [r7, #16]
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8002564:	f107 0212 	add.w	r2, r7, #18
 8002568:	2301      	movs	r3, #1
 800256a:	2103      	movs	r1, #3
 800256c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800256e:	f7ff fafe 	bl	8001b6e <OD_get_u16>
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8002572:	f107 0210 	add.w	r2, r7, #16
 8002576:	2301      	movs	r3, #1
 8002578:	2105      	movs	r1, #5
 800257a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800257c:	f7ff faf7 	bl	8001b6e <OD_get_u16>
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100U;
 8002580:	8a7b      	ldrh	r3, [r7, #18]
 8002582:	461a      	mov	r2, r3
 8002584:	2364      	movs	r3, #100	; 0x64
 8002586:	fb03 f202 	mul.w	r2, r3, r2
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000U;
 8002590:	8a3b      	ldrh	r3, [r7, #16]
 8002592:	461a      	mov	r2, r3
 8002594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002598:	fb03 f202 	mul.w	r2, r3, r2
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
#endif

    /* Configure communication parameter - SYNC start value (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    TPDO->syncStartValue = 0;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
    (void)OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 80025b0:	2301      	movs	r3, #1
 80025b2:	2106      	movs	r1, #6
 80025b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025b6:	f7ff fac5 	bl	8001b44 <OD_get_u8>
    TPDO->SYNC = SYNC;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    TPDO->syncCounter = 255;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	22ff      	movs	r2, #255	; 0xff
 80025c6:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = false;
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	2200      	movs	r2, #0
 80025ce:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD = OD;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->CANdevIdx = CANdevTxIdx;
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80025e0:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80025e8:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    PDO->configuredCanId = CAN_ID;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80025f0:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    PDO->OD_communicationParam_ext.object = TPDO;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	4a13      	ldr	r2, [pc, #76]	; (800264c <CO_TPDO_init+0x2d0>)
 8002600:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <CO_TPDO_init+0x2d4>)
 8002608:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    PDO->OD_mappingParam_extension.object = TPDO;
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <CO_TPDO_init+0x2d8>)
 8002618:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	4a0e      	ldr	r2, [pc, #56]	; (8002658 <CO_TPDO_init+0x2dc>)
 8002620:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    (void)OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800262a:	4619      	mov	r1, r3
 800262c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800262e:	f7ff fa76 	bl	8001b1e <OD_extension_init>
    (void)OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002638:	4619      	mov	r1, r3
 800263a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800263c:	f7ff fa6f 	bl	8001b1e <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3730      	adds	r7, #48	; 0x30
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	0800203b 	.word	0x0800203b
 8002650:	080020d9 	.word	0x080020d9
 8002654:	0800147f 	.word	0x0800147f
 8002658:	08001f09 	.word	0x08001f09

0800265c <CO_TPDOsend>:
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t
CO_TPDOsend(CO_TPDO_t* TPDO) {
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b093      	sub	sp, #76	; 0x4c
 8002660:	af02      	add	r7, sp, #8
 8002662:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t* dataTPDO = &TPDO->CANtxBuff->data[0];
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800266e:	3305      	adds	r3, #5
 8002670:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t verifyLength = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	63bb      	str	r3, [r7, #56]	; 0x38

#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
                          || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO));
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <CO_TPDOsend+0x2e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8002686:	2bfd      	cmp	r3, #253	; 0xfd
 8002688:	d901      	bls.n	800268e <CO_TPDOsend+0x32>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <CO_TPDOsend+0x34>
 800268e:	2300      	movs	r3, #0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002692:	2300      	movs	r3, #0
 8002694:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002698:	e066      	b.n	8002768 <CO_TPDOsend+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 800269a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800269e:	015b      	lsls	r3, r3, #5
 80026a0:	3310      	adds	r3, #16
 80026a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a4:	4413      	add	r3, r2
 80026a6:	623b      	str	r3, [r7, #32]
        OD_stream_t* stream = &OD_IO->stream;
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	61fb      	str	r3, [r7, #28]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t)stream->dataOffset;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	76fb      	strb	r3, [r7, #27]

        /* additional safety check */
        verifyLength += (OD_size_t)mappedLength;
 80026b2:	7efb      	ldrb	r3, [r7, #27]
 80026b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026b6:	4413      	add	r3, r2
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
        if (verifyLength > CO_PDO_MAX_SIZE) {
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d85a      	bhi.n	8002776 <CO_TPDOsend+0x11a>
            break;
        }

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
        if (ODdataLength > CO_PDO_MAX_SIZE) {
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d901      	bls.n	80026d0 <CO_TPDOsend+0x74>
            ODdataLength = CO_PDO_MAX_SIZE;
 80026cc:	2308      	movs	r3, #8
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
        }
        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t* dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 80026d0:	7efb      	ldrb	r3, [r7, #27]
 80026d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d90a      	bls.n	80026ee <CO_TPDOsend+0x92>
            (void)memset(buf, 0, sizeof(buf));
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	2208      	movs	r2, #8
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f009 fa6d 	bl	800bbc0 <memset>
            dataTPDOCopy = buf;
 80026e6:	f107 030c 	add.w	r3, r7, #12
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ec:	e001      	b.n	80026f2 <CO_TPDOsend+0x96>
        } else {
            dataTPDOCopy = dataTPDO;
 80026ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read() and store mappedLength back to stream.dataOffset */
        stream->dataOffset = 0;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	2200      	movs	r2, #0
 80026f6:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	699c      	ldr	r4, [r3, #24]
 80026fc:	f107 0308 	add.w	r3, r7, #8
 8002700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002704:	69f8      	ldr	r0, [r7, #28]
 8002706:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8002708:	7efa      	ldrb	r2, [r7, #27]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	60da      	str	r2, [r3, #12]
            }
        }
#endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 800270e:	7efb      	ldrb	r3, [r7, #27]
 8002710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002712:	429a      	cmp	r2, r3
 8002714:	d906      	bls.n	8002724 <CO_TPDOsend+0xc8>
            (void)memcpy(dataTPDO, buf, mappedLength);
 8002716:	7efa      	ldrb	r2, [r7, #27]
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	4619      	mov	r1, r3
 800271e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002720:	f009 fad8 	bl	800bcd4 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
#if OD_FLAGS_PDO_SIZE > 0
        uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8002724:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	3244      	adds	r2, #68	; 0x44
 800272c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002730:	617b      	str	r3, [r7, #20]
        if ((flagPDObyte != NULL) && eventDriven) {
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00e      	beq.n	8002756 <CO_TPDOsend+0xfa>
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <CO_TPDOsend+0xfa>
            *flagPDObyte |= PDO->flagPDObitmask[i];
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002748:	440b      	add	r3, r1
 800274a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800274e:	4313      	orrs	r3, r2
 8002750:	b2da      	uxtb	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	701a      	strb	r2, [r3, #0]
        }
#endif

        dataTPDO += mappedLength;
 8002756:	7efb      	ldrb	r3, [r7, #27]
 8002758:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800275a:	4413      	add	r3, r2
 800275c:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800275e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002762:	3301      	adds	r3, #1
 8002764:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	7b5b      	ldrb	r3, [r3, #13]
 800276c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002770:	429a      	cmp	r2, r3
 8002772:	d392      	bcc.n	800269a <CO_TPDOsend+0x3e>
 8002774:	e000      	b.n	8002778 <CO_TPDOsend+0x11c>
            break;
 8002776:	bf00      	nop
        }
#endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	2b08      	cmp	r3, #8
 800277c:	d805      	bhi.n	800278a <CO_TPDOsend+0x12e>
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	7b1b      	ldrb	r3, [r3, #12]
 8002782:	461a      	mov	r2, r3
 8002784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002786:	4293      	cmp	r3, r2
 8002788:	d00e      	beq.n	80027a8 <CO_TPDOsend+0x14c>
        /* bug in software, should not happen */
        CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL, (0x200000 | verifyLength));
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 800279a:	222c      	movs	r2, #44	; 0x2c
 800279c:	2101      	movs	r1, #1
 800279e:	f7fe f840 	bl	8000822 <CO_error>
        return CO_ERROR_DATA_CORRUPT;
 80027a2:	f06f 030c 	mvn.w	r3, #12
 80027a6:	e019      	b.n	80027dc <CO_TPDOsend+0x180>
    }

    TPDO->sendRequest = false;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    TPDO->eventTimer = TPDO->eventTime_us;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80027d2:	4619      	mov	r1, r3
 80027d4:	4610      	mov	r0, r2
 80027d6:	f003 ffeb 	bl	80067b0 <CO_CANsend>
 80027da:	4603      	mov	r3, r0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3744      	adds	r7, #68	; 0x44
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd90      	pop	{r4, r7, pc}

080027e4 <CO_TPDO_process>:
void
CO_TPDO_process(CO_TPDO_t* TPDO,
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || defined CO_DOXYGEN
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)) != 0
    (void)timerNext_us;
#endif
    (void)syncWas;

    if (PDO->valid && NMTisOperational) {
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80dc 	beq.w	80029b8 <CO_TPDO_process+0x1d4>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80d8 	beq.w	80029b8 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || (OD_FLAGS_PDO_SIZE > 0)
        if ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d004      	beq.n	800281c <CO_TPDO_process+0x38>
            || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8002818:	2bfd      	cmp	r3, #253	; 0xfd
 800281a:	d946      	bls.n	80028aa <CO_TPDO_process+0xc6>
            /* event timer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            if (TPDO->eventTime_us != 0U) {
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002822:	2b00      	cmp	r3, #0
 8002824:	d018      	beq.n	8002858 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0U;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	429a      	cmp	r2, r3
 8002830:	d205      	bcs.n	800283e <CO_TPDO_process+0x5a>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	e000      	b.n	8002840 <CO_TPDO_process+0x5c>
 800283e:	2300      	movs	r3, #0
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                if (TPDO->eventTimer == 0U) {
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800284c:	2b00      	cmp	r3, #0
 800284e:	d103      	bne.n	8002858 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif
            }
#endif
            /* check for any OD_requestTPDO() */
#if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800285e:	2b00      	cmp	r3, #0
 8002860:	d123      	bne.n	80028aa <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002862:	2300      	movs	r3, #0
 8002864:	77fb      	strb	r3, [r7, #31]
 8002866:	e01b      	b.n	80028a0 <CO_TPDO_process+0xbc>
                    uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8002868:	7ffa      	ldrb	r2, [r7, #31]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	3244      	adds	r2, #68	; 0x44
 800286e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002872:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00f      	beq.n	800289a <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0U) {
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	7ffb      	ldrb	r3, [r7, #31]
 8002880:	69b9      	ldr	r1, [r7, #24]
 8002882:	440b      	add	r3, r1
 8002884:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002888:	4013      	ands	r3, r2
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d104      	bne.n	800289a <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
                            break;
 8002898:	e007      	b.n	80028aa <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800289a:	7ffb      	ldrb	r3, [r7, #31]
 800289c:	3301      	adds	r3, #1
 800289e:	77fb      	strb	r3, [r7, #31]
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	7b5b      	ldrb	r3, [r3, #13]
 80028a4:	7ffa      	ldrb	r2, [r7, #31]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d3de      	bcc.n	8002868 <CO_TPDO_process+0x84>
#endif
        }
#endif /* ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0) */

        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 80028b0:	2bfd      	cmp	r3, #253	; 0xfd
 80028b2:	d91d      	bls.n	80028f0 <CO_TPDO_process+0x10c>
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
                                                                          : 0U;
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d205      	bcs.n	80028cc <CO_TPDO_process+0xe8>
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
                                                                          : 0U;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	e000      	b.n	80028ce <CO_TPDO_process+0xea>
 80028cc:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184

            /* send TPDO */
            if (TPDO->sendRequest && (TPDO->inhibitTimer == 0U)) {
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d07d      	beq.n	80029da <CO_TPDO_process+0x1f6>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d178      	bne.n	80029da <CO_TPDO_process+0x1f6>
                (void)CO_TPDOsend(TPDO);
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f7ff feb7 	bl	800265c <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80028ee:	e074      	b.n	80029da <CO_TPDO_process+0x1f6>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        else if ((TPDO->SYNC != NULL) && syncWas) {
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d06f      	beq.n	80029da <CO_TPDO_process+0x1f6>
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d06c      	beq.n	80029da <CO_TPDO_process+0x1f6>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d108      	bne.n	800291c <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) {
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002910:	2b00      	cmp	r3, #0
 8002912:	d062      	beq.n	80029da <CO_TPDO_process+0x1f6>
                    (void)CO_TPDOsend(TPDO);
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f7ff fea1 	bl	800265c <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800291a:	e05e      	b.n	80029da <CO_TPDO_process+0x1f6>
                }
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255U) {
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8002922:	2bff      	cmp	r3, #255	; 0xff
 8002924:	d119      	bne.n	800295a <CO_TPDO_process+0x176>
                    if ((TPDO->SYNC->counterOverflowValue != 0U) && (TPDO->syncStartValue != 0U)) {
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800292c:	7c5b      	ldrb	r3, [r3, #17]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <CO_TPDO_process+0x162>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <CO_TPDO_process+0x162>
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	22fe      	movs	r2, #254	; 0xfe
 8002940:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8002944:	e009      	b.n	800295a <CO_TPDO_process+0x176>
                    } else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = (TPDO->transmissionType / 2U) + 1U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	3301      	adds	r3, #1
 8002952:	b2da      	uxtb	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC with matched syncStartValue. */
                if (TPDO->syncCounter == 254U) {
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8002960:	2bfe      	cmp	r3, #254	; 0xfe
 8002962:	d112      	bne.n	800298a <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800296a:	7c9a      	ldrb	r2, [r3, #18]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8002972:	429a      	cmp	r2, r3
 8002974:	d131      	bne.n	80029da <CO_TPDO_process+0x1f6>
                        TPDO->syncCounter = TPDO->transmissionType;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                        (void)CO_TPDOsend(TPDO);
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f7ff fe6a 	bl	800265c <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8002988:	e027      	b.n	80029da <CO_TPDO_process+0x1f6>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0U) {
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8002990:	3b01      	subs	r3, #1
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d11a      	bne.n	80029da <CO_TPDO_process+0x1f6>
                    TPDO->syncCounter = TPDO->transmissionType;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                    (void)CO_TPDOsend(TPDO);
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff fe53 	bl	800265c <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80029b6:	e010      	b.n	80029da <CO_TPDO_process+0x1f6>
        }
#endif

    } else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        TPDO->inhibitTimer = 0;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        TPDO->eventTimer = 0;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        TPDO->syncCounter = 255;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	22ff      	movs	r2, #255	; 0xff
 80029d4:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#endif
    }
}
 80029d8:	e000      	b.n	80029dc <CO_TPDO_process+0x1f8>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80029da:	bf00      	nop
}
 80029dc:	bf00      	nop
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <CO_getUint8>:
CO_getUint8(const void* buf) {
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 80029f0:	73fb      	strb	r3, [r7, #15]
    return value;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <CO_getUint32>:
CO_getUint32(const void* buf) {
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8002a0a:	60fb      	str	r3, [r7, #12]
    return value;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <OD_getIndex+0x14>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	e000      	b.n	8002a2e <OD_getIndex+0x16>
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8002a48:	2305      	movs	r3, #5
 8002a4a:	e003      	b.n	8002a54 <OD_extension_init+0x1c>
    entry->extension = extension;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af02      	add	r7, sp, #8
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002a6e:	7af9      	ldrb	r1, [r7, #11]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2301      	movs	r3, #1
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7fe ff4d 	bl	8001918 <OD_get_value>
 8002a7e:	4603      	mov	r3, r0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	460b      	mov	r3, r1
 8002a96:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002a98:	7af9      	ldrb	r1, [r7, #11]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f7fe ff38 	bl	8001918 <OD_get_value>
 8002aa8:	4603      	mov	r3, r0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <OD_set_u32>:
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t
OD_set_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t val, bool_t odOrig) {
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af02      	add	r7, sp, #8
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8002ac2:	1d3a      	adds	r2, r7, #4
 8002ac4:	7af9      	ldrb	r1, [r7, #11]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2304      	movs	r3, #4
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7fe ff60 	bl	8001992 <OD_set_value>
 8002ad2:	4603      	mov	r3, r0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDO_receive(void* object, void* msg) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t* SDO = (CO_SDOserver_t*)object;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	791b      	ldrb	r3, [r3, #4]
 8002aee:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	3305      	adds	r3, #5
 8002af4:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8U) {
 8002af6:	7cfb      	ldrb	r3, [r7, #19]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d115      	bne.n	8002b28 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80U) {
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b80      	cmp	r3, #128	; 0x80
 8002b02:	d103      	bne.n	8002b0c <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2200      	movs	r2, #0
 8002b08:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8002b0a:	e00d      	b.n	8002b28 <CO_SDO_receive+0x4c>
        } else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <CO_SDO_receive+0x4c>
            (void)memcpy(SDO->CANrxData, data, DLC);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3340      	adds	r3, #64	; 0x40
 8002b18:	7cfa      	ldrb	r2, [r7, #19]
 8002b1a:	68f9      	ldr	r1, [r7, #12]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f009 f8d9 	bl	800bcd4 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2201      	movs	r2, #1
 8002b26:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b28:	bf00      	nop
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <CO_SDOserver_init_canRxTx>:

/* helper for configuring CANrx and CANtx */
static CO_ReturnError_t
CO_SDOserver_init_canRxTx(CO_SDOserver_t* SDO, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANdevTxIdx,
                          uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af04      	add	r7, sp, #16
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	460b      	mov	r3, r1
 8002b40:	80fb      	strh	r3, [r7, #6]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80bb      	strh	r3, [r7, #4]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    /* proceed only, if parameters change */
    if ((COB_IDClientToServer == SDO->COB_IDClientToServer) && (COB_IDServerToClient == SDO->COB_IDServerToClient)) {
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4a:	6a3a      	ldr	r2, [r7, #32]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d106      	bne.n	8002b5e <CO_SDOserver_init_canRxTx+0x2e>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d101      	bne.n	8002b5e <CO_SDOserver_init_canRxTx+0x2e>
        return CO_ERROR_NO;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e04e      	b.n	8002bfc <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a3a      	ldr	r2, [r7, #32]
 8002b62:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)COB_IDClientToServer : 0U;
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	db02      	blt.n	8002b76 <CO_SDOserver_init_canRxTx+0x46>
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	e000      	b.n	8002b78 <CO_SDOserver_init_canRxTx+0x48>
 8002b76:	2300      	movs	r3, #0
 8002b78:	82fb      	strh	r3, [r7, #22]
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)COB_IDServerToClient : 0U;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	db02      	blt.n	8002b86 <CO_SDOserver_init_canRxTx+0x56>
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	e000      	b.n	8002b88 <CO_SDOserver_init_canRxTx+0x58>
 8002b86:	2300      	movs	r3, #0
 8002b88:	82bb      	strh	r3, [r7, #20]
    if ((idC2S != 0U) && (idS2C != 0U)) {
 8002b8a:	8afb      	ldrh	r3, [r7, #22]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d006      	beq.n	8002b9e <CO_SDOserver_init_canRxTx+0x6e>
 8002b90:	8abb      	ldrh	r3, [r7, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	611a      	str	r2, [r3, #16]
 8002b9c:	e006      	b.n	8002bac <CO_SDOserver_init_canRxTx+0x7c>
    } else {
        idC2S = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, idC2S, 0x7FF, false, (void*)SDO, CO_SDO_receive);
 8002bac:	8afa      	ldrh	r2, [r7, #22]
 8002bae:	88f9      	ldrh	r1, [r7, #6]
 8002bb0:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <CO_SDOserver_init_canRxTx+0xd4>)
 8002bb2:	9302      	str	r3, [sp, #8]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002bc0:	68b8      	ldr	r0, [r7, #8]
 8002bc2:	f003 fd1f 	bl	8006604 <CO_CANrxBufferInit>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	74fb      	strb	r3, [r7, #19]

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(SDO->CANdevTx, CANdevTxIdx, idS2C, false, 8, false);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	8aba      	ldrh	r2, [r7, #20]
 8002bd0:	88b9      	ldrh	r1, [r7, #4]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f003 fd6e 	bl	80066bc <CO_CANtxBufferInit>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]

    if (SDO->CANtxBuff == NULL) {
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d104      	bne.n	8002bf8 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8002bee:	23ff      	movs	r3, #255	; 0xff
 8002bf0:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8002bf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	08002add 	.word	0x08002add

08002c08 <OD_write_1201_additional>:
 * Custom function for writing OD object _SDO server parameter_, additional channels
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1201_additional(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b08f      	sub	sp, #60	; 0x3c
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <OD_write_1201_additional+0x20>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <OD_write_1201_additional+0x20>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8002c28:	2309      	movs	r3, #9
 8002c2a:	e0f9      	b.n	8002e20 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t* SDO = (CO_SDOserver_t*)stream->object;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	7d1b      	ldrb	r3, [r3, #20]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	f200 80e8 	bhi.w	8002e0c <OD_write_1201_additional+0x204>
 8002c3c:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <OD_write_1201_additional+0x3c>)
 8002c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c42:	bf00      	nop
 8002c44:	08002c55 	.word	0x08002c55
 8002c48:	08002c59 	.word	0x08002c59
 8002c4c:	08002d1d 	.word	0x08002d1d
 8002c50:	08002de3 	.word	0x08002de3
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 8002c54:	2304      	movs	r3, #4
 8002c56:	e0e3      	b.n	8002e20 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8002c58:	68b8      	ldr	r0, [r7, #8]
 8002c5a:	f7ff fed0 	bl	80029fe <CO_getUint32>
 8002c5e:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c68:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FFU);
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c74:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	0fdb      	lsrs	r3, r3, #31
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || ((valid && SDO->valid) && (CAN_ID != CAN_ID_cur))
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4b69      	ldr	r3, [pc, #420]	; (8002e28 <OD_write_1201_additional+0x220>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d134      	bne.n	8002cf4 <OD_write_1201_additional+0xec>
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <OD_write_1201_additional+0x98>
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <OD_write_1201_additional+0x98>
 8002c98:	8afa      	ldrh	r2, [r7, #22]
 8002c9a:	8abb      	ldrh	r3, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d129      	bne.n	8002cf4 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d028      	beq.n	8002cf8 <OD_write_1201_additional+0xf0>
 8002ca6:	8afb      	ldrh	r3, [r7, #22]
 8002ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8002caa:	d923      	bls.n	8002cf4 <OD_write_1201_additional+0xec>
 8002cac:	8afb      	ldrh	r3, [r7, #22]
 8002cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb2:	d903      	bls.n	8002cbc <OD_write_1201_additional+0xb4>
 8002cb4:	8afb      	ldrh	r3, [r7, #22]
 8002cb6:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002cba:	d91b      	bls.n	8002cf4 <OD_write_1201_additional+0xec>
 8002cbc:	8afb      	ldrh	r3, [r7, #22]
 8002cbe:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002cc2:	d903      	bls.n	8002ccc <OD_write_1201_additional+0xc4>
 8002cc4:	8afb      	ldrh	r3, [r7, #22]
 8002cc6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002cca:	d313      	bcc.n	8002cf4 <OD_write_1201_additional+0xec>
 8002ccc:	8afb      	ldrh	r3, [r7, #22]
 8002cce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002cd2:	d903      	bls.n	8002cdc <OD_write_1201_additional+0xd4>
 8002cd4:	8afb      	ldrh	r3, [r7, #22]
 8002cd6:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002cda:	d30b      	bcc.n	8002cf4 <OD_write_1201_additional+0xec>
 8002cdc:	8afb      	ldrh	r3, [r7, #22]
 8002cde:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002ce2:	d303      	bcc.n	8002cec <OD_write_1201_additional+0xe4>
 8002ce4:	8afb      	ldrh	r3, [r7, #22]
 8002ce6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cea:	d303      	bcc.n	8002cf4 <OD_write_1201_additional+0xec>
 8002cec:	8afb      	ldrh	r3, [r7, #22]
 8002cee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cf2:	d901      	bls.n	8002cf8 <OD_write_1201_additional+0xf0>
                return ODR_INVALID_VALUE;
 8002cf4:	230f      	movs	r3, #15
 8002cf6:	e093      	b.n	8002e20 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx, COB_ID,
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	f8b3 004e 	ldrh.w	r0, [r3, #78]	; 0x4e
 8002d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	4603      	mov	r3, r0
 8002d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d16:	f7ff ff0b 	bl	8002b30 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDServerToClient);
            break;
 8002d1a:	e07a      	b.n	8002e12 <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8002d1c:	68b8      	ldr	r0, [r7, #8]
 8002d1e:	f7ff fe6e 	bl	80029fe <CO_getUint32>
 8002d22:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d2c:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FFU);
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d38:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	0fdb      	lsrs	r3, r3, #31
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (SDO->valid && (CAN_ID != CAN_ID_cur)))
 8002d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d46:	4b38      	ldr	r3, [pc, #224]	; (8002e28 <OD_write_1201_additional+0x220>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d134      	bne.n	8002db8 <OD_write_1201_additional+0x1b0>
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <OD_write_1201_additional+0x15c>
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <OD_write_1201_additional+0x15c>
 8002d5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002d5e:	8c3b      	ldrh	r3, [r7, #32]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d129      	bne.n	8002db8 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d028      	beq.n	8002dbc <OD_write_1201_additional+0x1b4>
 8002d6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d6e:	d923      	bls.n	8002db8 <OD_write_1201_additional+0x1b0>
 8002d70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d76:	d903      	bls.n	8002d80 <OD_write_1201_additional+0x178>
 8002d78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d7a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002d7e:	d91b      	bls.n	8002db8 <OD_write_1201_additional+0x1b0>
 8002d80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d82:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002d86:	d903      	bls.n	8002d90 <OD_write_1201_additional+0x188>
 8002d88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d8a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d8e:	d313      	bcc.n	8002db8 <OD_write_1201_additional+0x1b0>
 8002d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d92:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d96:	d903      	bls.n	8002da0 <OD_write_1201_additional+0x198>
 8002d98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d9a:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002d9e:	d30b      	bcc.n	8002db8 <OD_write_1201_additional+0x1b0>
 8002da0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002da2:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002da6:	d303      	bcc.n	8002db0 <OD_write_1201_additional+0x1a8>
 8002da8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002daa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dae:	d303      	bcc.n	8002db8 <OD_write_1201_additional+0x1b0>
 8002db0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002db2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002db6:	d901      	bls.n	8002dbc <OD_write_1201_additional+0x1b4>
                return ODR_INVALID_VALUE;
 8002db8:	230f      	movs	r3, #15
 8002dba:	e031      	b.n	8002e20 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx,
 8002dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbe:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	f8b3 404e 	ldrh.w	r4, [r3, #78]	; 0x4e
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd2:	9201      	str	r2, [sp, #4]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	4623      	mov	r3, r4
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ddc:	f7ff fea8 	bl	8002b30 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDClientToServer, COB_ID);
            break;
 8002de0:	e017      	b.n	8002e12 <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1U) {
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d001      	beq.n	8002dec <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8002de8:	230b      	movs	r3, #11
 8002dea:	e019      	b.n	8002e20 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8002dec:	68b8      	ldr	r0, [r7, #8]
 8002dee:	f7ff fdf9 	bl	80029e4 <CO_getUint8>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8002df8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <OD_write_1201_additional+0x200>
 8002e00:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	da03      	bge.n	8002e10 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8002e08:	230f      	movs	r3, #15
 8002e0a:	e009      	b.n	8002e20 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default: return ODR_SUB_NOT_EXIST; break;
 8002e0c:	230e      	movs	r3, #14
 8002e0e:	e007      	b.n	8002e20 <OD_write_1201_additional+0x218>
            break;
 8002e10:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7fe fb88 	bl	800152e <OD_writeOriginal>
 8002e1e:	4603      	mov	r3, r0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3734      	adds	r7, #52	; 0x34
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd90      	pop	{r4, r7, pc}
 8002e28:	3ffff800 	.word	0x3ffff800

08002e2c <CO_SDOserver_init>:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOserver_init(CO_SDOserver_t* SDO, OD_t* OD, OD_entry_t* OD_1200_SDOsrvPar, uint8_t nodeId,
                  uint16_t SDOtimeoutTime_ms, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx,
                  uint16_t CANdevTxIdx, uint32_t* errInfo) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	; 0x30
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if ((SDO == NULL) || (OD == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <CO_SDOserver_init+0x26>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <CO_SDOserver_init+0x26>
 8002e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <CO_SDOserver_init+0x26>
 8002e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	e0f5      	b.n	8003044 <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	731a      	strb	r2, [r3, #12]
#if (((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED)) != 0
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 8002e64:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e6a:	fb03 f202 	mul.w	r2, r3, r2
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	679a      	str	r2, [r3, #120]	; 0x78
#endif
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) != 0
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d117      	bne.n	8002eae <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if ((nodeId < 1U) || (nodeId > 127U)) {
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <CO_SDOserver_init+0x60>
 8002e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	da02      	bge.n	8002e92 <CO_SDOserver_init+0x66>
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e90:	e0d8      	b.n	8003044 <CO_SDOserver_init+0x218>
        }

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002e9a:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8002ea4:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	611a      	str	r2, [r3, #16]
 8002eac:	e0a4      	b.n	8002ff8 <CO_SDOserver_init+0x1cc>
    } else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff fdb2 	bl	8002a18 <OD_getIndex>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == (uint16_t)OD_H1200_SDO_SERVER_1_PARAM) {
 8002eb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002eba:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8002ebe:	d123      	bne.n	8002f08 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <CO_SDOserver_init+0xa2>
 8002ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da02      	bge.n	8002ed4 <CO_SDOserver_init+0xa8>
                return CO_ERROR_ILLEGAL_ARGUMENT;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	e0b7      	b.n	8003044 <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002edc:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8002ee6:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	611a      	str	r2, [r3, #16]

            (void)OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8002eee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff fddc 	bl	8002ab2 <OD_set_u32>
            (void)OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8002efa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002efc:	2301      	movs	r3, #1
 8002efe:	2102      	movs	r1, #2
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff fdd6 	bl	8002ab2 <OD_set_u32>
 8002f06:	e077      	b.n	8002ff8 <CO_SDOserver_init+0x1cc>
        } else if ((OD_SDOsrvParIdx > (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
 8002f08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f0a:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8002f0e:	d96f      	bls.n	8002ff0 <CO_SDOserver_init+0x1c4>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8002f10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f12:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8002f16:	d26b      	bcs.n	8002ff0 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8002f18:	f107 021d 	add.w	r2, r7, #29
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	2100      	movs	r1, #0
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff fd9c 	bl	8002a5e <OD_get_u8>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1, &COB_IDClientToServer32, true);
 8002f2c:	f107 0218 	add.w	r2, r7, #24
 8002f30:	2301      	movs	r3, #1
 8002f32:	2101      	movs	r1, #1
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff fda7 	bl	8002a88 <OD_get_u32>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f887 3020 	strb.w	r3, [r7, #32]
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2, &COB_IDServerToClient32, true);
 8002f40:	f107 0214 	add.w	r2, r7, #20
 8002f44:	2301      	movs	r3, #1
 8002f46:	2102      	movs	r1, #2
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff fd9d 	bl	8002a88 <OD_get_u32>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	77fb      	strb	r3, [r7, #31]

            if ((odRet0 != ODR_OK) || ((maxSubIndex != 2U) && (maxSubIndex != 3U)) || (odRet1 != ODR_OK)
 8002f52:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10d      	bne.n	8002f76 <CO_SDOserver_init+0x14a>
 8002f5a:	7f7b      	ldrb	r3, [r7, #29]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d002      	beq.n	8002f66 <CO_SDOserver_init+0x13a>
 8002f60:	7f7b      	ldrb	r3, [r7, #29]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d107      	bne.n	8002f76 <CO_SDOserver_init+0x14a>
 8002f66:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d103      	bne.n	8002f76 <CO_SDOserver_init+0x14a>
                || (odRet2 != ODR_OK)) {
 8002f6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <CO_SDOserver_init+0x15c>
                if (errInfo != NULL) {
 8002f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <CO_SDOserver_init+0x156>
                    *errInfo = OD_SDOsrvParIdx;
 8002f7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f80:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 8002f82:	f06f 030b 	mvn.w	r3, #11
 8002f86:	e05d      	b.n	8003044 <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db05      	blt.n	8002f9a <CO_SDOserver_init+0x16e>
                                       ? (uint16_t)(COB_IDClientToServer32 & 0x7FFU)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8002f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	e000      	b.n	8002f9c <CO_SDOserver_init+0x170>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	84fb      	strh	r3, [r7, #38]	; 0x26
                                       : 0U;
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	db05      	blt.n	8002fb0 <CO_SDOserver_init+0x184>
                                       ? (uint16_t)(COB_IDServerToClient32 & 0x7FFU)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8002fa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	e000      	b.n	8002fb2 <CO_SDOserver_init+0x186>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	84bb      	strh	r3, [r7, #36]	; 0x24
                                       : 0U;

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
            SDO->OD_1200_extension.object = SDO;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a23      	ldr	r2, [pc, #140]	; (800304c <CO_SDOserver_init+0x220>)
 8002fbe:	65da      	str	r2, [r3, #92]	; 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a23      	ldr	r2, [pc, #140]	; (8003050 <CO_SDOserver_init+0x224>)
 8002fc4:	661a      	str	r2, [r3, #96]	; 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar, &SDO->OD_1200_extension);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3358      	adds	r3, #88	; 0x58
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff fd33 	bl	8002a38 <OD_extension_init>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	77bb      	strb	r3, [r7, #30]
            if (odRetE != ODR_OK) {
 8002fd6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) {
 8002fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <CO_SDOserver_init+0x1be>
                    *errInfo = OD_SDOsrvParIdx;
 8002fe4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe8:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 8002fea:	f06f 030b 	mvn.w	r3, #11
 8002fee:	e029      	b.n	8003044 <CO_SDOserver_init+0x218>
            }
#endif
        } else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff4:	e026      	b.n	8003044 <CO_SDOserver_init+0x218>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8002ff6:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO->CANdevRx = CANdevRx;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003002:	649a      	str	r2, [r3, #72]	; 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003008:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    SDO->CANdevTxIdx = CANdevTxIdx;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003012:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = 0;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003026:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO, CANdevRx, CANdevRxIdx, CANdevTxIdx, CanId_ClientToServer,
 8003028:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800302a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800302c:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8003030:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8003032:	9201      	str	r2, [sp, #4]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	4603      	mov	r3, r0
 8003038:	460a      	mov	r2, r1
 800303a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff fd77 	bl	8002b30 <CO_SDOserver_init_canRxTx>
 8003042:	4603      	mov	r3, r0
                                     CanId_ServerToClient);
}
 8003044:	4618      	mov	r0, r3
 8003046:	3728      	adds	r7, #40	; 0x28
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	0800147f 	.word	0x0800147f
 8003050:	08002c09 	.word	0x08002c09

08003054 <validateAndWriteToOD>:
 * @param crcOperation 0=none, 1=calculate, 2=calculate and compare
 * @parma crcClient crc checksum to campare with
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
validateAndWriteToOD(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, uint8_t crcOperation, uint16_t crcClient) {
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b08b      	sub	sp, #44	; 0x2c
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	4611      	mov	r1, r2
 8003060:	461a      	mov	r2, r3
 8003062:	460b      	mov	r3, r1
 8003064:	71fb      	strb	r3, [r7, #7]
 8003066:	4613      	mov	r3, r2
 8003068:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003070:	627b      	str	r3, [r7, #36]	; 0x24

    if (SDO->finished) {
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8082 	beq.w	8003180 <validateAndWriteToOD+0x12c>
        /* Verify if size of data downloaded matches size indicated. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran != SDO->sizeInd)) {
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003080:	2b00      	cmp	r3, #0
 8003082:	d015      	beq.n	80030b0 <validateAndWriteToOD+0x5c>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800308c:	429a      	cmp	r2, r3
 800308e:	d00f      	beq.n	80030b0 <validateAndWriteToOD+0x5c>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003098:	429a      	cmp	r2, r3
 800309a:	d901      	bls.n	80030a0 <validateAndWriteToOD+0x4c>
 800309c:	4a73      	ldr	r2, [pc, #460]	; (800326c <validateAndWriteToOD+0x218>)
 800309e:	e000      	b.n	80030a2 <validateAndWriteToOD+0x4e>
 80030a0:	4a73      	ldr	r2, [pc, #460]	; (8003270 <validateAndWriteToOD+0x21c>)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	751a      	strb	r2, [r3, #20]
            return false;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e0d8      	b.n	8003262 <validateAndWriteToOD+0x20e>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be shorter than size of the
         * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
         * also OD data size, (temporary, send information about EOF into OD_IO.write) */
        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030bc:	b25b      	sxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	da42      	bge.n	8003148 <validateAndWriteToOD+0xf4>
            && ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd))
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <validateAndWriteToOD+0x7e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030cc:	6a3a      	ldr	r2, [r7, #32]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d93a      	bls.n	8003148 <validateAndWriteToOD+0xf4>
            && ((SDO->bufOffsetWr + 2U) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE)) {
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030d8:	3302      	adds	r3, #2
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d834      	bhi.n	8003148 <validateAndWriteToOD+0xf4>
            SDO->buf[SDO->bufOffsetWr] = 0;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            SDO->bufOffsetWr++;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran++;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	66da      	str	r2, [r3, #108]	; 0x6c
            if ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd)) {
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <validateAndWriteToOD+0xc2>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	429a      	cmp	r2, r3
 8003114:	d913      	bls.n	800313e <validateAndWriteToOD+0xea>
                SDO->buf[SDO->bufOffsetWr] = 0;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                SDO->bufOffsetWr++;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	66da      	str	r2, [r3, #108]	; 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	621a      	str	r2, [r3, #32]
 8003146:	e02d      	b.n	80031a4 <validateAndWriteToOD+0x150>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check. */
        else if (sizeInOd == 0U) {
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d104      	bne.n	8003158 <validateAndWriteToOD+0x104>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	621a      	str	r2, [r3, #32]
 8003156:	e025      	b.n	80031a4 <validateAndWriteToOD+0x150>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	429a      	cmp	r2, r3
 8003160:	d020      	beq.n	80031a4 <validateAndWriteToOD+0x150>
            *abortCode = (SDO->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003166:	6a3a      	ldr	r2, [r7, #32]
 8003168:	429a      	cmp	r2, r3
 800316a:	d201      	bcs.n	8003170 <validateAndWriteToOD+0x11c>
 800316c:	4a3f      	ldr	r2, [pc, #252]	; (800326c <validateAndWriteToOD+0x218>)
 800316e:	e000      	b.n	8003172 <validateAndWriteToOD+0x11e>
 8003170:	4a3f      	ldr	r2, [pc, #252]	; (8003270 <validateAndWriteToOD+0x21c>)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	751a      	strb	r2, [r3, #20]
            return false;
 800317c:	2300      	movs	r3, #0
 800317e:	e070      	b.n	8003262 <validateAndWriteToOD+0x20e>
        } else { /* MISRA C 2004 14.10 */
        }
    } else {
        /* Verify if size of data downloaded is not too large. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran > SDO->sizeInd)) {
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00d      	beq.n	80031a4 <validateAndWriteToOD+0x150>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003190:	429a      	cmp	r2, r3
 8003192:	d907      	bls.n	80031a4 <validateAndWriteToOD+0x150>
            *abortCode = CO_SDO_AB_DATA_LONG;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4a35      	ldr	r2, [pc, #212]	; (800326c <validateAndWriteToOD+0x218>)
 8003198:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	751a      	strb	r2, [r3, #20]
            return false;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e05e      	b.n	8003262 <validateAndWriteToOD+0x20e>
    (void)crcOperation;
    (void)crcClient;
    (void)bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ac:	f3ef 8210 	mrs	r2, PRIMASK
 80031b0:	617a      	str	r2, [r7, #20]
  return(result);
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80031b6:	b672      	cpsid	i
}
 80031b8:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf, SDO->bufOffsetWr, &countWritten);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f103 0018 	add.w	r0, r3, #24
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80031d0:	f107 0310 	add.w	r3, r7, #16
 80031d4:	47a0      	blx	r4
 80031d6:	4603      	mov	r3, r0
 80031d8:	77fb      	strb	r3, [r7, #31]
    CO_UNLOCK_OD(SDO->CANdevTx);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f383 8810 	msr	PRIMASK, r3
}
 80031e8:	bf00      	nop

    SDO->bufOffsetWr = 0;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* verify write error value */
    if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 80031f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d011      	beq.n	800321e <validateAndWriteToOD+0x1ca>
 80031fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003202:	d00c      	beq.n	800321e <validateAndWriteToOD+0x1ca>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003204:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe fb69 	bl	80018e0 <OD_getSDOabCode>
 800320e:	4602      	mov	r2, r0
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	751a      	strb	r2, [r3, #20]
        return false;
 800321a:	2300      	movs	r3, #0
 800321c:	e021      	b.n	8003262 <validateAndWriteToOD+0x20e>
    } else if (SDO->finished && (odRet == ODR_PARTIAL)) {
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00c      	beq.n	8003240 <validateAndWriteToOD+0x1ec>
 8003226:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322e:	d107      	bne.n	8003240 <validateAndWriteToOD+0x1ec>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4a0f      	ldr	r2, [pc, #60]	; (8003270 <validateAndWriteToOD+0x21c>)
 8003234:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	751a      	strb	r2, [r3, #20]
        return false;
 800323c:	2300      	movs	r3, #0
 800323e:	e010      	b.n	8003262 <validateAndWriteToOD+0x20e>
    } else if (!SDO->finished && (odRet == ODR_OK)) {
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10b      	bne.n	8003260 <validateAndWriteToOD+0x20c>
 8003248:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d107      	bne.n	8003260 <validateAndWriteToOD+0x20c>
        /* OD variable was written completely, but SDO download still has data */
        *abortCode = CO_SDO_AB_DATA_LONG;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4a06      	ldr	r2, [pc, #24]	; (800326c <validateAndWriteToOD+0x218>)
 8003254:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	751a      	strb	r2, [r3, #20]
        return false;
 800325c:	2300      	movs	r3, #0
 800325e:	e000      	b.n	8003262 <validateAndWriteToOD+0x20e>
    } else { /* MISRA C 2004 14.10 */
    }

    return true;
 8003260:	2301      	movs	r3, #1
}
 8003262:	4618      	mov	r0, r3
 8003264:	372c      	adds	r7, #44	; 0x2c
 8003266:	46bd      	mov	sp, r7
 8003268:	bd90      	pop	{r4, r7, pc}
 800326a:	bf00      	nop
 800326c:	06070012 	.word	0x06070012
 8003270:	06070013 	.word	0x06070013

08003274 <readFromOd>:
 * @parma countMinimum if data size in buffer is less than countMinimum, then buffer is refilled from OD variable
 * @param calculateCrc if true, crc is calculated
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
readFromOd(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, OD_size_t countMinimum, bool_t calculateCrc) {
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b08d      	sub	sp, #52	; 0x34
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) == 0
    (void)calculateCrc; /* may be unused */
#endif
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	627b      	str	r3, [r7, #36]	; 0x24

    if (!SDO->finished && (countRemain < countMinimum)) {
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 80ab 	bne.w	80033f2 <readFromOd+0x17e>
 800329c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	f080 80a6 	bcs.w	80033f2 <readFromOd+0x17e>
        /* first move remaining data to the start of the buffer */
        (void)memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032b8:	4413      	add	r3, r2
 80032ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032bc:	4619      	mov	r1, r3
 80032be:	f008 fc65 	bl	800bb8c <memmove>
        SDO->bufOffsetRd = 0;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        SDO->bufOffsetWr = countRemain;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	f1c3 0320 	rsb	r3, r3, #32
 80032d8:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]

        CO_LOCK_OD(SDO->CANdevTx);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e2:	f3ef 8210 	mrs	r2, PRIMASK
 80032e6:	617a      	str	r2, [r7, #20]
  return(result);
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80032ec:	b672      	cpsid	i
}
 80032ee:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, &SDO->buf[countRemain], countRdRequest, &countRd);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f103 0018 	add.w	r0, r3, #24
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	3380      	adds	r3, #128	; 0x80
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	18d1      	adds	r1, r2, r3
 8003302:	f107 0310 	add.w	r3, r7, #16
 8003306:	6a3a      	ldr	r2, [r7, #32]
 8003308:	47a0      	blx	r4
 800330a:	4603      	mov	r3, r0
 800330c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        CO_UNLOCK_OD(SDO->CANdevTx);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003316:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f383 8810 	msr	PRIMASK, r3
}
 800331e:	bf00      	nop

        if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8003320:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003324:	2b00      	cmp	r3, #0
 8003326:	d011      	beq.n	800334c <readFromOd+0xd8>
 8003328:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d00c      	beq.n	800334c <readFromOd+0xd8>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003332:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fad2 	bl	80018e0 <OD_getSDOabCode>
 800333c:	4602      	mov	r2, r0
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	751a      	strb	r2, [r3, #20]
            return false;
 8003348:	2300      	movs	r3, #0
 800334a:	e053      	b.n	80033f4 <readFromOd+0x180>
        }

        /* if data is string, send only data up to null termination */
        OD_size_t lastRd = countRd + countRemain;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003350:	4413      	add	r3, r2
 8003352:	61fb      	str	r3, [r7, #28]
        if ((countRd > 0U) && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d027      	beq.n	80033aa <readFromOd+0x136>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003360:	b25b      	sxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	da21      	bge.n	80033aa <readFromOd+0x136>
            SDO->buf[lastRd] = 0; /* (SDO->buf is one byte larger) */
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	4413      	add	r3, r2
 800336c:	3380      	adds	r3, #128	; 0x80
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char*)&SDO->buf[countRemain]);
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	3380      	adds	r3, #128	; 0x80
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4413      	add	r3, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f7fc fee6 	bl	800014c <strlen>
 8003380:	62b8      	str	r0, [r7, #40]	; 0x28
            if (countStr == 0U) {
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <readFromOd+0x118>
                countStr = 1;
 8003388:	2301      	movs	r3, #1
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
            } /* zero length is not allowed */
            if (countStr < countRd) {
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003390:	429a      	cmp	r2, r3
 8003392:	d20a      	bcs.n	80033aa <readFromOd+0x136>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8003394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003396:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	441a      	add	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	441a      	add	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        if ((SDO->bufOffsetWr == 0U) || (odRet == ODR_PARTIAL)) {
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <readFromOd+0x156>
 80033c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d110      	bne.n	80033ec <readFromOd+0x178>
            SDO->finished = false;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	675a      	str	r2, [r3, #116]	; 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d90a      	bls.n	80033f2 <readFromOd+0x17e>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4a07      	ldr	r2, [pc, #28]	; (80033fc <readFromOd+0x188>)
 80033e0:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	751a      	strb	r2, [r3, #20]
                return false;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e003      	b.n	80033f4 <readFromOd+0x180>
            }
        } else {
            SDO->finished = true;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	675a      	str	r2, [r3, #116]	; 0x74
        if (calculateCrc && SDO->block_crcEnabled) {
            SDO->block_crc = crc16_ccitt(&SDO->buf[countRemain], countRd, SDO->block_crc);
        }
#endif
    }
    return true;
 80033f2:	2301      	movs	r3, #1
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3734      	adds	r7, #52	; 0x34
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	06040047 	.word	0x06040047

08003400 <CO_SDOserver_process>:
#endif

CO_SDO_return_t
CO_SDOserver_process(CO_SDOserver_t* SDO, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                     uint32_t* timerNext_us) {
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b09b      	sub	sp, #108	; 0x6c
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d103      	bne.n	800341c <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8003414:	f06f 0301 	mvn.w	r3, #1
 8003418:	f000 bd00 	b.w	8003e1c <CO_SDOserver_process+0xa1c>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 800341c:	2301      	movs	r3, #1
 800341e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8003422:	2300      	movs	r3, #0
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	2b00      	cmp	r3, #0
 800342c:	bf14      	ite	ne
 800342e:	2301      	movne	r3, #1
 8003430:	2300      	moveq	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	657b      	str	r3, [r7, #84]	; 0x54

    if ((SDO->state == CO_SDO_ST_IDLE) && SDO->valid && !isNew) {
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	7d1b      	ldrb	r3, [r3, #20]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <CO_SDOserver_process+0x56>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d006      	beq.n	8003456 <CO_SDOserver_process+0x56>
 8003448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344a:	2b00      	cmp	r3, #0
 800344c:	d103      	bne.n	8003456 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 800344e:	2300      	movs	r3, #0
 8003450:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003454:	e2d7      	b.n	8003a06 <CO_SDOserver_process+0x606>
    } else if (!NMTisPreOrOperational || !SDO->valid) {
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <CO_SDOserver_process+0x64>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	63da      	str	r2, [r3, #60]	; 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 8003470:	2300      	movs	r3, #0
 8003472:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003476:	e2c6      	b.n	8003a06 <CO_SDOserver_process+0x606>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8003478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 82c3 	beq.w	8003a06 <CO_SDOserver_process+0x606>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	7d1b      	ldrb	r3, [r3, #20]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 80cc 	bne.w	8003624 <CO_SDOserver_process+0x224>
            bool_t upload = false;
 800348c:	2300      	movs	r3, #0
 800348e:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0U) == 0x20U) {
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800349a:	2b20      	cmp	r3, #32
 800349c:	d103      	bne.n	80034a6 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2211      	movs	r2, #17
 80034a2:	751a      	strb	r2, [r3, #20]
 80034a4:	e00f      	b.n	80034c6 <CO_SDOserver_process+0xc6>
            } else if (SDO->CANrxData[0] == 0x40U) {
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ac:	2b40      	cmp	r3, #64	; 0x40
 80034ae:	d105      	bne.n	80034bc <CO_SDOserver_process+0xbc>
                upload = true;
 80034b0:	2301      	movs	r3, #1
 80034b2:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2221      	movs	r2, #33	; 0x21
 80034b8:	751a      	strb	r2, [r3, #20]
 80034ba:	e004      	b.n	80034c6 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 80034bc:	4ba7      	ldr	r3, [pc, #668]	; (800375c <CO_SDOserver_process+0x35c>)
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d162      	bne.n	8003592 <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = (uint16_t)((((uint16_t)SDO->CANrxData[2]) << 8) | SDO->CANrxData[1]);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	b21a      	sxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034dc:	b21b      	sxth	r3, r3
 80034de:	4313      	orrs	r3, r2
 80034e0:	b21b      	sxth	r3, r3
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->subIndex = SDO->CANrxData[3];
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex, &SDO->OD_IO, false);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f7fe f89c 	bl	800163c <OD_find>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f103 0218 	add.w	r2, r3, #24
 8003510:	2300      	movs	r3, #0
 8003512:	f7fe f8ef 	bl	80016f4 <OD_getSub>
 8003516:	4603      	mov	r3, r0
 8003518:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                if (odRet != ODR_OK) {
 800351c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003524:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe f9d9 	bl	80018e0 <OD_getSDOabCode>
 800352e:	4603      	mov	r3, r0
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	751a      	strb	r2, [r3, #20]
 8003538:	e02b      	b.n	8003592 <CO_SDOserver_process+0x192>
                } else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d105      	bne.n	8003554 <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8003548:	4b85      	ldr	r3, [pc, #532]	; (8003760 <CO_SDOserver_process+0x360>)
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	751a      	strb	r2, [r3, #20]
 8003552:	e01e      	b.n	8003592 <CO_SDOserver_process+0x192>
                    } else if (upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U)) {
 8003554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00c      	beq.n	8003574 <CO_SDOserver_process+0x174>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <CO_SDOserver_process+0x174>
                        abortCode = CO_SDO_AB_WRITEONLY;
 8003568:	4b7e      	ldr	r3, [pc, #504]	; (8003764 <CO_SDOserver_process+0x364>)
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	751a      	strb	r2, [r3, #20]
 8003572:	e00e      	b.n	8003592 <CO_SDOserver_process+0x192>
                    } else if (!upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U)) {
 8003574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <CO_SDOserver_process+0x192>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <CO_SDOserver_process+0x192>
                        abortCode = CO_SDO_AB_READONLY;
 8003588:	4b77      	ldr	r3, [pc, #476]	; (8003768 <CO_SDOserver_process+0x368>)
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	751a      	strb	r2, [r3, #20]
                }
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            /* load data from object dictionary, if upload and no error */
            if (upload && (abortCode == CO_SDO_AB_NONE)) {
 8003592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003594:	2b00      	cmp	r3, #0
 8003596:	d045      	beq.n	8003624 <CO_SDOserver_process+0x224>
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d142      	bne.n	8003624 <CO_SDOserver_process+0x224>
                SDO->bufOffsetRd = 0;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->bufOffsetWr = 0;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	66da      	str	r2, [r3, #108]	; 0x6c
                SDO->finished = false;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	675a      	str	r2, [r3, #116]	; 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 80035ba:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80035be:	2300      	movs	r3, #0
 80035c0:	2207      	movs	r2, #7
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f7ff fe56 	bl	8003274 <readFromOd>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d02a      	beq.n	8003624 <CO_SDOserver_process+0x224>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01a      	beq.n	800360c <CO_SDOserver_process+0x20c>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a1a      	ldr	r2, [r3, #32]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	669a      	str	r2, [r3, #104]	; 0x68

                        if (SDO->sizeInd == 0U) {
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <CO_SDOserver_process+0x1f2>
                            SDO->sizeInd = SDO->bufOffsetWr;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	669a      	str	r2, [r3, #104]	; 0x68
 80035f0:	e018      	b.n	8003624 <CO_SDOserver_process+0x224>
                        } else if (SDO->sizeInd != SDO->bufOffsetWr) {
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d011      	beq.n	8003624 <CO_SDOserver_process+0x224>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003600:	4b5a      	ldr	r3, [pc, #360]	; (800376c <CO_SDOserver_process+0x36c>)
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	751a      	strb	r2, [r3, #20]
 800360a:	e00b      	b.n	8003624 <CO_SDOserver_process+0x224>
                        } else { /* MISRA C 2004 14.10 */
                        }
                    } else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003612:	b25b      	sxtb	r3, r3
                                           ? SDO->OD_IO.stream.dataLength
                                           : 0U;
 8003614:	2b00      	cmp	r3, #0
 8003616:	db02      	blt.n	800361e <CO_SDOserver_process+0x21e>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	e000      	b.n	8003620 <CO_SDOserver_process+0x220>
 800361e:	2300      	movs	r3, #0
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	6693      	str	r3, [r2, #104]	; 0x68
                }
            }
#endif    /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        bool isOKstate = (SDO->state != CO_SDO_ST_IDLE);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	7d1b      	ldrb	r3, [r3, #20]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf14      	ite	ne
 800362e:	2301      	movne	r3, #1
 8003630:	2300      	moveq	r3, #0
 8003632:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        isOKstate = (SDO->state != CO_SDO_ST_ABORT) && isOKstate;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	7d1b      	ldrb	r3, [r3, #20]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	d005      	beq.n	800364c <CO_SDOserver_process+0x24c>
 8003640:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <CO_SDOserver_process+0x24c>
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <CO_SDOserver_process+0x24e>
 800364c:	2300      	movs	r3, #0
 800364e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8003652:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        if (isOKstate) {
 800365e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 81c7 	beq.w	80039f6 <CO_SDOserver_process+0x5f6>
            switch (SDO->state) {
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	7d1b      	ldrb	r3, [r3, #20]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	3b11      	subs	r3, #17
 8003670:	2b12      	cmp	r3, #18
 8003672:	f200 81b1 	bhi.w	80039d8 <CO_SDOserver_process+0x5d8>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <CO_SDOserver_process+0x27c>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	080036c9 	.word	0x080036c9
 8003680:	080039d9 	.word	0x080039d9
 8003684:	08003891 	.word	0x08003891
 8003688:	080039d9 	.word	0x080039d9
 800368c:	080039d9 	.word	0x080039d9
 8003690:	080039d9 	.word	0x080039d9
 8003694:	080039d9 	.word	0x080039d9
 8003698:	080039d9 	.word	0x080039d9
 800369c:	080039d9 	.word	0x080039d9
 80036a0:	080039d9 	.word	0x080039d9
 80036a4:	080039d9 	.word	0x080039d9
 80036a8:	080039d9 	.word	0x080039d9
 80036ac:	080039d9 	.word	0x080039d9
 80036b0:	080039d9 	.word	0x080039d9
 80036b4:	080039d9 	.word	0x080039d9
 80036b8:	080039d9 	.word	0x080039d9
 80036bc:	08003987 	.word	0x08003987
 80036c0:	080039d9 	.word	0x080039d9
 80036c4:	0800398f 	.word	0x0800398f
                case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
                    if ((SDO->CANrxData[0] & 0x02U) != 0U) {
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80a2 	beq.w	800381c <CO_SDOserver_process+0x41c>
                        /* Expedited transfer, max 4 bytes of data */

                        /* Size of OD variable (>0 if indicated) */
                        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	647b      	str	r3, [r7, #68]	; 0x44

                        /* Get SDO data size (indicated by SDO client or get from OD) */
                        OD_size_t dataSizeToWrite = 4;
 80036de:	2304      	movs	r3, #4
 80036e0:	65fb      	str	r3, [r7, #92]	; 0x5c
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <CO_SDOserver_process+0x306>
                            dataSizeToWrite -= ((OD_size_t)(SDO->CANrxData[0]) >> 2) & 0x03U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003704:	e007      	b.n	8003716 <CO_SDOserver_process+0x316>
                        } else if ((sizeInOd > 0U) && (sizeInOd < 4U)) {
 8003706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003708:	2b00      	cmp	r3, #0
 800370a:	d004      	beq.n	8003716 <CO_SDOserver_process+0x316>
 800370c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370e:	2b03      	cmp	r3, #3
 8003710:	d801      	bhi.n	8003716 <CO_SDOserver_process+0x316>
                            dataSizeToWrite = sizeInOd;
 8003712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003714:	65fb      	str	r3, [r7, #92]	; 0x5c
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* copy data to the temp buffer, swap data if necessary */
                        uint8_t buf[6] = {0};
 8003716:	2300      	movs	r3, #0
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	2300      	movs	r3, #0
 800371c:	853b      	strh	r3, [r7, #40]	; 0x28
                        (void)memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8003724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800372a:	4618      	mov	r0, r3
 800372c:	f008 fad2 	bl	800bcd4 <memcpy>
#endif

                        /* If dataType is string, then size of data downloaded may be shorter as size of
                         * the OD data buffer. If so, add two zero bytes to terminate (unicode) string.
                         * Shorten also OD data size, (temporary, send information about EOF into OD_IO.write) */
                        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003736:	b25b      	sxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	da21      	bge.n	8003780 <CO_SDOserver_process+0x380>
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 800373c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <CO_SDOserver_process+0x34a>
 8003742:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003746:	429a      	cmp	r2, r3
 8003748:	d21a      	bcs.n	8003780 <CO_SDOserver_process+0x380>
                            OD_size_t delta = sizeInOd - dataSizeToWrite;
 800374a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800374c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	643b      	str	r3, [r7, #64]	; 0x40
                            dataSizeToWrite += (delta == 1U) ? 1U : 2U;
 8003752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003754:	2b01      	cmp	r3, #1
 8003756:	d10b      	bne.n	8003770 <CO_SDOserver_process+0x370>
 8003758:	2301      	movs	r3, #1
 800375a:	e00a      	b.n	8003772 <CO_SDOserver_process+0x372>
 800375c:	05040001 	.word	0x05040001
 8003760:	06010000 	.word	0x06010000
 8003764:	06010001 	.word	0x06010001
 8003768:	06010002 	.word	0x06010002
 800376c:	06040047 	.word	0x06040047
 8003770:	2302      	movs	r3, #2
 8003772:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003774:	4413      	add	r3, r2
 8003776:	65fb      	str	r3, [r7, #92]	; 0x5c
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800377c:	621a      	str	r2, [r3, #32]
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 800377e:	e016      	b.n	80037ae <CO_SDOserver_process+0x3ae>
                        } else if (sizeInOd == 0U) {
 8003780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <CO_SDOserver_process+0x38e>
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800378a:	621a      	str	r2, [r3, #32]
 800378c:	e00f      	b.n	80037ae <CO_SDOserver_process+0x3ae>
                        }
                        /* Verify if size of data downloaded matches data size in OD. */
                        else if (dataSizeToWrite != sizeInOd) {
 800378e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003792:	429a      	cmp	r2, r3
 8003794:	d00b      	beq.n	80037ae <CO_SDOserver_process+0x3ae>
                            abortCode = (dataSizeToWrite > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003796:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379a:	429a      	cmp	r2, r3
 800379c:	d901      	bls.n	80037a2 <CO_SDOserver_process+0x3a2>
 800379e:	4b91      	ldr	r3, [pc, #580]	; (80039e4 <CO_SDOserver_process+0x5e4>)
 80037a0:	e000      	b.n	80037a4 <CO_SDOserver_process+0x3a4>
 80037a2:	4b91      	ldr	r3, [pc, #580]	; (80039e8 <CO_SDOserver_process+0x5e8>)
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	751a      	strb	r2, [r3, #20]
                            break;
 80037ac:	e123      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* Copy data */
                        OD_size_t countWritten = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	623b      	str	r3, [r7, #32]

                        CO_LOCK_OD(SDO->CANdevTx);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b6:	f3ef 8210 	mrs	r2, PRIMASK
 80037ba:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 80037bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037be:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80037c0:	b672      	cpsid	i
}
 80037c2:	bf00      	nop
                        ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf, dataSizeToWrite, &countWritten);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f103 0018 	add.w	r0, r3, #24
 80037ce:	f107 0320 	add.w	r3, r7, #32
 80037d2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80037d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037d8:	47a0      	blx	r4
 80037da:	4603      	mov	r3, r0
 80037dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        CO_UNLOCK_OD(SDO->CANdevTx);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ea:	f383 8810 	msr	PRIMASK, r3
}
 80037ee:	bf00      	nop

                        if (odRet != ODR_OK) {
 80037f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <CO_SDOserver_process+0x40e>
                            abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80037f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fe f86f 	bl	80018e0 <OD_getSDOabCode>
 8003802:	4603      	mov	r3, r0
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	751a      	strb	r2, [r3, #20]
                            break;
 800380c:	e0f3      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                        } else {
                            SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2212      	movs	r2, #18
 8003812:	751a      	strb	r2, [r3, #20]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                            SDO->finished = true;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	675a      	str	r2, [r3, #116]	; 0x74
#else
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                        SDO->state = CO_SDO_ST_ABORT;
#endif
                    }
                    break;
 800381a:	e0ec      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d028      	beq.n	800387c <CO_SDOserver_process+0x47c>
                            OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	64bb      	str	r3, [r7, #72]	; 0x48
                            (void)memcpy((void*)(&size), (const void*)(&SDO->CANrxData[4]), sizeof(size));
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3344      	adds	r3, #68	; 0x44
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	61fb      	str	r3, [r7, #28]
                            SDO->sizeInd = CO_SWAP_32(size);
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	669a      	str	r2, [r3, #104]	; 0x68
                            if (sizeInOd > 0U) {
 800383e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01e      	beq.n	8003882 <CO_SDOserver_process+0x482>
                                if (SDO->sizeInd > sizeInOd) {
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800384a:	429a      	cmp	r2, r3
 800384c:	d205      	bcs.n	800385a <CO_SDOserver_process+0x45a>
                                    abortCode = CO_SDO_AB_DATA_LONG;
 800384e:	4b65      	ldr	r3, [pc, #404]	; (80039e4 <CO_SDOserver_process+0x5e4>)
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	751a      	strb	r2, [r3, #20]
                                    break;
 8003858:	e0cd      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                                else if ((SDO->sizeInd < sizeInOd)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800385e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003860:	429a      	cmp	r2, r3
 8003862:	d90e      	bls.n	8003882 <CO_SDOserver_process+0x482>
                                         && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)) {
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800386a:	b25b      	sxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	db08      	blt.n	8003882 <CO_SDOserver_process+0x482>
                                    abortCode = CO_SDO_AB_DATA_SHORT;
 8003870:	4b5d      	ldr	r3, [pc, #372]	; (80039e8 <CO_SDOserver_process+0x5e8>)
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	751a      	strb	r2, [r3, #20]
                                    break;
 800387a:	e0bc      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                            SDO->sizeInd = 0;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	669a      	str	r2, [r3, #104]	; 0x68
                        SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2212      	movs	r2, #18
 8003886:	751a      	strb	r2, [r3, #20]
                        SDO->finished = false;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	675a      	str	r2, [r3, #116]	; 0x74
                    break;
 800388e:	e0b2      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xE0U) == 0x00U) {
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003896:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d16d      	bne.n	800397a <CO_SDOserver_process+0x57a>
                        SDO->finished = (SDO->CANrxData[0] & 0x01U) != 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf14      	ite	ne
 80038ac:	2301      	movne	r3, #1
 80038ae:	2300      	moveq	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	675a      	str	r2, [r3, #116]	; 0x74

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                        if (toggle != SDO->toggle) {
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80038cc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d005      	beq.n	80038e0 <CO_SDOserver_process+0x4e0>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 80038d4:	4b45      	ldr	r3, [pc, #276]	; (80039ec <CO_SDOserver_process+0x5ec>)
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	751a      	strb	r2, [r3, #20]
                            break;
 80038de:	e08a      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                        }

                        /* get data size and write data to the buffer */
                        OD_size_t count = (OD_size_t)(7U - (((OD_size_t)(SDO->CANrxData[0]) >> 1) & 0x07U));
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	64fb      	str	r3, [r7, #76]	; 0x4c
                        (void)memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038fe:	18d0      	adds	r0, r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	3341      	adds	r3, #65	; 0x41
 8003904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003906:	4619      	mov	r1, r3
 8003908:	f008 f9e4 	bl	800bcd4 <memcpy>
                        SDO->bufOffsetWr += count;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003914:	441a      	add	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        SDO->sizeTran += count;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003922:	441a      	add	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	66da      	str	r2, [r3, #108]	; 0x6c

                        /* if data size exceeds variable size, abort */
                        if ((SDO->OD_IO.stream.dataLength > 0U) && (SDO->sizeTran > SDO->OD_IO.stream.dataLength)) {
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <CO_SDOserver_process+0x548>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	429a      	cmp	r2, r3
 800393a:	d905      	bls.n	8003948 <CO_SDOserver_process+0x548>
                            abortCode = CO_SDO_AB_DATA_LONG;
 800393c:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <CO_SDOserver_process+0x5e4>)
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	751a      	strb	r2, [r3, #20]
                            break;
 8003946:	e056      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                        }

                        /* if necessary, empty the buffer */
                        if (SDO->finished || ((CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr) < (7U + 2U))) {
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <CO_SDOserver_process+0x55e>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003956:	f1c3 0320 	rsb	r3, r3, #32
 800395a:	2b08      	cmp	r3, #8
 800395c:	d809      	bhi.n	8003972 <CO_SDOserver_process+0x572>
                            if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 800395e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003962:	2300      	movs	r3, #0
 8003964:	2200      	movs	r2, #0
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff fb74 	bl	8003054 <validateAndWriteToOD>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d040      	beq.n	80039f4 <CO_SDOserver_process+0x5f4>
                                break;
                            }
                        }

                        SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2214      	movs	r2, #20
 8003976:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8003978:	e03d      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                        abortCode = CO_SDO_AB_CMD;
 800397a:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <CO_SDOserver_process+0x5f0>)
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	751a      	strb	r2, [r3, #20]
                    break;
 8003984:	e037      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
                    SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2222      	movs	r2, #34	; 0x22
 800398a:	751a      	strb	r2, [r3, #20]
                    break;
 800398c:	e033      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xEFU) == 0x60U) {
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003994:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003998:	2b60      	cmp	r3, #96	; 0x60
 800399a:	d117      	bne.n	80039cc <CO_SDOserver_process+0x5cc>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
                        if (toggle != SDO->toggle) {
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80039b0:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d005      	beq.n	80039c4 <CO_SDOserver_process+0x5c4>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <CO_SDOserver_process+0x5ec>)
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	751a      	strb	r2, [r3, #20]
                            break;
 80039c2:	e018      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                        }
                        SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2224      	movs	r2, #36	; 0x24
 80039c8:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 80039ca:	e014      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                        abortCode = CO_SDO_AB_CMD;
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <CO_SDOserver_process+0x5f0>)
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	751a      	strb	r2, [r3, #20]
                    break;
 80039d6:	e00e      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */
                default: {
                    /* unknown message received */
                    abortCode = CO_SDO_AB_CMD;
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <CO_SDOserver_process+0x5f0>)
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2201      	movs	r2, #1
 80039e0:	751a      	strb	r2, [r3, #20]
                    break;
 80039e2:	e008      	b.n	80039f6 <CO_SDOserver_process+0x5f6>
 80039e4:	06070012 	.word	0x06070012
 80039e8:	06070013 	.word	0x06070013
 80039ec:	05030000 	.word	0x05030000
 80039f0:	05040001 	.word	0x05040001
                                break;
 80039f4:	bf00      	nop
                }
            } /* switch (SDO->state) */
        }     /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
        SDO->timeoutTimer = 0;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
        timeDifference_us = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	63da      	str	r2, [r3, #60]	; 0x3c
    else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
    if (ret == CO_SDO_RT_waitingResponse) {
 8003a06:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d11e      	bne.n	8003a4c <CO_SDOserver_process+0x64c>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d205      	bcs.n	8003a26 <CO_SDOserver_process+0x626>
            SDO->timeoutTimer += timeDifference_us;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	441a      	add	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	67da      	str	r2, [r3, #124]	; 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d304      	bcc.n	8003a3c <CO_SDOserver_process+0x63c>
            abortCode = CO_SDO_AB_TIMEOUT;
 8003a32:	4b9c      	ldr	r3, [pc, #624]	; (8003ca4 <CO_SDOserver_process+0x8a4>)
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <CO_SDOserver_process+0x64c>
            ret = CO_SDO_RT_transmittBufferFull;
 8003a46:	2304      	movs	r3, #4
 8003a48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8003a4c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	f040 81ab 	bne.w	8003dac <CO_SDOserver_process+0x9ac>
        /* clear response buffer */
        (void)memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	3305      	adds	r3, #5
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f008 f8ad 	bl	800bbc0 <memset>

        switch (SDO->state) {
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	7d1b      	ldrb	r3, [r3, #20]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	3b12      	subs	r3, #18
 8003a6e:	2b12      	cmp	r3, #18
 8003a70:	f200 8199 	bhi.w	8003da6 <CO_SDOserver_process+0x9a6>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <CO_SDOserver_process+0x67c>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003ac9 	.word	0x08003ac9
 8003a80:	08003da7 	.word	0x08003da7
 8003a84:	08003b4b 	.word	0x08003b4b
 8003a88:	08003da7 	.word	0x08003da7
 8003a8c:	08003da7 	.word	0x08003da7
 8003a90:	08003da7 	.word	0x08003da7
 8003a94:	08003da7 	.word	0x08003da7
 8003a98:	08003da7 	.word	0x08003da7
 8003a9c:	08003da7 	.word	0x08003da7
 8003aa0:	08003da7 	.word	0x08003da7
 8003aa4:	08003da7 	.word	0x08003da7
 8003aa8:	08003da7 	.word	0x08003da7
 8003aac:	08003da7 	.word	0x08003da7
 8003ab0:	08003da7 	.word	0x08003da7
 8003ab4:	08003da7 	.word	0x08003da7
 8003ab8:	08003da7 	.word	0x08003da7
 8003abc:	08003ba7 	.word	0x08003ba7
 8003ac0:	08003da7 	.word	0x08003da7
 8003ac4:	08003c75 	.word	0x08003c75
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                SDO->CANtxBuff->data[0] = 0x60;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2260      	movs	r2, #96	; 0x60
 8003ace:	715a      	strb	r2, [r3, #5]
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8003af6:	721a      	strb	r2, [r3, #8]

                /* reset timeout timer and send message */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                SDO->timeoutTimer = 0;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4619      	mov	r1, r3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f002 fe51 	bl	80067b0 <CO_CANsend>
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                if (SDO->finished) {
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <CO_SDOserver_process+0x724>
                    SDO->state = CO_SDO_ST_IDLE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                }
#else
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif
                break;
 8003b22:	e143      	b.n	8003dac <CO_SDOserver_process+0x9ac>
                    SDO->toggle = 0x00;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    SDO->sizeTran = 0;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	66da      	str	r2, [r3, #108]	; 0x6c
                    SDO->bufOffsetWr = 0;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                    SDO->bufOffsetRd = 0;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2213      	movs	r2, #19
 8003b46:	751a      	strb	r2, [r3, #20]
                break;
 8003b48:	e130      	b.n	8003dac <CO_SDOserver_process+0x9ac>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                SDO->CANtxBuff->data[0] = 0x20U | SDO->toggle;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f042 0220 	orr.w	r2, r2, #32
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <CO_SDOserver_process+0x76a>
 8003b66:	2210      	movs	r2, #16
 8003b68:	e000      	b.n	8003b6c <CO_SDOserver_process+0x76c>
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                /* reset timeout timer and send message */
                SDO->timeoutTimer = 0;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	67da      	str	r2, [r3, #124]	; 0x7c
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f002 fe14 	bl	80067b0 <CO_CANsend>
                if (SDO->finished) {
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d006      	beq.n	8003b9e <CO_SDOserver_process+0x79e>
                    SDO->state = CO_SDO_ST_IDLE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                } else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
                }
                break;
 8003b9c:	e106      	b.n	8003dac <CO_SDOserver_process+0x9ac>
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2213      	movs	r2, #19
 8003ba2:	751a      	strb	r2, [r3, #20]
                break;
 8003ba4:	e102      	b.n	8003dac <CO_SDOserver_process+0x9ac>
#endif

            case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                /* data were already loaded from OD variable */
                if ((SDO->sizeInd > 0U) && (SDO->sizeInd <= 4U)) {
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d024      	beq.n	8003bf8 <CO_SDOserver_process+0x7f8>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d820      	bhi.n	8003bf8 <CO_SDOserver_process+0x7f8>
                    /* expedited transfer */
                    SDO->CANtxBuff->data[0] = (uint8_t)(0x43U | ((4U - SDO->sizeInd) << 2U));
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f1c3 0304 	rsb	r3, r3, #4
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&SDO->buf[0]), SDO->sizeInd);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f103 0009 	add.w	r0, r3, #9
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be4:	461a      	mov	r2, r3
 8003be6:	f008 f875 	bl	800bcd4 <memcpy>
                    SDO->state = CO_SDO_ST_IDLE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003bf6:	e020      	b.n	8003c3a <CO_SDOserver_process+0x83a>
                } else {
                    /* data will be transferred with segmented transfer */
                    if (SDO->sizeInd > 0U) {
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00e      	beq.n	8003c1e <CO_SDOserver_process+0x81e>
                        /* indicate data size, if known */
                        uint32_t sizeInd = SDO->sizeInd;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c04:	63bb      	str	r3, [r7, #56]	; 0x38
                        uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	61bb      	str	r3, [r7, #24]
                        SDO->CANtxBuff->data[0] = 0x41;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2241      	movs	r2, #65	; 0x41
 8003c10:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&sizeIndSw), sizeof(sizeIndSw));
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	3309      	adds	r3, #9
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e003      	b.n	8003c26 <CO_SDOserver_process+0x826>
                    } else {
                        SDO->CANtxBuff->data[0] = 0x40;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2240      	movs	r2, #64	; 0x40
 8003c24:	715a      	strb	r2, [r3, #5]
                    }
                    SDO->toggle = 0x00;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    SDO->timeoutTimer = 0;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	67da      	str	r2, [r3, #124]	; 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2223      	movs	r2, #35	; 0x23
 8003c38:	751a      	strb	r2, [r3, #20]
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                /* send message */
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8003c60:	721a      	strb	r2, [r3, #8]
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f002 fd9f 	bl	80067b0 <CO_CANsend>
                break;
 8003c72:	e09b      	b.n	8003dac <CO_SDOserver_process+0x9ac>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
                /* refill the data buffer if necessary */
                if (!readFromOd(SDO, &abortCode, 7, false)) {
 8003c74:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2207      	movs	r2, #7
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff faf9 	bl	8003274 <readFromOd>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8090 	beq.w	8003daa <CO_SDOserver_process+0x9aa>
                    break;
                }

                /* SDO command specifier with toggle bit */
                SDO->CANtxBuff->data[0] = SDO->toggle;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8003c94:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <CO_SDOserver_process+0x8a8>
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	e002      	b.n	8003caa <CO_SDOserver_process+0x8aa>
 8003ca4:	05040000 	.word	0x05040000
 8003ca8:	2200      	movs	r2, #0
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	65bb      	str	r3, [r7, #88]	; 0x58
                /* verify, if this is the last segment */
                if ((count < 7U) || (SDO->finished && (count == 7U))) {
 8003cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cc2:	2b06      	cmp	r3, #6
 8003cc4:	d906      	bls.n	8003cd4 <CO_SDOserver_process+0x8d4>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d01b      	beq.n	8003d06 <CO_SDOserver_process+0x906>
 8003cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cd0:	2b07      	cmp	r3, #7
 8003cd2:	d118      	bne.n	8003d06 <CO_SDOserver_process+0x906>
                    /* indicate last segment and nnn */
                    SDO->CANtxBuff->data[0] |= (uint8_t)(((7U - count) << 1U) | 0x01U);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	795a      	ldrb	r2, [r3, #5]
 8003cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f1c3 0307 	rsb	r3, r3, #7
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	715a      	strb	r2, [r3, #5]
                    SDO->state = CO_SDO_ST_IDLE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003d04:	e007      	b.n	8003d16 <CO_SDOserver_process+0x916>
                } else {
                    SDO->timeoutTimer = 0;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	67da      	str	r2, [r3, #124]	; 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2223      	movs	r2, #35	; 0x23
 8003d10:	751a      	strb	r2, [r3, #20]
                    count = 7;
 8003d12:	2307      	movs	r3, #7
 8003d14:	65bb      	str	r3, [r7, #88]	; 0x58
                }

                /* copy data segment to CAN message */
                (void)memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd, count);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	1d98      	adds	r0, r3, #6
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d28:	4413      	add	r3, r2
 8003d2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f007 ffd1 	bl	800bcd4 <memcpy>
                SDO->bufOffsetRd += count;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003d38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d3a:	441a      	add	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->sizeTran += count;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d48:	441a      	add	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* verify if sizeTran is too large or too short if last segment */
                if (SDO->sizeInd > 0U) {
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01e      	beq.n	8003d94 <CO_SDOserver_process+0x994>
                    if (SDO->sizeTran > SDO->sizeInd) {
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d905      	bls.n	8003d6e <CO_SDOserver_process+0x96e>
                        abortCode = CO_SDO_AB_DATA_LONG;
 8003d62:	4b30      	ldr	r3, [pc, #192]	; (8003e24 <CO_SDOserver_process+0xa24>)
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	751a      	strb	r2, [r3, #20]
                        break;
 8003d6c:	e01e      	b.n	8003dac <CO_SDOserver_process+0x9ac>
                    } else if ((ret == CO_SDO_RT_ok_communicationEnd) && (SDO->sizeTran < SDO->sizeInd)) {
 8003d6e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10e      	bne.n	8003d94 <CO_SDOserver_process+0x994>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d208      	bcs.n	8003d94 <CO_SDOserver_process+0x994>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8003d82:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <CO_SDOserver_process+0xa28>)
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
                        ret = CO_SDO_RT_waitingResponse;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                        SDO->state = CO_SDO_ST_ABORT;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	751a      	strb	r2, [r3, #20]
                        break;
 8003d92:	e00b      	b.n	8003dac <CO_SDOserver_process+0x9ac>
                    } else { /* MISRA C 2004 14.10 */
                    }
                }

                /* send message */
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4610      	mov	r0, r2
 8003da0:	f002 fd06 	bl	80067b0 <CO_CANsend>
                break;
 8003da4:	e002      	b.n	8003dac <CO_SDOserver_process+0x9ac>
            case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2:
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
            case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
            default: {
                /* none */
                break;
 8003da6:	bf00      	nop
 8003da8:	e000      	b.n	8003dac <CO_SDOserver_process+0x9ac>
                    break;
 8003daa:	bf00      	nop
            }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8003dac:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d131      	bne.n	8003e18 <CO_SDOserver_process+0xa18>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	7d1b      	ldrb	r3, [r3, #20]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d12c      	bne.n	8003e18 <CO_SDOserver_process+0xa18>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003dda:	0a1b      	lsrs	r3, r3, #8
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8003df0:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	3309      	adds	r3, #9
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4619      	mov	r1, r3
 8003e06:	4610      	mov	r0, r2
 8003e08:	f002 fcd2 	bl	80067b0 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8003e12:	23f6      	movs	r3, #246	; 0xf6
 8003e14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8003e18:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	376c      	adds	r7, #108	; 0x6c
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd90      	pop	{r4, r7, pc}
 8003e24:	06070012 	.word	0x06070012
 8003e28:	06070013 	.word	0x06070013

08003e2c <CO_getUint8>:
CO_getUint8(const void* buf) {
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003e38:	73fb      	strb	r3, [r7, #15]
    return value;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003e52:	60fb      	str	r3, [r7, #12]
    return value;
 8003e54:	68fb      	ldr	r3, [r7, #12]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <OD_getIndex+0x14>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	e000      	b.n	8003e76 <OD_getIndex+0x16>
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8003e90:	2305      	movs	r3, #5
 8003e92:	e003      	b.n	8003e9c <OD_extension_init+0x1c>
    entry->extension = extension;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b086      	sub	sp, #24
 8003eaa:	af02      	add	r7, sp, #8
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003eb6:	7af9      	ldrb	r1, [r7, #11]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7fd fd29 	bl	8001918 <OD_get_value>
 8003ec6:	4603      	mov	r3, r0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	460b      	mov	r3, r1
 8003ede:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003ee0:	7af9      	ldrb	r1, [r7, #11]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	2304      	movs	r3, #4
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7fd fd14 	bl	8001918 <OD_get_value>
 8003ef0:	4603      	mov	r3, r0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <CO_SYNCsend>:
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t
CO_SYNCsend(CO_SYNC_t* SYNC) {
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) {
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	7c9b      	ldrb	r3, [r3, #18]
 8003f06:	3301      	adds	r3, #1
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	749a      	strb	r2, [r3, #18]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	7c9a      	ldrb	r2, [r3, #18]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7c5b      	ldrb	r3, [r3, #17]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d902      	bls.n	8003f20 <CO_SYNCsend+0x26>
        SYNC->counter = 1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	749a      	strb	r2, [r3, #18]
    }
    SYNC->timer = 0;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	bf0c      	ite	eq
 8003f2e:	2301      	moveq	r3, #1
 8003f30:	2300      	movne	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	7c92      	ldrb	r2, [r2, #18]
 8003f42:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f002 fc2e 	bl	80067b0 <CO_CANsend>
 8003f54:	4603      	mov	r3, r0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SYNC_receive(void* object, void* msg) {
 8003f5e:	b480      	push	{r7}
 8003f60:	b087      	sub	sp, #28
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
    CO_SYNC_t* SYNC = object;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	791b      	ldrb	r3, [r3, #4]
 8003f70:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0U) {
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	7c5b      	ldrb	r3, [r3, #17]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10c      	bne.n	8003f98 <CO_SYNC_receive+0x3a>
        if (DLC == 0U) {
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d102      	bne.n	8003f8a <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8003f84:	2301      	movs	r3, #1
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e019      	b.n	8003fbe <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x40U;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	721a      	strb	r2, [r3, #8]
 8003f96:	e012      	b.n	8003fbe <CO_SYNC_receive+0x60>
        }
    } else {
        if (DLC == 1U) {
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d109      	bne.n	8003fb2 <CO_SYNC_receive+0x54>
            const uint8_t* data = CO_CANrxMsg_readData(msg);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	3305      	adds	r3, #5
 8003fa2:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	781a      	ldrb	r2, [r3, #0]
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8003fac:	2301      	movs	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e005      	b.n	8003fbe <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x80U;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00c      	beq.n	8003fde <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <OD_write_1005>:
 * Custom function for writing OD object "COB-ID sync message"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1005(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b08f      	sub	sp, #60	; 0x3c
 8003fec:	af04      	add	r7, sp, #16
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00c      	beq.n	8004016 <OD_write_1005+0x2e>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	7d1b      	ldrb	r3, [r3, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d108      	bne.n	8004016 <OD_write_1005+0x2e>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <OD_write_1005+0x2e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b04      	cmp	r3, #4
 800400e:	d102      	bne.n	8004016 <OD_write_1005+0x2e>
        || (countWritten == NULL)) {
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <OD_write_1005+0x32>
        return ODR_DEV_INCOMPAT;
 8004016:	2309      	movs	r3, #9
 8004018:	e0a2      	b.n	8004160 <OD_write_1005+0x178>
    }

    CO_SYNC_t* SYNC = stream->object;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8004020:	68b8      	ldr	r0, [r7, #8]
 8004022:	f7ff ff10 	bl	8003e46 <CO_getUint32>
 8004026:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	b29b      	uxth	r3, r3
 800402c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004030:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    bool_t isProducer = (cobIdSync & 0x40000000U) != 0U;
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	61bb      	str	r3, [r7, #24]
    if (((cobIdSync & 0xBFFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	4b48      	ldr	r3, [pc, #288]	; (8004168 <OD_write_1005+0x180>)
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d133      	bne.n	80040b6 <OD_write_1005+0xce>
 800404e:	8bfb      	ldrh	r3, [r7, #30]
 8004050:	2b7f      	cmp	r3, #127	; 0x7f
 8004052:	d930      	bls.n	80040b6 <OD_write_1005+0xce>
 8004054:	8bfb      	ldrh	r3, [r7, #30]
 8004056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405a:	d903      	bls.n	8004064 <OD_write_1005+0x7c>
 800405c:	8bfb      	ldrh	r3, [r7, #30]
 800405e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004062:	d928      	bls.n	80040b6 <OD_write_1005+0xce>
 8004064:	8bfb      	ldrh	r3, [r7, #30]
 8004066:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800406a:	d903      	bls.n	8004074 <OD_write_1005+0x8c>
 800406c:	8bfb      	ldrh	r3, [r7, #30]
 800406e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004072:	d320      	bcc.n	80040b6 <OD_write_1005+0xce>
 8004074:	8bfb      	ldrh	r3, [r7, #30]
 8004076:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800407a:	d903      	bls.n	8004084 <OD_write_1005+0x9c>
 800407c:	8bfb      	ldrh	r3, [r7, #30]
 800407e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004082:	d318      	bcc.n	80040b6 <OD_write_1005+0xce>
 8004084:	8bfb      	ldrh	r3, [r7, #30]
 8004086:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800408a:	d303      	bcc.n	8004094 <OD_write_1005+0xac>
 800408c:	8bfb      	ldrh	r3, [r7, #30]
 800408e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004092:	d310      	bcc.n	80040b6 <OD_write_1005+0xce>
 8004094:	8bfb      	ldrh	r3, [r7, #30]
 8004096:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800409a:	d80c      	bhi.n	80040b6 <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && (CAN_ID != SYNC->CAN_ID))) {
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <OD_write_1005+0xd2>
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <OD_write_1005+0xd2>
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80040b0:	8bfa      	ldrh	r2, [r7, #30]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d001      	beq.n	80040ba <OD_write_1005+0xd2>
        return ODR_INVALID_VALUE;
 80040b6:	230f      	movs	r3, #15
 80040b8:	e052      	b.n	8004160 <OD_write_1005+0x178>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80040c0:	8bfa      	ldrh	r2, [r7, #30]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d039      	beq.n	800413a <OD_write_1005+0x152>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(SYNC->CANdevRx, SYNC->CANdevRxIdx, CAN_ID, 0x7FF, false,
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80040ce:	8bfa      	ldrh	r2, [r7, #30]
 80040d0:	4b26      	ldr	r3, [pc, #152]	; (800416c <OD_write_1005+0x184>)
 80040d2:	9302      	str	r3, [sp, #8]
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	2300      	movs	r3, #0
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80040e0:	f002 fa90 	bl	8006604 <CO_CANrxBufferInit>
 80040e4:	4603      	mov	r3, r0
 80040e6:	75fb      	strb	r3, [r7, #23]
                                                     (void*)SYNC, CO_SYNC_receive);

        if (CANret != CO_ERROR_NO) {
 80040e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 80040f0:	2309      	movs	r3, #9
 80040f2:	e035      	b.n	8004160 <OD_write_1005+0x178>
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
                                             (SYNC->counterOverflowValue != 0U) ? 1U : 0U, false);
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <OD_write_1005+0x122>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <OD_write_1005+0x124>
 800410a:	2300      	movs	r3, #0
 800410c:	8bfa      	ldrh	r2, [r7, #30]
 800410e:	2400      	movs	r4, #0
 8004110:	9401      	str	r4, [sp, #4]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2300      	movs	r3, #0
 8004116:	f002 fad1 	bl	80066bc <CO_CANtxBufferInit>
 800411a:	4602      	mov	r2, r0
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c

        if (SYNC->CANtxBuff == NULL) {
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d104      	bne.n	8004132 <OD_write_1005+0x14a>
            SYNC->isProducer = false;
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	2200      	movs	r2, #0
 800412c:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 800412e:	2309      	movs	r3, #9
 8004130:	e016      	b.n	8004160 <OD_write_1005+0x178>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	8bfa      	ldrh	r2, [r7, #30]
 8004136:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = isProducer;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <OD_write_1005+0x16a>
        SYNC->counter = 0;
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	2200      	movs	r2, #0
 800414a:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	2200      	movs	r2, #0
 8004150:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7fd f9e8 	bl	800152e <OD_writeOriginal>
 800415e:	4603      	mov	r3, r0
}
 8004160:	4618      	mov	r0, r3
 8004162:	372c      	adds	r7, #44	; 0x2c
 8004164:	46bd      	mov	sp, r7
 8004166:	bd90      	pop	{r4, r7, pc}
 8004168:	bffff800 	.word	0xbffff800
 800416c:	08003f5f 	.word	0x08003f5f

08004170 <OD_write_1019>:
 * Custom function for writing OD object "Synchronous counter overflow value"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1019(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8004170:	b590      	push	{r4, r7, lr}
 8004172:	b089      	sub	sp, #36	; 0x24
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint8_t))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00c      	beq.n	800419e <OD_write_1019+0x2e>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	7d1b      	ldrb	r3, [r3, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d108      	bne.n	800419e <OD_write_1019+0x2e>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <OD_write_1019+0x2e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d102      	bne.n	800419e <OD_write_1019+0x2e>
        || (countWritten == NULL)) {
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <OD_write_1019+0x32>
        return ODR_DEV_INCOMPAT;
 800419e:	2309      	movs	r3, #9
 80041a0:	e040      	b.n	8004224 <OD_write_1019+0xb4>
    }

    CO_SYNC_t* SYNC = stream->object;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 80041a8:	68b8      	ldr	r0, [r7, #8]
 80041aa:	f7ff fe3f 	bl	8003e2c <CO_getUint8>
 80041ae:	4603      	mov	r3, r0
 80041b0:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if ((syncCounterOvf == 1U) || (syncCounterOvf > 240U)) {
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d002      	beq.n	80041be <OD_write_1019+0x4e>
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	2bf0      	cmp	r3, #240	; 0xf0
 80041bc:	d901      	bls.n	80041c2 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 80041be:	230f      	movs	r3, #15
 80041c0:	e030      	b.n	8004224 <OD_write_1019+0xb4>
    }
    if (*SYNC->OD_1006_period != 0U) {
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 80041cc:	2317      	movs	r3, #23
 80041ce:	e029      	b.n	8004224 <OD_write_1019+0xb4>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, SYNC->CAN_ID, false,
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <OD_write_1019+0x7a>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <OD_write_1019+0x7c>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2400      	movs	r4, #0
 80041ee:	9401      	str	r4, [sp, #4]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	f002 fa62 	bl	80066bc <CO_CANtxBufferInit>
 80041f8:	4602      	mov	r2, r0
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	62da      	str	r2, [r3, #44]	; 0x2c
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);

    if (SYNC->CANtxBuff == NULL) {
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d104      	bne.n	8004210 <OD_write_1019+0xa0>
        SYNC->isProducer = false;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 800420c:	2309      	movs	r3, #9
 800420e:	e009      	b.n	8004224 <OD_write_1019+0xb4>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	7cfa      	ldrb	r2, [r7, #19]
 8004214:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7fd f986 	bl	800152e <OD_writeOriginal>
 8004222:	4603      	mov	r3, r0
}
 8004224:	4618      	mov	r0, r3
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	bd90      	pop	{r4, r7, pc}

0800422c <CO_SYNC_init>:
             OD_entry_t* OD_1007_syncWindowLen, OD_entry_t* OD_1019_syncCounterOvf, CO_CANmodule_t* CANdevRx,
             uint16_t CANdevRxIdx,
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 800422c:	b580      	push	{r7, lr}
 800422e:	b08c      	sub	sp, #48	; 0x30
 8004230:	af04      	add	r7, sp, #16
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if ((SYNC == NULL) || (em == NULL) || (OD_1005_cobIdSync == NULL)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00e      	beq.n	800425e <CO_SYNC_init+0x32>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <CO_SYNC_init+0x32>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <CO_SYNC_init+0x32>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        || (OD_1006_commCyclePeriod == NULL) || (CANdevTx == NULL)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <CO_SYNC_init+0x32>
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <CO_SYNC_init+0x32>
#endif
        || (CANdevRx == NULL)) {
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <CO_SYNC_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800425e:	f04f 33ff 	mov.w	r3, #4294967295
 8004262:	e0fd      	b.n	8004460 <CO_SYNC_init+0x234>
    }

    /* clear object */
    (void)memset(SYNC, 0, sizeof(CO_SYNC_t));
 8004264:	225c      	movs	r2, #92	; 0x5c
 8004266:	2100      	movs	r1, #0
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f007 fca9 	bl	800bbc0 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 800426e:	2380      	movs	r3, #128	; 0x80
 8004270:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8004272:	f107 0218 	add.w	r2, r7, #24
 8004276:	2301      	movs	r3, #1
 8004278:	2100      	movs	r1, #0
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff fe28 	bl	8003ed0 <OD_get_u32>
 8004280:	4603      	mov	r3, r0
 8004282:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8004284:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00c      	beq.n	80042a6 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) {
 800428c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d006      	beq.n	80042a0 <CO_SYNC_init+0x74>
            *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff fde4 	bl	8003e60 <OD_getIndex>
 8004298:	4603      	mov	r3, r0
 800429a:	461a      	mov	r2, r3
 800429c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800429e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80042a0:	f06f 030b 	mvn.w	r3, #11
 80042a4:	e0dc      	b.n	8004460 <CO_SYNC_init+0x234>
    }
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->OD_1005_extension.object = SYNC;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.read = OD_readOriginal;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4a6e      	ldr	r2, [pc, #440]	; (8004468 <CO_SYNC_init+0x23c>)
 80042b0:	63da      	str	r2, [r3, #60]	; 0x3c
    SYNC->OD_1005_extension.write = OD_write_1005;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a6d      	ldr	r2, [pc, #436]	; (800446c <CO_SYNC_init+0x240>)
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40
    (void)OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3338      	adds	r3, #56	; 0x38
 80042bc:	4619      	mov	r1, r3
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff fdde 	bl	8003e80 <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0, sizeof(uint32_t), NULL);
 80042c4:	2300      	movs	r3, #0
 80042c6:	2204      	movs	r2, #4
 80042c8:	2100      	movs	r1, #0
 80042ca:	6838      	ldr	r0, [r7, #0]
 80042cc:	f7fd fb9e 	bl	8001a0c <OD_getPtr>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	61da      	str	r2, [r3, #28]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    if (SYNC->OD_1006_period == NULL) {
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10c      	bne.n	80042f8 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) {
 80042de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d006      	beq.n	80042f2 <CO_SYNC_init+0xc6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 80042e4:	6838      	ldr	r0, [r7, #0]
 80042e6:	f7ff fdbb 	bl	8003e60 <OD_getIndex>
 80042ea:	4603      	mov	r3, r0
 80042ec:	461a      	mov	r2, r3
 80042ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80042f2:	f06f 030b 	mvn.w	r3, #11
 80042f6:	e0b3      	b.n	8004460 <CO_SYNC_init+0x234>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0, sizeof(uint32_t), NULL);
 80042f8:	2300      	movs	r3, #0
 80042fa:	2204      	movs	r2, #4
 80042fc:	2100      	movs	r1, #0
 80042fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004300:	f7fd fb84 	bl	8001a0c <OD_getPtr>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
    if ((OD_1007_syncWindowLen != NULL) && (SYNC->OD_1007_window == NULL)) {
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	d010      	beq.n	8004332 <CO_SYNC_init+0x106>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10c      	bne.n	8004332 <CO_SYNC_init+0x106>
        if (errInfo != NULL) {
 8004318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d006      	beq.n	800432c <CO_SYNC_init+0x100>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 800431e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004320:	f7ff fd9e 	bl	8003e60 <OD_getIndex>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432a:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800432c:	f06f 030b 	mvn.w	r3, #11
 8004330:	e096      	b.n	8004460 <CO_SYNC_init+0x234>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and configure extension */
    uint8_t syncCounterOvf = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d033      	beq.n	80043a4 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 800433c:	f107 0217 	add.w	r2, r7, #23
 8004340:	2301      	movs	r3, #1
 8004342:	2100      	movs	r1, #0
 8004344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004346:	f7ff fdae 	bl	8003ea6 <OD_get_u8>
 800434a:	4603      	mov	r3, r0
 800434c:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 800434e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00c      	beq.n	8004370 <CO_SYNC_init+0x144>
            if (errInfo != NULL) {
 8004356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d006      	beq.n	800436a <CO_SYNC_init+0x13e>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 800435c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800435e:	f7ff fd7f 	bl	8003e60 <OD_getIndex>
 8004362:	4603      	mov	r3, r0
 8004364:	461a      	mov	r2, r3
 8004366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004368:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 800436a:	f06f 030b 	mvn.w	r3, #11
 800436e:	e077      	b.n	8004460 <CO_SYNC_init+0x234>
        }
        if (syncCounterOvf == 1U) {
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d102      	bne.n	800437c <CO_SYNC_init+0x150>
            syncCounterOvf = 2;
 8004376:	2302      	movs	r3, #2
 8004378:	75fb      	strb	r3, [r7, #23]
 800437a:	e004      	b.n	8004386 <CO_SYNC_init+0x15a>
        } else if (syncCounterOvf > 240U) {
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	2bf0      	cmp	r3, #240	; 0xf0
 8004380:	d901      	bls.n	8004386 <CO_SYNC_init+0x15a>
            syncCounterOvf = 240;
 8004382:	23f0      	movs	r3, #240	; 0xf0
 8004384:	75fb      	strb	r3, [r7, #23]
        } else { /* MISRA C 2004 14.10 */
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->OD_1019_extension.object = SYNC;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	64da      	str	r2, [r3, #76]	; 0x4c
        SYNC->OD_1019_extension.read = OD_readOriginal;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a36      	ldr	r2, [pc, #216]	; (8004468 <CO_SYNC_init+0x23c>)
 8004390:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.write = OD_write_1019;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4a36      	ldr	r2, [pc, #216]	; (8004470 <CO_SYNC_init+0x244>)
 8004396:	655a      	str	r2, [r3, #84]	; 0x54
        (void)OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	334c      	adds	r3, #76	; 0x4c
 800439c:	4619      	mov	r1, r3
 800439e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043a0:	f7ff fd6e 	bl	8003e80 <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 80043a4:	7dfa      	ldrb	r2, [r7, #23]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = (cobIdSync & 0x40000000U) != 0U;
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	bf14      	ite	ne
 80043ba:	2301      	movne	r3, #1
 80043bc:	2300      	moveq	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	625a      	str	r2, [r3, #36]	; 0x24
    SYNC->CANdevTx = CANdevTx;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SYNC->CANdevRx = CANdevRx;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80043e6:	869a      	strh	r2, [r3, #52]	; 0x34
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANdevTxIdx = CANdevTxIdx;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80043ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
#endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, (uint16_t)(cobIdSync & 0x7FFU), 0x7FF, false,
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80043fc:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <CO_SYNC_init+0x248>)
 80043fe:	9302      	str	r3, [sp, #8]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	2300      	movs	r3, #0
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800440c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800440e:	f002 f8f9 	bl	8006604 <CO_CANrxBufferInit>
 8004412:	4603      	mov	r3, r0
 8004414:	77bb      	strb	r3, [r7, #30]
                                              (void*)SYNC, CO_SYNC_receive);
    if (ret != CO_ERROR_NO) {
 8004416:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <CO_SYNC_init+0x1f8>
        return ret;
 800441e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004422:	e01d      	b.n	8004460 <CO_SYNC_init+0x234>
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800442c:	b29a      	uxth	r2, r3
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);
 800442e:	7dfb      	ldrb	r3, [r7, #23]
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <CO_SYNC_init+0x20c>
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <CO_SYNC_init+0x20e>
 8004438:	2300      	movs	r3, #0
 800443a:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800443c:	2000      	movs	r0, #0
 800443e:	9001      	str	r0, [sp, #4]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	2300      	movs	r3, #0
 8004444:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004446:	f002 f939 	bl	80066bc <CO_CANtxBufferInit>
 800444a:	4602      	mov	r2, r0
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (SYNC->CANtxBuff == NULL) {
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <CO_SYNC_init+0x232>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004458:	f04f 33ff 	mov.w	r3, #4294967295
 800445c:	e000      	b.n	8004460 <CO_SYNC_init+0x234>
    }
#endif

    return CO_ERROR_NO;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3720      	adds	r7, #32
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	0800147f 	.word	0x0800147f
 800446c:	08003fe9 	.word	0x08003fe9
 8004470:	08004171 	.word	0x08004171
 8004474:	08003f5f 	.word	0x08003f5f

08004478 <CO_SYNC_process>:
    }
}
#endif

CO_SYNC_status_t
CO_SYNC_process(CO_SYNC_t* SYNC, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	; 0x28
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8004486:	2300      	movs	r3, #0
 8004488:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8088 	beq.w	80045a2 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4413      	add	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) {
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d902      	bls.n	80044ac <CO_SYNC_process+0x34>
            SYNC->timer = timerNew;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	619a      	str	r2, [r3, #24]
        }

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 80044ba:	2301      	movs	r3, #1
 80044bc:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = (SYNC->OD_1006_period != NULL) ? *SYNC->OD_1006_period : 0U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <CO_SYNC_process+0x5c>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	e000      	b.n	80044d6 <CO_SYNC_process+0x5e>
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0U) {
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d031      	beq.n	8004542 <CO_SYNC_process+0xca>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
            if (SYNC->isProducer) {
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d828      	bhi.n	8004542 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 80044f0:	2301      	movs	r3, #1
 80044f2:	77fb      	strb	r3, [r7, #31]
                    (void)CO_SYNCsend(SYNC);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff fd00 	bl	8003efa <CO_SYNCsend>
 80044fa:	e022      	b.n	8004542 <CO_SYNC_process+0xca>
#endif
            } else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

                /* Verify timeout of SYNC */
                if (SYNC->timeoutError == 1U) {
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	7c1b      	ldrb	r3, [r3, #16]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d11e      	bne.n	8004542 <CO_SYNC_process+0xca>
                    /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                    uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4413      	add	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
                    if (periodTimeout < OD_1006_period) {
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	429a      	cmp	r2, r3
 8004514:	d202      	bcs.n	800451c <CO_SYNC_process+0xa4>
                        periodTimeout = 0xFFFFFFFFU;
 8004516:	f04f 33ff 	mov.w	r3, #4294967295
 800451a:	61bb      	str	r3, [r7, #24]
                    }

                    if (SYNC->timer > periodTimeout) {
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	429a      	cmp	r2, r3
 8004524:	d20d      	bcs.n	8004542 <CO_SYNC_process+0xca>
                        CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8004534:	2218      	movs	r2, #24
 8004536:	2101      	movs	r1, #1
 8004538:	f7fc f973 	bl	8000822 <CO_error>
                        SYNC->timeoutError = 2;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2202      	movs	r2, #2
 8004540:	741a      	strb	r2, [r3, #16]
                } else { /* MISRA C 2004 14.10 */
                }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if ((SYNC->OD_1007_window != NULL) && (*SYNC->OD_1007_window > 0U) && (SYNC->timer > *SYNC->OD_1007_window)) {
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d015      	beq.n	8004576 <CO_SYNC_process+0xfe>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d010      	beq.n	8004576 <CO_SYNC_process+0xfe>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	699a      	ldr	r2, [r3, #24]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d909      	bls.n	8004576 <CO_SYNC_process+0xfe>
            if (!SYNC->syncIsOutsideWindow) {
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 800456a:	2302      	movs	r3, #2
 800456c:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	615a      	str	r2, [r3, #20]
 8004574:	e002      	b.n	800457c <CO_SYNC_process+0x104>
        } else {
            SYNC->syncIsOutsideWindow = false;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0U) {
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	7a1b      	ldrb	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01a      	beq.n	80045ba <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	7a1b      	ldrb	r3, [r3, #8]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	f248 2340 	movw	r3, #33344	; 0x8240
 8004592:	2219      	movs	r2, #25
 8004594:	2101      	movs	r1, #1
 8004596:	f7fc f944 	bl	8000822 <CO_error>
            SYNC->receiveError = 0;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	721a      	strb	r2, [r3, #8]
 80045a0:	e00b      	b.n	80045ba <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 80045ba:	7ffb      	ldrb	r3, [r7, #31]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d10f      	bne.n	80045e0 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2U) {
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	7c1b      	ldrb	r3, [r3, #16]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d108      	bne.n	80045da <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	2300      	movs	r3, #0
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	2300      	movs	r3, #0
 80045d2:	2218      	movs	r2, #24
 80045d4:	2100      	movs	r1, #0
 80045d6:	f7fc f924 	bl	8000822 <CO_error>
        }
        SYNC->timeoutError = 1;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 80045e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <CO_getUint16>:
CO_getUint16(const void* buf) {
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 80045f8:	81fb      	strh	r3, [r7, #14]
    return value;
 80045fa:	89fb      	ldrh	r3, [r7, #14]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr

08004606 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8004606:	b480      	push	{r7}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004612:	60fb      	str	r3, [r7, #12]
    return value;
 8004614:	68fb      	ldr	r3, [r7, #12]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr

08004620 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <OD_getIndex+0x14>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	e000      	b.n	8004636 <OD_getIndex+0x16>
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8004650:	2305      	movs	r3, #5
 8004652:	e003      	b.n	800465c <OD_extension_init+0x1c>
    entry->extension = extension;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	bc80      	pop	{r7}
 8004664:	4770      	bx	lr

08004666 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af02      	add	r7, sp, #8
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
 8004672:	460b      	mov	r3, r1
 8004674:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004676:	7af9      	ldrb	r1, [r7, #11]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	2304      	movs	r3, #4
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f7fd f949 	bl	8001918 <OD_get_value>
 8004686:	4603      	mov	r3, r0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_TIME_receive(void* object, void* msg) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
    CO_TIME_t* TIME = object;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	791b      	ldrb	r3, [r3, #4]
 80046a2:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	3305      	adds	r3, #5
 80046a8:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	2b06      	cmp	r3, #6
 80046ae:	d108      	bne.n	80046c2 <CO_TIME_receive+0x32>
        (void)memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2206      	movs	r2, #6
 80046b4:	68f9      	ldr	r1, [r7, #12]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f007 fb0c 	bl	800bcd4 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2201      	movs	r2, #1
 80046c0:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 80046c2:	bf00      	nop
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <OD_write_1012>:
 * Custom function for writing OD object "COB-ID time stamp"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1012(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00c      	beq.n	80046fa <OD_write_1012+0x2e>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	7d1b      	ldrb	r3, [r3, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d108      	bne.n	80046fa <OD_write_1012+0x2e>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <OD_write_1012+0x2e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d102      	bne.n	80046fa <OD_write_1012+0x2e>
        || (countWritten == NULL)) {
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <OD_write_1012+0x32>
        return ODR_DEV_INCOMPAT;
 80046fa:	2309      	movs	r3, #9
 80046fc:	e051      	b.n	80047a2 <OD_write_1012+0xd6>
    }

    CO_TIME_t* TIME = stream->object;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8004704:	68b8      	ldr	r0, [r7, #8]
 8004706:	f7ff ff7e 	bl	8004606 <CO_getUint32>
 800470a:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004714:	82fb      	strh	r3, [r7, #22]
    if (((cobIdTimeStamp & 0x3FFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4b24      	ldr	r3, [pc, #144]	; (80047ac <OD_write_1012+0xe0>)
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d126      	bne.n	800476e <OD_write_1012+0xa2>
 8004720:	8afb      	ldrh	r3, [r7, #22]
 8004722:	2b7f      	cmp	r3, #127	; 0x7f
 8004724:	d923      	bls.n	800476e <OD_write_1012+0xa2>
 8004726:	8afb      	ldrh	r3, [r7, #22]
 8004728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472c:	d903      	bls.n	8004736 <OD_write_1012+0x6a>
 800472e:	8afb      	ldrh	r3, [r7, #22]
 8004730:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004734:	d91b      	bls.n	800476e <OD_write_1012+0xa2>
 8004736:	8afb      	ldrh	r3, [r7, #22]
 8004738:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800473c:	d903      	bls.n	8004746 <OD_write_1012+0x7a>
 800473e:	8afb      	ldrh	r3, [r7, #22]
 8004740:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004744:	d313      	bcc.n	800476e <OD_write_1012+0xa2>
 8004746:	8afb      	ldrh	r3, [r7, #22]
 8004748:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800474c:	d903      	bls.n	8004756 <OD_write_1012+0x8a>
 800474e:	8afb      	ldrh	r3, [r7, #22]
 8004750:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004754:	d30b      	bcc.n	800476e <OD_write_1012+0xa2>
 8004756:	8afb      	ldrh	r3, [r7, #22]
 8004758:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800475c:	d303      	bcc.n	8004766 <OD_write_1012+0x9a>
 800475e:	8afb      	ldrh	r3, [r7, #22]
 8004760:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004764:	d303      	bcc.n	800476e <OD_write_1012+0xa2>
 8004766:	8afb      	ldrh	r3, [r7, #22]
 8004768:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800476c:	d901      	bls.n	8004772 <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 800476e:	230f      	movs	r3, #15
 8004770:	e017      	b.n	80047a2 <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	0fdb      	lsrs	r3, r3, #31
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	461a      	mov	r2, r3
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7fc fec7 	bl	800152e <OD_writeOriginal>
 80047a0:	4603      	mov	r3, r0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	3ffff800 	.word	0x3ffff800

080047b0 <CO_TIME_init>:
CO_ReturnError_t
CO_TIME_init(CO_TIME_t* TIME, OD_entry_t* OD_1012_cobIdTimeStamp, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08c      	sub	sp, #48	; 0x30
 80047b4:	af04      	add	r7, sp, #16
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if ((TIME == NULL) || (OD_1012_cobIdTimeStamp == NULL) || (CANdevRx == NULL)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <CO_TIME_init+0x20>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <CO_TIME_init+0x20>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <CO_TIME_init+0x26>
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80047d0:	f04f 33ff 	mov.w	r3, #4294967295
 80047d4:	e061      	b.n	800489a <CO_TIME_init+0xea>
    }

    (void)memset(TIME, 0, sizeof(CO_TIME_t));
 80047d6:	222c      	movs	r2, #44	; 0x2c
 80047d8:	2100      	movs	r1, #0
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f007 f9f0 	bl	800bbc0 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 80047e0:	f107 0214 	add.w	r2, r7, #20
 80047e4:	2301      	movs	r3, #1
 80047e6:	2100      	movs	r1, #0
 80047e8:	68b8      	ldr	r0, [r7, #8]
 80047ea:	f7ff ff3c 	bl	8004666 <OD_get_u32>
 80047ee:	4603      	mov	r3, r0
 80047f0:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80047f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00c      	beq.n	8004814 <CO_TIME_init+0x64>
        if (errInfo != NULL) {
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d006      	beq.n	800480e <CO_TIME_init+0x5e>
            *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8004800:	68b8      	ldr	r0, [r7, #8]
 8004802:	f7ff ff0d 	bl	8004620 <OD_getIndex>
 8004806:	4603      	mov	r3, r0
 8004808:	461a      	mov	r2, r3
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800480e:	f06f 030b 	mvn.w	r3, #11
 8004812:	e042      	b.n	800489a <CO_TIME_init+0xea>
    }
#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    TIME->OD_1012_extension.object = TIME;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a21      	ldr	r2, [pc, #132]	; (80048a4 <CO_TIME_init+0xf4>)
 800481e:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <CO_TIME_init+0xf8>)
 8004824:	625a      	str	r2, [r3, #36]	; 0x24
    (void)OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	331c      	adds	r3, #28
 800482a:	4619      	mov	r1, r3
 800482c:	68b8      	ldr	r0, [r7, #8]
 800482e:	f7ff ff07 	bl	8004640 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800483a:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	0fdb      	lsrs	r3, r3, #31
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	bf14      	ite	ne
 8004852:	2301      	movne	r3, #1
 8004854:	2300      	moveq	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
    if (TIME->isConsumer) {
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d015      	beq.n	8004898 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, cobId, 0x7FF, false, (void*)TIME,
 800486c:	8bba      	ldrh	r2, [r7, #28]
 800486e:	8879      	ldrh	r1, [r7, #2]
 8004870:	4b0e      	ldr	r3, [pc, #56]	; (80048ac <CO_TIME_init+0xfc>)
 8004872:	9302      	str	r3, [sp, #8]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	2300      	movs	r3, #0
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f001 febf 	bl	8006604 <CO_CANrxBufferInit>
 8004886:	4603      	mov	r3, r0
 8004888:	76fb      	strb	r3, [r7, #27]
                                                  CO_TIME_receive);
        if (ret != CO_ERROR_NO) {
 800488a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <CO_TIME_init+0xe8>
            return ret;
 8004892:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004896:	e000      	b.n	800489a <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	0800147f 	.word	0x0800147f
 80048a8:	080046cd 	.word	0x080046cd
 80048ac:	08004691 	.word	0x08004691

080048b0 <CO_TIME_process>:
    }
}
#endif

bool_t
CO_TIME_process(CO_TIME_t* TIME, bool_t NMTisPreOrOperational, uint32_t timeDifference_us) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	; 0x28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 80048bc:	2300      	movs	r3, #0
 80048be:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d024      	beq.n	8004910 <CO_TIME_process+0x60>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d020      	beq.n	8004910 <CO_TIME_process+0x60>
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01f      	beq.n	8004916 <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff fe94 	bl	8004606 <CO_getUint32>
 80048de:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fe80 	bl	80045ea <CO_getUint16>
 80048ea:	4603      	mov	r3, r0
 80048ec:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFFU;
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8bfa      	ldrh	r2, [r7, #30]
 80048fc:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8004904:	2301      	movs	r3, #1
 8004906:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	619a      	str	r2, [r3, #24]
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 800490e:	e002      	b.n	8004916 <CO_TIME_process+0x66>
        }
    } else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && (timeDifference_us > 0U)) {
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	d132      	bne.n	8004986 <CO_TIME_process+0xd6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d02f      	beq.n	8004986 <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	89db      	ldrh	r3, [r3, #14]
 800492a:	461a      	mov	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4413      	add	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
        ms = us / 1000U;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	4a16      	ldr	r2, [pc, #88]	; (8004990 <CO_TIME_process+0xe0>)
 8004936:	fba2 2303 	umull	r2, r3, r2, r3
 800493a:	099b      	lsrs	r3, r3, #6
 800493c:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = (uint16_t)(us % 1000U);
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4b13      	ldr	r3, [pc, #76]	; (8004990 <CO_TIME_process+0xe0>)
 8004942:	fba3 1302 	umull	r1, r3, r3, r2
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	441a      	add	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000U * 60U * 60U * 24U)) {
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <CO_TIME_process+0xe4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d90b      	bls.n	8004986 <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000U * 60U * 60U * 24U);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	4b09      	ldr	r3, [pc, #36]	; (8004998 <CO_TIME_process+0xe8>)
 8004974:	4413      	add	r3, r2
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	6093      	str	r3, [r2, #8]
            TIME->days += 1U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	899b      	ldrh	r3, [r3, #12]
 800497e:	3301      	adds	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	819a      	strh	r2, [r3, #12]
    } else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004988:	4618      	mov	r0, r3
 800498a:	3728      	adds	r7, #40	; 0x28
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	10624dd3 	.word	0x10624dd3
 8004994:	05265bff 	.word	0x05265bff
 8004998:	fad9a400 	.word	0xfad9a400

0800499c <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

CO_ReturnError_t
CO_LEDs_init(CO_LEDs_t* LEDs) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80049a4:	2300      	movs	r3, #0
 80049a6:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80049ae:	f04f 33ff 	mov.w	r3, #4294967295
 80049b2:	e006      	b.n	80049c2 <CO_LEDs_init+0x26>
    }

    /* clear the object */
    (void)memset(LEDs, 0, sizeof(CO_LEDs_t));
 80049b4:	220c      	movs	r2, #12
 80049b6:	2100      	movs	r1, #0
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f007 f901 	bl	800bbc0 <memset>

    return ret;
 80049be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <CO_LEDs_process>:
		bool_t ErrSync,
		bool_t ErrHbCons,
        bool_t ErrOther,
		bool_t firmwareDownload,
		uint32_t* timerNext_us)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b089      	sub	sp, #36	; 0x24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	441a      	add	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000U) {
 80049f4:	e112      	b.n	8004c1c <CO_LEDs_process+0x250>
        bool_t rdFlickerNext = (LEDs->LEDred & (uint8_t)CO_LED_flicker) == 0U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	7a5b      	ldrb	r3, [r3, #9]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bf0c      	ite	eq
 8004a02:	2301      	moveq	r3, #1
 8004a04:	2300      	movne	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	613b      	str	r3, [r7, #16]

        tick = true;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8004a16:	3b50      	subs	r3, #80	; 0x50
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3U) {
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	791b      	ldrb	r3, [r3, #4]
 8004a20:	3301      	adds	r3, #1
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	711a      	strb	r2, [r3, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	791b      	ldrb	r3, [r3, #4]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	f240 80dd 	bls.w	8004bec <CO_LEDs_process+0x220>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	711a      	strb	r2, [r3, #4]
            rd = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	77fb      	strb	r3, [r7, #31]
            gr = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	77bb      	strb	r3, [r7, #30]

            if ((LEDs->LEDred & CO_LED_blink) == 0U) {
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	7a5b      	ldrb	r3, [r3, #9]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <CO_LEDs_process+0x8a>
                rd |= CO_LED_blink;
 8004a4c:	7ffb      	ldrb	r3, [r7, #31]
 8004a4e:	f043 0302 	orr.w	r3, r3, #2
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e003      	b.n	8004a5e <CO_LEDs_process+0x92>
            } else {
                gr |= CO_LED_blink;
 8004a56:	7fbb      	ldrb	r3, [r7, #30]
 8004a58:	f043 0302 	orr.w	r3, r3, #2
 8004a5c:	77bb      	strb	r3, [r7, #30]
            }


            switch (++LEDs->LEDtmrflash_1)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	795b      	ldrb	r3, [r3, #5]
 8004a62:	3301      	adds	r3, #1
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	715a      	strb	r2, [r3, #5]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	795b      	ldrb	r3, [r3, #5]
 8004a6e:	2b06      	cmp	r3, #6
 8004a70:	d010      	beq.n	8004a94 <CO_LEDs_process+0xc8>
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	dc12      	bgt.n	8004a9c <CO_LEDs_process+0xd0>
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d002      	beq.n	8004a80 <CO_LEDs_process+0xb4>
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d005      	beq.n	8004a8a <CO_LEDs_process+0xbe>
            {
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: /* none */ break;
 8004a7e:	e00d      	b.n	8004a9c <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 8004a80:	7ffb      	ldrb	r3, [r7, #31]
 8004a82:	f043 0304 	orr.w	r3, r3, #4
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e009      	b.n	8004a9e <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 8004a8a:	7fbb      	ldrb	r3, [r7, #30]
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	77bb      	strb	r3, [r7, #30]
 8004a92:	e004      	b.n	8004a9e <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	715a      	strb	r2, [r3, #5]
 8004a9a:	e000      	b.n	8004a9e <CO_LEDs_process+0xd2>
                default: /* none */ break;
 8004a9c:	bf00      	nop
            }


            switch (++LEDs->LEDtmrflash_2)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	799b      	ldrb	r3, [r3, #6]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	719a      	strb	r2, [r3, #6]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	799b      	ldrb	r3, [r3, #6]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	2b07      	cmp	r3, #7
 8004ab2:	d821      	bhi.n	8004af8 <CO_LEDs_process+0x12c>
 8004ab4:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <CO_LEDs_process+0xf0>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004add 	.word	0x08004add
 8004ac0:	08004ae7 	.word	0x08004ae7
 8004ac4:	08004add 	.word	0x08004add
 8004ac8:	08004ae7 	.word	0x08004ae7
 8004acc:	08004af9 	.word	0x08004af9
 8004ad0:	08004af9 	.word	0x08004af9
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004af1 	.word	0x08004af1
            {
                case 1:
                case 3: rd |= CO_LED_flash_2; break;
 8004adc:	7ffb      	ldrb	r3, [r7, #31]
 8004ade:	f043 0308 	orr.w	r3, r3, #8
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e009      	b.n	8004afa <CO_LEDs_process+0x12e>
                case 2:
                case 4: gr |= CO_LED_flash_2; break;
 8004ae6:	7fbb      	ldrb	r3, [r7, #30]
 8004ae8:	f043 0308 	orr.w	r3, r3, #8
 8004aec:	77bb      	strb	r3, [r7, #30]
 8004aee:	e004      	b.n	8004afa <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	719a      	strb	r2, [r3, #6]
 8004af6:	e000      	b.n	8004afa <CO_LEDs_process+0x12e>
                default: /* none */ break;
 8004af8:	bf00      	nop
            }


            switch (++LEDs->LEDtmrflash_3)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	79db      	ldrb	r3, [r3, #7]
 8004afe:	3301      	adds	r3, #1
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	71da      	strb	r2, [r3, #7]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	79db      	ldrb	r3, [r3, #7]
 8004b0a:	2b0a      	cmp	r3, #10
 8004b0c:	bf8c      	ite	hi
 8004b0e:	2201      	movhi	r2, #1
 8004b10:	2200      	movls	r2, #0
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	2a00      	cmp	r2, #0
 8004b16:	d12c      	bne.n	8004b72 <CO_LEDs_process+0x1a6>
 8004b18:	2201      	movs	r2, #1
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	f003 0254 	and.w	r2, r3, #84	; 0x54
 8004b22:	2a00      	cmp	r2, #0
 8004b24:	bf14      	ite	ne
 8004b26:	2201      	movne	r2, #1
 8004b28:	2200      	moveq	r2, #0
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	2a00      	cmp	r2, #0
 8004b2e:	d117      	bne.n	8004b60 <CO_LEDs_process+0x194>
 8004b30:	f003 022a 	and.w	r2, r3, #42	; 0x2a
 8004b34:	2a00      	cmp	r2, #0
 8004b36:	bf14      	ite	ne
 8004b38:	2201      	movne	r2, #1
 8004b3a:	2200      	moveq	r2, #0
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	2a00      	cmp	r2, #0
 8004b40:	d109      	bne.n	8004b56 <CO_LEDs_process+0x18a>
 8004b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bf14      	ite	ne
 8004b4a:	2301      	movne	r3, #1
 8004b4c:	2300      	moveq	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <CO_LEDs_process+0x19e>
                case 5: rd |= CO_LED_flash_3; break;
                case 2:
                case 4:
                case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: /* none */ break;
 8004b54:	e00d      	b.n	8004b72 <CO_LEDs_process+0x1a6>
                case 5: rd |= CO_LED_flash_3; break;
 8004b56:	7ffb      	ldrb	r3, [r7, #31]
 8004b58:	f043 0310 	orr.w	r3, r3, #16
 8004b5c:	77fb      	strb	r3, [r7, #31]
 8004b5e:	e009      	b.n	8004b74 <CO_LEDs_process+0x1a8>
                case 6: gr |= CO_LED_flash_3; break;
 8004b60:	7fbb      	ldrb	r3, [r7, #30]
 8004b62:	f043 0310 	orr.w	r3, r3, #16
 8004b66:	77bb      	strb	r3, [r7, #30]
 8004b68:	e004      	b.n	8004b74 <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	71da      	strb	r2, [r3, #7]
 8004b70:	e000      	b.n	8004b74 <CO_LEDs_process+0x1a8>
                default: /* none */ break;
 8004b72:	bf00      	nop
            }


            switch (++LEDs->LEDtmrflash_4)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	7a1b      	ldrb	r3, [r3, #8]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	721a      	strb	r2, [r3, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	7a1b      	ldrb	r3, [r3, #8]
 8004b84:	2b0c      	cmp	r3, #12
 8004b86:	bf8c      	ite	hi
 8004b88:	2201      	movhi	r2, #1
 8004b8a:	2200      	movls	r2, #0
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	2a00      	cmp	r2, #0
 8004b90:	d137      	bne.n	8004c02 <CO_LEDs_process+0x236>
 8004b92:	2201      	movs	r2, #1
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	f403 72aa 	and.w	r2, r3, #340	; 0x154
 8004b9c:	2a00      	cmp	r2, #0
 8004b9e:	bf14      	ite	ne
 8004ba0:	2201      	movne	r2, #1
 8004ba2:	2200      	moveq	r2, #0
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	2a00      	cmp	r2, #0
 8004ba8:	d117      	bne.n	8004bda <CO_LEDs_process+0x20e>
 8004baa:	f003 02aa 	and.w	r2, r3, #170	; 0xaa
 8004bae:	2a00      	cmp	r2, #0
 8004bb0:	bf14      	ite	ne
 8004bb2:	2201      	movne	r2, #1
 8004bb4:	2200      	moveq	r2, #0
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	2a00      	cmp	r2, #0
 8004bba:	d109      	bne.n	8004bd0 <CO_LEDs_process+0x204>
 8004bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <CO_LEDs_process+0x218>
                case 2:
                case 4:
                case 6:
                case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: /* none */ break;
 8004bce:	e018      	b.n	8004c02 <CO_LEDs_process+0x236>
                case 7: rd |= CO_LED_flash_4; break;
 8004bd0:	7ffb      	ldrb	r3, [r7, #31]
 8004bd2:	f043 0320 	orr.w	r3, r3, #32
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e014      	b.n	8004c04 <CO_LEDs_process+0x238>
                case 8: gr |= CO_LED_flash_4; break;
 8004bda:	7fbb      	ldrb	r3, [r7, #30]
 8004bdc:	f043 0320 	orr.w	r3, r3, #32
 8004be0:	77bb      	strb	r3, [r7, #30]
 8004be2:	e00f      	b.n	8004c04 <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	721a      	strb	r2, [r3, #8]
 8004bea:	e00b      	b.n	8004c04 <CO_LEDs_process+0x238>
            }


        } else 	{
            	/* clear flicker and CANopen bits, keep others */
            	rd = LEDs->LEDred   & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	7a5b      	ldrb	r3, [r3, #9]
 8004bf0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004bf4:	77fb      	strb	r3, [r7, #31]
            	gr = LEDs->LEDgreen & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	7a9b      	ldrb	r3, [r3, #10]
 8004bfa:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004bfe:	77bb      	strb	r3, [r7, #30]
 8004c00:	e000      	b.n	8004c04 <CO_LEDs_process+0x238>
                default: /* none */ break;
 8004c02:	bf00      	nop
        		}

        /* calculate 10Hz flickering */
        if (rdFlickerNext) 	{
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <CO_LEDs_process+0x248>
            				rd |= CO_LED_flicker;
 8004c0a:	7ffb      	ldrb	r3, [r7, #31]
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	e003      	b.n	8004c1c <CO_LEDs_process+0x250>
							} else 	{
									gr |= CO_LED_flicker;
 8004c14:	7fbb      	ldrb	r3, [r7, #30]
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004c24:	4293      	cmp	r3, r2
 8004c26:	f63f aee6 	bhi.w	80049f6 <CO_LEDs_process+0x2a>
									}

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d077      	beq.n	8004d20 <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if (ErrCANbusOff) {
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <CO_LEDs_process+0x270>
            rd_co = 1;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
 8004c3a:	e032      	b.n	8004ca2 <CO_LEDs_process+0x2d6>
        } else if (NMTstate == CO_NMT_INITIALIZING) {
 8004c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d104      	bne.n	8004c4e <CO_LEDs_process+0x282>
            rd_co = rd & CO_LED_flicker;
 8004c44:	7ffb      	ldrb	r3, [r7, #31]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
 8004c4c:	e029      	b.n	8004ca2 <CO_LEDs_process+0x2d6>
        } else if (ErrRpdo) {
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <CO_LEDs_process+0x292>
            rd_co = rd & CO_LED_flash_4;
 8004c54:	7ffb      	ldrb	r3, [r7, #31]
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	75fb      	strb	r3, [r7, #23]
 8004c5c:	e021      	b.n	8004ca2 <CO_LEDs_process+0x2d6>
        } else if (ErrSync) {
 8004c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d004      	beq.n	8004c6e <CO_LEDs_process+0x2a2>
            rd_co = rd & CO_LED_flash_3;
 8004c64:	7ffb      	ldrb	r3, [r7, #31]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	75fb      	strb	r3, [r7, #23]
 8004c6c:	e019      	b.n	8004ca2 <CO_LEDs_process+0x2d6>
        } else if (ErrHbCons) {
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <CO_LEDs_process+0x2b2>
            rd_co = rd & CO_LED_flash_2;
 8004c74:	7ffb      	ldrb	r3, [r7, #31]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	75fb      	strb	r3, [r7, #23]
 8004c7c:	e011      	b.n	8004ca2 <CO_LEDs_process+0x2d6>
        } else if (ErrCANbusWarn) {
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d004      	beq.n	8004c8e <CO_LEDs_process+0x2c2>
            rd_co = rd & CO_LED_flash_1;
 8004c84:	7ffb      	ldrb	r3, [r7, #31]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	75fb      	strb	r3, [r7, #23]
 8004c8c:	e009      	b.n	8004ca2 <CO_LEDs_process+0x2d6>
        } else if (ErrOther) {
 8004c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d004      	beq.n	8004c9e <CO_LEDs_process+0x2d2>
            rd_co = rd & CO_LED_blink;
 8004c94:	7ffb      	ldrb	r3, [r7, #31]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	75fb      	strb	r3, [r7, #23]
 8004c9c:	e001      	b.n	8004ca2 <CO_LEDs_process+0x2d6>
        } else {
            rd_co = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	75fb      	strb	r3, [r7, #23]
        }

        /* CANopen green RUN LED */
        if (LSSconfig) {
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <CO_LEDs_process+0x2e6>
            gr_co = gr & CO_LED_flicker;
 8004ca8:	7fbb      	ldrb	r3, [r7, #30]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	75bb      	strb	r3, [r7, #22]
 8004cb0:	e022      	b.n	8004cf8 <CO_LEDs_process+0x32c>
        } else if (firmwareDownload) {
 8004cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d004      	beq.n	8004cc2 <CO_LEDs_process+0x2f6>
            gr_co = gr & CO_LED_flash_3;
 8004cb8:	7fbb      	ldrb	r3, [r7, #30]
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	75bb      	strb	r3, [r7, #22]
 8004cc0:	e01a      	b.n	8004cf8 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_STOPPED) {
 8004cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d104      	bne.n	8004cd4 <CO_LEDs_process+0x308>
            gr_co = gr & CO_LED_flash_1;
 8004cca:	7fbb      	ldrb	r3, [r7, #30]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	75bb      	strb	r3, [r7, #22]
 8004cd2:	e011      	b.n	8004cf8 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_PRE_OPERATIONAL) {
 8004cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cda:	d104      	bne.n	8004ce6 <CO_LEDs_process+0x31a>
            gr_co = gr & CO_LED_blink;
 8004cdc:	7fbb      	ldrb	r3, [r7, #30]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	75bb      	strb	r3, [r7, #22]
 8004ce4:	e008      	b.n	8004cf8 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_OPERATIONAL) {
 8004ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cea:	2b05      	cmp	r3, #5
 8004cec:	d102      	bne.n	8004cf4 <CO_LEDs_process+0x328>
            gr_co = 1;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	75bb      	strb	r3, [r7, #22]
 8004cf2:	e001      	b.n	8004cf8 <CO_LEDs_process+0x32c>
        } else {
            gr_co = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	75bb      	strb	r3, [r7, #22]
        }

        if (rd_co != 0U) {
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <CO_LEDs_process+0x33a>
            rd |= CO_LED_CANopen;
 8004cfe:	7ffb      	ldrb	r3, [r7, #31]
 8004d00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d04:	77fb      	strb	r3, [r7, #31]
        }
        if (gr_co != 0U) {
 8004d06:	7dbb      	ldrb	r3, [r7, #22]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <CO_LEDs_process+0x348>
            gr |= CO_LED_CANopen;
 8004d0c:	7fbb      	ldrb	r3, [r7, #30]
 8004d0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d12:	77bb      	strb	r3, [r7, #30]
        }
        LEDs->LEDred = rd;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	7ffa      	ldrb	r2, [r7, #31]
 8004d18:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	7fba      	ldrb	r2, [r7, #30]
 8004d1e:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8004d20:	bf00      	nop
 8004d22:	3724      	adds	r7, #36	; 0x24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop

08004d2c <CO_LSSslave_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSslave_receive(void* object, void* msg) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b090      	sub	sp, #64	; 0x40
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t* LSSslave = (CO_LSSslave_t*)object;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	791b      	ldrb	r3, [r3, #4]
 8004d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if ((DLC == 8U) && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8004d42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	f040 814f 	bne.w	8004fea <CO_LSSslave_receive+0x2be>
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f040 814a 	bne.w	8004fea <CO_LSSslave_receive+0x2be>
        bool_t request_LSSslave_process = false;
 8004d56:	2300      	movs	r3, #0
 8004d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        const uint8_t* data = CO_CANrxMsg_readData(msg);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	3305      	adds	r3, #5
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t cs = data[0];
 8004d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8004d68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d12d      	bne.n	8004dcc <CO_LSSslave_receive+0xa0>
            uint8_t mode = data[1];
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	3301      	adds	r3, #1
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8004d78:	7ffb      	ldrb	r3, [r7, #31]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <CO_LSSslave_receive+0x58>
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d020      	beq.n	8004dc4 <CO_LSSslave_receive+0x98>
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
                    break;
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
                default:
                    /* none */
                    break;
 8004d82:	e12c      	b.n	8004fde <CO_LSSslave_receive+0x2b2>
                    if ((LSSslave->lssState == CO_LSS_STATE_CONFIGURATION)
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	7c1b      	ldrb	r3, [r3, #16]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d110      	bne.n	8004dae <CO_LSSslave_receive+0x82>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d92:	2bff      	cmp	r3, #255	; 0xff
 8004d94:	d10b      	bne.n	8004dae <CO_LSSslave_receive+0x82>
                        && (*LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)) {
 8004d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2bff      	cmp	r3, #255	; 0xff
 8004d9e:	d006      	beq.n	8004dae <CO_LSSslave_receive+0x82>
                        LSSslave->service = cs;
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004da6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8004daa:	2301      	movs	r3, #1
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	2200      	movs	r2, #0
 8004db2:	741a      	strb	r2, [r3, #16]
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	3314      	adds	r3, #20
 8004db8:	2210      	movs	r2, #16
 8004dba:	2100      	movs	r1, #0
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f006 feff 	bl	800bbc0 <memset>
                    break;
 8004dc2:	e10c      	b.n	8004fde <CO_LSSslave_receive+0x2b2>
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	741a      	strb	r2, [r3, #16]
 8004dca:	e108      	b.n	8004fde <CO_LSSslave_receive+0x2b2>
            }
        } else if (LSSslave->lssState == CO_LSS_STATE_WAITING) {
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dce:	7c1b      	ldrb	r3, [r3, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f040 80f0 	bne.w	8004fb6 <CO_LSSslave_receive+0x28a>
            switch (cs) {
 8004dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dda:	3b40      	subs	r3, #64	; 0x40
 8004ddc:	2b11      	cmp	r3, #17
 8004dde:	f200 80f9 	bhi.w	8004fd4 <CO_LSSslave_receive+0x2a8>
 8004de2:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <CO_LSSslave_receive+0xbc>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004e31 	.word	0x08004e31
 8004dec:	08004e41 	.word	0x08004e41
 8004df0:	08004e51 	.word	0x08004e51
 8004df4:	08004e61 	.word	0x08004e61
 8004df8:	08004fd5 	.word	0x08004fd5
 8004dfc:	08004fd5 	.word	0x08004fd5
 8004e00:	08004fd5 	.word	0x08004fd5
 8004e04:	08004fd5 	.word	0x08004fd5
 8004e08:	08004fd5 	.word	0x08004fd5
 8004e0c:	08004fd5 	.word	0x08004fd5
 8004e10:	08004fd5 	.word	0x08004fd5
 8004e14:	08004fd5 	.word	0x08004fd5
 8004e18:	08004fd5 	.word	0x08004fd5
 8004e1c:	08004fd5 	.word	0x08004fd5
 8004e20:	08004fd5 	.word	0x08004fd5
 8004e24:	08004fd5 	.word	0x08004fd5
 8004e28:	08004fd5 	.word	0x08004fd5
 8004e2c:	08004ebd 	.word	0x08004ebd
                case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e32:	3301      	adds	r3, #1
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	61bb      	str	r3, [r7, #24]
                    LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3c:	615a      	str	r2, [r3, #20]
                    break;
 8004e3e:	e0ce      	b.n	8004fde <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	3301      	adds	r3, #1
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	617b      	str	r3, [r7, #20]
                    LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4c:	619a      	str	r2, [r3, #24]
                    break;
 8004e4e:	e0c6      	b.n	8004fde <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_REV: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	3301      	adds	r3, #1
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	613b      	str	r3, [r7, #16]
                    LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	61da      	str	r2, [r3, #28]
                    break;
 8004e5e:	e0be      	b.n	8004fde <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	3301      	adds	r3, #1
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]
                    LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6c:	621a      	str	r2, [r3, #32]

                    if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress, LSSslave->lssSelect)) {
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	f040 80ae 	bne.w	8004fd8 <CO_LSSslave_receive+0x2ac>
 8004e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	f040 80a7 	bne.w	8004fd8 <CO_LSSslave_receive+0x2ac>
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	f040 80a0 	bne.w	8004fd8 <CO_LSSslave_receive+0x2ac>
 8004e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	f040 8099 	bne.w	8004fd8 <CO_LSSslave_receive+0x2ac>
                        LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8004ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	741a      	strb	r2, [r3, #16]
                        LSSslave->service = cs;
 8004eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eae:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004eb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    break;
 8004eba:	e08d      	b.n	8004fd8 <CO_LSSslave_receive+0x2ac>
                }
                case CO_LSS_IDENT_FASTSCAN: {
                    /* fastscan is only active on unconfigured nodes */
                    if ((*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2bff      	cmp	r3, #255	; 0xff
 8004ec4:	f040 808a 	bne.w	8004fdc <CO_LSSslave_receive+0x2b0>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)) {
 8004ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ece:	2bff      	cmp	r3, #255	; 0xff
 8004ed0:	f040 8084 	bne.w	8004fdc <CO_LSSslave_receive+0x2b0>
                        uint8_t bitCheck = data[5];
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	3305      	adds	r3, #5
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                        uint8_t lssSub = data[6];
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	3306      	adds	r3, #6
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                        uint8_t lssNext = data[7];
 8004ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eea:	3307      	adds	r3, #7
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                        uint32_t valSw;
                        uint32_t idNumber;
                        bool_t ack;

                        if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub)
 8004ef2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004ef6:	2b1f      	cmp	r3, #31
 8004ef8:	d903      	bls.n	8004f02 <CO_LSSslave_receive+0x1d6>
 8004efa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004efe:	2b80      	cmp	r3, #128	; 0x80
 8004f00:	d16d      	bne.n	8004fde <CO_LSSslave_receive+0x2b2>
 8004f02:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d869      	bhi.n	8004fde <CO_LSSslave_receive+0x2b2>
                            || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
 8004f0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d865      	bhi.n	8004fde <CO_LSSslave_receive+0x2b2>
                            /* Invalid request */
                            break;
                        }

                        (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	3301      	adds	r3, #1
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60bb      	str	r3, [r7, #8]
                        idNumber = CO_SWAP_32(valSw);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
                        ack = false;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	63bb      	str	r3, [r7, #56]	; 0x38

                        if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8004f22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004f26:	2b80      	cmp	r3, #128	; 0x80
 8004f28:	d10d      	bne.n	8004f46 <CO_LSSslave_receive+0x21a>
                            /* Confirm, Reset */
                            ack = true;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8004f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                            (void)memset(&LSSslave->lssFastscan, 0, sizeof(LSSslave->lssFastscan));
 8004f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f38:	3324      	adds	r3, #36	; 0x24
 8004f3a:	2210      	movs	r2, #16
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f006 fe3e 	bl	800bbc0 <memset>
 8004f44:	e02c      	b.n	8004fa0 <CO_LSSslave_receive+0x274>
                        } else if (LSSslave->fastscanPos == lssSub) {
 8004f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f4c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d125      	bne.n	8004fa0 <CO_LSSslave_receive+0x274>
                            uint32_t mask = 0xFFFFFFFFU << bitCheck;
 8004f54:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004f58:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	623b      	str	r3, [r7, #32]

                            if ((LSSslave->lssAddress.addr[lssSub] & mask) == (idNumber & mask)) {
 8004f62:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	405a      	eors	r2, r3
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d113      	bne.n	8004fa0 <CO_LSSslave_receive+0x274>
                                /* all requested bits match */
                                ack = true;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	63bb      	str	r3, [r7, #56]	; 0x38
                                LSSslave->fastscanPos = lssNext;
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                                if ((bitCheck == 0U) && (lssNext < lssSub)) {
 8004f86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d108      	bne.n	8004fa0 <CO_LSSslave_receive+0x274>
 8004f8e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004f92:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d202      	bcs.n	8004fa0 <CO_LSSslave_receive+0x274>
                                    /* complete match, enter configuration state */
                                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	741a      	strb	r2, [r3, #16]
                                }
                            }
                        } else { /* MISRA C 2004 14.10 */
                        }
                        if (ack) {
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01a      	beq.n	8004fdc <CO_LSSslave_receive+0x2b0>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE_FASTSCAN_DIRECT_RESPOND) != 0
                            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                            (void)memset(&LSSslave->TXbuff->data[1], 0, sizeof(LSSslave->TXbuff->data) - 1U);
                            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                            LSSslave->service = cs;
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004fac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                            request_LSSslave_process = true;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                        }
                    }
                    break;
 8004fb4:	e012      	b.n	8004fdc <CO_LSSslave_receive+0x2b0>
                    /* none */
                    break;
                }
            }
        } else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            (void)memcpy((void*)(&LSSslave->CANdata[0]), (const void*)(&data[0]), sizeof(LSSslave->CANdata));
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb8:	3349      	adds	r3, #73	; 0x49
 8004fba:	2208      	movs	r2, #8
 8004fbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f006 fe88 	bl	800bcd4 <memcpy>
            LSSslave->service = cs;
 8004fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004fca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd2:	e004      	b.n	8004fde <CO_LSSslave_receive+0x2b2>
                    break;
 8004fd4:	bf00      	nop
 8004fd6:	e002      	b.n	8004fde <CO_LSSslave_receive+0x2b2>
                    break;
 8004fd8:	bf00      	nop
 8004fda:	e000      	b.n	8004fde <CO_LSSslave_receive+0x2b2>
                    break;
 8004fdc:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8004fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <CO_LSSslave_receive+0x2be>
            CO_FLAG_SET(LSSslave->sendResponse);
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8004fea:	bf00      	nop
 8004fec:	3740      	adds	r7, #64	; 0x40
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop

08004ff4 <CO_LSSslave_init>:

CO_ReturnError_t
CO_LSSslave_init(CO_LSSslave_t* LSSslave, CO_LSS_address_t* lssAddress, uint16_t* pendingBitRate,
                 uint8_t* pendingNodeID, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANidLssMaster,
                 CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssSlave) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08a      	sub	sp, #40	; 0x28
 8004ff8:	af04      	add	r7, sp, #16
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005002:	2300      	movs	r3, #0
 8005004:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((LSSslave == NULL) || (pendingBitRate == NULL) || (pendingNodeID == NULL) || (CANdevRx == NULL)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d018      	beq.n	800503e <CO_LSSslave_init+0x4a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d015      	beq.n	800503e <CO_LSSslave_init+0x4a>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d012      	beq.n	800503e <CO_LSSslave_init+0x4a>
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00f      	beq.n	800503e <CO_LSSslave_init+0x4a>
        || (CANdevTx == NULL) || !CO_LSS_NODE_ID_VALID(*pendingNodeID)) {
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00c      	beq.n	800503e <CO_LSSslave_init+0x4a>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d004      	beq.n	8005036 <CO_LSSslave_init+0x42>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	b25b      	sxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	da06      	bge.n	8005044 <CO_LSSslave_init+0x50>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2bff      	cmp	r3, #255	; 0xff
 800503c:	d002      	beq.n	8005044 <CO_LSSslave_init+0x50>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800503e:	f04f 33ff 	mov.w	r3, #4294967295
 8005042:	e046      	b.n	80050d2 <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    (void)memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8005044:	2274      	movs	r2, #116	; 0x74
 8005046:	2100      	movs	r1, #0
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f006 fdb9 	bl	800bbc0 <memset>

    /* Configure object variables */
    (void)memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2210      	movs	r2, #16
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	4618      	mov	r0, r3
 8005056:	f006 fe3d 	bl	800bcd4 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781a      	ldrb	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssMaster, 0x7FF, false, (void*)LSSslave, CO_LSSslave_receive);
 8005084:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005086:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005088:	4b14      	ldr	r3, [pc, #80]	; (80050dc <CO_LSSslave_init+0xe8>)
 800508a:	9302      	str	r3, [sp, #8]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	2300      	movs	r3, #0
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005098:	6a38      	ldr	r0, [r7, #32]
 800509a:	f001 fab3 	bl	8006604 <CO_CANrxBufferInit>
 800509e:	4603      	mov	r3, r0
 80050a0:	75fb      	strb	r3, [r7, #23]

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050a6:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssSlave, false, 8, false);
 80050a8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80050aa:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80050ac:	2300      	movs	r3, #0
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	2308      	movs	r3, #8
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050b8:	f001 fb00 	bl	80066bc <CO_CANtxBufferInit>
 80050bc:	4602      	mov	r2, r0
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	671a      	str	r2, [r3, #112]	; 0x70

    if (LSSslave->TXbuff == NULL) {
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80050ca:	23ff      	movs	r3, #255	; 0xff
 80050cc:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 80050ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	08004d2d 	.word	0x08004d2d

080050e0 <CO_LSSslave_process>:
        LSSslave->pFunctLSScfgStore = pFunctLSScfgStore;
    }
}

bool_t
CO_LSSslave_process(CO_LSSslave_t* LSSslave) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08c      	sub	sp, #48	; 0x30
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 80050e8:	2300      	movs	r3, #0
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8203 	beq.w	80054fc <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 80050f6:	2300      	movs	r3, #0
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        (void)memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	3305      	adds	r3, #5
 8005100:	2208      	movs	r2, #8
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f006 fd5b 	bl	800bbc0 <memset>

        switch (LSSslave->service) {
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005110:	3b04      	subs	r3, #4
 8005112:	2b5a      	cmp	r3, #90	; 0x5a
 8005114:	f200 81dd 	bhi.w	80054d2 <CO_LSSslave_process+0x3f2>
 8005118:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <CO_LSSslave_process+0x40>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	0800528d 	.word	0x0800528d
 8005124:	080054d3 	.word	0x080054d3
 8005128:	080054d3 	.word	0x080054d3
 800512c:	080054d3 	.word	0x080054d3
 8005130:	080054d3 	.word	0x080054d3
 8005134:	080054d3 	.word	0x080054d3
 8005138:	080054d3 	.word	0x080054d3
 800513c:	080054d3 	.word	0x080054d3
 8005140:	080054d3 	.word	0x080054d3
 8005144:	080054d3 	.word	0x080054d3
 8005148:	080054d3 	.word	0x080054d3
 800514c:	080054d3 	.word	0x080054d3
 8005150:	080054d3 	.word	0x080054d3
 8005154:	080052a1 	.word	0x080052a1
 8005158:	080054d3 	.word	0x080054d3
 800515c:	080052ef 	.word	0x080052ef
 8005160:	080054d3 	.word	0x080054d3
 8005164:	0800538b 	.word	0x0800538b
 8005168:	080054d3 	.word	0x080054d3
 800516c:	080053c9 	.word	0x080053c9
 8005170:	080054d3 	.word	0x080054d3
 8005174:	080054d3 	.word	0x080054d3
 8005178:	080054d3 	.word	0x080054d3
 800517c:	080054d3 	.word	0x080054d3
 8005180:	080054d3 	.word	0x080054d3
 8005184:	080054d3 	.word	0x080054d3
 8005188:	080054d3 	.word	0x080054d3
 800518c:	080054d3 	.word	0x080054d3
 8005190:	080054d3 	.word	0x080054d3
 8005194:	080054d3 	.word	0x080054d3
 8005198:	080054d3 	.word	0x080054d3
 800519c:	080054d3 	.word	0x080054d3
 80051a0:	080054d3 	.word	0x080054d3
 80051a4:	080054d3 	.word	0x080054d3
 80051a8:	080054d3 	.word	0x080054d3
 80051ac:	080054d3 	.word	0x080054d3
 80051b0:	080054d3 	.word	0x080054d3
 80051b4:	080054d3 	.word	0x080054d3
 80051b8:	080054d3 	.word	0x080054d3
 80051bc:	080054d3 	.word	0x080054d3
 80051c0:	080054d3 	.word	0x080054d3
 80051c4:	080054d3 	.word	0x080054d3
 80051c8:	080054d3 	.word	0x080054d3
 80051cc:	080054d3 	.word	0x080054d3
 80051d0:	080054d3 	.word	0x080054d3
 80051d4:	080054d3 	.word	0x080054d3
 80051d8:	080054d3 	.word	0x080054d3
 80051dc:	080054d3 	.word	0x080054d3
 80051e0:	080054d3 	.word	0x080054d3
 80051e4:	080054d3 	.word	0x080054d3
 80051e8:	080054d3 	.word	0x080054d3
 80051ec:	080054d3 	.word	0x080054d3
 80051f0:	080054d3 	.word	0x080054d3
 80051f4:	080054d3 	.word	0x080054d3
 80051f8:	080054d3 	.word	0x080054d3
 80051fc:	080054d3 	.word	0x080054d3
 8005200:	080054d3 	.word	0x080054d3
 8005204:	080054d3 	.word	0x080054d3
 8005208:	080054d3 	.word	0x080054d3
 800520c:	080054d3 	.word	0x080054d3
 8005210:	080054d3 	.word	0x080054d3
 8005214:	080054d3 	.word	0x080054d3
 8005218:	080054d3 	.word	0x080054d3
 800521c:	08005293 	.word	0x08005293
 8005220:	080054d3 	.word	0x080054d3
 8005224:	080054d3 	.word	0x080054d3
 8005228:	080054d3 	.word	0x080054d3
 800522c:	080054d3 	.word	0x080054d3
 8005230:	080054d3 	.word	0x080054d3
 8005234:	080054d3 	.word	0x080054d3
 8005238:	080054d3 	.word	0x080054d3
 800523c:	080054d3 	.word	0x080054d3
 8005240:	080054d3 	.word	0x080054d3
 8005244:	080054d3 	.word	0x080054d3
 8005248:	080054d3 	.word	0x080054d3
 800524c:	080054d3 	.word	0x080054d3
 8005250:	080054d3 	.word	0x080054d3
 8005254:	080054c5 	.word	0x080054c5
 8005258:	080054d3 	.word	0x080054d3
 800525c:	080054d3 	.word	0x080054d3
 8005260:	080054d3 	.word	0x080054d3
 8005264:	080054d3 	.word	0x080054d3
 8005268:	080054d3 	.word	0x080054d3
 800526c:	080054d3 	.word	0x080054d3
 8005270:	080054d3 	.word	0x080054d3
 8005274:	080054d3 	.word	0x080054d3
 8005278:	0800541f 	.word	0x0800541f
 800527c:	08005441 	.word	0x08005441
 8005280:	08005463 	.word	0x08005463
 8005284:	08005485 	.word	0x08005485
 8005288:	080054a7 	.word	0x080054a7
            case CO_LSS_SWITCH_STATE_GLOBAL: {
                /* Node-Id was unconfigured before, now it is configured,
                 * enter the NMT Reset communication autonomously. */
                resetCommunication = true;
 800528c:	2301      	movs	r3, #1
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8005290:	e126      	b.n	80054e0 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	2244      	movs	r2, #68	; 0x44
 8005298:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 800529a:	2301      	movs	r3, #1
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800529e:	e11f      	b.n	80054e0 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_NODE_ID: {
                nid = LSSslave->CANdata[1];
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80052a6:	74fb      	strb	r3, [r7, #19]
                errorCode = CO_LSS_CFG_NODE_ID_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                if (CO_LSS_NODE_ID_VALID(nid)) {
 80052ae:	7cfb      	ldrb	r3, [r7, #19]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <CO_LSSslave_process+0x1dc>
 80052b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	da02      	bge.n	80052c2 <CO_LSSslave_process+0x1e2>
 80052bc:	7cfb      	ldrb	r3, [r7, #19]
 80052be:	2bff      	cmp	r3, #255	; 0xff
 80052c0:	d104      	bne.n	80052cc <CO_LSSslave_process+0x1ec>
                    *LSSslave->pendingNodeID = nid;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	7cfa      	ldrb	r2, [r7, #19]
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	e002      	b.n	80052d2 <CO_LSSslave_process+0x1f2>
                } else {
                    errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80052dc:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80052e6:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 80052e8:	2301      	movs	r3, #1
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80052ec:	e0f8      	b.n	80054e0 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 80ef 	beq.w	80054d6 <CO_LSSslave_process+0x3f6>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                tableSelector = LSSslave->CANdata[1];
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80052fe:	777b      	strb	r3, [r7, #29]
                tableIndex = LSSslave->CANdata[2];
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005306:	773b      	strb	r3, [r7, #28]
                errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005314:	7f7b      	ldrb	r3, [r7, #29]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d121      	bne.n	800535e <CO_LSSslave_process+0x27e>
 800531a:	7f3b      	ldrb	r3, [r7, #28]
 800531c:	2b05      	cmp	r3, #5
 800531e:	d01e      	beq.n	800535e <CO_LSSslave_process+0x27e>
 8005320:	7f3b      	ldrb	r3, [r7, #28]
 8005322:	2b09      	cmp	r3, #9
 8005324:	d81b      	bhi.n	800535e <CO_LSSslave_process+0x27e>
                    uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8005326:	7f3b      	ldrb	r3, [r7, #28]
 8005328:	4a77      	ldr	r2, [pc, #476]	; (8005508 <CO_LSSslave_process+0x428>)
 800532a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800532e:	837b      	strh	r3, [r7, #26]
                    bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(LSSslave->functLSScheckBitRateObject,
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005338:	8b79      	ldrh	r1, [r7, #26]
 800533a:	4610      	mov	r0, r2
 800533c:	4798      	blx	r3
 800533e:	6178      	str	r0, [r7, #20]
                                                                                bit);

                    if (bit_rate_supported) {
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <CO_LSSslave_process+0x270>
                        *LSSslave->pendingBitRate = bit;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	8b7a      	ldrh	r2, [r7, #26]
 800534c:	801a      	strh	r2, [r3, #0]
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800534e:	e009      	b.n	8005364 <CO_LSSslave_process+0x284>
                    } else {
                        errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8005350:	23ff      	movs	r3, #255	; 0xff
 8005352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                        errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800535c:	e002      	b.n	8005364 <CO_LSSslave_process+0x284>
                    }
                } else {
                    /* we currently only support CiA301 bit timing table */
                    errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800536e:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005374:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005378:	719a      	strb	r2, [r3, #6]
                LSSslave->TXbuff->data[2] = errorCodeManuf;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8005382:	71da      	strb	r2, [r3, #7]
                CANsend = true;
 8005384:	2301      	movs	r3, #1
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005388:	e0aa      	b.n	80054e0 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 80a3 	beq.w	80054da <CO_LSSslave_process+0x3fa>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                /* notify application */
                if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80a0 	beq.w	80054de <CO_LSSslave_process+0x3fe>
                    uint16_t delay = ((uint16_t)LSSslave->CANdata[2]) << 8;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	83fb      	strh	r3, [r7, #30]
                    delay |= LSSslave->CANdata[1];
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	8bfb      	ldrh	r3, [r7, #30]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	83fb      	strh	r3, [r7, #30]
                    LSSslave->pFunctLSSactivateBitRate(LSSslave->functLSSactivateBitRateObject, delay);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80053c0:	8bf9      	ldrh	r1, [r7, #30]
 80053c2:	4610      	mov	r0, r2
 80053c4:	4798      	blx	r3
                }
                break;
 80053c6:	e08a      	b.n	80054de <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_STORE: {
                errorCode = CO_LSS_CFG_STORE_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                if (LSSslave->pFunctLSScfgStore == NULL) {
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d103      	bne.n	80053de <CO_LSSslave_process+0x2fe>
                    /* storing is not supported. Reply error */
                    errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053dc:	e011      	b.n	8005402 <CO_LSSslave_process+0x322>
                } else {
                    bool_t result;
                    /* Store "pending" to "persistent" */
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053ea:	7811      	ldrb	r1, [r2, #0]
                                                         *LSSslave->pendingBitRate);
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 80053f0:	8812      	ldrh	r2, [r2, #0]
 80053f2:	4798      	blx	r3
 80053f4:	6238      	str	r0, [r7, #32]
                    if (!result) {
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d102      	bne.n	8005402 <CO_LSSslave_process+0x322>
                        errorCode = CO_LSS_CFG_STORE_FAILED;
 80053fc:	2302      	movs	r3, #2
 80053fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    }
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800540c:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005416:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 8005418:	2301      	movs	r3, #1
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800541c:	e060      	b.n	80054e0 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_VENDOR: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005428:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	3306      	adds	r3, #6
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	601a      	str	r2, [r3, #0]
                CANsend = true;
 800543a:	2301      	movs	r3, #1
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800543e:	e04f      	b.n	80054e0 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_PRODUCT: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800544a:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005456:	3306      	adds	r3, #6
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	601a      	str	r2, [r3, #0]
                CANsend = true;
 800545c:	2301      	movs	r3, #1
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005460:	e03e      	b.n	80054e0 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_REV: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800546c:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005478:	3306      	adds	r3, #6
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	601a      	str	r2, [r3, #0]
                CANsend = true;
 800547e:	2301      	movs	r3, #1
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005482:	e02d      	b.n	80054e0 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_SERIAL: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800548e:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549a:	3306      	adds	r3, #6
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	601a      	str	r2, [r3, #0]
                CANsend = true;
 80054a0:	2301      	movs	r3, #1
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80054a4:	e01c      	b.n	80054e0 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_NODE_ID: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80054b0:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 80054bc:	719a      	strb	r2, [r3, #6]
                CANsend = true;
 80054be:	2301      	movs	r3, #1
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80054c2:	e00d      	b.n	80054e0 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	224f      	movs	r2, #79	; 0x4f
 80054ca:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 80054cc:	2301      	movs	r3, #1
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80054d0:	e006      	b.n	80054e0 <CO_LSSslave_process+0x400>
            }
            default: {
                /* none */
                break;
 80054d2:	bf00      	nop
 80054d4:	e004      	b.n	80054e0 <CO_LSSslave_process+0x400>
                    break;
 80054d6:	bf00      	nop
 80054d8:	e002      	b.n	80054e0 <CO_LSSslave_process+0x400>
                    break;
 80054da:	bf00      	nop
 80054dc:	e000      	b.n	80054e0 <CO_LSSslave_process+0x400>
                break;
 80054de:	bf00      	nop
            }
        }

        if (CANsend) {
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d007      	beq.n	80054f6 <CO_LSSslave_process+0x416>
            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f001 f95d 	bl	80067b0 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3730      	adds	r7, #48	; 0x30
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	0800c6a8 	.word	0x0800c6a8

0800550c <CO_isError>:
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	08db      	lsrs	r3, r3, #3
 800551c:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	2201      	movs	r2, #1
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	73bb      	strb	r3, [r7, #14]
               : false;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	2b09      	cmp	r3, #9
 8005536:	d807      	bhi.n	8005548 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	5cd2      	ldrb	r2, [r2, r3]
 800553e:	7bbb      	ldrb	r3, [r7, #14]
 8005540:	4013      	ands	r3, r2
 8005542:	b2db      	uxtb	r3, r3
               : false;
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <CO_isError+0x40>
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <CO_isError+0x42>
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <CO_getErrorRegister>:
CO_getErrorRegister(CO_EM_t* em) {
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <CO_getErrorRegister+0x1e>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <CO_getErrorRegister+0x1e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	e000      	b.n	8005578 <CO_getErrorRegister+0x20>
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <CO_NMT_getInternalState+0x16>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f993 3000 	ldrsb.w	r3, [r3]
 8005596:	e000      	b.n	800559a <CO_NMT_getInternalState+0x18>
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <CO_LSSslave_getState>:
 *
 * @param LSSslave This object.
 * @return @ref CO_LSS_STATE_state
 */
static inline uint8_t
CO_LSSslave_getState(CO_LSSslave_t* LSSslave) {
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <CO_LSSslave_getState+0x14>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	7c1b      	ldrb	r3, [r3, #16]
 80055b6:	e000      	b.n	80055ba <CO_LSSslave_getState+0x16>
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	bc80      	pop	{r7}
 80055c2:	4770      	bx	lr

080055c4 <CO_new>:
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t*
CO_new(CO_config_t* config, uint32_t* heapMemoryUsed) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
    CO_t* co = NULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t* coFinal = NULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	613b      	str	r3, [r7, #16]
#else
        (void)config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1U, sizeof(*co));
 80055da:	2140      	movs	r1, #64	; 0x40
 80055dc:	2001      	movs	r0, #1
 80055de:	f005 ff51 	bl	800b484 <calloc>
 80055e2:	4603      	mov	r3, r0
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80f0 	beq.w	80057ce <CO_new+0x20a>
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	3340      	adds	r3, #64	; 0x40
 80055f2:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1U) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 80055f4:	212c      	movs	r1, #44	; 0x2c
 80055f6:	2001      	movs	r0, #1
 80055f8:	f005 ff44 	bl	800b484 <calloc>
 80055fc:	4603      	mov	r3, r0
 80055fe:	461a      	mov	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	611a      	str	r2, [r3, #16]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80e0 	beq.w	80057ce <CO_new+0x20a>
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	332c      	adds	r3, #44	; 0x2c
 8005612:	613b      	str	r3, [r7, #16]
        }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1U) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8005614:	2308      	movs	r3, #8
 8005616:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8005618:	2130      	movs	r1, #48	; 0x30
 800561a:	2001      	movs	r0, #1
 800561c:	f005 ff32 	bl	800b484 <calloc>
 8005620:	4603      	mov	r3, r0
 8005622:	461a      	mov	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	615a      	str	r2, [r3, #20]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80ce 	beq.w	80057ce <CO_new+0x20a>
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	3330      	adds	r3, #48	; 0x30
 8005636:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8005638:	7afb      	ldrb	r3, [r7, #11]
 800563a:	2110      	movs	r1, #16
 800563c:	4618      	mov	r0, r3
 800563e:	f005 ff21 	bl	800b484 <calloc>
 8005642:	4603      	mov	r3, r0
 8005644:	461a      	mov	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	619a      	str	r2, [r3, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 80bd 	beq.w	80057ce <CO_new+0x20a>
 8005654:	7afb      	ldrb	r3, [r7, #11]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4413      	add	r3, r2
 800565c:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1U) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 800565e:	2150      	movs	r1, #80	; 0x50
 8005660:	2001      	movs	r0, #1
 8005662:	f005 ff0f 	bl	800b484 <calloc>
 8005666:	4603      	mov	r3, r0
 8005668:	461a      	mov	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	61da      	str	r2, [r3, #28]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80ab 	beq.w	80057ce <CO_new+0x20a>
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	3350      	adds	r3, #80	; 0x50
 800567c:	613b      	str	r3, [r7, #16]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
#endif
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1U;
 800567e:	2311      	movs	r3, #17
 8005680:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2U) {
 8005682:	7abb      	ldrb	r3, [r7, #10]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d912      	bls.n	80056ae <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8005688:	7abb      	ldrb	r3, [r7, #10]
 800568a:	2108      	movs	r1, #8
 800568c:	4618      	mov	r0, r3
 800568e:	f005 fef9 	bl	800b484 <calloc>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	621a      	str	r2, [r3, #32]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8095 	beq.w	80057ce <CO_new+0x20a>
 80056a4:	7abb      	ldrb	r3, [r7, #10]
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4413      	add	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0U) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 80056ae:	21ac      	movs	r1, #172	; 0xac
 80056b0:	2001      	movs	r0, #1
 80056b2:	f005 fee7 	bl	800b484 <calloc>
 80056b6:	4603      	mov	r3, r0
 80056b8:	461a      	mov	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8083 	beq.w	80057ce <CO_new+0x20a>
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	33ac      	adds	r3, #172	; 0xac
 80056cc:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1U) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 80056ce:	212c      	movs	r1, #44	; 0x2c
 80056d0:	2001      	movs	r0, #1
 80056d2:	f005 fed7 	bl	800b484 <calloc>
 80056d6:	4603      	mov	r3, r0
 80056d8:	461a      	mov	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	629a      	str	r2, [r3, #40]	; 0x28
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d073      	beq.n	80057ce <CO_new+0x20a>
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	332c      	adds	r3, #44	; 0x2c
 80056ea:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1U) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 80056ec:	215c      	movs	r1, #92	; 0x5c
 80056ee:	2001      	movs	r0, #1
 80056f0:	f005 fec8 	bl	800b484 <calloc>
 80056f4:	4603      	mov	r3, r0
 80056f6:	461a      	mov	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	2b00      	cmp	r3, #0
 8005702:	d064      	beq.n	80057ce <CO_new+0x20a>
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	335c      	adds	r3, #92	; 0x5c
 8005708:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0U) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 800570a:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800570e:	2008      	movs	r0, #8
 8005710:	f005 feb8 	bl	800b484 <calloc>
 8005714:	4603      	mov	r3, r0
 8005716:	461a      	mov	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	635a      	str	r2, [r3, #52]	; 0x34
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005720:	2b00      	cmp	r3, #0
 8005722:	d054      	beq.n	80057ce <CO_new+0x20a>
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 800572a:	613b      	str	r3, [r7, #16]
        }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
        if (CO_GET_CNT(LEDS) == 1U) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 800572c:	210c      	movs	r1, #12
 800572e:	2001      	movs	r0, #1
 8005730:	f005 fea8 	bl	800b484 <calloc>
 8005734:	4603      	mov	r3, r0
 8005736:	461a      	mov	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	639a      	str	r2, [r3, #56]	; 0x38
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	2b00      	cmp	r3, #0
 8005742:	d044      	beq.n	80057ce <CO_new+0x20a>
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	330c      	adds	r3, #12
 8005748:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1U) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 800574a:	2174      	movs	r1, #116	; 0x74
 800574c:	2001      	movs	r0, #1
 800574e:	f005 fe99 	bl	800b484 <calloc>
 8005752:	4603      	mov	r3, r0
 8005754:	461a      	mov	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	63da      	str	r2, [r3, #60]	; 0x3c
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d035      	beq.n	80057ce <CO_new+0x20a>
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	3374      	adds	r3, #116	; 0x74
 8005766:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1U, sizeof(*co->CANmodule));
 8005768:	2138      	movs	r1, #56	; 0x38
 800576a:	2001      	movs	r0, #1
 800576c:	f005 fe8a 	bl	800b484 <calloc>
 8005770:	4603      	mov	r3, r0
 8005772:	461a      	mov	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	605a      	str	r2, [r3, #4]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d026      	beq.n	80057ce <CO_new+0x20a>
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	3338      	adds	r3, #56	; 0x38
 8005784:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8005786:	210c      	movs	r1, #12
 8005788:	200d      	movs	r0, #13
 800578a:	f005 fe7b 	bl	800b484 <calloc>
 800578e:	4603      	mov	r3, r0
 8005790:	461a      	mov	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	609a      	str	r2, [r3, #8]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d017      	beq.n	80057ce <CO_new+0x20a>
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	339c      	adds	r3, #156	; 0x9c
 80057a2:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80057a4:	2118      	movs	r1, #24
 80057a6:	200d      	movs	r0, #13
 80057a8:	f005 fe6c 	bl	800b484 <calloc>
 80057ac:	4603      	mov	r3, r0
 80057ae:	461a      	mov	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	60da      	str	r2, [r3, #12]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <CO_new+0x20a>
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80057c2:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
        coFinal = co;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <CO_new+0x216>
        CO_delete(co);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f80b 	bl	80057f0 <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <CO_new+0x222>
        *heapMemoryUsed = mem;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 80057e6:	697b      	ldr	r3, [r7, #20]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <CO_delete>:

void
CO_delete(CO_t* co) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d053      	beq.n	80058a6 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fee8 	bl	80065d8 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	4618      	mov	r0, r3
 800580e:	f005 fe55 	bl	800b4bc <free>
    CO_free(co->CANrx);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	4618      	mov	r0, r3
 8005818:	f005 fe50 	bl	800b4bc <free>
    CO_free(co->CANmodule);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	4618      	mov	r0, r3
 8005822:	f005 fe4b 	bl	800b4bc <free>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    CO_free(co->LSSmaster);
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    CO_free(co->LSSslave);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	4618      	mov	r0, r3
 800582c:	f005 fe46 	bl	800b4bc <free>
#if ((CO_CONFIG_GFC)&CO_CONFIG_GFC_ENABLE) != 0
    CO_free(co->GFC);
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    CO_free(co->LEDs);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	4618      	mov	r0, r3
 8005836:	f005 fe41 	bl	800b4bc <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    CO_free(co->TPDO);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583e:	4618      	mov	r0, r3
 8005840:	f005 fe3c 	bl	800b4bc <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    CO_free(co->RPDO);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	4618      	mov	r0, r3
 800584a:	f005 fe37 	bl	800b4bc <free>
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    CO_free(co->SYNC);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	4618      	mov	r0, r3
 8005854:	f005 fe32 	bl	800b4bc <free>
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    CO_free(co->TIME);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	4618      	mov	r0, r3
 800585e:	f005 fe2d 	bl	800b4bc <free>
#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	4618      	mov	r0, r3
 8005868:	f005 fe28 	bl	800b4bc <free>

    /* Emergency */
    CO_free(co->em);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	4618      	mov	r0, r3
 8005872:	f005 fe23 	bl	800b4bc <free>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    CO_free(co->em_fifo);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	4618      	mov	r0, r3
 800587c:	f005 fe1e 	bl	800b4bc <free>
#if ((CO_CONFIG_NODE_GUARDING)&CO_CONFIG_NODE_GUARDING_MASTER_ENABLE) != 0
    CO_free(co->NGmaster);
#endif

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    CO_free(co->HBconsMonitoredNodes);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	4618      	mov	r0, r3
 8005886:	f005 fe19 	bl	800b4bc <free>
    CO_free(co->HBcons);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	4618      	mov	r0, r3
 8005890:	f005 fe14 	bl	800b4bc <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	4618      	mov	r0, r3
 800589a:	f005 fe0f 	bl	800b4bc <free>

    /* CANopen object */
    CO_free(co);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f005 fe0c 	bl	800b4bc <free>
 80058a4:	e000      	b.n	80058a8 <CO_delete+0xb8>
        return;
 80058a6:	bf00      	nop
}
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <CO_CANinit>:
#endif
    return en;
}

CO_ReturnError_t
CO_CANinit(CO_t* co, void* CANptr, uint16_t bitRate) {
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b08a      	sub	sp, #40	; 0x28
 80058b2:	af04      	add	r7, sp, #16
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	4613      	mov	r3, r2
 80058ba:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) {
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d102      	bne.n	80058c8 <CO_CANinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80058c2:	f04f 33ff 	mov.w	r3, #4294967295
 80058c6:	e01a      	b.n	80058fe <CO_CANinit+0x50>
    }

    co->CANmodule->CANnormal = false;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 80058d0:	68b8      	ldr	r0, [r7, #8]
 80058d2:	f000 fd91 	bl	80063f8 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule, CANptr, co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), co->CANtx,
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6858      	ldr	r0, [r3, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6899      	ldr	r1, [r3, #8]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	88fa      	ldrh	r2, [r7, #6]
 80058e4:	9202      	str	r2, [sp, #8]
 80058e6:	220d      	movs	r2, #13
 80058e8:	9201      	str	r2, [sp, #4]
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	230d      	movs	r3, #13
 80058ee:	460a      	mov	r2, r1
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	f000 fda9 	bl	8006448 <CO_CANmodule_init>
 80058f6:	4603      	mov	r3, r0
 80058f8:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_TX_MSGS), bitRate);

    return err;
 80058fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <CO_LSSinit>:

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
CO_ReturnError_t
CO_LSSinit(CO_t* co, CO_LSS_address_t* lssAddress, uint8_t* pendingNodeID, uint16_t* pendingBitRate) {
 8005906:	b580      	push	{r7, lr}
 8005908:	b08c      	sub	sp, #48	; 0x30
 800590a:	af06      	add	r7, sp, #24
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	607a      	str	r2, [r7, #4]
 8005912:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if ((co == NULL) || (CO_GET_CNT(LSS_SLV) != 1U)) {
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800591a:	f04f 33ff 	mov.w	r3, #4294967295
 800591e:	e01a      	b.n	8005956 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave, lssAddress, pendingBitRate, pendingNodeID, co->CANmodule,
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	6852      	ldr	r2, [r2, #4]
 800592c:	f240 71e4 	movw	r1, #2020	; 0x7e4
 8005930:	9105      	str	r1, [sp, #20]
 8005932:	210c      	movs	r1, #12
 8005934:	9104      	str	r1, [sp, #16]
 8005936:	9203      	str	r2, [sp, #12]
 8005938:	f240 72e5 	movw	r2, #2021	; 0x7e5
 800593c:	9202      	str	r2, [sp, #8]
 800593e:	220c      	movs	r2, #12
 8005940:	9201      	str	r2, [sp, #4]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	f7ff fb53 	bl	8004ff4 <CO_LSSslave_init>
 800594e:	4603      	mov	r3, r0
 8005950:	75fb      	strb	r3, [r7, #23]
                           CO_GET_CO(RX_IDX_LSS_SLV), CO_CAN_ID_LSS_MST, co->CANmodule, CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8005952:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <CO_CANopenInit>:
#endif /* (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE */

CO_ReturnError_t
CO_CANopenInit(CO_t* co, CO_NMT_t* NMT, CO_EM_t* em, OD_t* od, OD_entry_t* OD_statusBits, uint16_t NMTcontrol,
               uint16_t firstHBTime_ms, uint16_t SDOserverTimeoutTime_ms, uint16_t SDOclientTimeoutTime_ms,
               bool_t SDOclientBlockTransfer, uint8_t nodeId, uint32_t* errInfo) {
 8005960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005962:	b091      	sub	sp, #68	; 0x44
 8005964:	af0a      	add	r7, sp, #40	; 0x28
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_STATUS_BITS) == 0
    (void)OD_statusBits; /* may be unused */
#endif

    if ((co == NULL) || ((CO_GET_CNT(NMT) == 0U) && (NMT == NULL)) || ((CO_GET_CNT(EM) == 0U) && (em == NULL))) {
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <CO_CANopenInit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005974:	f04f 33ff 	mov.w	r3, #4294967295
 8005978:	e12f      	b.n	8005bda <CO_CANopenInit+0x27a>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0U) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <CO_CANopenInit+0x26>
        em = co->em;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if ((CO_GET_CNT(LSS_SLV) == 1U) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)) {
 800598c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005990:	2bff      	cmp	r3, #255	; 0xff
 8005992:	d103      	bne.n	800599c <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	e00a      	b.n	80059b2 <CO_CANopenInit+0x52>
    } else
#endif
        if ((nodeId < 1U) || (nodeId > 127U)) {
 800599c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <CO_CANopenInit+0x4c>
 80059a4:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	da02      	bge.n	80059b2 <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80059ac:	f04f 33ff 	mov.w	r3, #4294967295
 80059b0:	e113      	b.n	8005bda <CO_CANopenInit+0x27a>
    } else { /* MISRA C 2004 14.10 */
    }

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    if (CO_GET_CNT(LEDS) == 1U) {
        err = CO_LEDs_init(co->LEDs);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fff0 	bl	800499c <CO_LEDs_init>
 80059bc:	4603      	mov	r3, r0
 80059be:	747b      	strb	r3, [r7, #17]
        if (err != CO_ERROR_NO) {
 80059c0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <CO_CANopenInit+0x6e>
            return err;
 80059c8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80059cc:	e105      	b.n	8005bda <CO_CANopenInit+0x27a>
        }
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 80059d6:	f06f 0312 	mvn.w	r3, #18
 80059da:	e0fe      	b.n	8005bda <CO_CANopenInit+0x27a>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	69d8      	ldr	r0, [r3, #28]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	685c      	ldr	r4, [r3, #4]
 80059e4:	4b7f      	ldr	r3, [pc, #508]	; (8005be4 <CO_CANopenInit+0x284>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f103 050c 	add.w	r5, r3, #12
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a1e      	ldr	r6, [r3, #32]
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
                         co->em_fifo, (CO_GET_CNT(ARR_1003) + 1U),
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY), CO_GET_CO(TX_IDX_EM_PROD),
 80059f2:	4b7c      	ldr	r3, [pc, #496]	; (8005be4 <CO_CANopenInit+0x284>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 80059f8:	336c      	adds	r3, #108	; 0x6c
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) != 0
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
#endif
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 80059fa:	4a7a      	ldr	r2, [pc, #488]	; (8005be4 <CO_CANopenInit+0x284>)
 80059fc:	6812      	ldr	r2, [r2, #0]
 80059fe:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8005a00:	3218      	adds	r2, #24
 8005a02:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005a04:	9105      	str	r1, [sp, #20]
 8005a06:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8005a0a:	9104      	str	r1, [sp, #16]
 8005a0c:	9203      	str	r2, [sp, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	9202      	str	r2, [sp, #8]
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	2311      	movs	r3, #17
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	4633      	mov	r3, r6
 8005a1a:	462a      	mov	r2, r5
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	f7fa fcd5 	bl	80003cc <CO_EM_init>
 8005a22:	4603      	mov	r3, r0
 8005a24:	747b      	strb	r3, [r7, #17]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
                         co->CANmodule, CO_GET_CO(RX_IDX_EM_CONS),
#endif
                         nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 8005a26:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <CO_CANopenInit+0xd4>
            return err;
 8005a2e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005a32:	e0d2      	b.n	8005bda <CO_CANopenInit+0x27a>
        }
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        err = CO_NMT_init(co->NMT, OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME), em, nodeId, NMTcontrol, firstHBTime_ms,
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	691c      	ldr	r4, [r3, #16]
 8005a38:	4b6a      	ldr	r3, [pc, #424]	; (8005be4 <CO_CANopenInit+0x284>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f103 0590 	add.w	r5, r3, #144	; 0x90
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	6852      	ldr	r2, [r2, #4]
 8005a4a:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8005a4e:	b289      	uxth	r1, r1
 8005a50:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 8005a54:	b289      	uxth	r1, r1
 8005a56:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 8005a5a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005a5c:	9008      	str	r0, [sp, #32]
 8005a5e:	9107      	str	r1, [sp, #28]
 8005a60:	210b      	movs	r1, #11
 8005a62:	9106      	str	r1, [sp, #24]
 8005a64:	9205      	str	r2, [sp, #20]
 8005a66:	2200      	movs	r2, #0
 8005a68:	9204      	str	r2, [sp, #16]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	9203      	str	r2, [sp, #12]
 8005a6e:	9302      	str	r3, [sp, #8]
 8005a70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a72:	9301      	str	r3, [sp, #4]
 8005a74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	4633      	mov	r3, r6
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f7fb fb28 	bl	80010d4 <CO_NMT_init>
 8005a84:	4603      	mov	r3, r0
 8005a86:	747b      	strb	r3, [r7, #17]
                          co->CANmodule, CO_GET_CO(RX_IDX_NMT_SLV), CO_CAN_ID_NMT_SERVICE,
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
                          co->CANmodule, CO_GET_CO(TX_IDX_NMT_MST), CO_CAN_ID_NMT_SERVICE,
#endif
                          co->CANmodule, CO_GET_CO(TX_IDX_HB_PROD), CO_CAN_ID_HEARTBEAT + nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 8005a88:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <CO_CANopenInit+0x136>
            return err;
 8005a90:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005a94:	e0a1      	b.n	8005bda <CO_CANopenInit+0x27a>
        }
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6958      	ldr	r0, [r3, #20]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	699c      	ldr	r4, [r3, #24]
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME), co->CANmodule, CO_GET_CO(RX_IDX_HB_CONS),
 8005a9e:	4b51      	ldr	r3, [pc, #324]	; (8005be4 <CO_CANopenInit+0x284>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 8005aa4:	3384      	adds	r3, #132	; 0x84
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	6852      	ldr	r2, [r2, #4]
 8005aaa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005aac:	9103      	str	r1, [sp, #12]
 8005aae:	2104      	movs	r1, #4
 8005ab0:	9102      	str	r1, [sp, #8]
 8005ab2:	9201      	str	r2, [sp, #4]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	4622      	mov	r2, r4
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	f7fb f816 	bl	8000aec <CO_HBconsumer_init>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	747b      	strb	r3, [r7, #17]
                                 errInfo);
        if (err != CO_ERROR_NO) {
 8005ac4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <CO_CANopenInit+0x172>
            return err;
 8005acc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005ad0:	e083      	b.n	8005bda <CO_CANopenInit+0x27a>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0U) {
        OD_entry_t* SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8005ad2:	4b44      	ldr	r3, [pc, #272]	; (8005be4 <CO_CANopenInit+0x284>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	33b4      	adds	r3, #180	; 0xb4
 8005ada:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005adc:	2300      	movs	r3, #0
 8005ade:	827b      	strh	r3, [r7, #18]
 8005ae0:	e02f      	b.n	8005b42 <CO_CANopenInit+0x1e2>
            err = CO_SDOserver_init(&co->SDOserver[i], od, SDOsrvPar, nodeId, SDOserverTimeoutTime_ms, co->CANmodule,
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ae6:	8a7b      	ldrh	r3, [r7, #18]
 8005ae8:	21ac      	movs	r1, #172	; 0xac
 8005aea:	fb01 f303 	mul.w	r3, r1, r3
 8005aee:	18d5      	adds	r5, r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	8a7a      	ldrh	r2, [r7, #18]
 8005af6:	3203      	adds	r2, #3
 8005af8:	b292      	uxth	r2, r2
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	6849      	ldr	r1, [r1, #4]
 8005afe:	8a78      	ldrh	r0, [r7, #18]
 8005b00:	300a      	adds	r0, #10
 8005b02:	b280      	uxth	r0, r0
 8005b04:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 8005b08:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8005b0a:	9405      	str	r4, [sp, #20]
 8005b0c:	9004      	str	r0, [sp, #16]
 8005b0e:	9103      	str	r1, [sp, #12]
 8005b10:	9202      	str	r2, [sp, #8]
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	4633      	mov	r3, r6
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f7fd f984 	bl	8002e2c <CO_SDOserver_init>
 8005b24:	4603      	mov	r3, r0
 8005b26:	747b      	strb	r3, [r7, #17]
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err != CO_ERROR_NO) {
 8005b28:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <CO_CANopenInit+0x1d6>
                return err;
 8005b30:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005b34:	e051      	b.n	8005bda <CO_CANopenInit+0x27a>
            }
            SDOsrvPar++;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005b3c:	8a7b      	ldrh	r3, [r7, #18]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	827b      	strh	r3, [r7, #18]
 8005b42:	8a7b      	ldrh	r3, [r7, #18]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0cc      	beq.n	8005ae2 <CO_CANopenInit+0x182>
    }
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        err = CO_TIME_init(co->TIME, OD_GET(H1012, OD_H1012_COBID_TIME), co->CANmodule, CO_GET_CO(RX_IDX_TIME),
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005b4c:	4b25      	ldr	r3, [pc, #148]	; (8005be4 <CO_CANopenInit+0x284>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	2302      	movs	r3, #2
 8005b60:	f7fe fe26 	bl	80047b0 <CO_TIME_init>
 8005b64:	4603      	mov	r3, r0
 8005b66:	747b      	strb	r3, [r7, #17]
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8005b68:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <CO_CANopenInit+0x216>
            return err;
 8005b70:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005b74:	e031      	b.n	8005bda <CO_CANopenInit+0x27a>
    }
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    if (CO_GET_CNT(SYNC) == 1U) {
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8005b7a:	4b1a      	ldr	r3, [pc, #104]	; (8005be4 <CO_CANopenInit+0x284>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f103 0624 	add.w	r6, r3, #36	; 0x24
 8005b84:	4b17      	ldr	r3, [pc, #92]	; (8005be4 <CO_CANopenInit+0x284>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8005b8e:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <CO_CANopenInit+0x284>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8005b94:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8005b96:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <CO_CANopenInit+0x284>)
 8005b98:	6812      	ldr	r2, [r2, #0]
 8005b9a:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8005b9c:	32a8      	adds	r2, #168	; 0xa8
 8005b9e:	68f9      	ldr	r1, [r7, #12]
 8005ba0:	6849      	ldr	r1, [r1, #4]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	6840      	ldr	r0, [r0, #4]
 8005ba6:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8005ba8:	9406      	str	r4, [sp, #24]
 8005baa:	2400      	movs	r4, #0
 8005bac:	9405      	str	r4, [sp, #20]
 8005bae:	9004      	str	r0, [sp, #16]
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	9003      	str	r0, [sp, #12]
 8005bb4:	9102      	str	r1, [sp, #8]
 8005bb6:	9201      	str	r2, [sp, #4]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	4663      	mov	r3, ip
 8005bbc:	4632      	mov	r2, r6
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f7fe fb33 	bl	800422c <CO_SYNC_init>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	747b      	strb	r3, [r7, #17]
                           co->CANmodule, CO_GET_CO(RX_IDX_SYNC),
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8005bca:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <CO_CANopenInit+0x278>
            return err;
 8005bd2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005bd6:	e000      	b.n	8005bda <CO_CANopenInit+0x27a>
            }
        }
    }
#endif

    return CO_ERROR_NO;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20000440 	.word	0x20000440

08005be8 <CO_CANopenInitPDO>:

CO_ReturnError_t
CO_CANopenInitPDO(CO_t* co, CO_EM_t* em, OD_t* od, uint8_t nodeId, uint32_t* errInfo) {
 8005be8:	b590      	push	{r4, r7, lr}
 8005bea:	b08f      	sub	sp, #60	; 0x3c
 8005bec:	af06      	add	r7, sp, #24
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d102      	bne.n	8005c02 <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005c00:	e065      	b.n	8005cce <CO_CANopenInitPDO+0xe6>
    }
    if ((nodeId < 1U) || (nodeId > 127U) || co->nodeIdUnconfigured) {
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <CO_CANopenInitPDO+0x30>
 8005c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	db03      	blt.n	8005c18 <CO_CANopenInitPDO+0x30>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d009      	beq.n	8005c2c <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured) ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <CO_CANopenInitPDO+0x3e>
 8005c20:	f06f 0312 	mvn.w	r3, #18
 8005c24:	e053      	b.n	8005cce <CO_CANopenInitPDO+0xe6>
 8005c26:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2a:	e050      	b.n	8005cce <CO_CANopenInitPDO+0xe6>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    if (CO_GET_CNT(TPDO) > 0U)
    {
        OD_entry_t* TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM  );
 8005c2c:	4b2a      	ldr	r3, [pc, #168]	; (8005cd8 <CO_CANopenInitPDO+0xf0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	33cc      	adds	r3, #204	; 0xcc
 8005c34:	617b      	str	r3, [r7, #20]
        OD_entry_t* TPDOmap  = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8005c36:	4b28      	ldr	r3, [pc, #160]	; (8005cd8 <CO_CANopenInitPDO+0xf0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8005c40:	61fb      	str	r3, [r7, #28]

        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++)
 8005c42:	2300      	movs	r3, #0
 8005c44:	837b      	strh	r3, [r7, #26]
 8005c46:	e03e      	b.n	8005cc6 <CO_CANopenInitPDO+0xde>
        {
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT)
 8005c4c:	8b7b      	ldrh	r3, [r7, #26]
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d809      	bhi.n	8005c66 <CO_CANopenInitPDO+0x7e>
            {
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_TPDO_1 + (i * 0x100U)) + nodeId);
 8005c52:	8b7b      	ldrh	r3, [r7, #26]
 8005c54:	021b      	lsls	r3, r3, #8
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005c64:	833b      	strh	r3, [r7, #24]
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c6a:	8b7b      	ldrh	r3, [r7, #26]
 8005c6c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8005c70:	fb01 f303 	mul.w	r3, r1, r3
 8005c74:	18d0      	adds	r0, r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	8b7a      	ldrh	r2, [r7, #26]
 8005c80:	3202      	adds	r2, #2
 8005c82:	b292      	uxth	r2, r2
 8005c84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c86:	9105      	str	r1, [sp, #20]
 8005c88:	9204      	str	r2, [sp, #16]
 8005c8a:	9303      	str	r3, [sp, #12]
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	9302      	str	r3, [sp, #8]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	9301      	str	r3, [sp, #4]
 8005c94:	8b3b      	ldrh	r3, [r7, #24]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	4623      	mov	r3, r4
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	f7fc fb6d 	bl	800237c <CO_TPDO_init>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	74fb      	strb	r3, [r7, #19]
							   co->CANmodule,
							   CO_GET_CO(TX_IDX_TPDO) + i,
							   errInfo
							   );

            if (err != CO_ERROR_NO) { return err; }
 8005ca6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <CO_CANopenInitPDO+0xcc>
 8005cae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005cb2:	e00c      	b.n	8005cce <CO_CANopenInitPDO+0xe6>


            TPDOcomm++;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	617b      	str	r3, [r7, #20]
            TPDOmap++;
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++)
 8005cc0:	8b7b      	ldrh	r3, [r7, #26]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	837b      	strh	r3, [r7, #26]
 8005cc6:	8b7b      	ldrh	r3, [r7, #26]
 8005cc8:	2b07      	cmp	r3, #7
 8005cca:	d9bd      	bls.n	8005c48 <CO_CANopenInitPDO+0x60>


    }
#endif

    return CO_ERROR_NO;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3724      	adds	r7, #36	; 0x24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd90      	pop	{r4, r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000440 	.word	0x20000440

08005cdc <CO_process>:
CO_NMT_reset_cmd_t
CO_process(CO_t* co,
		bool_t enableGateway,
		uint32_t timeDifference_us,
		uint32_t* timerNext_us)
{
 8005cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cde:	b09b      	sub	sp, #108	; 0x6c
 8005ce0:	af08      	add	r7, sp, #32
 8005ce2:	61f8      	str	r0, [r7, #28]
 8005ce4:	61b9      	str	r1, [r7, #24]
 8005ce6:	617a      	str	r2, [r7, #20]
 8005ce8:	613b      	str	r3, [r7, #16]
    (void)enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff fc44 	bl	8005582 <CO_NMT_getInternalState>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8005d00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005d04:	2b7f      	cmp	r3, #127	; 0x7f
 8005d06:	d003      	beq.n	8005d10 <CO_process+0x34>
 8005d08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005d0c:	2b05      	cmp	r3, #5
 8005d0e:	d101      	bne.n	8005d14 <CO_process+0x38>
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <CO_process+0x3a>
 8005d14:	2300      	movs	r3, #0
 8005d16:	63bb      	str	r3, [r7, #56]	; 0x38

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fdef 	bl	8006900 <CO_CANmodule_process>

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE)
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_process(co->LSSslave)) {
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff f9da 	bl	80050e0 <CO_LSSslave_process>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    bool_t unc = co->nodeIdUnconfigured;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	8a5b      	ldrh	r3, [r3, #18]
 8005d44:	867b      	strh	r3, [r7, #50]	; 0x32
    bool_t LSSslave_configuration = false;
 8005d46:	2300      	movs	r3, #0
 8005d48:	643b      	str	r3, [r7, #64]	; 0x40
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION) {
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fc28 	bl	80055a4 <CO_LSSslave_getState>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <CO_process+0x82>
            LSSslave_configuration = true;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	643b      	str	r3, [r7, #64]	; 0x40
#define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS false
#endif

    if (CO_GET_CNT(LEDS) == 1U)
    	{
        bool_t ErrSync         = CO_isError(co->em, CO_EM_SYNC_TIME_OUT     );
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	2118      	movs	r1, #24
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff fbd1 	bl	800550c <CO_isError>
 8005d6a:	62f8      	str	r0, [r7, #44]	; 0x2c
        bool_t ErrHbCons       = CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER);
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	211b      	movs	r1, #27
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff fbca 	bl	800550c <CO_isError>
 8005d78:	62b8      	str	r0, [r7, #40]	; 0x28
        bool_t ErrHbConsRemote = CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	211c      	movs	r1, #28
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fbc3 	bl	800550c <CO_isError>
 8005d86:	6278      	str	r0, [r7, #36]	; 0x24
        CO_LEDs_process(co->LEDs,
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <CO_process+0xbc>
 8005d92:	f997 5023 	ldrsb.w	r5, [r7, #35]	; 0x23
 8005d96:	e000      	b.n	8005d9a <CO_process+0xbe>
 8005d98:	2500      	movs	r5, #0
        				timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U,
 8005d9a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d9c:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bf14      	ite	ne
 8005da4:	2301      	movne	r3, #1
 8005da6:	2300      	moveq	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	60fb      	str	r3, [r7, #12]
						(CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 8005dac:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005dae:	f240 3303 	movw	r3, #771	; 0x303
 8005db2:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	bf14      	ite	ne
 8005db8:	2301      	movne	r3, #1
 8005dba:	2300      	moveq	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	60bb      	str	r3, [r7, #8]
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <CO_process+0xee>
 8005dc6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8005dc8:	e000      	b.n	8005dcc <CO_process+0xf0>
 8005dca:	2400      	movs	r4, #0
                        false, /* RPDO event timer timeout */
                        unc ? false : ErrSync, unc ? false : (ErrHbCons || ErrHbConsRemote),
 8005dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d107      	bne.n	8005de2 <CO_process+0x106>
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d102      	bne.n	8005dde <CO_process+0x102>
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <CO_process+0x106>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <CO_process+0x108>
 8005de2:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 8005de4:	607b      	str	r3, [r7, #4]
                        CO_getErrorRegister(co->em) != 0U,
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff fbb4 	bl	8005558 <CO_getErrorRegister>
 8005df0:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	bf14      	ite	ne
 8005df6:	2301      	movne	r3, #1
 8005df8:	2300      	moveq	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	9307      	str	r3, [sp, #28]
 8005e02:	2300      	movs	r3, #0
 8005e04:	9306      	str	r3, [sp, #24]
 8005e06:	9205      	str	r2, [sp, #20]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	9304      	str	r3, [sp, #16]
 8005e0c:	9403      	str	r4, [sp, #12]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	9302      	str	r3, [sp, #8]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1c:	462a      	mov	r2, r5
 8005e1e:	6979      	ldr	r1, [r7, #20]
 8005e20:	4630      	mov	r0, r6
 8005e22:	f7fe fdd3 	bl	80049cc <CO_LEDs_process>
						timerNext_us);
    	}
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {return reset; }
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <CO_process+0x158>
 8005e2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e32:	e047      	b.n	8005ec4 <CO_process+0x1e8>

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U)
		{
		CO_EM_process(co->em, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	69d8      	ldr	r0, [r3, #28]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e3e:	f7fa fba5 	bl	800058c <CO_EM_process>
		}

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U)
		{
		  reset = CO_NMT_process(co->NMT, &NMTstate, timeDifference_us, timerNext_us);
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	6918      	ldr	r0, [r3, #16]
 8005e46:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	f7fb f9ff 	bl	8001250 <CO_NMT_process>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}

    NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8005e58:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e5e:	d003      	beq.n	8005e68 <CO_process+0x18c>
 8005e60:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005e64:	2b05      	cmp	r3, #5
 8005e66:	d101      	bne.n	8005e6c <CO_process+0x190>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <CO_process+0x192>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++)
 8005e70:	2300      	movs	r3, #0
 8005e72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005e76:	e011      	b.n	8005e9c <CO_process+0x1c0>
			{
			  (void)CO_SDOserver_process(&co->SDOserver[i], NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e80:	21ac      	movs	r1, #172	; 0xac
 8005e82:	fb01 f303 	mul.w	r3, r1, r3
 8005e86:	18d0      	adds	r0, r2, r3
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e8e:	f7fd fab7 	bl	8003400 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++)
 8005e92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e96:	3301      	adds	r3, #1
 8005e98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005e9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0e9      	beq.n	8005e78 <CO_process+0x19c>

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0

    if (CO_GET_CNT(HB_CONS) == 1U)
		{
		  CO_HBconsumer_process(co->HBcons, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	6958      	ldr	r0, [r3, #20]
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005eae:	f7fa ff5f 	bl	8000d70 <CO_HBconsumer_process>


#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U)
		{
		 (void)CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe fcf8 	bl	80048b0 <CO_TIME_process>
    if (CO_GET_CNT(GTWA) == 1U) {
        CO_GTWA_process(co->gtwa, enableGateway, timeDifference_us, timerNext_us);
    }
#endif

    return reset;
 8005ec0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	374c      	adds	r7, #76	; 0x4c
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ecc <CO_process_SYNC>:

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
bool_t
CO_process_SYNC(CO_t* co, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61fb      	str	r3, [r7, #28]

    if ((!co->nodeIdUnconfigured) && (CO_GET_CNT(SYNC) == 1U)) {
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d131      	bne.n	8005f48 <CO_process_SYNC+0x7c>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff fb4a 	bl	8005582 <CO_NMT_getInternalState>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8005ef2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef8:	d003      	beq.n	8005f02 <CO_process_SYNC+0x36>
 8005efa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d101      	bne.n	8005f06 <CO_process_SYNC+0x3a>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <CO_process_SYNC+0x3c>
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC, NMTisPreOrOperational, timeDifference_us,
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	6979      	ldr	r1, [r7, #20]
 8005f14:	f7fe fab0 	bl	8004478 <CO_SYNC_process>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	74fb      	strb	r3, [r7, #19]
                                                        timerNext_us);

        switch (sync_process) {
 8005f1c:	7cfb      	ldrb	r3, [r7, #19]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d009      	beq.n	8005f36 <CO_process_SYNC+0x6a>
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	dc0d      	bgt.n	8005f42 <CO_process_SYNC+0x76>
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00d      	beq.n	8005f46 <CO_process_SYNC+0x7a>
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d000      	beq.n	8005f30 <CO_process_SYNC+0x64>
            case CO_SYNC_NONE: break;
            case CO_SYNC_RX_TX: syncWas = true; break;
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 8005f2e:	e008      	b.n	8005f42 <CO_process_SYNC+0x76>
            case CO_SYNC_RX_TX: syncWas = true; break;
 8005f30:	2301      	movs	r3, #1
 8005f32:	61fb      	str	r3, [r7, #28]
 8005f34:	e008      	b.n	8005f48 <CO_process_SYNC+0x7c>
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fc7b 	bl	8006836 <CO_CANclearPendingSyncPDOs>
 8005f40:	e002      	b.n	8005f48 <CO_process_SYNC+0x7c>
                break;
 8005f42:	bf00      	nop
 8005f44:	e000      	b.n	8005f48 <CO_process_SYNC+0x7c>
            case CO_SYNC_NONE: break;
 8005f46:	bf00      	nop
        }
    }

    return syncWas;
 8005f48:	69fb      	ldr	r3, [r7, #28]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <CO_process_RPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
void
CO_process_RPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b086      	sub	sp, #24
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10e      	bne.n	8005f86 <CO_process_RPDO+0x34>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff fb08 	bl	8005582 <CO_NMT_getInternalState>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b05      	cmp	r3, #5
 8005f76:	bf0c      	ite	eq
 8005f78:	2301      	moveq	r3, #1
 8005f7a:	2300      	movne	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	617b      	str	r3, [r7, #20]

    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8005f80:	2300      	movs	r3, #0
 8005f82:	827b      	strh	r3, [r7, #18]
 8005f84:	e000      	b.n	8005f88 <CO_process_RPDO+0x36>
        return;
 8005f86:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <CO_process_TPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
void
CO_process_TPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b088      	sub	sp, #32
 8005f92:	af02      	add	r7, sp, #8
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
 8005f9a:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d124      	bne.n	8005fee <CO_process_TPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff faea 	bl	8005582 <CO_NMT_getInternalState>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b05      	cmp	r3, #5
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2301      	moveq	r3, #1
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	82fb      	strh	r3, [r7, #22]
 8005fc0:	e011      	b.n	8005fe6 <CO_process_TPDO+0x58>
        CO_TPDO_process(&co->TPDO[i],
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc6:	8afb      	ldrh	r3, [r7, #22]
 8005fc8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8005fcc:	fb01 f303 	mul.w	r3, r1, r3
 8005fd0:	18d0      	adds	r0, r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	f7fc fc02 	bl	80027e4 <CO_TPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8005fe0:	8afb      	ldrh	r3, [r7, #22]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	82fb      	strh	r3, [r7, #22]
 8005fe6:	8afb      	ldrh	r3, [r7, #22]
 8005fe8:	2b07      	cmp	r3, #7
 8005fea:	d9ea      	bls.n	8005fc2 <CO_process_TPDO+0x34>
 8005fec:	e000      	b.n	8005ff0 <CO_process_TPDO+0x62>
        return;
 8005fee:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8006000:	4a13      	ldr	r2, [pc, #76]	; (8006050 <canopen_app_init+0x58>)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 800600a:	f107 0308 	add.w	r3, r7, #8
 800600e:	4619      	mov	r1, r3
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff fad7 	bl	80055c4 <CO_new>
 8006016:	4603      	mov	r3, r0
 8006018:	4a0e      	ldr	r2, [pc, #56]	; (8006054 <canopen_app_init+0x5c>)
 800601a:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 800601c:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <canopen_app_init+0x5c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d104      	bne.n	800602e <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8006024:	480c      	ldr	r0, [pc, #48]	; (8006058 <canopen_app_init+0x60>)
 8006026:	f005 fcd1 	bl	800b9cc <puts>
        return 1;
 800602a:	2301      	movs	r3, #1
 800602c:	e00c      	b.n	8006048 <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4619      	mov	r1, r3
 8006032:	480a      	ldr	r0, [pc, #40]	; (800605c <canopen_app_init+0x64>)
 8006034:	f005 fc64 	bl	800b900 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <canopen_app_init+0x58>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a05      	ldr	r2, [pc, #20]	; (8006054 <canopen_app_init+0x5c>)
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8006042:	f000 f80d 	bl	8006060 <canopen_app_resetCommunication>
    return 0;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	200004dc 	.word	0x200004dc
 8006054:	200004e0 	.word	0x200004e0
 8006058:	0800c468 	.word	0x0800c468
 800605c:	0800c488 	.word	0x0800c488

08006060 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8006060:	b590      	push	{r4, r7, lr}
 8006062:	b08f      	sub	sp, #60	; 0x3c
 8006064:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 8006066:	487d      	ldr	r0, [pc, #500]	; (800625c <canopen_app_resetCommunication+0x1fc>)
 8006068:	f005 fcb0 	bl	800b9cc <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 800606c:	4b7c      	ldr	r3, [pc, #496]	; (8006260 <canopen_app_resetCommunication+0x200>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8006076:	4b7b      	ldr	r3, [pc, #492]	; (8006264 <canopen_app_resetCommunication+0x204>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f000 f9bc 	bl	80063f8 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8006080:	4b77      	ldr	r3, [pc, #476]	; (8006260 <canopen_app_resetCommunication+0x200>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 faa6 	bl	80065d8 <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 800608c:	4b74      	ldr	r3, [pc, #464]	; (8006260 <canopen_app_resetCommunication+0x200>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a74      	ldr	r2, [pc, #464]	; (8006264 <canopen_app_resetCommunication+0x204>)
 8006092:	6811      	ldr	r1, [r2, #0]
 8006094:	2200      	movs	r2, #0
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff fc09 	bl	80058ae <CO_CANinit>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	4b71      	ldr	r3, [pc, #452]	; (8006268 <canopen_app_resetCommunication+0x208>)
 80060a2:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80060a4:	4b70      	ldr	r3, [pc, #448]	; (8006268 <canopen_app_resetCommunication+0x208>)
 80060a6:	f993 3000 	ldrsb.w	r3, [r3]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d008      	beq.n	80060c0 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 80060ae:	4b6e      	ldr	r3, [pc, #440]	; (8006268 <canopen_app_resetCommunication+0x208>)
 80060b0:	f993 3000 	ldrsb.w	r3, [r3]
 80060b4:	4619      	mov	r1, r3
 80060b6:	486d      	ldr	r0, [pc, #436]	; (800626c <canopen_app_resetCommunication+0x20c>)
 80060b8:	f005 fc22 	bl	800b900 <iprintf>
        return 1;
 80060bc:	2301      	movs	r3, #1
 80060be:	e0c8      	b.n	8006252 <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80060c0:	4b6b      	ldr	r3, [pc, #428]	; (8006270 <canopen_app_resetCommunication+0x210>)
 80060c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c4:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 80060c6:	4b6a      	ldr	r3, [pc, #424]	; (8006270 <canopen_app_resetCommunication+0x210>)
 80060c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80060ca:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 80060cc:	4b68      	ldr	r3, [pc, #416]	; (8006270 <canopen_app_resetCommunication+0x210>)
 80060ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80060d0:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 80060d2:	4b67      	ldr	r3, [pc, #412]	; (8006270 <canopen_app_resetCommunication+0x210>)
 80060d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80060d6:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 80060d8:	4b61      	ldr	r3, [pc, #388]	; (8006260 <canopen_app_resetCommunication+0x200>)
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	4b61      	ldr	r3, [pc, #388]	; (8006264 <canopen_app_resetCommunication+0x204>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	4b60      	ldr	r3, [pc, #384]	; (8006264 <canopen_app_resetCommunication+0x204>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3302      	adds	r3, #2
 80060e8:	f107 0108 	add.w	r1, r7, #8
 80060ec:	f7ff fc0b 	bl	8005906 <CO_LSSinit>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	4b5c      	ldr	r3, [pc, #368]	; (8006268 <canopen_app_resetCommunication+0x208>)
 80060f6:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80060f8:	4b5b      	ldr	r3, [pc, #364]	; (8006268 <canopen_app_resetCommunication+0x208>)
 80060fa:	f993 3000 	ldrsb.w	r3, [r3]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d008      	beq.n	8006114 <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8006102:	4b59      	ldr	r3, [pc, #356]	; (8006268 <canopen_app_resetCommunication+0x208>)
 8006104:	f993 3000 	ldrsb.w	r3, [r3]
 8006108:	4619      	mov	r1, r3
 800610a:	485a      	ldr	r0, [pc, #360]	; (8006274 <canopen_app_resetCommunication+0x214>)
 800610c:	f005 fbf8 	bl	800b900 <iprintf>
        return 2;
 8006110:	2302      	movs	r3, #2
 8006112:	e09e      	b.n	8006252 <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8006114:	4b53      	ldr	r3, [pc, #332]	; (8006264 <canopen_app_resetCommunication+0x204>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	4b52      	ldr	r3, [pc, #328]	; (8006264 <canopen_app_resetCommunication+0x204>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006124:	4b4e      	ldr	r3, [pc, #312]	; (8006260 <canopen_app_resetCommunication+0x200>)
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	4b53      	ldr	r3, [pc, #332]	; (8006278 <canopen_app_resetCommunication+0x218>)
 800612a:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 800612c:	4b4d      	ldr	r3, [pc, #308]	; (8006264 <canopen_app_resetCommunication+0x204>)
 800612e:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006130:	785b      	ldrb	r3, [r3, #1]
 8006132:	1d3a      	adds	r2, r7, #4
 8006134:	9207      	str	r2, [sp, #28]
 8006136:	9306      	str	r3, [sp, #24]
 8006138:	2300      	movs	r3, #0
 800613a:	9305      	str	r3, [sp, #20]
 800613c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006140:	9304      	str	r3, [sp, #16]
 8006142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006146:	9303      	str	r3, [sp, #12]
 8006148:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800614c:	9302      	str	r3, [sp, #8]
 800614e:	f242 1311 	movw	r3, #8465	; 0x2111
 8006152:	9301      	str	r3, [sp, #4]
 8006154:	2300      	movs	r3, #0
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	460b      	mov	r3, r1
 800615a:	2200      	movs	r2, #0
 800615c:	2100      	movs	r1, #0
 800615e:	f7ff fbff 	bl	8005960 <CO_CANopenInit>
 8006162:	4603      	mov	r3, r0
 8006164:	461a      	mov	r2, r3
 8006166:	4b40      	ldr	r3, [pc, #256]	; (8006268 <canopen_app_resetCommunication+0x208>)
 8006168:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 800616a:	4b3f      	ldr	r3, [pc, #252]	; (8006268 <canopen_app_resetCommunication+0x208>)
 800616c:	f993 3000 	ldrsb.w	r3, [r3]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01a      	beq.n	80061aa <canopen_app_resetCommunication+0x14a>
 8006174:	4b3c      	ldr	r3, [pc, #240]	; (8006268 <canopen_app_resetCommunication+0x208>)
 8006176:	f993 3000 	ldrsb.w	r3, [r3]
 800617a:	f113 0f13 	cmn.w	r3, #19
 800617e:	d014      	beq.n	80061aa <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006180:	4b39      	ldr	r3, [pc, #228]	; (8006268 <canopen_app_resetCommunication+0x208>)
 8006182:	f993 3000 	ldrsb.w	r3, [r3]
 8006186:	f113 0f0c 	cmn.w	r3, #12
 800618a:	d105      	bne.n	8006198 <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4619      	mov	r1, r3
 8006190:	483a      	ldr	r0, [pc, #232]	; (800627c <canopen_app_resetCommunication+0x21c>)
 8006192:	f005 fbb5 	bl	800b900 <iprintf>
 8006196:	e006      	b.n	80061a6 <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8006198:	4b33      	ldr	r3, [pc, #204]	; (8006268 <canopen_app_resetCommunication+0x208>)
 800619a:	f993 3000 	ldrsb.w	r3, [r3]
 800619e:	4619      	mov	r1, r3
 80061a0:	4837      	ldr	r0, [pc, #220]	; (8006280 <canopen_app_resetCommunication+0x220>)
 80061a2:	f005 fbad 	bl	800b900 <iprintf>
        }
        return 3;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e053      	b.n	8006252 <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 80061aa:	4b2d      	ldr	r3, [pc, #180]	; (8006260 <canopen_app_resetCommunication+0x200>)
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	4b2c      	ldr	r3, [pc, #176]	; (8006260 <canopen_app_resetCommunication+0x200>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69d9      	ldr	r1, [r3, #28]
 80061b4:	4b30      	ldr	r3, [pc, #192]	; (8006278 <canopen_app_resetCommunication+0x218>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b2a      	ldr	r3, [pc, #168]	; (8006264 <canopen_app_resetCommunication+0x204>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	785c      	ldrb	r4, [r3, #1]
 80061be:	1d3b      	adds	r3, r7, #4
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	4623      	mov	r3, r4
 80061c4:	f7ff fd10 	bl	8005be8 <CO_CANopenInitPDO>
 80061c8:	4603      	mov	r3, r0
 80061ca:	461a      	mov	r2, r3
 80061cc:	4b26      	ldr	r3, [pc, #152]	; (8006268 <canopen_app_resetCommunication+0x208>)
 80061ce:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80061d0:	4b25      	ldr	r3, [pc, #148]	; (8006268 <canopen_app_resetCommunication+0x208>)
 80061d2:	f993 3000 	ldrsb.w	r3, [r3]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d014      	beq.n	8006204 <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 80061da:	4b23      	ldr	r3, [pc, #140]	; (8006268 <canopen_app_resetCommunication+0x208>)
 80061dc:	f993 3000 	ldrsb.w	r3, [r3]
 80061e0:	f113 0f0c 	cmn.w	r3, #12
 80061e4:	d105      	bne.n	80061f2 <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4619      	mov	r1, r3
 80061ea:	4824      	ldr	r0, [pc, #144]	; (800627c <canopen_app_resetCommunication+0x21c>)
 80061ec:	f005 fb88 	bl	800b900 <iprintf>
 80061f0:	e006      	b.n	8006200 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 80061f2:	4b1d      	ldr	r3, [pc, #116]	; (8006268 <canopen_app_resetCommunication+0x208>)
 80061f4:	f993 3000 	ldrsb.w	r3, [r3]
 80061f8:	4619      	mov	r1, r3
 80061fa:	4822      	ldr	r0, [pc, #136]	; (8006284 <canopen_app_resetCommunication+0x224>)
 80061fc:	f005 fb80 	bl	800b900 <iprintf>
        }
        return 4;
 8006200:	2304      	movs	r3, #4
 8006202:	e026      	b.n	8006252 <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8006204:	4b17      	ldr	r3, [pc, #92]	; (8006264 <canopen_app_resetCommunication+0x204>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	4618      	mov	r0, r3
 800620c:	f003 ff36 	bl	800a07c <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8006210:	4b13      	ldr	r3, [pc, #76]	; (8006260 <canopen_app_resetCommunication+0x200>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 800621a:	481b      	ldr	r0, [pc, #108]	; (8006288 <canopen_app_resetCommunication+0x228>)
 800621c:	f005 fbd6 	bl	800b9cc <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8006220:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <canopen_app_resetCommunication+0x200>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 f8f6 	bl	8006418 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 800622c:	4817      	ldr	r0, [pc, #92]	; (800628c <canopen_app_resetCommunication+0x22c>)
 800622e:	f005 fbcd 	bl	800b9cc <puts>
    fflush(stdout);
 8006232:	4b17      	ldr	r3, [pc, #92]	; (8006290 <canopen_app_resetCommunication+0x230>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4618      	mov	r0, r3
 800623a:	f005 fa9d 	bl	800b778 <fflush>
    time_old = time_current = HAL_GetTick();
 800623e:	f001 fc31 	bl	8007aa4 <HAL_GetTick>
 8006242:	4603      	mov	r3, r0
 8006244:	4a13      	ldr	r2, [pc, #76]	; (8006294 <canopen_app_resetCommunication+0x234>)
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	4b12      	ldr	r3, [pc, #72]	; (8006294 <canopen_app_resetCommunication+0x234>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a12      	ldr	r2, [pc, #72]	; (8006298 <canopen_app_resetCommunication+0x238>)
 800624e:	6013      	str	r3, [r2, #0]
    return 0;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	bd90      	pop	{r4, r7, pc}
 800625a:	bf00      	nop
 800625c:	0800c4b0 	.word	0x0800c4b0
 8006260:	200004e0 	.word	0x200004e0
 8006264:	200004dc 	.word	0x200004dc
 8006268:	200004ec 	.word	0x200004ec
 800626c:	0800c4d8 	.word	0x0800c4d8
 8006270:	20000000 	.word	0x20000000
 8006274:	0800c500 	.word	0x0800c500
 8006278:	20000440 	.word	0x20000440
 800627c:	0800c52c 	.word	0x0800c52c
 8006280:	0800c554 	.word	0x0800c554
 8006284:	0800c580 	.word	0x0800c580
 8006288:	0800c5a8 	.word	0x0800c5a8
 800628c:	0800c5d0 	.word	0x0800c5d0
 8006290:	200004bc 	.word	0x200004bc
 8006294:	200004e8 	.word	0x200004e8
 8006298:	200004e4 	.word	0x200004e4

0800629c <canopen_app_process>:

void
canopen_app_process() {
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 80062a2:	f001 fbff 	bl	8007aa4 <HAL_GetTick>
 80062a6:	4603      	mov	r3, r0
 80062a8:	4a2c      	ldr	r2, [pc, #176]	; (800635c <canopen_app_process+0xc0>)
 80062aa:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 80062ac:	4b2b      	ldr	r3, [pc, #172]	; (800635c <canopen_app_process+0xc0>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	4b2b      	ldr	r3, [pc, #172]	; (8006360 <canopen_app_process+0xc4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d04c      	beq.n	8006352 <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 80062b8:	4b28      	ldr	r3, [pc, #160]	; (800635c <canopen_app_process+0xc0>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	4b28      	ldr	r3, [pc, #160]	; (8006360 <canopen_app_process+0xc4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062c6:	fb02 f303 	mul.w	r3, r2, r3
 80062ca:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 80062cc:	4b23      	ldr	r3, [pc, #140]	; (800635c <canopen_app_process+0xc0>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a23      	ldr	r2, [pc, #140]	; (8006360 <canopen_app_process+0xc4>)
 80062d2:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 80062d4:	4b23      	ldr	r3, [pc, #140]	; (8006364 <canopen_app_process+0xc8>)
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	2300      	movs	r3, #0
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	2100      	movs	r1, #0
 80062de:	f7ff fcfd 	bl	8005cdc <CO_process>
 80062e2:	4603      	mov	r3, r0
 80062e4:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 80062e6:	4b1f      	ldr	r3, [pc, #124]	; (8006364 <canopen_app_process+0xc8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ec:	7a5a      	ldrb	r2, [r3, #9]
 80062ee:	4b1e      	ldr	r3, [pc, #120]	; (8006368 <canopen_app_process+0xcc>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	09d2      	lsrs	r2, r2, #7
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 80062f8:	4b1a      	ldr	r3, [pc, #104]	; (8006364 <canopen_app_process+0xc8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	7a9a      	ldrb	r2, [r3, #10]
 8006300:	4b19      	ldr	r3, [pc, #100]	; (8006368 <canopen_app_process+0xcc>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	09d2      	lsrs	r2, r2, #7
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d118      	bne.n	8006342 <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8006310:	4b15      	ldr	r3, [pc, #84]	; (8006368 <canopen_app_process+0xcc>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	4618      	mov	r0, r3
 8006318:	f003 ff02 	bl	800a120 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 800631c:	4b12      	ldr	r3, [pc, #72]	; (8006368 <canopen_app_process+0xcc>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 f869 	bl	80063f8 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 8006326:	4b0f      	ldr	r3, [pc, #60]	; (8006364 <canopen_app_process+0xc8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff fa60 	bl	80057f0 <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8006330:	480e      	ldr	r0, [pc, #56]	; (800636c <canopen_app_process+0xd0>)
 8006332:	f005 fb4b 	bl	800b9cc <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 8006336:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <canopen_app_process+0xcc>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff fe5c 	bl	8005ff8 <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8006340:	e007      	b.n	8006352 <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	2b02      	cmp	r3, #2
 8006346:	d104      	bne.n	8006352 <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 8006348:	4809      	ldr	r0, [pc, #36]	; (8006370 <canopen_app_process+0xd4>)
 800634a:	f005 fb3f 	bl	800b9cc <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 800634e:	f002 fbdc 	bl	8008b0a <HAL_NVIC_SystemReset>
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	200004e8 	.word	0x200004e8
 8006360:	200004e4 	.word	0x200004e4
 8006364:	200004e0 	.word	0x200004e0
 8006368:	200004dc 	.word	0x200004dc
 800636c:	0800c5ec 	.word	0x0800c5ec
 8006370:	0800c614 	.word	0x0800c614

08006374 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 800637a:	4b1e      	ldr	r3, [pc, #120]	; (80063f4 <canopen_app_interrupt+0x80>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006380:	f3ef 8210 	mrs	r2, PRIMASK
 8006384:	607a      	str	r2, [r7, #4]
  return(result);
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800638a:	b672      	cpsid	i
}
 800638c:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 800638e:	4b19      	ldr	r3, [pc, #100]	; (80063f4 <canopen_app_interrupt+0x80>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d120      	bne.n	80063da <canopen_app_interrupt+0x66>
 8006398:	4b16      	ldr	r3, [pc, #88]	; (80063f4 <canopen_app_interrupt+0x80>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01a      	beq.n	80063da <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 80063a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063ac:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 80063ae:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <canopen_app_interrupt+0x80>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2200      	movs	r2, #0
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff fd88 	bl	8005ecc <CO_process_SYNC>
 80063bc:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 80063be:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <canopen_app_interrupt+0x80>)
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	2300      	movs	r3, #0
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	f7ff fdc3 	bl	8005f52 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 80063cc:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <canopen_app_interrupt+0x80>)
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	2300      	movs	r3, #0
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	68f9      	ldr	r1, [r7, #12]
 80063d6:	f7ff fdda 	bl	8005f8e <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 80063da:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <canopen_app_interrupt+0x80>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e2:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	f383 8810 	msr	PRIMASK, r3
}
 80063ea:	bf00      	nop
}
 80063ec:	bf00      	nop
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	200004e0 	.word	0x200004e0

080063f8 <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d004      	beq.n	8006410 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	4618      	mov	r0, r3
 800640c:	f001 fdcb 	bl	8007fa6 <HAL_CAN_Stop>
#endif
    }
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	4618      	mov	r0, r3
 8006430:	f001 fd75 	bl	8007f1e <HAL_CAN_Start>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d102      	bne.n	8006440 <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	615a      	str	r2, [r3, #20]
        }
    }
}
 8006440:	bf00      	nop
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8006448:	b580      	push	{r7, lr}
 800644a:	b090      	sub	sp, #64	; 0x40
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <CO_CANmodule_init+0x20>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <CO_CANmodule_init+0x20>
 8006462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006468:	f04f 33ff 	mov.w	r3, #4294967295
 800646c:	e0ab      	b.n	80065c6 <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8006474:	4a56      	ldr	r2, [pc, #344]	; (80065d0 <CO_CANmodule_init+0x188>)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	887a      	ldrh	r2, [r7, #2]
 8006484:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800648a:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006492:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 80064be:	2300      	movs	r3, #0
 80064c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80064c2:	e02b      	b.n	800651c <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 80064c4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80064c6:	4613      	mov	r3, r2
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	461a      	mov	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4413      	add	r3, r2
 80064d4:	2200      	movs	r2, #0
 80064d6:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 80064d8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80064da:	4613      	mov	r3, r2
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	461a      	mov	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4413      	add	r3, r2
 80064e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064ec:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 80064ee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80064f0:	4613      	mov	r3, r2
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	4413      	add	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	461a      	mov	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	2200      	movs	r2, #0
 8006500:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8006502:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006504:	4613      	mov	r3, r2
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	461a      	mov	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4413      	add	r3, r2
 8006512:	2200      	movs	r2, #0
 8006514:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8006516:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006518:	3301      	adds	r3, #1
 800651a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800651c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800651e:	887b      	ldrh	r3, [r7, #2]
 8006520:	429a      	cmp	r2, r3
 8006522:	d3cf      	bcc.n	80064c4 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8006524:	2300      	movs	r3, #0
 8006526:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006528:	e00c      	b.n	8006544 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 800652a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800652c:	4613      	mov	r3, r2
 800652e:	005b      	lsls	r3, r3, #1
 8006530:	4413      	add	r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	461a      	mov	r2, r3
 8006536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006538:	4413      	add	r3, r2
 800653a:	2200      	movs	r2, #0
 800653c:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 800653e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006540:	3301      	adds	r3, #1
 8006542:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006544:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8006546:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800654a:	429a      	cmp	r2, r3
 800654c:	d3ed      	bcc.n	800652a <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <CO_CANmodule_init+0x18c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d102      	bne.n	8006568 <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
 8006566:	e001      	b.n	800656c <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 8006568:	230e      	movs	r3, #14
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800656c:	2300      	movs	r3, #0
 800656e:	62fb      	str	r3, [r7, #44]	; 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006570:	2301      	movs	r3, #1
 8006572:	633b      	str	r3, [r7, #48]	; 0x30
    FilterConfig.FilterIdHigh = 0x0;
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 8006578:	2300      	movs	r3, #0
 800657a:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 800657c:	2300      	movs	r3, #0
 800657e:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8006580:	2300      	movs	r3, #0
 8006582:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8006584:	2300      	movs	r3, #0
 8006586:	627b      	str	r3, [r7, #36]	; 0x24

    FilterConfig.FilterActivation = ENABLE;
 8006588:	2301      	movs	r3, #1
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 800658c:	230e      	movs	r3, #14
 800658e:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f107 0214 	add.w	r2, r7, #20
 8006598:	4611      	mov	r1, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f001 fbf6 	bl	8007d8c <HAL_CAN_ConfigFilter>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80065a6:	f04f 33ff 	mov.w	r3, #4294967295
 80065aa:	e00c      	b.n	80065c6 <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	2113      	movs	r1, #19
 80065b2:	4618      	mov	r0, r3
 80065b4:	f001 ff5f 	bl	8008476 <HAL_CAN_ActivateNotification>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80065be:	f04f 33ff 	mov.w	r3, #4294967295
 80065c2:	e000      	b.n	80065c6 <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3740      	adds	r7, #64	; 0x40
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	200004f0 	.word	0x200004f0
 80065d4:	40006400 	.word	0x40006400

080065d8 <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d009      	beq.n	80065fa <CO_CANmodule_disable+0x22>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f001 fcd6 	bl	8007fa6 <HAL_CAN_Stop>
#endif
    }
}
 80065fa:	bf00      	nop
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	4608      	mov	r0, r1
 800660e:	4611      	mov	r1, r2
 8006610:	461a      	mov	r2, r3
 8006612:	4603      	mov	r3, r0
 8006614:	817b      	strh	r3, [r7, #10]
 8006616:	460b      	mov	r3, r1
 8006618:	813b      	strh	r3, [r7, #8]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800661e:	2300      	movs	r3, #0
 8006620:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d03c      	beq.n	80066a2 <CO_CANrxBufferInit+0x9e>
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	2b00      	cmp	r3, #0
 800662c:	d039      	beq.n	80066a2 <CO_CANrxBufferInit+0x9e>
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	2b00      	cmp	r3, #0
 8006632:	d036      	beq.n	80066a2 <CO_CANrxBufferInit+0x9e>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	891b      	ldrh	r3, [r3, #8]
 8006638:	897a      	ldrh	r2, [r7, #10]
 800663a:	429a      	cmp	r2, r3
 800663c:	d231      	bcs.n	80066a2 <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6859      	ldr	r1, [r3, #4]
 8006642:	897a      	ldrh	r2, [r7, #10]
 8006644:	4613      	mov	r3, r2
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006654:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800665a:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 800665c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006664:	b21b      	sxth	r3, r3
 8006666:	6a3a      	ldr	r2, [r7, #32]
 8006668:	2a00      	cmp	r2, #0
 800666a:	d001      	beq.n	8006670 <CO_CANrxBufferInit+0x6c>
 800666c:	4a12      	ldr	r2, [pc, #72]	; (80066b8 <CO_CANrxBufferInit+0xb4>)
 800666e:	e000      	b.n	8006672 <CO_CANrxBufferInit+0x6e>
 8006670:	2200      	movs	r2, #0
 8006672:	4313      	orrs	r3, r2
 8006674:	b21b      	sxth	r3, r3
 8006676:	b29a      	uxth	r2, r3
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 800667c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006684:	b21b      	sxth	r3, r3
 8006686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668e:	b21b      	sxth	r3, r3
 8006690:	b29a      	uxth	r2, r3
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d004      	beq.n	80066a8 <CO_CANrxBufferInit+0xa4>
            __NOP();
 800669e:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80066a0:	e002      	b.n	80066a8 <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80066a2:	23ff      	movs	r3, #255	; 0xff
 80066a4:	75fb      	strb	r3, [r7, #23]
 80066a6:	e000      	b.n	80066aa <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80066a8:	bf00      	nop
    }

    return ret;
 80066aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr
 80066b8:	ffff8000 	.word	0xffff8000

080066bc <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	607b      	str	r3, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	817b      	strh	r3, [r7, #10]
 80066ca:	4613      	mov	r3, r2
 80066cc:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d024      	beq.n	8006722 <CO_CANtxBufferInit+0x66>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8a1b      	ldrh	r3, [r3, #16]
 80066dc:	897a      	ldrh	r2, [r7, #10]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d21f      	bcs.n	8006722 <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	68d9      	ldr	r1, [r3, #12]
 80066e6:	897a      	ldrh	r2, [r7, #10]
 80066e8:	4613      	mov	r3, r2
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	4413      	add	r3, r2
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	440b      	add	r3, r1
 80066f2:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 80066f4:	893b      	ldrh	r3, [r7, #8]
 80066f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	2a00      	cmp	r2, #0
 80066fe:	d002      	beq.n	8006706 <CO_CANtxBufferInit+0x4a>
 8006700:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006704:	e000      	b.n	8006708 <CO_CANtxBufferInit+0x4c>
 8006706:	2200      	movs	r2, #0
 8006708:	431a      	orrs	r2, r3
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006714:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2200      	movs	r2, #0
 800671a:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006720:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8006722:	697b      	ldr	r3, [r7, #20]
}
 8006724:	4618      	mov	r0, r3
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr
	...

08006730 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	4618      	mov	r0, r3
 8006746:	f001 fd51 	bl	80081ec <HAL_CAN_GetTxMailboxesFreeLevel>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d028      	beq.n	80067a2 <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8006750:	4b16      	ldr	r3, [pc, #88]	; (80067ac <prv_send_can_message+0x7c>)
 8006752:	2200      	movs	r2, #0
 8006754:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 8006756:	4b15      	ldr	r3, [pc, #84]	; (80067ac <prv_send_can_message+0x7c>)
 8006758:	2200      	movs	r2, #0
 800675a:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	791b      	ldrb	r3, [r3, #4]
 8006760:	461a      	mov	r2, r3
 8006762:	4b12      	ldr	r3, [pc, #72]	; (80067ac <prv_send_can_message+0x7c>)
 8006764:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800676e:	4a0f      	ldr	r2, [pc, #60]	; (80067ac <prv_send_can_message+0x7c>)
 8006770:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	0b9b      	lsrs	r3, r3, #14
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	4a0b      	ldr	r2, [pc, #44]	; (80067ac <prv_send_can_message+0x7c>)
 800677e:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6898      	ldr	r0, [r3, #8]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	1d5a      	adds	r2, r3, #5
 800678a:	f107 0308 	add.w	r3, r7, #8
 800678e:	4907      	ldr	r1, [pc, #28]	; (80067ac <prv_send_can_message+0x7c>)
 8006790:	f001 fc52 	bl	8008038 <HAL_CAN_AddTxMessage>
 8006794:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 8006796:	2b00      	cmp	r3, #0
 8006798:	bf0c      	ite	eq
 800679a:	2301      	moveq	r3, #1
 800679c:	2300      	movne	r3, #0
 800679e:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 80067a0:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	200004f4 	.word	0x200004f4

080067b0 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 80067ba:	2300      	movs	r3, #0
 80067bc:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00c      	beq.n	80067e0 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	8a5b      	ldrh	r3, [r3, #18]
 80067d2:	f043 0308 	orr.w	r3, r3, #8
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 80067dc:	23f7      	movs	r3, #247	; 0xf7
 80067de:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e0:	f3ef 8310 	mrs	r3, PRIMASK
 80067e4:	613b      	str	r3, [r7, #16]
  return(result);
 80067e6:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80067ec:	b672      	cpsid	i
}
 80067ee:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff ff9c 	bl	8006730 <prv_send_can_message>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d004      	beq.n	8006808 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	695a      	ldr	r2, [r3, #20]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	61da      	str	r2, [r3, #28]
 8006806:	e009      	b.n	800681c <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2201      	movs	r2, #1
 800680c:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006812:	b29b      	uxth	r3, r3
 8006814:	3301      	adds	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f383 8810 	msr	PRIMASK, r3
}
 8006828:	bf00      	nop

    return err;
 800682a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8006836:	b480      	push	{r7}
 8006838:	b087      	sub	sp, #28
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006842:	f3ef 8310 	mrs	r3, PRIMASK
 8006846:	60fb      	str	r3, [r7, #12]
  return(result);
 8006848:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800684e:	b672      	cpsid	i
}
 8006850:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d004      	beq.n	8006864 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8006860:	2301      	movs	r3, #1
 8006862:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d032      	beq.n	80068d4 <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	8a1b      	ldrh	r3, [r3, #16]
 8006872:	827b      	strh	r3, [r7, #18]
 8006874:	e02b      	b.n	80068ce <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68d9      	ldr	r1, [r3, #12]
 800687a:	8a7a      	ldrh	r2, [r7, #18]
 800687c:	4613      	mov	r3, r2
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	4413      	add	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	440b      	add	r3, r1
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01d      	beq.n	80068c8 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68d9      	ldr	r1, [r3, #12]
 8006890:	8a7a      	ldrh	r2, [r7, #18]
 8006892:	4613      	mov	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4413      	add	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	440b      	add	r3, r1
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d012      	beq.n	80068c8 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68d9      	ldr	r1, [r3, #12]
 80068a6:	8a7a      	ldrh	r2, [r7, #18]
 80068a8:	4613      	mov	r3, r2
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	4413      	add	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	440b      	add	r3, r1
 80068b2:	2200      	movs	r2, #0
 80068b4:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 80068c4:	2302      	movs	r3, #2
 80068c6:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 80068c8:	8a7b      	ldrh	r3, [r7, #18]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	827b      	strh	r3, [r7, #18]
 80068ce:	8a7b      	ldrh	r3, [r7, #18]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1d0      	bne.n	8006876 <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f383 8810 	msr	PRIMASK, r3
}
 80068e0:	bf00      	nop
    if (tpdoDeleted) {
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d006      	beq.n	80068f6 <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	8a5b      	ldrh	r3, [r3, #18]
 80068ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	825a      	strh	r2, [r3, #18]
    }
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr

08006900 <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	429a      	cmp	r2, r3
 8006924:	d02e      	beq.n	8006984 <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	8a5b      	ldrh	r3, [r3, #18]
 800692a:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & CAN_ESR_BOFF) {
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b00      	cmp	r3, #0
 800693a:	d004      	beq.n	8006946 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 800693c:	89fb      	ldrh	r3, [r7, #14]
 800693e:	f043 0304 	orr.w	r3, r3, #4
 8006942:	81fb      	strh	r3, [r7, #14]
 8006944:	e01b      	b.n	800697e <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 8006946:	89fb      	ldrh	r3, [r7, #14]
 8006948:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 800694c:	f023 0303 	bic.w	r3, r3, #3
 8006950:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 800695c:	89fb      	ldrh	r3, [r7, #14]
 800695e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006962:	f043 0301 	orr.w	r3, r3, #1
 8006966:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 8006972:	89fb      	ldrh	r3, [r7, #14]
 8006974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006978:	f043 0302 	orr.w	r3, r3, #2
 800697c:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	89fa      	ldrh	r2, [r7, #14]
 8006982:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr
	...

08006990 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08c      	sub	sp, #48	; 0x30
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 800699c:	2300      	movs	r3, #0
 800699e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 80069a6:	f107 0314 	add.w	r3, r7, #20
 80069aa:	3305      	adds	r3, #5
 80069ac:	4a2c      	ldr	r2, [pc, #176]	; (8006a60 <prv_read_can_received_msg+0xd0>)
 80069ae:	68b9      	ldr	r1, [r7, #8]
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f001 fc4f 	bl	8008254 <HAL_CAN_GetRxMessage>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d14c      	bne.n	8006a56 <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 80069bc:	4b28      	ldr	r3, [pc, #160]	; (8006a60 <prv_read_can_received_msg+0xd0>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a27      	ldr	r2, [pc, #156]	; (8006a60 <prv_read_can_received_msg+0xd0>)
 80069c2:	68d2      	ldr	r2, [r2, #12]
 80069c4:	2a02      	cmp	r2, #2
 80069c6:	d102      	bne.n	80069ce <prv_read_can_received_msg+0x3e>
 80069c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80069cc:	e000      	b.n	80069d0 <prv_read_can_received_msg+0x40>
 80069ce:	2200      	movs	r2, #0
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 80069d4:	4b22      	ldr	r3, [pc, #136]	; (8006a60 <prv_read_can_received_msg+0xd0>)
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 80069e0:	4b20      	ldr	r3, [pc, #128]	; (8006a64 <prv_read_can_received_msg+0xd4>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 80069ea:	be00      	bkpt	0x0000
 80069ec:	e01f      	b.n	8006a2e <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 80069ee:	4b1d      	ldr	r3, [pc, #116]	; (8006a64 <prv_read_can_received_msg+0xd4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 80069f6:	4b1b      	ldr	r3, [pc, #108]	; (8006a64 <prv_read_can_received_msg+0xd4>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	891b      	ldrh	r3, [r3, #8]
 80069fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80069fe:	e013      	b.n	8006a28 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	4053      	eors	r3, r2
 8006a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a0c:	8852      	ldrh	r2, [r2, #2]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d103      	bne.n	8006a1c <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 8006a1a:	e008      	b.n	8006a2e <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8006a1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a24:	330c      	adds	r3, #12
 8006a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e8      	bne.n	8006a00 <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8006a2e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d010      	beq.n	8006a58 <prv_read_can_received_msg+0xc8>
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00d      	beq.n	8006a58 <prv_read_can_received_msg+0xc8>
 8006a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d009      	beq.n	8006a58 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8006a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a4a:	6852      	ldr	r2, [r2, #4]
 8006a4c:	f107 0114 	add.w	r1, r7, #20
 8006a50:	4610      	mov	r0, r2
 8006a52:	4798      	blx	r3
 8006a54:	e000      	b.n	8006a58 <prv_read_can_received_msg+0xc8>
        return;
 8006a56:	bf00      	nop
    }
}
 8006a58:	3730      	adds	r7, #48	; 0x30
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	2000050c 	.word	0x2000050c
 8006a64:	200004f0 	.word	0x200004f0

08006a68 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 8006a70:	2200      	movs	r2, #0
 8006a72:	2100      	movs	r1, #0
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff ff8b 	bl	8006990 <prv_read_can_received_msg>
}
 8006a7a:	bf00      	nop
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff ff7e 	bl	8006990 <prv_read_can_received_msg>
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d03d      	beq.n	8006b38 <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ac6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ac8:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8006ace:	b672      	cpsid	i
}
 8006ad0:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	8a1b      	ldrh	r3, [r3, #16]
 8006ad6:	827b      	strh	r3, [r7, #18]
 8006ad8:	e01e      	b.n	8006b18 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d014      	beq.n	8006b0c <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 8006ae2:	6979      	ldr	r1, [r7, #20]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff fe23 	bl	8006730 <prv_send_can_message>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00d      	beq.n	8006b0c <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2200      	movs	r2, #0
 8006af4:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	695a      	ldr	r2, [r3, #20]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8006b0c:	8a7b      	ldrh	r3, [r7, #18]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	827b      	strh	r3, [r7, #18]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	3318      	adds	r3, #24
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	8a7b      	ldrh	r3, [r7, #18]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1dd      	bne.n	8006ada <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 8006b1e:	8a7b      	ldrh	r3, [r7, #18]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d102      	bne.n	8006b2a <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f383 8810 	msr	PRIMASK, r3
}
 8006b36:	bf00      	nop
    }
}
 8006b38:	bf00      	nop
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8006b48:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff ffa4 	bl	8006a9c <CO_CANinterrupt_TX>
}
 8006b54:	bf00      	nop
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	200004f0 	.word	0x200004f0

08006b60 <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8006b68:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff ff94 	bl	8006a9c <CO_CANinterrupt_TX>
}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	200004f0 	.word	0x200004f0

08006b80 <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8006b88:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff ff84 	bl	8006a9c <CO_CANinterrupt_TX>
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	200004f0 	.word	0x200004f0

08006ba0 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Timer interrupt function executes every 1 ms */
void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
//static uint8_t cvb=0;
//  cvb++;
//  cvb%=128*4;
//  if(cvb==0){HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);}
  if (htim == canopenNodeSTM32->timerHandle) {canopen_app_interrupt();}
 8006ba8:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d101      	bne.n	8006bb8 <HAL_TIM_PeriodElapsedCallback+0x18>
 8006bb4:	f7ff fbde 	bl	8006374 <canopen_app_interrupt>

}
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	200004dc 	.word	0x200004dc

08006bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006bca:	f000 ff13 	bl	80079f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006bce:	f000 f8c1 	bl	8006d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006bd2:	f000 fb1b 	bl	800720c <MX_GPIO_Init>
  MX_DMA_Init();
 8006bd6:	f000 faf3 	bl	80071c0 <MX_DMA_Init>
  MX_CAN_Init();
 8006bda:	f000 f901 	bl	8006de0 <MX_CAN_Init>
  MX_TIM1_Init();
 8006bde:	f000 f963 	bl	8006ea8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8006be2:	f000 f9b1 	bl	8006f48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8006be6:	f000 f9fb 	bl	8006fe0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8006bea:	f000 fa47 	bl	800707c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8006bee:	f000 fa93 	bl	8007118 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006bf2:	f000 fabb 	bl	800716c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8006bf6:	f000 f929 	bl	8006e4c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

    HAL_Delay(500);
 8006bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bfe:	f000 ff5b 	bl	8007ab8 <HAL_Delay>
		   HAL_Delay(64);
		  }
	  }
#endif

for(uint8_t cnt=0;cnt<50;cnt++)
 8006c02:	2300      	movs	r3, #0
 8006c04:	77fb      	strb	r3, [r7, #31]
 8006c06:	e00e      	b.n	8006c26 <main+0x62>
{
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5 );
 8006c08:	2120      	movs	r1, #32
 8006c0a:	4848      	ldr	r0, [pc, #288]	; (8006d2c <main+0x168>)
 8006c0c:	f002 fbc8 	bl	80093a0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13 );
 8006c10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c14:	4846      	ldr	r0, [pc, #280]	; (8006d30 <main+0x16c>)
 8006c16:	f002 fbc3 	bl	80093a0 <HAL_GPIO_TogglePin>
    HAL_Delay(20);
 8006c1a:	2014      	movs	r0, #20
 8006c1c:	f000 ff4c 	bl	8007ab8 <HAL_Delay>
for(uint8_t cnt=0;cnt<50;cnt++)
 8006c20:	7ffb      	ldrb	r3, [r7, #31]
 8006c22:	3301      	adds	r3, #1
 8006c24:	77fb      	strb	r3, [r7, #31]
 8006c26:	7ffb      	ldrb	r3, [r7, #31]
 8006c28:	2b31      	cmp	r3, #49	; 0x31
 8006c2a:	d9ed      	bls.n	8006c08 <main+0x44>
}
//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);//off
//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);  HAL_Delay(2200);//off

  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hcan;
 8006c2c:	4b41      	ldr	r3, [pc, #260]	; (8006d34 <main+0x170>)
 8006c2e:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.HWInitFunction = MX_CAN_Init;
 8006c30:	4b41      	ldr	r3, [pc, #260]	; (8006d38 <main+0x174>)
 8006c32:	613b      	str	r3, [r7, #16]
  canOpenNodeSTM32.timerHandle = &htim4;
 8006c34:	4b41      	ldr	r3, [pc, #260]	; (8006d3c <main+0x178>)
 8006c36:	60bb      	str	r3, [r7, #8]
  canOpenNodeSTM32.desiredNodeID = 103;
 8006c38:	2367      	movs	r3, #103	; 0x67
 8006c3a:	713b      	strb	r3, [r7, #4]
  canOpenNodeSTM32.baudrate = 125*4;
 8006c3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006c40:	80fb      	strh	r3, [r7, #6]
  canopen_app_init(&canOpenNodeSTM32);
 8006c42:	1d3b      	adds	r3, r7, #4
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff f9d7 	bl	8005ff8 <canopen_app_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, !canOpenNodeSTM32.outStatusLEDGreen);
 8006c4a:	7d3b      	ldrb	r3, [r7, #20]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	bf0c      	ite	eq
 8006c50:	2301      	moveq	r3, #1
 8006c52:	2300      	movne	r3, #0
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	461a      	mov	r2, r3
 8006c58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c5c:	4834      	ldr	r0, [pc, #208]	; (8006d30 <main+0x16c>)
 8006c5e:	f002 fb87 	bl	8009370 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 ,  canOpenNodeSTM32.outStatusLEDRed  );
 8006c62:	7d7b      	ldrb	r3, [r7, #21]
 8006c64:	461a      	mov	r2, r3
 8006c66:	2120      	movs	r1, #32
 8006c68:	4830      	ldr	r0, [pc, #192]	; (8006d2c <main+0x168>)
 8006c6a:	f002 fb81 	bl	8009370 <HAL_GPIO_WritePin>

	canopen_app_process();
 8006c6e:	f7ff fb15 	bl	800629c <canopen_app_process>
	HAL_Delay(400);
 8006c72:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006c76:	f000 ff1f 	bl	8007ab8 <HAL_Delay>

  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, !canOpenNodeSTM32.outStatusLEDGreen);
 8006c7a:	7d3b      	ldrb	r3, [r7, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bf0c      	ite	eq
 8006c80:	2301      	moveq	r3, #1
 8006c82:	2300      	movne	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c8c:	4828      	ldr	r0, [pc, #160]	; (8006d30 <main+0x16c>)
 8006c8e:	f002 fb6f 	bl	8009370 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 ,  canOpenNodeSTM32.outStatusLEDRed  );
 8006c92:	7d7b      	ldrb	r3, [r7, #21]
 8006c94:	461a      	mov	r2, r3
 8006c96:	2120      	movs	r1, #32
 8006c98:	4824      	ldr	r0, [pc, #144]	; (8006d2c <main+0x168>)
 8006c9a:	f002 fb69 	bl	8009370 <HAL_GPIO_WritePin>

	  canopen_app_process();
 8006c9e:	f7ff fafd 	bl	800629c <canopen_app_process>

	  		  if(HAL_GetTick() - Ticks>2000)
 8006ca2:	f000 feff 	bl	8007aa4 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	4b25      	ldr	r3, [pc, #148]	; (8006d40 <main+0x17c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006cb2:	d9e2      	bls.n	8006c7a <main+0xb6>
	  		  {
//	  			CO_TPDOsendRequest( &canOpenNodeSTM32.canOpenStack->TPDO[0] );
//	  			CO_TPDOsendRequest( &canOpenNodeSTM32.canOpenStack->TPDO[1] );

	  			if(tmp64u_1 != OD_PERSIST_COMM.x6001_F103_VAR64_6001_TX)
 8006cb4:	4b23      	ldr	r3, [pc, #140]	; (8006d44 <main+0x180>)
 8006cb6:	e9d3 0184 	ldrd	r0, r1, [r3, #528]	; 0x210
 8006cba:	4b23      	ldr	r3, [pc, #140]	; (8006d48 <main+0x184>)
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	bf08      	it	eq
 8006cc4:	4290      	cmpeq	r0, r2
 8006cc6:	d00e      	beq.n	8006ce6 <main+0x122>
	  			{
	  			tmp64u_1 = OD_PERSIST_COMM.x6001_F103_VAR64_6001_TX;
 8006cc8:	4b1e      	ldr	r3, [pc, #120]	; (8006d44 <main+0x180>)
 8006cca:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 8006cce:	491e      	ldr	r1, [pc, #120]	; (8006d48 <main+0x184>)
 8006cd0:	e9c1 2300 	strd	r2, r3, [r1]
	  			huart1.gState = HAL_UART_STATE_READY;
 8006cd4:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <main+0x188>)
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	  			HAL_UART_Transmit_DMA( &huart1, (uint8_t*)(&tmp64u_1), 8);
 8006cdc:	2208      	movs	r2, #8
 8006cde:	491a      	ldr	r1, [pc, #104]	; (8006d48 <main+0x184>)
 8006ce0:	481a      	ldr	r0, [pc, #104]	; (8006d4c <main+0x188>)
 8006ce2:	f003 fead 	bl	800aa40 <HAL_UART_Transmit_DMA>
	  			}

	  			HAL_Delay(2);
 8006ce6:	2002      	movs	r0, #2
 8006ce8:	f000 fee6 	bl	8007ab8 <HAL_Delay>

	  			if(tmp64u_0 != OD_PERSIST_COMM.x6000_F103_VAR64_6000_TX)
 8006cec:	4b15      	ldr	r3, [pc, #84]	; (8006d44 <main+0x180>)
 8006cee:	e9d3 0182 	ldrd	r0, r1, [r3, #520]	; 0x208
 8006cf2:	4b17      	ldr	r3, [pc, #92]	; (8006d50 <main+0x18c>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	4299      	cmp	r1, r3
 8006cfa:	bf08      	it	eq
 8006cfc:	4290      	cmpeq	r0, r2
 8006cfe:	d00e      	beq.n	8006d1e <main+0x15a>
	  			{
	  			tmp64u_0 = OD_PERSIST_COMM.x6000_F103_VAR64_6000_TX;
 8006d00:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <main+0x180>)
 8006d02:	e9d3 2382 	ldrd	r2, r3, [r3, #520]	; 0x208
 8006d06:	4912      	ldr	r1, [pc, #72]	; (8006d50 <main+0x18c>)
 8006d08:	e9c1 2300 	strd	r2, r3, [r1]
	  			huart1.gState = HAL_UART_STATE_READY;
 8006d0c:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <main+0x188>)
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	  			HAL_UART_Transmit_DMA( &huart1, (uint8_t*)(&tmp64u_0), 8);
 8006d14:	2208      	movs	r2, #8
 8006d16:	490e      	ldr	r1, [pc, #56]	; (8006d50 <main+0x18c>)
 8006d18:	480c      	ldr	r0, [pc, #48]	; (8006d4c <main+0x188>)
 8006d1a:	f003 fe91 	bl	800aa40 <HAL_UART_Transmit_DMA>
	  			}

	  			Ticks = HAL_GetTick();
 8006d1e:	f000 fec1 	bl	8007aa4 <HAL_GetTick>
 8006d22:	4603      	mov	r3, r0
 8006d24:	4a06      	ldr	r2, [pc, #24]	; (8006d40 <main+0x17c>)
 8006d26:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, !canOpenNodeSTM32.outStatusLEDGreen);
 8006d28:	e7a7      	b.n	8006c7a <main+0xb6>
 8006d2a:	bf00      	nop
 8006d2c:	40010800 	.word	0x40010800
 8006d30:	40011000 	.word	0x40011000
 8006d34:	20000528 	.word	0x20000528
 8006d38:	08006de1 	.word	0x08006de1
 8006d3c:	2000082c 	.word	0x2000082c
 8006d40:	20000a50 	.word	0x20000a50
 8006d44:	20000000 	.word	0x20000000
 8006d48:	20000448 	.word	0x20000448
 8006d4c:	200008e0 	.word	0x200008e0
 8006d50:	20000450 	.word	0x20000450

08006d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b090      	sub	sp, #64	; 0x40
 8006d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d5a:	f107 0318 	add.w	r3, r7, #24
 8006d5e:	2228      	movs	r2, #40	; 0x28
 8006d60:	2100      	movs	r1, #0
 8006d62:	4618      	mov	r0, r3
 8006d64:	f004 ff2c 	bl	800bbc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006d68:	1d3b      	adds	r3, r7, #4
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	605a      	str	r2, [r3, #4]
 8006d70:	609a      	str	r2, [r3, #8]
 8006d72:	60da      	str	r2, [r3, #12]
 8006d74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006d76:	2301      	movs	r3, #1
 8006d78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006d7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006d80:	2300      	movs	r3, #0
 8006d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d84:	2301      	movs	r3, #1
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006d8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006d92:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d98:	f107 0318 	add.w	r3, r7, #24
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f002 fcf7 	bl	8009790 <HAL_RCC_OscConfig>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006da8:	f000 faa8 	bl	80072fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006dac:	230f      	movs	r3, #15
 8006dae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006db0:	2302      	movs	r3, #2
 8006db2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006dc2:	1d3b      	adds	r3, r7, #4
 8006dc4:	2102      	movs	r1, #2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f002 ff64 	bl	8009c94 <HAL_RCC_ClockConfig>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006dd2:	f000 fa93 	bl	80072fc <Error_Handler>
  }
}
 8006dd6:	bf00      	nop
 8006dd8:	3740      	adds	r7, #64	; 0x40
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8006de4:	4b17      	ldr	r3, [pc, #92]	; (8006e44 <MX_CAN_Init+0x64>)
 8006de6:	4a18      	ldr	r2, [pc, #96]	; (8006e48 <MX_CAN_Init+0x68>)
 8006de8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8006dea:	4b16      	ldr	r3, [pc, #88]	; (8006e44 <MX_CAN_Init+0x64>)
 8006dec:	2208      	movs	r2, #8
 8006dee:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8006df0:	4b14      	ldr	r3, [pc, #80]	; (8006e44 <MX_CAN_Init+0x64>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006df6:	4b13      	ldr	r3, [pc, #76]	; (8006e44 <MX_CAN_Init+0x64>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8006dfc:	4b11      	ldr	r3, [pc, #68]	; (8006e44 <MX_CAN_Init+0x64>)
 8006dfe:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8006e02:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8006e04:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <MX_CAN_Init+0x64>)
 8006e06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e0a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <MX_CAN_Init+0x64>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8006e12:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <MX_CAN_Init+0x64>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8006e18:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <MX_CAN_Init+0x64>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8006e1e:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <MX_CAN_Init+0x64>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8006e24:	4b07      	ldr	r3, [pc, #28]	; (8006e44 <MX_CAN_Init+0x64>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8006e2a:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <MX_CAN_Init+0x64>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8006e30:	4804      	ldr	r0, [pc, #16]	; (8006e44 <MX_CAN_Init+0x64>)
 8006e32:	f000 fe65 	bl	8007b00 <HAL_CAN_Init>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8006e3c:	f000 fa5e 	bl	80072fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8006e40:	bf00      	nop
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000528 	.word	0x20000528
 8006e48:	40006400 	.word	0x40006400

08006e4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006e50:	4b12      	ldr	r3, [pc, #72]	; (8006e9c <MX_I2C1_Init+0x50>)
 8006e52:	4a13      	ldr	r2, [pc, #76]	; (8006ea0 <MX_I2C1_Init+0x54>)
 8006e54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006e56:	4b11      	ldr	r3, [pc, #68]	; (8006e9c <MX_I2C1_Init+0x50>)
 8006e58:	4a12      	ldr	r2, [pc, #72]	; (8006ea4 <MX_I2C1_Init+0x58>)
 8006e5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006e5c:	4b0f      	ldr	r3, [pc, #60]	; (8006e9c <MX_I2C1_Init+0x50>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006e62:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <MX_I2C1_Init+0x50>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e68:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <MX_I2C1_Init+0x50>)
 8006e6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e70:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <MX_I2C1_Init+0x50>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006e76:	4b09      	ldr	r3, [pc, #36]	; (8006e9c <MX_I2C1_Init+0x50>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e7c:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <MX_I2C1_Init+0x50>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e82:	4b06      	ldr	r3, [pc, #24]	; (8006e9c <MX_I2C1_Init+0x50>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006e88:	4804      	ldr	r0, [pc, #16]	; (8006e9c <MX_I2C1_Init+0x50>)
 8006e8a:	f002 faa3 	bl	80093d4 <HAL_I2C_Init>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006e94:	f000 fa32 	bl	80072fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006e98:	bf00      	nop
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	2000058c 	.word	0x2000058c
 8006ea0:	40005400 	.word	0x40005400
 8006ea4:	000186a0 	.word	0x000186a0

08006ea8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006eae:	f107 0308 	add.w	r3, r7, #8
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	605a      	str	r2, [r3, #4]
 8006eb8:	609a      	str	r2, [r3, #8]
 8006eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ebc:	463b      	mov	r3, r7
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006ec4:	4b1e      	ldr	r3, [pc, #120]	; (8006f40 <MX_TIM1_Init+0x98>)
 8006ec6:	4a1f      	ldr	r2, [pc, #124]	; (8006f44 <MX_TIM1_Init+0x9c>)
 8006ec8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006eca:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <MX_TIM1_Init+0x98>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <MX_TIM1_Init+0x98>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006ed6:	4b1a      	ldr	r3, [pc, #104]	; (8006f40 <MX_TIM1_Init+0x98>)
 8006ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006edc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ede:	4b18      	ldr	r3, [pc, #96]	; (8006f40 <MX_TIM1_Init+0x98>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006ee4:	4b16      	ldr	r3, [pc, #88]	; (8006f40 <MX_TIM1_Init+0x98>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006eea:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <MX_TIM1_Init+0x98>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006ef0:	4813      	ldr	r0, [pc, #76]	; (8006f40 <MX_TIM1_Init+0x98>)
 8006ef2:	f003 f867 	bl	8009fc4 <HAL_TIM_Base_Init>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8006efc:	f000 f9fe 	bl	80072fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006f06:	f107 0308 	add.w	r3, r7, #8
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	480c      	ldr	r0, [pc, #48]	; (8006f40 <MX_TIM1_Init+0x98>)
 8006f0e:	f003 fa5d 	bl	800a3cc <HAL_TIM_ConfigClockSource>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8006f18:	f000 f9f0 	bl	80072fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f20:	2300      	movs	r3, #0
 8006f22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006f24:	463b      	mov	r3, r7
 8006f26:	4619      	mov	r1, r3
 8006f28:	4805      	ldr	r0, [pc, #20]	; (8006f40 <MX_TIM1_Init+0x98>)
 8006f2a:	f003 fcb5 	bl	800a898 <HAL_TIMEx_MasterConfigSynchronization>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8006f34:	f000 f9e2 	bl	80072fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006f38:	bf00      	nop
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000610 	.word	0x20000610
 8006f44:	40012c00 	.word	0x40012c00

08006f48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006f4e:	f107 0308 	add.w	r3, r7, #8
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	605a      	str	r2, [r3, #4]
 8006f58:	609a      	str	r2, [r3, #8]
 8006f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f5c:	463b      	mov	r3, r7
 8006f5e:	2200      	movs	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006f64:	4b1d      	ldr	r3, [pc, #116]	; (8006fdc <MX_TIM2_Init+0x94>)
 8006f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006f6c:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <MX_TIM2_Init+0x94>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f72:	4b1a      	ldr	r3, [pc, #104]	; (8006fdc <MX_TIM2_Init+0x94>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8006f78:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <MX_TIM2_Init+0x94>)
 8006f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f80:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <MX_TIM2_Init+0x94>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f86:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <MX_TIM2_Init+0x94>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006f8c:	4813      	ldr	r0, [pc, #76]	; (8006fdc <MX_TIM2_Init+0x94>)
 8006f8e:	f003 f819 	bl	8009fc4 <HAL_TIM_Base_Init>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8006f98:	f000 f9b0 	bl	80072fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006fa2:	f107 0308 	add.w	r3, r7, #8
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	480c      	ldr	r0, [pc, #48]	; (8006fdc <MX_TIM2_Init+0x94>)
 8006faa:	f003 fa0f 	bl	800a3cc <HAL_TIM_ConfigClockSource>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006fb4:	f000 f9a2 	bl	80072fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4805      	ldr	r0, [pc, #20]	; (8006fdc <MX_TIM2_Init+0x94>)
 8006fc6:	f003 fc67 	bl	800a898 <HAL_TIMEx_MasterConfigSynchronization>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006fd0:	f000 f994 	bl	80072fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006fd4:	bf00      	nop
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	200006c4 	.word	0x200006c4

08006fe0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006fe6:	f107 0308 	add.w	r3, r7, #8
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	605a      	str	r2, [r3, #4]
 8006ff0:	609a      	str	r2, [r3, #8]
 8006ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006ffc:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <MX_TIM3_Init+0x94>)
 8006ffe:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <MX_TIM3_Init+0x98>)
 8007000:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007002:	4b1c      	ldr	r3, [pc, #112]	; (8007074 <MX_TIM3_Init+0x94>)
 8007004:	2200      	movs	r2, #0
 8007006:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007008:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <MX_TIM3_Init+0x94>)
 800700a:	2200      	movs	r2, #0
 800700c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800700e:	4b19      	ldr	r3, [pc, #100]	; (8007074 <MX_TIM3_Init+0x94>)
 8007010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007014:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007016:	4b17      	ldr	r3, [pc, #92]	; (8007074 <MX_TIM3_Init+0x94>)
 8007018:	2200      	movs	r2, #0
 800701a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800701c:	4b15      	ldr	r3, [pc, #84]	; (8007074 <MX_TIM3_Init+0x94>)
 800701e:	2200      	movs	r2, #0
 8007020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007022:	4814      	ldr	r0, [pc, #80]	; (8007074 <MX_TIM3_Init+0x94>)
 8007024:	f002 ffce 	bl	8009fc4 <HAL_TIM_Base_Init>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800702e:	f000 f965 	bl	80072fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007036:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007038:	f107 0308 	add.w	r3, r7, #8
 800703c:	4619      	mov	r1, r3
 800703e:	480d      	ldr	r0, [pc, #52]	; (8007074 <MX_TIM3_Init+0x94>)
 8007040:	f003 f9c4 	bl	800a3cc <HAL_TIM_ConfigClockSource>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800704a:	f000 f957 	bl	80072fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800704e:	2300      	movs	r3, #0
 8007050:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007052:	2300      	movs	r3, #0
 8007054:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007056:	463b      	mov	r3, r7
 8007058:	4619      	mov	r1, r3
 800705a:	4806      	ldr	r0, [pc, #24]	; (8007074 <MX_TIM3_Init+0x94>)
 800705c:	f003 fc1c 	bl	800a898 <HAL_TIMEx_MasterConfigSynchronization>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8007066:	f000 f949 	bl	80072fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800706a:	bf00      	nop
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000778 	.word	0x20000778
 8007078:	40000400 	.word	0x40000400

0800707c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007082:	f107 0308 	add.w	r3, r7, #8
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	605a      	str	r2, [r3, #4]
 800708c:	609a      	str	r2, [r3, #8]
 800708e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007090:	463b      	mov	r3, r7
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007098:	4b1d      	ldr	r3, [pc, #116]	; (8007110 <MX_TIM4_Init+0x94>)
 800709a:	4a1e      	ldr	r2, [pc, #120]	; (8007114 <MX_TIM4_Init+0x98>)
 800709c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800709e:	4b1c      	ldr	r3, [pc, #112]	; (8007110 <MX_TIM4_Init+0x94>)
 80070a0:	2247      	movs	r2, #71	; 0x47
 80070a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070a4:	4b1a      	ldr	r3, [pc, #104]	; (8007110 <MX_TIM4_Init+0x94>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80070aa:	4b19      	ldr	r3, [pc, #100]	; (8007110 <MX_TIM4_Init+0x94>)
 80070ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80070b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80070b2:	4b17      	ldr	r3, [pc, #92]	; (8007110 <MX_TIM4_Init+0x94>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070b8:	4b15      	ldr	r3, [pc, #84]	; (8007110 <MX_TIM4_Init+0x94>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80070be:	4814      	ldr	r0, [pc, #80]	; (8007110 <MX_TIM4_Init+0x94>)
 80070c0:	f002 ff80 	bl	8009fc4 <HAL_TIM_Base_Init>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80070ca:	f000 f917 	bl	80072fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80070ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80070d4:	f107 0308 	add.w	r3, r7, #8
 80070d8:	4619      	mov	r1, r3
 80070da:	480d      	ldr	r0, [pc, #52]	; (8007110 <MX_TIM4_Init+0x94>)
 80070dc:	f003 f976 	bl	800a3cc <HAL_TIM_ConfigClockSource>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80070e6:	f000 f909 	bl	80072fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80070ea:	2320      	movs	r3, #32
 80070ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80070f2:	463b      	mov	r3, r7
 80070f4:	4619      	mov	r1, r3
 80070f6:	4806      	ldr	r0, [pc, #24]	; (8007110 <MX_TIM4_Init+0x94>)
 80070f8:	f003 fbce 	bl	800a898 <HAL_TIMEx_MasterConfigSynchronization>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8007102:	f000 f8fb 	bl	80072fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8007106:	bf00      	nop
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	2000082c 	.word	0x2000082c
 8007114:	40000800 	.word	0x40000800

08007118 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800711c:	4b11      	ldr	r3, [pc, #68]	; (8007164 <MX_USART1_UART_Init+0x4c>)
 800711e:	4a12      	ldr	r2, [pc, #72]	; (8007168 <MX_USART1_UART_Init+0x50>)
 8007120:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8007122:	4b10      	ldr	r3, [pc, #64]	; (8007164 <MX_USART1_UART_Init+0x4c>)
 8007124:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8007128:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800712a:	4b0e      	ldr	r3, [pc, #56]	; (8007164 <MX_USART1_UART_Init+0x4c>)
 800712c:	2200      	movs	r2, #0
 800712e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8007130:	4b0c      	ldr	r3, [pc, #48]	; (8007164 <MX_USART1_UART_Init+0x4c>)
 8007132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007136:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007138:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <MX_USART1_UART_Init+0x4c>)
 800713a:	2200      	movs	r2, #0
 800713c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800713e:	4b09      	ldr	r3, [pc, #36]	; (8007164 <MX_USART1_UART_Init+0x4c>)
 8007140:	220c      	movs	r2, #12
 8007142:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007144:	4b07      	ldr	r3, [pc, #28]	; (8007164 <MX_USART1_UART_Init+0x4c>)
 8007146:	2200      	movs	r2, #0
 8007148:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800714a:	4b06      	ldr	r3, [pc, #24]	; (8007164 <MX_USART1_UART_Init+0x4c>)
 800714c:	2200      	movs	r2, #0
 800714e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007150:	4804      	ldr	r0, [pc, #16]	; (8007164 <MX_USART1_UART_Init+0x4c>)
 8007152:	f003 fc1b 	bl	800a98c <HAL_UART_Init>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800715c:	f000 f8ce 	bl	80072fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007160:	bf00      	nop
 8007162:	bd80      	pop	{r7, pc}
 8007164:	200008e0 	.word	0x200008e0
 8007168:	40013800 	.word	0x40013800

0800716c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007170:	4b11      	ldr	r3, [pc, #68]	; (80071b8 <MX_USART2_UART_Init+0x4c>)
 8007172:	4a12      	ldr	r2, [pc, #72]	; (80071bc <MX_USART2_UART_Init+0x50>)
 8007174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007176:	4b10      	ldr	r3, [pc, #64]	; (80071b8 <MX_USART2_UART_Init+0x4c>)
 8007178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800717c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800717e:	4b0e      	ldr	r3, [pc, #56]	; (80071b8 <MX_USART2_UART_Init+0x4c>)
 8007180:	2200      	movs	r2, #0
 8007182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8007184:	4b0c      	ldr	r3, [pc, #48]	; (80071b8 <MX_USART2_UART_Init+0x4c>)
 8007186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800718a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800718c:	4b0a      	ldr	r3, [pc, #40]	; (80071b8 <MX_USART2_UART_Init+0x4c>)
 800718e:	2200      	movs	r2, #0
 8007190:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007192:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <MX_USART2_UART_Init+0x4c>)
 8007194:	220c      	movs	r2, #12
 8007196:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007198:	4b07      	ldr	r3, [pc, #28]	; (80071b8 <MX_USART2_UART_Init+0x4c>)
 800719a:	2200      	movs	r2, #0
 800719c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800719e:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <MX_USART2_UART_Init+0x4c>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80071a4:	4804      	ldr	r0, [pc, #16]	; (80071b8 <MX_USART2_UART_Init+0x4c>)
 80071a6:	f003 fbf1 	bl	800a98c <HAL_UART_Init>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80071b0:	f000 f8a4 	bl	80072fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80071b4:	bf00      	nop
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	20000954 	.word	0x20000954
 80071bc:	40004400 	.word	0x40004400

080071c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80071c6:	4b10      	ldr	r3, [pc, #64]	; (8007208 <MX_DMA_Init+0x48>)
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	4a0f      	ldr	r2, [pc, #60]	; (8007208 <MX_DMA_Init+0x48>)
 80071cc:	f043 0301 	orr.w	r3, r3, #1
 80071d0:	6153      	str	r3, [r2, #20]
 80071d2:	4b0d      	ldr	r3, [pc, #52]	; (8007208 <MX_DMA_Init+0x48>)
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	607b      	str	r3, [r7, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80071de:	2200      	movs	r2, #0
 80071e0:	2100      	movs	r1, #0
 80071e2:	200e      	movs	r0, #14
 80071e4:	f001 fc67 	bl	8008ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80071e8:	200e      	movs	r0, #14
 80071ea:	f001 fc80 	bl	8008aee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80071ee:	2200      	movs	r2, #0
 80071f0:	2100      	movs	r1, #0
 80071f2:	200f      	movs	r0, #15
 80071f4:	f001 fc5f 	bl	8008ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80071f8:	200f      	movs	r0, #15
 80071fa:	f001 fc78 	bl	8008aee <HAL_NVIC_EnableIRQ>

}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	40021000 	.word	0x40021000

0800720c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007212:	f107 0310 	add.w	r3, r7, #16
 8007216:	2200      	movs	r2, #0
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	605a      	str	r2, [r3, #4]
 800721c:	609a      	str	r2, [r3, #8]
 800721e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007220:	4b33      	ldr	r3, [pc, #204]	; (80072f0 <MX_GPIO_Init+0xe4>)
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	4a32      	ldr	r2, [pc, #200]	; (80072f0 <MX_GPIO_Init+0xe4>)
 8007226:	f043 0310 	orr.w	r3, r3, #16
 800722a:	6193      	str	r3, [r2, #24]
 800722c:	4b30      	ldr	r3, [pc, #192]	; (80072f0 <MX_GPIO_Init+0xe4>)
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	f003 0310 	and.w	r3, r3, #16
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007238:	4b2d      	ldr	r3, [pc, #180]	; (80072f0 <MX_GPIO_Init+0xe4>)
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	4a2c      	ldr	r2, [pc, #176]	; (80072f0 <MX_GPIO_Init+0xe4>)
 800723e:	f043 0320 	orr.w	r3, r3, #32
 8007242:	6193      	str	r3, [r2, #24]
 8007244:	4b2a      	ldr	r3, [pc, #168]	; (80072f0 <MX_GPIO_Init+0xe4>)
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007250:	4b27      	ldr	r3, [pc, #156]	; (80072f0 <MX_GPIO_Init+0xe4>)
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	4a26      	ldr	r2, [pc, #152]	; (80072f0 <MX_GPIO_Init+0xe4>)
 8007256:	f043 0304 	orr.w	r3, r3, #4
 800725a:	6193      	str	r3, [r2, #24]
 800725c:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <MX_GPIO_Init+0xe4>)
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	607b      	str	r3, [r7, #4]
 8007266:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007268:	4b21      	ldr	r3, [pc, #132]	; (80072f0 <MX_GPIO_Init+0xe4>)
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	4a20      	ldr	r2, [pc, #128]	; (80072f0 <MX_GPIO_Init+0xe4>)
 800726e:	f043 0308 	orr.w	r3, r3, #8
 8007272:	6193      	str	r3, [r2, #24]
 8007274:	4b1e      	ldr	r3, [pc, #120]	; (80072f0 <MX_GPIO_Init+0xe4>)
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	f003 0308 	and.w	r3, r3, #8
 800727c:	603b      	str	r3, [r7, #0]
 800727e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8007280:	2200      	movs	r2, #0
 8007282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007286:	481b      	ldr	r0, [pc, #108]	; (80072f4 <MX_GPIO_Init+0xe8>)
 8007288:	f002 f872 	bl	8009370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800728c:	2200      	movs	r2, #0
 800728e:	2120      	movs	r1, #32
 8007290:	4819      	ldr	r0, [pc, #100]	; (80072f8 <MX_GPIO_Init+0xec>)
 8007292:	f002 f86d 	bl	8009370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800729a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800729c:	2311      	movs	r3, #17
 800729e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072a4:	2302      	movs	r3, #2
 80072a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072a8:	f107 0310 	add.w	r3, r7, #16
 80072ac:	4619      	mov	r1, r3
 80072ae:	4811      	ldr	r0, [pc, #68]	; (80072f4 <MX_GPIO_Init+0xe8>)
 80072b0:	f001 feda 	bl	8009068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80072b4:	2301      	movs	r3, #1
 80072b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072bc:	2301      	movs	r3, #1
 80072be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072c0:	f107 0310 	add.w	r3, r7, #16
 80072c4:	4619      	mov	r1, r3
 80072c6:	480c      	ldr	r0, [pc, #48]	; (80072f8 <MX_GPIO_Init+0xec>)
 80072c8:	f001 fece 	bl	8009068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80072cc:	2320      	movs	r3, #32
 80072ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072d0:	2301      	movs	r3, #1
 80072d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072d4:	2301      	movs	r3, #1
 80072d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072d8:	2302      	movs	r3, #2
 80072da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072dc:	f107 0310 	add.w	r3, r7, #16
 80072e0:	4619      	mov	r1, r3
 80072e2:	4805      	ldr	r0, [pc, #20]	; (80072f8 <MX_GPIO_Init+0xec>)
 80072e4:	f001 fec0 	bl	8009068 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80072e8:	bf00      	nop
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	40021000 	.word	0x40021000
 80072f4:	40011000 	.word	0x40011000
 80072f8:	40010800 	.word	0x40010800

080072fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007300:	b672      	cpsid	i
}
 8007302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007304:	e7fe      	b.n	8007304 <Error_Handler+0x8>
	...

08007308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800730e:	4b15      	ldr	r3, [pc, #84]	; (8007364 <HAL_MspInit+0x5c>)
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	4a14      	ldr	r2, [pc, #80]	; (8007364 <HAL_MspInit+0x5c>)
 8007314:	f043 0301 	orr.w	r3, r3, #1
 8007318:	6193      	str	r3, [r2, #24]
 800731a:	4b12      	ldr	r3, [pc, #72]	; (8007364 <HAL_MspInit+0x5c>)
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	60bb      	str	r3, [r7, #8]
 8007324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007326:	4b0f      	ldr	r3, [pc, #60]	; (8007364 <HAL_MspInit+0x5c>)
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	4a0e      	ldr	r2, [pc, #56]	; (8007364 <HAL_MspInit+0x5c>)
 800732c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007330:	61d3      	str	r3, [r2, #28]
 8007332:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <HAL_MspInit+0x5c>)
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800733a:	607b      	str	r3, [r7, #4]
 800733c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800733e:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <HAL_MspInit+0x60>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	4a04      	ldr	r2, [pc, #16]	; (8007368 <HAL_MspInit+0x60>)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800735a:	bf00      	nop
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	bc80      	pop	{r7}
 8007362:	4770      	bx	lr
 8007364:	40021000 	.word	0x40021000
 8007368:	40010000 	.word	0x40010000

0800736c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	; 0x28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007374:	f107 0314 	add.w	r3, r7, #20
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	605a      	str	r2, [r3, #4]
 800737e:	609a      	str	r2, [r3, #8]
 8007380:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a35      	ldr	r2, [pc, #212]	; (800745c <HAL_CAN_MspInit+0xf0>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d163      	bne.n	8007454 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800738c:	4b34      	ldr	r3, [pc, #208]	; (8007460 <HAL_CAN_MspInit+0xf4>)
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	4a33      	ldr	r2, [pc, #204]	; (8007460 <HAL_CAN_MspInit+0xf4>)
 8007392:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007396:	61d3      	str	r3, [r2, #28]
 8007398:	4b31      	ldr	r3, [pc, #196]	; (8007460 <HAL_CAN_MspInit+0xf4>)
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a0:	613b      	str	r3, [r7, #16]
 80073a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073a4:	4b2e      	ldr	r3, [pc, #184]	; (8007460 <HAL_CAN_MspInit+0xf4>)
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	4a2d      	ldr	r2, [pc, #180]	; (8007460 <HAL_CAN_MspInit+0xf4>)
 80073aa:	f043 0308 	orr.w	r3, r3, #8
 80073ae:	6193      	str	r3, [r2, #24]
 80073b0:	4b2b      	ldr	r3, [pc, #172]	; (8007460 <HAL_CAN_MspInit+0xf4>)
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80073bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073c2:	2300      	movs	r3, #0
 80073c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073ca:	f107 0314 	add.w	r3, r7, #20
 80073ce:	4619      	mov	r1, r3
 80073d0:	4824      	ldr	r0, [pc, #144]	; (8007464 <HAL_CAN_MspInit+0xf8>)
 80073d2:	f001 fe49 	bl	8009068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80073d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073dc:	2302      	movs	r3, #2
 80073de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80073e0:	2303      	movs	r3, #3
 80073e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073e4:	f107 0314 	add.w	r3, r7, #20
 80073e8:	4619      	mov	r1, r3
 80073ea:	481e      	ldr	r0, [pc, #120]	; (8007464 <HAL_CAN_MspInit+0xf8>)
 80073ec:	f001 fe3c 	bl	8009068 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80073f0:	4b1d      	ldr	r3, [pc, #116]	; (8007468 <HAL_CAN_MspInit+0xfc>)
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8007404:	627b      	str	r3, [r7, #36]	; 0x24
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
 800740e:	4a16      	ldr	r2, [pc, #88]	; (8007468 <HAL_CAN_MspInit+0xfc>)
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8007414:	2200      	movs	r2, #0
 8007416:	2100      	movs	r1, #0
 8007418:	2013      	movs	r0, #19
 800741a:	f001 fb4c 	bl	8008ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800741e:	2013      	movs	r0, #19
 8007420:	f001 fb65 	bl	8008aee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007424:	2200      	movs	r2, #0
 8007426:	2100      	movs	r1, #0
 8007428:	2014      	movs	r0, #20
 800742a:	f001 fb44 	bl	8008ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800742e:	2014      	movs	r0, #20
 8007430:	f001 fb5d 	bl	8008aee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8007434:	2200      	movs	r2, #0
 8007436:	2100      	movs	r1, #0
 8007438:	2015      	movs	r0, #21
 800743a:	f001 fb3c 	bl	8008ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800743e:	2015      	movs	r0, #21
 8007440:	f001 fb55 	bl	8008aee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8007444:	2200      	movs	r2, #0
 8007446:	2100      	movs	r1, #0
 8007448:	2016      	movs	r0, #22
 800744a:	f001 fb34 	bl	8008ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800744e:	2016      	movs	r0, #22
 8007450:	f001 fb4d 	bl	8008aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007454:	bf00      	nop
 8007456:	3728      	adds	r7, #40	; 0x28
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40006400 	.word	0x40006400
 8007460:	40021000 	.word	0x40021000
 8007464:	40010c00 	.word	0x40010c00
 8007468:	40010000 	.word	0x40010000

0800746c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007474:	f107 0310 	add.w	r3, r7, #16
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	605a      	str	r2, [r3, #4]
 800747e:	609a      	str	r2, [r3, #8]
 8007480:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a15      	ldr	r2, [pc, #84]	; (80074dc <HAL_I2C_MspInit+0x70>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d123      	bne.n	80074d4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800748c:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <HAL_I2C_MspInit+0x74>)
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	4a13      	ldr	r2, [pc, #76]	; (80074e0 <HAL_I2C_MspInit+0x74>)
 8007492:	f043 0308 	orr.w	r3, r3, #8
 8007496:	6193      	str	r3, [r2, #24]
 8007498:	4b11      	ldr	r3, [pc, #68]	; (80074e0 <HAL_I2C_MspInit+0x74>)
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	f003 0308 	and.w	r3, r3, #8
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80074a4:	23c0      	movs	r3, #192	; 0xc0
 80074a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80074a8:	2312      	movs	r3, #18
 80074aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074ac:	2303      	movs	r3, #3
 80074ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074b0:	f107 0310 	add.w	r3, r7, #16
 80074b4:	4619      	mov	r1, r3
 80074b6:	480b      	ldr	r0, [pc, #44]	; (80074e4 <HAL_I2C_MspInit+0x78>)
 80074b8:	f001 fdd6 	bl	8009068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80074bc:	4b08      	ldr	r3, [pc, #32]	; (80074e0 <HAL_I2C_MspInit+0x74>)
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	4a07      	ldr	r2, [pc, #28]	; (80074e0 <HAL_I2C_MspInit+0x74>)
 80074c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074c6:	61d3      	str	r3, [r2, #28]
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <HAL_I2C_MspInit+0x74>)
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80074d4:	bf00      	nop
 80074d6:	3720      	adds	r7, #32
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	40005400 	.word	0x40005400
 80074e0:	40021000 	.word	0x40021000
 80074e4:	40010c00 	.word	0x40010c00

080074e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a28      	ldr	r2, [pc, #160]	; (8007598 <HAL_TIM_Base_MspInit+0xb0>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d10c      	bne.n	8007514 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80074fa:	4b28      	ldr	r3, [pc, #160]	; (800759c <HAL_TIM_Base_MspInit+0xb4>)
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	4a27      	ldr	r2, [pc, #156]	; (800759c <HAL_TIM_Base_MspInit+0xb4>)
 8007500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007504:	6193      	str	r3, [r2, #24]
 8007506:	4b25      	ldr	r3, [pc, #148]	; (800759c <HAL_TIM_Base_MspInit+0xb4>)
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007512:	e03c      	b.n	800758e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751c:	d10c      	bne.n	8007538 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800751e:	4b1f      	ldr	r3, [pc, #124]	; (800759c <HAL_TIM_Base_MspInit+0xb4>)
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	4a1e      	ldr	r2, [pc, #120]	; (800759c <HAL_TIM_Base_MspInit+0xb4>)
 8007524:	f043 0301 	orr.w	r3, r3, #1
 8007528:	61d3      	str	r3, [r2, #28]
 800752a:	4b1c      	ldr	r3, [pc, #112]	; (800759c <HAL_TIM_Base_MspInit+0xb4>)
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	693b      	ldr	r3, [r7, #16]
}
 8007536:	e02a      	b.n	800758e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a18      	ldr	r2, [pc, #96]	; (80075a0 <HAL_TIM_Base_MspInit+0xb8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d10c      	bne.n	800755c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007542:	4b16      	ldr	r3, [pc, #88]	; (800759c <HAL_TIM_Base_MspInit+0xb4>)
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	4a15      	ldr	r2, [pc, #84]	; (800759c <HAL_TIM_Base_MspInit+0xb4>)
 8007548:	f043 0302 	orr.w	r3, r3, #2
 800754c:	61d3      	str	r3, [r2, #28]
 800754e:	4b13      	ldr	r3, [pc, #76]	; (800759c <HAL_TIM_Base_MspInit+0xb4>)
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
}
 800755a:	e018      	b.n	800758e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a10      	ldr	r2, [pc, #64]	; (80075a4 <HAL_TIM_Base_MspInit+0xbc>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d113      	bne.n	800758e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007566:	4b0d      	ldr	r3, [pc, #52]	; (800759c <HAL_TIM_Base_MspInit+0xb4>)
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	4a0c      	ldr	r2, [pc, #48]	; (800759c <HAL_TIM_Base_MspInit+0xb4>)
 800756c:	f043 0304 	orr.w	r3, r3, #4
 8007570:	61d3      	str	r3, [r2, #28]
 8007572:	4b0a      	ldr	r3, [pc, #40]	; (800759c <HAL_TIM_Base_MspInit+0xb4>)
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	60bb      	str	r3, [r7, #8]
 800757c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800757e:	2200      	movs	r2, #0
 8007580:	2100      	movs	r1, #0
 8007582:	201e      	movs	r0, #30
 8007584:	f001 fa97 	bl	8008ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007588:	201e      	movs	r0, #30
 800758a:	f001 fab0 	bl	8008aee <HAL_NVIC_EnableIRQ>
}
 800758e:	bf00      	nop
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	40012c00 	.word	0x40012c00
 800759c:	40021000 	.word	0x40021000
 80075a0:	40000400 	.word	0x40000400
 80075a4:	40000800 	.word	0x40000800

080075a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	; 0x28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075b0:	f107 0318 	add.w	r3, r7, #24
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	605a      	str	r2, [r3, #4]
 80075ba:	609a      	str	r2, [r3, #8]
 80075bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a62      	ldr	r2, [pc, #392]	; (800774c <HAL_UART_MspInit+0x1a4>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	f040 8087 	bne.w	80076d8 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80075ca:	4b61      	ldr	r3, [pc, #388]	; (8007750 <HAL_UART_MspInit+0x1a8>)
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	4a60      	ldr	r2, [pc, #384]	; (8007750 <HAL_UART_MspInit+0x1a8>)
 80075d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075d4:	6193      	str	r3, [r2, #24]
 80075d6:	4b5e      	ldr	r3, [pc, #376]	; (8007750 <HAL_UART_MspInit+0x1a8>)
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075e2:	4b5b      	ldr	r3, [pc, #364]	; (8007750 <HAL_UART_MspInit+0x1a8>)
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	4a5a      	ldr	r2, [pc, #360]	; (8007750 <HAL_UART_MspInit+0x1a8>)
 80075e8:	f043 0304 	orr.w	r3, r3, #4
 80075ec:	6193      	str	r3, [r2, #24]
 80075ee:	4b58      	ldr	r3, [pc, #352]	; (8007750 <HAL_UART_MspInit+0x1a8>)
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80075fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007600:	2302      	movs	r3, #2
 8007602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007604:	2303      	movs	r3, #3
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007608:	f107 0318 	add.w	r3, r7, #24
 800760c:	4619      	mov	r1, r3
 800760e:	4851      	ldr	r0, [pc, #324]	; (8007754 <HAL_UART_MspInit+0x1ac>)
 8007610:	f001 fd2a 	bl	8009068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800761a:	2300      	movs	r3, #0
 800761c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800761e:	2300      	movs	r3, #0
 8007620:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007622:	f107 0318 	add.w	r3, r7, #24
 8007626:	4619      	mov	r1, r3
 8007628:	484a      	ldr	r0, [pc, #296]	; (8007754 <HAL_UART_MspInit+0x1ac>)
 800762a:	f001 fd1d 	bl	8009068 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800762e:	4b4a      	ldr	r3, [pc, #296]	; (8007758 <HAL_UART_MspInit+0x1b0>)
 8007630:	4a4a      	ldr	r2, [pc, #296]	; (800775c <HAL_UART_MspInit+0x1b4>)
 8007632:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007634:	4b48      	ldr	r3, [pc, #288]	; (8007758 <HAL_UART_MspInit+0x1b0>)
 8007636:	2200      	movs	r2, #0
 8007638:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800763a:	4b47      	ldr	r3, [pc, #284]	; (8007758 <HAL_UART_MspInit+0x1b0>)
 800763c:	2200      	movs	r2, #0
 800763e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007640:	4b45      	ldr	r3, [pc, #276]	; (8007758 <HAL_UART_MspInit+0x1b0>)
 8007642:	2280      	movs	r2, #128	; 0x80
 8007644:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007646:	4b44      	ldr	r3, [pc, #272]	; (8007758 <HAL_UART_MspInit+0x1b0>)
 8007648:	2200      	movs	r2, #0
 800764a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800764c:	4b42      	ldr	r3, [pc, #264]	; (8007758 <HAL_UART_MspInit+0x1b0>)
 800764e:	2200      	movs	r2, #0
 8007650:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007652:	4b41      	ldr	r3, [pc, #260]	; (8007758 <HAL_UART_MspInit+0x1b0>)
 8007654:	2200      	movs	r2, #0
 8007656:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007658:	4b3f      	ldr	r3, [pc, #252]	; (8007758 <HAL_UART_MspInit+0x1b0>)
 800765a:	2200      	movs	r2, #0
 800765c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800765e:	483e      	ldr	r0, [pc, #248]	; (8007758 <HAL_UART_MspInit+0x1b0>)
 8007660:	f001 fa64 	bl	8008b2c <HAL_DMA_Init>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800766a:	f7ff fe47 	bl	80072fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a39      	ldr	r2, [pc, #228]	; (8007758 <HAL_UART_MspInit+0x1b0>)
 8007672:	639a      	str	r2, [r3, #56]	; 0x38
 8007674:	4a38      	ldr	r2, [pc, #224]	; (8007758 <HAL_UART_MspInit+0x1b0>)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800767a:	4b39      	ldr	r3, [pc, #228]	; (8007760 <HAL_UART_MspInit+0x1b8>)
 800767c:	4a39      	ldr	r2, [pc, #228]	; (8007764 <HAL_UART_MspInit+0x1bc>)
 800767e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007680:	4b37      	ldr	r3, [pc, #220]	; (8007760 <HAL_UART_MspInit+0x1b8>)
 8007682:	2210      	movs	r2, #16
 8007684:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007686:	4b36      	ldr	r3, [pc, #216]	; (8007760 <HAL_UART_MspInit+0x1b8>)
 8007688:	2200      	movs	r2, #0
 800768a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800768c:	4b34      	ldr	r3, [pc, #208]	; (8007760 <HAL_UART_MspInit+0x1b8>)
 800768e:	2280      	movs	r2, #128	; 0x80
 8007690:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007692:	4b33      	ldr	r3, [pc, #204]	; (8007760 <HAL_UART_MspInit+0x1b8>)
 8007694:	2200      	movs	r2, #0
 8007696:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007698:	4b31      	ldr	r3, [pc, #196]	; (8007760 <HAL_UART_MspInit+0x1b8>)
 800769a:	2200      	movs	r2, #0
 800769c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800769e:	4b30      	ldr	r3, [pc, #192]	; (8007760 <HAL_UART_MspInit+0x1b8>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80076a4:	4b2e      	ldr	r3, [pc, #184]	; (8007760 <HAL_UART_MspInit+0x1b8>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80076aa:	482d      	ldr	r0, [pc, #180]	; (8007760 <HAL_UART_MspInit+0x1b8>)
 80076ac:	f001 fa3e 	bl	8008b2c <HAL_DMA_Init>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80076b6:	f7ff fe21 	bl	80072fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a28      	ldr	r2, [pc, #160]	; (8007760 <HAL_UART_MspInit+0x1b8>)
 80076be:	635a      	str	r2, [r3, #52]	; 0x34
 80076c0:	4a27      	ldr	r2, [pc, #156]	; (8007760 <HAL_UART_MspInit+0x1b8>)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80076c6:	2200      	movs	r2, #0
 80076c8:	2100      	movs	r1, #0
 80076ca:	2025      	movs	r0, #37	; 0x25
 80076cc:	f001 f9f3 	bl	8008ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80076d0:	2025      	movs	r0, #37	; 0x25
 80076d2:	f001 fa0c 	bl	8008aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80076d6:	e034      	b.n	8007742 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a22      	ldr	r2, [pc, #136]	; (8007768 <HAL_UART_MspInit+0x1c0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d12f      	bne.n	8007742 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80076e2:	4b1b      	ldr	r3, [pc, #108]	; (8007750 <HAL_UART_MspInit+0x1a8>)
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	4a1a      	ldr	r2, [pc, #104]	; (8007750 <HAL_UART_MspInit+0x1a8>)
 80076e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ec:	61d3      	str	r3, [r2, #28]
 80076ee:	4b18      	ldr	r3, [pc, #96]	; (8007750 <HAL_UART_MspInit+0x1a8>)
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076fa:	4b15      	ldr	r3, [pc, #84]	; (8007750 <HAL_UART_MspInit+0x1a8>)
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	4a14      	ldr	r2, [pc, #80]	; (8007750 <HAL_UART_MspInit+0x1a8>)
 8007700:	f043 0304 	orr.w	r3, r3, #4
 8007704:	6193      	str	r3, [r2, #24]
 8007706:	4b12      	ldr	r3, [pc, #72]	; (8007750 <HAL_UART_MspInit+0x1a8>)
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	f003 0304 	and.w	r3, r3, #4
 800770e:	60bb      	str	r3, [r7, #8]
 8007710:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007712:	2304      	movs	r3, #4
 8007714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007716:	2302      	movs	r3, #2
 8007718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800771a:	2303      	movs	r3, #3
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800771e:	f107 0318 	add.w	r3, r7, #24
 8007722:	4619      	mov	r1, r3
 8007724:	480b      	ldr	r0, [pc, #44]	; (8007754 <HAL_UART_MspInit+0x1ac>)
 8007726:	f001 fc9f 	bl	8009068 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800772a:	2308      	movs	r3, #8
 800772c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800772e:	2300      	movs	r3, #0
 8007730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007732:	2300      	movs	r3, #0
 8007734:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007736:	f107 0318 	add.w	r3, r7, #24
 800773a:	4619      	mov	r1, r3
 800773c:	4805      	ldr	r0, [pc, #20]	; (8007754 <HAL_UART_MspInit+0x1ac>)
 800773e:	f001 fc93 	bl	8009068 <HAL_GPIO_Init>
}
 8007742:	bf00      	nop
 8007744:	3728      	adds	r7, #40	; 0x28
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	40013800 	.word	0x40013800
 8007750:	40021000 	.word	0x40021000
 8007754:	40010800 	.word	0x40010800
 8007758:	200009c8 	.word	0x200009c8
 800775c:	40020058 	.word	0x40020058
 8007760:	20000a0c 	.word	0x20000a0c
 8007764:	40020044 	.word	0x40020044
 8007768:	40004400 	.word	0x40004400

0800776c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007770:	e7fe      	b.n	8007770 <NMI_Handler+0x4>

08007772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007772:	b480      	push	{r7}
 8007774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007776:	e7fe      	b.n	8007776 <HardFault_Handler+0x4>

08007778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800777c:	e7fe      	b.n	800777c <MemManage_Handler+0x4>

0800777e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800777e:	b480      	push	{r7}
 8007780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007782:	e7fe      	b.n	8007782 <BusFault_Handler+0x4>

08007784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007788:	e7fe      	b.n	8007788 <UsageFault_Handler+0x4>

0800778a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800778a:	b480      	push	{r7}
 800778c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800778e:	bf00      	nop
 8007790:	46bd      	mov	sp, r7
 8007792:	bc80      	pop	{r7}
 8007794:	4770      	bx	lr

08007796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007796:	b480      	push	{r7}
 8007798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800779a:	bf00      	nop
 800779c:	46bd      	mov	sp, r7
 800779e:	bc80      	pop	{r7}
 80077a0:	4770      	bx	lr

080077a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80077a2:	b480      	push	{r7}
 80077a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80077a6:	bf00      	nop
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr

080077ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80077b2:	f000 f965 	bl	8007a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80077b6:	bf00      	nop
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80077c0:	4802      	ldr	r0, [pc, #8]	; (80077cc <DMA1_Channel4_IRQHandler+0x10>)
 80077c2:	f001 fb1d 	bl	8008e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80077c6:	bf00      	nop
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20000a0c 	.word	0x20000a0c

080077d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80077d4:	4802      	ldr	r0, [pc, #8]	; (80077e0 <DMA1_Channel5_IRQHandler+0x10>)
 80077d6:	f001 fb13 	bl	8008e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80077da:	bf00      	nop
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	200009c8 	.word	0x200009c8

080077e4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80077e8:	4802      	ldr	r0, [pc, #8]	; (80077f4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80077ea:	f000 fe69 	bl	80084c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80077ee:	bf00      	nop
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	20000528 	.word	0x20000528

080077f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80077fc:	4802      	ldr	r0, [pc, #8]	; (8007808 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80077fe:	f000 fe5f 	bl	80084c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8007802:	bf00      	nop
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20000528 	.word	0x20000528

0800780c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8007810:	4802      	ldr	r0, [pc, #8]	; (800781c <CAN1_RX1_IRQHandler+0x10>)
 8007812:	f000 fe55 	bl	80084c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8007816:	bf00      	nop
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000528 	.word	0x20000528

08007820 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8007824:	4802      	ldr	r0, [pc, #8]	; (8007830 <CAN1_SCE_IRQHandler+0x10>)
 8007826:	f000 fe4b 	bl	80084c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800782a:	bf00      	nop
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000528 	.word	0x20000528

08007834 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007838:	4802      	ldr	r0, [pc, #8]	; (8007844 <TIM4_IRQHandler+0x10>)
 800783a:	f002 fc9f 	bl	800a17c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800783e:	bf00      	nop
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	2000082c 	.word	0x2000082c

08007848 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800784c:	4802      	ldr	r0, [pc, #8]	; (8007858 <USART1_IRQHandler+0x10>)
 800784e:	f003 f963 	bl	800ab18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007852:	bf00      	nop
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	200008e0 	.word	0x200008e0

0800785c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007868:	2300      	movs	r3, #0
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e00a      	b.n	8007884 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800786e:	f3af 8000 	nop.w
 8007872:	4601      	mov	r1, r0
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	60ba      	str	r2, [r7, #8]
 800787a:	b2ca      	uxtb	r2, r1
 800787c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	3301      	adds	r3, #1
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	429a      	cmp	r2, r3
 800788a:	dbf0      	blt.n	800786e <_read+0x12>
  }

  return len;
 800788c:	687b      	ldr	r3, [r7, #4]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b086      	sub	sp, #24
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	e009      	b.n	80078bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	60ba      	str	r2, [r7, #8]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	3301      	adds	r3, #1
 80078ba:	617b      	str	r3, [r7, #20]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	dbf1      	blt.n	80078a8 <_write+0x12>
  }
  return len;
 80078c4:	687b      	ldr	r3, [r7, #4]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <_close>:

int _close(int file)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80078d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80078da:	4618      	mov	r0, r3
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	bc80      	pop	{r7}
 80078e2:	4770      	bx	lr

080078e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80078f4:	605a      	str	r2, [r3, #4]
  return 0;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bc80      	pop	{r7}
 8007900:	4770      	bx	lr

08007902 <_isatty>:

int _isatty(int file)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800790a:	2301      	movs	r3, #1
}
 800790c:	4618      	mov	r0, r3
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	bc80      	pop	{r7}
 8007914:	4770      	bx	lr

08007916 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007916:	b480      	push	{r7}
 8007918:	b085      	sub	sp, #20
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	60b9      	str	r1, [r7, #8]
 8007920:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	bc80      	pop	{r7}
 800792c:	4770      	bx	lr
	...

08007930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007938:	4a14      	ldr	r2, [pc, #80]	; (800798c <_sbrk+0x5c>)
 800793a:	4b15      	ldr	r3, [pc, #84]	; (8007990 <_sbrk+0x60>)
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007944:	4b13      	ldr	r3, [pc, #76]	; (8007994 <_sbrk+0x64>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d102      	bne.n	8007952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800794c:	4b11      	ldr	r3, [pc, #68]	; (8007994 <_sbrk+0x64>)
 800794e:	4a12      	ldr	r2, [pc, #72]	; (8007998 <_sbrk+0x68>)
 8007950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007952:	4b10      	ldr	r3, [pc, #64]	; (8007994 <_sbrk+0x64>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4413      	add	r3, r2
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	429a      	cmp	r2, r3
 800795e:	d207      	bcs.n	8007970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007960:	f004 f98c 	bl	800bc7c <__errno>
 8007964:	4603      	mov	r3, r0
 8007966:	220c      	movs	r2, #12
 8007968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800796a:	f04f 33ff 	mov.w	r3, #4294967295
 800796e:	e009      	b.n	8007984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007970:	4b08      	ldr	r3, [pc, #32]	; (8007994 <_sbrk+0x64>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007976:	4b07      	ldr	r3, [pc, #28]	; (8007994 <_sbrk+0x64>)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4413      	add	r3, r2
 800797e:	4a05      	ldr	r2, [pc, #20]	; (8007994 <_sbrk+0x64>)
 8007980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007982:	68fb      	ldr	r3, [r7, #12]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	20005000 	.word	0x20005000
 8007990:	00000600 	.word	0x00000600
 8007994:	20000a54 	.word	0x20000a54
 8007998:	20000ba8 	.word	0x20000ba8

0800799c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80079a0:	bf00      	nop
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr

080079a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80079a8:	480c      	ldr	r0, [pc, #48]	; (80079dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80079aa:	490d      	ldr	r1, [pc, #52]	; (80079e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80079ac:	4a0d      	ldr	r2, [pc, #52]	; (80079e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80079ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80079b0:	e002      	b.n	80079b8 <LoopCopyDataInit>

080079b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80079b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80079b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80079b6:	3304      	adds	r3, #4

080079b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80079b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80079ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80079bc:	d3f9      	bcc.n	80079b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80079be:	4a0a      	ldr	r2, [pc, #40]	; (80079e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80079c0:	4c0a      	ldr	r4, [pc, #40]	; (80079ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80079c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80079c4:	e001      	b.n	80079ca <LoopFillZerobss>

080079c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80079c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80079c8:	3204      	adds	r2, #4

080079ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80079ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80079cc:	d3fb      	bcc.n	80079c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80079ce:	f7ff ffe5 	bl	800799c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80079d2:	f004 f959 	bl	800bc88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80079d6:	f7ff f8f5 	bl	8006bc4 <main>
  bx lr
 80079da:	4770      	bx	lr
  ldr r0, =_sdata
 80079dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80079e0:	200004c0 	.word	0x200004c0
  ldr r2, =_sidata
 80079e4:	0800ce44 	.word	0x0800ce44
  ldr r2, =_sbss
 80079e8:	200004c0 	.word	0x200004c0
  ldr r4, =_ebss
 80079ec:	20000ba8 	.word	0x20000ba8

080079f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80079f0:	e7fe      	b.n	80079f0 <ADC1_2_IRQHandler>
	...

080079f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80079f8:	4b08      	ldr	r3, [pc, #32]	; (8007a1c <HAL_Init+0x28>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a07      	ldr	r2, [pc, #28]	; (8007a1c <HAL_Init+0x28>)
 80079fe:	f043 0310 	orr.w	r3, r3, #16
 8007a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a04:	2003      	movs	r0, #3
 8007a06:	f001 f84b 	bl	8008aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007a0a:	200f      	movs	r0, #15
 8007a0c:	f000 f808 	bl	8007a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007a10:	f7ff fc7a 	bl	8007308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	40022000 	.word	0x40022000

08007a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007a28:	4b12      	ldr	r3, [pc, #72]	; (8007a74 <HAL_InitTick+0x54>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <HAL_InitTick+0x58>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	4619      	mov	r1, r3
 8007a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f001 f867 	bl	8008b12 <HAL_SYSTICK_Config>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e00e      	b.n	8007a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b0f      	cmp	r3, #15
 8007a52:	d80a      	bhi.n	8007a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007a54:	2200      	movs	r2, #0
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5c:	f001 f82b 	bl	8008ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007a60:	4a06      	ldr	r2, [pc, #24]	; (8007a7c <HAL_InitTick+0x5c>)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e000      	b.n	8007a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	20000458 	.word	0x20000458
 8007a78:	20000460 	.word	0x20000460
 8007a7c:	2000045c 	.word	0x2000045c

08007a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007a84:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <HAL_IncTick+0x1c>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <HAL_IncTick+0x20>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4413      	add	r3, r2
 8007a90:	4a03      	ldr	r2, [pc, #12]	; (8007aa0 <HAL_IncTick+0x20>)
 8007a92:	6013      	str	r3, [r2, #0]
}
 8007a94:	bf00      	nop
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bc80      	pop	{r7}
 8007a9a:	4770      	bx	lr
 8007a9c:	20000460 	.word	0x20000460
 8007aa0:	20000a58 	.word	0x20000a58

08007aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8007aa8:	4b02      	ldr	r3, [pc, #8]	; (8007ab4 <HAL_GetTick+0x10>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bc80      	pop	{r7}
 8007ab2:	4770      	bx	lr
 8007ab4:	20000a58 	.word	0x20000a58

08007ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ac0:	f7ff fff0 	bl	8007aa4 <HAL_GetTick>
 8007ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad0:	d005      	beq.n	8007ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007ad2:	4b0a      	ldr	r3, [pc, #40]	; (8007afc <HAL_Delay+0x44>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4413      	add	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007ade:	bf00      	nop
 8007ae0:	f7ff ffe0 	bl	8007aa4 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d8f7      	bhi.n	8007ae0 <HAL_Delay+0x28>
  {
  }
}
 8007af0:	bf00      	nop
 8007af2:	bf00      	nop
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20000460 	.word	0x20000460

08007b00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e11c      	b.n	8007d4c <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d131      	bne.n	8007b82 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a8c      	ldr	r2, [pc, #560]	; (8007d54 <HAL_CAN_Init+0x254>)
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a8c      	ldr	r2, [pc, #560]	; (8007d58 <HAL_CAN_Init+0x258>)
 8007b28:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a8b      	ldr	r2, [pc, #556]	; (8007d5c <HAL_CAN_Init+0x25c>)
 8007b2e:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a8b      	ldr	r2, [pc, #556]	; (8007d60 <HAL_CAN_Init+0x260>)
 8007b34:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a8a      	ldr	r2, [pc, #552]	; (8007d64 <HAL_CAN_Init+0x264>)
 8007b3a:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a8a      	ldr	r2, [pc, #552]	; (8007d68 <HAL_CAN_Init+0x268>)
 8007b40:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a89      	ldr	r2, [pc, #548]	; (8007d6c <HAL_CAN_Init+0x26c>)
 8007b46:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a89      	ldr	r2, [pc, #548]	; (8007d70 <HAL_CAN_Init+0x270>)
 8007b4c:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a88      	ldr	r2, [pc, #544]	; (8007d74 <HAL_CAN_Init+0x274>)
 8007b52:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a88      	ldr	r2, [pc, #544]	; (8007d78 <HAL_CAN_Init+0x278>)
 8007b58:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a87      	ldr	r2, [pc, #540]	; (8007d7c <HAL_CAN_Init+0x27c>)
 8007b5e:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a87      	ldr	r2, [pc, #540]	; (8007d80 <HAL_CAN_Init+0x280>)
 8007b64:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a86      	ldr	r2, [pc, #536]	; (8007d84 <HAL_CAN_Init+0x284>)
 8007b6a:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a84      	ldr	r2, [pc, #528]	; (8007d88 <HAL_CAN_Init+0x288>)
 8007b78:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 0201 	orr.w	r2, r2, #1
 8007b90:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b92:	f7ff ff87 	bl	8007aa4 <HAL_GetTick>
 8007b96:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007b98:	e012      	b.n	8007bc0 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007b9a:	f7ff ff83 	bl	8007aa4 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b0a      	cmp	r3, #10
 8007ba6:	d90b      	bls.n	8007bc0 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2205      	movs	r2, #5
 8007bb8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e0c5      	b.n	8007d4c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0e5      	beq.n	8007b9a <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0202 	bic.w	r2, r2, #2
 8007bdc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007bde:	f7ff ff61 	bl	8007aa4 <HAL_GetTick>
 8007be2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007be4:	e012      	b.n	8007c0c <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007be6:	f7ff ff5d 	bl	8007aa4 <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	2b0a      	cmp	r3, #10
 8007bf2:	d90b      	bls.n	8007c0c <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2205      	movs	r2, #5
 8007c04:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e09f      	b.n	8007d4c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e5      	bne.n	8007be6 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	7e1b      	ldrb	r3, [r3, #24]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d108      	bne.n	8007c34 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	e007      	b.n	8007c44 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7e5b      	ldrb	r3, [r3, #25]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d108      	bne.n	8007c5e <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	e007      	b.n	8007c6e <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	7e9b      	ldrb	r3, [r3, #26]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d108      	bne.n	8007c88 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f042 0220 	orr.w	r2, r2, #32
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	e007      	b.n	8007c98 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0220 	bic.w	r2, r2, #32
 8007c96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	7edb      	ldrb	r3, [r3, #27]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d108      	bne.n	8007cb2 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 0210 	bic.w	r2, r2, #16
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	e007      	b.n	8007cc2 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0210 	orr.w	r2, r2, #16
 8007cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7f1b      	ldrb	r3, [r3, #28]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d108      	bne.n	8007cdc <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0208 	orr.w	r2, r2, #8
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	e007      	b.n	8007cec <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 0208 	bic.w	r2, r2, #8
 8007cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	7f5b      	ldrb	r3, [r3, #29]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d108      	bne.n	8007d06 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0204 	orr.w	r2, r2, #4
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	e007      	b.n	8007d16 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f022 0204 	bic.w	r2, r2, #4
 8007d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	ea42 0103 	orr.w	r1, r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	1e5a      	subs	r2, r3, #1
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	08006a69 	.word	0x08006a69
 8007d58:	08008881 	.word	0x08008881
 8007d5c:	08006a83 	.word	0x08006a83
 8007d60:	08008893 	.word	0x08008893
 8007d64:	08006b41 	.word	0x08006b41
 8007d68:	08006b61 	.word	0x08006b61
 8007d6c:	08006b81 	.word	0x08006b81
 8007d70:	0800884b 	.word	0x0800884b
 8007d74:	0800885d 	.word	0x0800885d
 8007d78:	0800886f 	.word	0x0800886f
 8007d7c:	080088a5 	.word	0x080088a5
 8007d80:	080088b7 	.word	0x080088b7
 8007d84:	080088c9 	.word	0x080088c9
 8007d88:	0800736d 	.word	0x0800736d

08007d8c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007da2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007da4:	7cfb      	ldrb	r3, [r7, #19]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d003      	beq.n	8007db2 <HAL_CAN_ConfigFilter+0x26>
 8007daa:	7cfb      	ldrb	r3, [r7, #19]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	f040 80aa 	bne.w	8007f06 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007db8:	f043 0201 	orr.w	r2, r3, #1
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	f003 031f 	and.w	r3, r3, #31
 8007dca:	2201      	movs	r2, #1
 8007dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	43db      	mvns	r3, r3
 8007ddc:	401a      	ands	r2, r3
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d123      	bne.n	8007e34 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	43db      	mvns	r3, r3
 8007df6:	401a      	ands	r2, r3
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007e0e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	3248      	adds	r2, #72	; 0x48
 8007e14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007e28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007e2a:	6979      	ldr	r1, [r7, #20]
 8007e2c:	3348      	adds	r3, #72	; 0x48
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	440b      	add	r3, r1
 8007e32:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d122      	bne.n	8007e82 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	431a      	orrs	r2, r3
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007e5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	3248      	adds	r2, #72	; 0x48
 8007e62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007e76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007e78:	6979      	ldr	r1, [r7, #20]
 8007e7a:	3348      	adds	r3, #72	; 0x48
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	440b      	add	r3, r1
 8007e80:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	43db      	mvns	r3, r3
 8007e94:	401a      	ands	r2, r3
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007e9c:	e007      	b.n	8007eae <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d109      	bne.n	8007eca <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	43db      	mvns	r3, r3
 8007ec0:	401a      	ands	r2, r3
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007ec8:	e007      	b.n	8007eda <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d107      	bne.n	8007ef2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	431a      	orrs	r2, r3
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ef8:	f023 0201 	bic.w	r2, r3, #1
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	e006      	b.n	8007f14 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
  }
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	371c      	adds	r7, #28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bc80      	pop	{r7}
 8007f1c:	4770      	bx	lr

08007f1e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d12e      	bne.n	8007f90 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2202      	movs	r2, #2
 8007f36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0201 	bic.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f4a:	f7ff fdab 	bl	8007aa4 <HAL_GetTick>
 8007f4e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007f50:	e012      	b.n	8007f78 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007f52:	f7ff fda7 	bl	8007aa4 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	2b0a      	cmp	r3, #10
 8007f5e:	d90b      	bls.n	8007f78 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2205      	movs	r2, #5
 8007f70:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e012      	b.n	8007f9e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e5      	bne.n	8007f52 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	e006      	b.n	8007f9e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
  }
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d133      	bne.n	8008022 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0201 	orr.w	r2, r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fca:	f7ff fd6b 	bl	8007aa4 <HAL_GetTick>
 8007fce:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007fd0:	e012      	b.n	8007ff8 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007fd2:	f7ff fd67 	bl	8007aa4 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2b0a      	cmp	r3, #10
 8007fde:	d90b      	bls.n	8007ff8 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2205      	movs	r2, #5
 8007ff0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e01b      	b.n	8008030 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0e5      	beq.n	8007fd2 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0202 	bic.w	r2, r2, #2
 8008014:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	e006      	b.n	8008030 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
  }
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8008038:	b480      	push	{r7}
 800803a:	b089      	sub	sp, #36	; 0x24
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800804c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8008056:	7ffb      	ldrb	r3, [r7, #31]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d003      	beq.n	8008064 <HAL_CAN_AddTxMessage+0x2c>
 800805c:	7ffb      	ldrb	r3, [r7, #31]
 800805e:	2b02      	cmp	r3, #2
 8008060:	f040 80b8 	bne.w	80081d4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10a      	bne.n	8008084 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008074:	2b00      	cmp	r3, #0
 8008076:	d105      	bne.n	8008084 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 80a0 	beq.w	80081c4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	0e1b      	lsrs	r3, r3, #24
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d907      	bls.n	80080a4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e09e      	b.n	80081e2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80080a4:	2201      	movs	r2, #1
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	409a      	lsls	r2, r3
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10d      	bne.n	80080d2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80080c0:	68f9      	ldr	r1, [r7, #12]
 80080c2:	6809      	ldr	r1, [r1, #0]
 80080c4:	431a      	orrs	r2, r3
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	3318      	adds	r3, #24
 80080ca:	011b      	lsls	r3, r3, #4
 80080cc:	440b      	add	r3, r1
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	e00f      	b.n	80080f2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80080dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80080e2:	68f9      	ldr	r1, [r7, #12]
 80080e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80080e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	3318      	adds	r3, #24
 80080ec:	011b      	lsls	r3, r3, #4
 80080ee:	440b      	add	r3, r1
 80080f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6819      	ldr	r1, [r3, #0]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	691a      	ldr	r2, [r3, #16]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	3318      	adds	r3, #24
 80080fe:	011b      	lsls	r3, r3, #4
 8008100:	440b      	add	r3, r1
 8008102:	3304      	adds	r3, #4
 8008104:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	7d1b      	ldrb	r3, [r3, #20]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d111      	bne.n	8008132 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	3318      	adds	r3, #24
 8008116:	011b      	lsls	r3, r3, #4
 8008118:	4413      	add	r3, r2
 800811a:	3304      	adds	r3, #4
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	6811      	ldr	r1, [r2, #0]
 8008122:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	3318      	adds	r3, #24
 800812a:	011b      	lsls	r3, r3, #4
 800812c:	440b      	add	r3, r1
 800812e:	3304      	adds	r3, #4
 8008130:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3307      	adds	r3, #7
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	061a      	lsls	r2, r3, #24
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	3306      	adds	r3, #6
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	041b      	lsls	r3, r3, #16
 8008142:	431a      	orrs	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3305      	adds	r3, #5
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	021b      	lsls	r3, r3, #8
 800814c:	4313      	orrs	r3, r2
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	3204      	adds	r2, #4
 8008152:	7812      	ldrb	r2, [r2, #0]
 8008154:	4610      	mov	r0, r2
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	6811      	ldr	r1, [r2, #0]
 800815a:	ea43 0200 	orr.w	r2, r3, r0
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	011b      	lsls	r3, r3, #4
 8008162:	440b      	add	r3, r1
 8008164:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008168:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	3303      	adds	r3, #3
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	061a      	lsls	r2, r3, #24
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3302      	adds	r3, #2
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	041b      	lsls	r3, r3, #16
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3301      	adds	r3, #1
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	4313      	orrs	r3, r2
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	7812      	ldrb	r2, [r2, #0]
 800818a:	4610      	mov	r0, r2
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	6811      	ldr	r1, [r2, #0]
 8008190:	ea43 0200 	orr.w	r2, r3, r0
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	011b      	lsls	r3, r3, #4
 8008198:	440b      	add	r3, r1
 800819a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800819e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	3318      	adds	r3, #24
 80081a8:	011b      	lsls	r3, r3, #4
 80081aa:	4413      	add	r3, r2
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	6811      	ldr	r1, [r2, #0]
 80081b2:	f043 0201 	orr.w	r2, r3, #1
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	3318      	adds	r3, #24
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	440b      	add	r3, r1
 80081be:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	e00e      	b.n	80081e2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e006      	b.n	80081e2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
  }
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3724      	adds	r7, #36	; 0x24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bc80      	pop	{r7}
 80081ea:	4770      	bx	lr

080081ec <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081fe:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8008200:	7afb      	ldrb	r3, [r7, #11]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d002      	beq.n	800820c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8008206:	7afb      	ldrb	r3, [r7, #11]
 8008208:	2b02      	cmp	r3, #2
 800820a:	d11d      	bne.n	8008248 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3301      	adds	r3, #1
 8008232:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3301      	adds	r3, #1
 8008246:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8008248:	68fb      	ldr	r3, [r7, #12]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	bc80      	pop	{r7}
 8008252:	4770      	bx	lr

08008254 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008254:	b480      	push	{r7}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008268:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d003      	beq.n	8008278 <HAL_CAN_GetRxMessage+0x24>
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	2b02      	cmp	r3, #2
 8008274:	f040 80f3 	bne.w	800845e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10e      	bne.n	800829c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f003 0303 	and.w	r3, r3, #3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d116      	bne.n	80082ba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e0e7      	b.n	800846c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d107      	bne.n	80082ba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e0d8      	b.n	800846c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	331b      	adds	r3, #27
 80082c2:	011b      	lsls	r3, r3, #4
 80082c4:	4413      	add	r3, r2
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0204 	and.w	r2, r3, #4
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10c      	bne.n	80082f2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	331b      	adds	r3, #27
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	4413      	add	r3, r2
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	0d5b      	lsrs	r3, r3, #21
 80082e8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	e00b      	b.n	800830a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	331b      	adds	r3, #27
 80082fa:	011b      	lsls	r3, r3, #4
 80082fc:	4413      	add	r3, r2
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	08db      	lsrs	r3, r3, #3
 8008302:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	331b      	adds	r3, #27
 8008312:	011b      	lsls	r3, r3, #4
 8008314:	4413      	add	r3, r2
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0202 	and.w	r2, r3, #2
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	331b      	adds	r3, #27
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	4413      	add	r3, r2
 800832c:	3304      	adds	r3, #4
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 020f 	and.w	r2, r3, #15
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	331b      	adds	r3, #27
 8008340:	011b      	lsls	r3, r3, #4
 8008342:	4413      	add	r3, r2
 8008344:	3304      	adds	r3, #4
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	0a1b      	lsrs	r3, r3, #8
 800834a:	b2da      	uxtb	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	331b      	adds	r3, #27
 8008358:	011b      	lsls	r3, r3, #4
 800835a:	4413      	add	r3, r2
 800835c:	3304      	adds	r3, #4
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	0c1b      	lsrs	r3, r3, #16
 8008362:	b29a      	uxth	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	011b      	lsls	r3, r3, #4
 8008370:	4413      	add	r3, r2
 8008372:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	b2da      	uxtb	r2, r3
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	011b      	lsls	r3, r3, #4
 8008386:	4413      	add	r3, r2
 8008388:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	0a1a      	lsrs	r2, r3, #8
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	3301      	adds	r3, #1
 8008394:	b2d2      	uxtb	r2, r2
 8008396:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	0c1a      	lsrs	r2, r3, #16
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	3302      	adds	r3, #2
 80083ae:	b2d2      	uxtb	r2, r2
 80083b0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	011b      	lsls	r3, r3, #4
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	0e1a      	lsrs	r2, r3, #24
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	3303      	adds	r3, #3
 80083c8:	b2d2      	uxtb	r2, r2
 80083ca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	3304      	adds	r3, #4
 80083e0:	b2d2      	uxtb	r2, r2
 80083e2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	011b      	lsls	r3, r3, #4
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	0a1a      	lsrs	r2, r3, #8
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	3305      	adds	r3, #5
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	011b      	lsls	r3, r3, #4
 8008406:	4413      	add	r3, r2
 8008408:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	0c1a      	lsrs	r2, r3, #16
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	3306      	adds	r3, #6
 8008414:	b2d2      	uxtb	r2, r2
 8008416:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	4413      	add	r3, r2
 8008422:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	0e1a      	lsrs	r2, r3, #24
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	3307      	adds	r3, #7
 800842e:	b2d2      	uxtb	r2, r2
 8008430:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d108      	bne.n	800844a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68da      	ldr	r2, [r3, #12]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0220 	orr.w	r2, r2, #32
 8008446:	60da      	str	r2, [r3, #12]
 8008448:	e007      	b.n	800845a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f042 0220 	orr.w	r2, r2, #32
 8008458:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	e006      	b.n	800846c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
  }
}
 800846c:	4618      	mov	r0, r3
 800846e:	371c      	adds	r7, #28
 8008470:	46bd      	mov	sp, r7
 8008472:	bc80      	pop	{r7}
 8008474:	4770      	bx	lr

08008476 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008476:	b480      	push	{r7}
 8008478:	b085      	sub	sp, #20
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008486:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d002      	beq.n	8008494 <HAL_CAN_ActivateNotification+0x1e>
 800848e:	7bfb      	ldrb	r3, [r7, #15]
 8008490:	2b02      	cmp	r3, #2
 8008492:	d109      	bne.n	80084a8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6959      	ldr	r1, [r3, #20]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	e006      	b.n	80084b6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
  }
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bc80      	pop	{r7}
 80084be:	4770      	bx	lr

080084c0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80084c8:	2300      	movs	r3, #0
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 8083 	beq.w	800860e <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d025      	beq.n	800855e <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2201      	movs	r2, #1
 8008518:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d004      	beq.n	800852e <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
 800852c:	e017      	b.n	800855e <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b00      	cmp	r3, #0
 8008536:	d004      	beq.n	8008542 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800853e:	627b      	str	r3, [r7, #36]	; 0x24
 8008540:	e00d      	b.n	800855e <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	f003 0308 	and.w	r3, r3, #8
 8008548:	2b00      	cmp	r3, #0
 800854a:	d004      	beq.n	8008556 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
 8008554:	e003      	b.n	800855e <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008564:	2b00      	cmp	r3, #0
 8008566:	d026      	beq.n	80085b6 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008570:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	4798      	blx	r3
 8008584:	e017      	b.n	80085b6 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800858c:	2b00      	cmp	r3, #0
 800858e:	d004      	beq.n	800859a <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008596:	627b      	str	r3, [r7, #36]	; 0x24
 8008598:	e00d      	b.n	80085b6 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d004      	beq.n	80085ae <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
 80085ac:	e003      	b.n	80085b6 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d026      	beq.n	800860e <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80085c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d004      	beq.n	80085de <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	4798      	blx	r3
 80085dc:	e017      	b.n	800860e <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d004      	beq.n	80085f2 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
 80085f0:	e00d      	b.n	800860e <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d004      	beq.n	8008606 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
 8008604:	e003      	b.n	800860e <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	f003 0308 	and.w	r3, r3, #8
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00c      	beq.n	8008632 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f003 0310 	and.w	r3, r3, #16
 800861e:	2b00      	cmp	r3, #0
 8008620:	d007      	beq.n	8008632 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008628:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2210      	movs	r2, #16
 8008630:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00c      	beq.n	8008656 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f003 0308 	and.w	r3, r3, #8
 8008642:	2b00      	cmp	r3, #0
 8008644:	d007      	beq.n	8008656 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2208      	movs	r2, #8
 800864c:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00a      	beq.n	8008676 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00c      	beq.n	800869a <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b00      	cmp	r3, #0
 8008688:	d007      	beq.n	800869a <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008690:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2210      	movs	r2, #16
 8008698:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	f003 0320 	and.w	r3, r3, #32
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00c      	beq.n	80086be <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f003 0308 	and.w	r3, r3, #8
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d007      	beq.n	80086be <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2208      	movs	r2, #8
 80086b4:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	f003 0310 	and.w	r3, r3, #16
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00a      	beq.n	80086de <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	f003 0303 	and.w	r3, r3, #3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00c      	beq.n	8008702 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	f003 0310 	and.w	r3, r3, #16
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d007      	beq.n	8008702 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2210      	movs	r2, #16
 80086f8:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00c      	beq.n	8008726 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	f003 0308 	and.w	r3, r3, #8
 8008712:	2b00      	cmp	r3, #0
 8008714:	d007      	beq.n	8008726 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2208      	movs	r2, #8
 800871c:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d07b      	beq.n	8008828 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	f003 0304 	and.w	r3, r3, #4
 8008736:	2b00      	cmp	r3, #0
 8008738:	d072      	beq.n	8008820 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008740:	2b00      	cmp	r3, #0
 8008742:	d008      	beq.n	8008756 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	f043 0301 	orr.w	r3, r3, #1
 8008754:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800875c:	2b00      	cmp	r3, #0
 800875e:	d008      	beq.n	8008772 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008766:	2b00      	cmp	r3, #0
 8008768:	d003      	beq.n	8008772 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	f043 0302 	orr.w	r3, r3, #2
 8008770:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008778:	2b00      	cmp	r3, #0
 800877a:	d008      	beq.n	800878e <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	f043 0304 	orr.w	r3, r3, #4
 800878c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008794:	2b00      	cmp	r3, #0
 8008796:	d043      	beq.n	8008820 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d03e      	beq.n	8008820 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087a8:	2b60      	cmp	r3, #96	; 0x60
 80087aa:	d02b      	beq.n	8008804 <HAL_CAN_IRQHandler+0x344>
 80087ac:	2b60      	cmp	r3, #96	; 0x60
 80087ae:	d82e      	bhi.n	800880e <HAL_CAN_IRQHandler+0x34e>
 80087b0:	2b50      	cmp	r3, #80	; 0x50
 80087b2:	d022      	beq.n	80087fa <HAL_CAN_IRQHandler+0x33a>
 80087b4:	2b50      	cmp	r3, #80	; 0x50
 80087b6:	d82a      	bhi.n	800880e <HAL_CAN_IRQHandler+0x34e>
 80087b8:	2b40      	cmp	r3, #64	; 0x40
 80087ba:	d019      	beq.n	80087f0 <HAL_CAN_IRQHandler+0x330>
 80087bc:	2b40      	cmp	r3, #64	; 0x40
 80087be:	d826      	bhi.n	800880e <HAL_CAN_IRQHandler+0x34e>
 80087c0:	2b30      	cmp	r3, #48	; 0x30
 80087c2:	d010      	beq.n	80087e6 <HAL_CAN_IRQHandler+0x326>
 80087c4:	2b30      	cmp	r3, #48	; 0x30
 80087c6:	d822      	bhi.n	800880e <HAL_CAN_IRQHandler+0x34e>
 80087c8:	2b10      	cmp	r3, #16
 80087ca:	d002      	beq.n	80087d2 <HAL_CAN_IRQHandler+0x312>
 80087cc:	2b20      	cmp	r3, #32
 80087ce:	d005      	beq.n	80087dc <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80087d0:	e01d      	b.n	800880e <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	f043 0308 	orr.w	r3, r3, #8
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80087da:	e019      	b.n	8008810 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	f043 0310 	orr.w	r3, r3, #16
 80087e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80087e4:	e014      	b.n	8008810 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	f043 0320 	orr.w	r3, r3, #32
 80087ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80087ee:	e00f      	b.n	8008810 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80087f8:	e00a      	b.n	8008810 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008802:	e005      	b.n	8008810 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800880c:	e000      	b.n	8008810 <HAL_CAN_IRQHandler+0x350>
            break;
 800880e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699a      	ldr	r2, [r3, #24]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800881e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2204      	movs	r2, #4
 8008826:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	2b00      	cmp	r3, #0
 800882c:	d009      	beq.n	8008842 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	431a      	orrs	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008842:	bf00      	nop
 8008844:	3728      	adds	r7, #40	; 0x28
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008852:	bf00      	nop
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	bc80      	pop	{r7}
 800885a:	4770      	bx	lr

0800885c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	bc80      	pop	{r7}
 800886c:	4770      	bx	lr

0800886e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	bc80      	pop	{r7}
 800887e:	4770      	bx	lr

08008880 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	bc80      	pop	{r7}
 8008890:	4770      	bx	lr

08008892 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8008892:	b480      	push	{r7}
 8008894:	b083      	sub	sp, #12
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800889a:	bf00      	nop
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	bc80      	pop	{r7}
 80088a2:	4770      	bx	lr

080088a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr

080088b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bc80      	pop	{r7}
 80088c6:	4770      	bx	lr

080088c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bc80      	pop	{r7}
 80088d8:	4770      	bx	lr
	...

080088dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80088ec:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <__NVIC_SetPriorityGrouping+0x44>)
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80088f8:	4013      	ands	r3, r2
 80088fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800890c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800890e:	4a04      	ldr	r2, [pc, #16]	; (8008920 <__NVIC_SetPriorityGrouping+0x44>)
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	60d3      	str	r3, [r2, #12]
}
 8008914:	bf00      	nop
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	bc80      	pop	{r7}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	e000ed00 	.word	0xe000ed00

08008924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008924:	b480      	push	{r7}
 8008926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008928:	4b04      	ldr	r3, [pc, #16]	; (800893c <__NVIC_GetPriorityGrouping+0x18>)
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	0a1b      	lsrs	r3, r3, #8
 800892e:	f003 0307 	and.w	r3, r3, #7
}
 8008932:	4618      	mov	r0, r3
 8008934:	46bd      	mov	sp, r7
 8008936:	bc80      	pop	{r7}
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	e000ed00 	.word	0xe000ed00

08008940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800894a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800894e:	2b00      	cmp	r3, #0
 8008950:	db0b      	blt.n	800896a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	f003 021f 	and.w	r2, r3, #31
 8008958:	4906      	ldr	r1, [pc, #24]	; (8008974 <__NVIC_EnableIRQ+0x34>)
 800895a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800895e:	095b      	lsrs	r3, r3, #5
 8008960:	2001      	movs	r0, #1
 8008962:	fa00 f202 	lsl.w	r2, r0, r2
 8008966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800896a:	bf00      	nop
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	bc80      	pop	{r7}
 8008972:	4770      	bx	lr
 8008974:	e000e100 	.word	0xe000e100

08008978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	4603      	mov	r3, r0
 8008980:	6039      	str	r1, [r7, #0]
 8008982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008988:	2b00      	cmp	r3, #0
 800898a:	db0a      	blt.n	80089a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	b2da      	uxtb	r2, r3
 8008990:	490c      	ldr	r1, [pc, #48]	; (80089c4 <__NVIC_SetPriority+0x4c>)
 8008992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008996:	0112      	lsls	r2, r2, #4
 8008998:	b2d2      	uxtb	r2, r2
 800899a:	440b      	add	r3, r1
 800899c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80089a0:	e00a      	b.n	80089b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	4908      	ldr	r1, [pc, #32]	; (80089c8 <__NVIC_SetPriority+0x50>)
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	f003 030f 	and.w	r3, r3, #15
 80089ae:	3b04      	subs	r3, #4
 80089b0:	0112      	lsls	r2, r2, #4
 80089b2:	b2d2      	uxtb	r2, r2
 80089b4:	440b      	add	r3, r1
 80089b6:	761a      	strb	r2, [r3, #24]
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	bc80      	pop	{r7}
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	e000e100 	.word	0xe000e100
 80089c8:	e000ed00 	.word	0xe000ed00

080089cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b089      	sub	sp, #36	; 0x24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f003 0307 	and.w	r3, r3, #7
 80089de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	f1c3 0307 	rsb	r3, r3, #7
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	bf28      	it	cs
 80089ea:	2304      	movcs	r3, #4
 80089ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	3304      	adds	r3, #4
 80089f2:	2b06      	cmp	r3, #6
 80089f4:	d902      	bls.n	80089fc <NVIC_EncodePriority+0x30>
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	3b03      	subs	r3, #3
 80089fa:	e000      	b.n	80089fe <NVIC_EncodePriority+0x32>
 80089fc:	2300      	movs	r3, #0
 80089fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a00:	f04f 32ff 	mov.w	r2, #4294967295
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0a:	43da      	mvns	r2, r3
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	401a      	ands	r2, r3
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a14:	f04f 31ff 	mov.w	r1, #4294967295
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a1e:	43d9      	mvns	r1, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a24:	4313      	orrs	r3, r2
         );
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3724      	adds	r7, #36	; 0x24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bc80      	pop	{r7}
 8008a2e:	4770      	bx	lr

08008a30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008a30:	b480      	push	{r7}
 8008a32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008a34:	f3bf 8f4f 	dsb	sy
}
 8008a38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008a3a:	4b06      	ldr	r3, [pc, #24]	; (8008a54 <__NVIC_SystemReset+0x24>)
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008a42:	4904      	ldr	r1, [pc, #16]	; (8008a54 <__NVIC_SystemReset+0x24>)
 8008a44:	4b04      	ldr	r3, [pc, #16]	; (8008a58 <__NVIC_SystemReset+0x28>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008a4a:	f3bf 8f4f 	dsb	sy
}
 8008a4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008a50:	bf00      	nop
 8008a52:	e7fd      	b.n	8008a50 <__NVIC_SystemReset+0x20>
 8008a54:	e000ed00 	.word	0xe000ed00
 8008a58:	05fa0004 	.word	0x05fa0004

08008a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a6c:	d301      	bcc.n	8008a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e00f      	b.n	8008a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a72:	4a0a      	ldr	r2, [pc, #40]	; (8008a9c <SysTick_Config+0x40>)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a7a:	210f      	movs	r1, #15
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a80:	f7ff ff7a 	bl	8008978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a84:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <SysTick_Config+0x40>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a8a:	4b04      	ldr	r3, [pc, #16]	; (8008a9c <SysTick_Config+0x40>)
 8008a8c:	2207      	movs	r2, #7
 8008a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	e000e010 	.word	0xe000e010

08008aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff ff17 	bl	80088dc <__NVIC_SetPriorityGrouping>
}
 8008aae:	bf00      	nop
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b086      	sub	sp, #24
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	4603      	mov	r3, r0
 8008abe:	60b9      	str	r1, [r7, #8]
 8008ac0:	607a      	str	r2, [r7, #4]
 8008ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ac8:	f7ff ff2c 	bl	8008924 <__NVIC_GetPriorityGrouping>
 8008acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	68b9      	ldr	r1, [r7, #8]
 8008ad2:	6978      	ldr	r0, [r7, #20]
 8008ad4:	f7ff ff7a 	bl	80089cc <NVIC_EncodePriority>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ade:	4611      	mov	r1, r2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff ff49 	bl	8008978 <__NVIC_SetPriority>
}
 8008ae6:	bf00      	nop
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	4603      	mov	r3, r0
 8008af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff ff1f 	bl	8008940 <__NVIC_EnableIRQ>
}
 8008b02:	bf00      	nop
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008b0e:	f7ff ff8f 	bl	8008a30 <__NVIC_SystemReset>

08008b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff ff9e 	bl	8008a5c <SysTick_Config>
 8008b20:	4603      	mov	r3, r0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
	...

08008b2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e043      	b.n	8008bca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	4b22      	ldr	r3, [pc, #136]	; (8008bd4 <HAL_DMA_Init+0xa8>)
 8008b4a:	4413      	add	r3, r2
 8008b4c:	4a22      	ldr	r2, [pc, #136]	; (8008bd8 <HAL_DMA_Init+0xac>)
 8008b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b52:	091b      	lsrs	r3, r3, #4
 8008b54:	009a      	lsls	r2, r3, #2
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a1f      	ldr	r2, [pc, #124]	; (8008bdc <HAL_DMA_Init+0xb0>)
 8008b5e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2202      	movs	r2, #2
 8008b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008b76:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008b7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr
 8008bd4:	bffdfff8 	.word	0xbffdfff8
 8008bd8:	cccccccd 	.word	0xcccccccd
 8008bdc:	40020000 	.word	0x40020000

08008be0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d101      	bne.n	8008c00 <HAL_DMA_Start_IT+0x20>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e04a      	b.n	8008c96 <HAL_DMA_Start_IT+0xb6>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d13a      	bne.n	8008c88 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2202      	movs	r2, #2
 8008c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0201 	bic.w	r2, r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	68b9      	ldr	r1, [r7, #8]
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 f9e8 	bl	800900c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d008      	beq.n	8008c56 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f042 020e 	orr.w	r2, r2, #14
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	e00f      	b.n	8008c76 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f022 0204 	bic.w	r2, r2, #4
 8008c64:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f042 020a 	orr.w	r2, r2, #10
 8008c74:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0201 	orr.w	r2, r2, #1
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	e005      	b.n	8008c94 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008c90:	2302      	movs	r3, #2
 8008c92:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b085      	sub	sp, #20
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d008      	beq.n	8008cc6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2204      	movs	r2, #4
 8008cb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e020      	b.n	8008d08 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f022 020e 	bic.w	r2, r2, #14
 8008cd4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 0201 	bic.w	r2, r2, #1
 8008ce4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cee:	2101      	movs	r1, #1
 8008cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8008cf4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bc80      	pop	{r7}
 8008d10:	4770      	bx	lr
	...

08008d14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d005      	beq.n	8008d36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
 8008d34:	e051      	b.n	8008dda <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f022 020e 	bic.w	r2, r2, #14
 8008d44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f022 0201 	bic.w	r2, r2, #1
 8008d54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a22      	ldr	r2, [pc, #136]	; (8008de4 <HAL_DMA_Abort_IT+0xd0>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d029      	beq.n	8008db4 <HAL_DMA_Abort_IT+0xa0>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a20      	ldr	r2, [pc, #128]	; (8008de8 <HAL_DMA_Abort_IT+0xd4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d022      	beq.n	8008db0 <HAL_DMA_Abort_IT+0x9c>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a1f      	ldr	r2, [pc, #124]	; (8008dec <HAL_DMA_Abort_IT+0xd8>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d01a      	beq.n	8008daa <HAL_DMA_Abort_IT+0x96>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a1d      	ldr	r2, [pc, #116]	; (8008df0 <HAL_DMA_Abort_IT+0xdc>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d012      	beq.n	8008da4 <HAL_DMA_Abort_IT+0x90>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a1c      	ldr	r2, [pc, #112]	; (8008df4 <HAL_DMA_Abort_IT+0xe0>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00a      	beq.n	8008d9e <HAL_DMA_Abort_IT+0x8a>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a1a      	ldr	r2, [pc, #104]	; (8008df8 <HAL_DMA_Abort_IT+0xe4>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d102      	bne.n	8008d98 <HAL_DMA_Abort_IT+0x84>
 8008d92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d96:	e00e      	b.n	8008db6 <HAL_DMA_Abort_IT+0xa2>
 8008d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d9c:	e00b      	b.n	8008db6 <HAL_DMA_Abort_IT+0xa2>
 8008d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008da2:	e008      	b.n	8008db6 <HAL_DMA_Abort_IT+0xa2>
 8008da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008da8:	e005      	b.n	8008db6 <HAL_DMA_Abort_IT+0xa2>
 8008daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dae:	e002      	b.n	8008db6 <HAL_DMA_Abort_IT+0xa2>
 8008db0:	2310      	movs	r3, #16
 8008db2:	e000      	b.n	8008db6 <HAL_DMA_Abort_IT+0xa2>
 8008db4:	2301      	movs	r3, #1
 8008db6:	4a11      	ldr	r2, [pc, #68]	; (8008dfc <HAL_DMA_Abort_IT+0xe8>)
 8008db8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	4798      	blx	r3
    } 
  }
  return status;
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	40020008 	.word	0x40020008
 8008de8:	4002001c 	.word	0x4002001c
 8008dec:	40020030 	.word	0x40020030
 8008df0:	40020044 	.word	0x40020044
 8008df4:	40020058 	.word	0x40020058
 8008df8:	4002006c 	.word	0x4002006c
 8008dfc:	40020000 	.word	0x40020000

08008e00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1c:	2204      	movs	r2, #4
 8008e1e:	409a      	lsls	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4013      	ands	r3, r2
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d04f      	beq.n	8008ec8 <HAL_DMA_IRQHandler+0xc8>
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	f003 0304 	and.w	r3, r3, #4
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d04a      	beq.n	8008ec8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0320 	and.w	r3, r3, #32
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d107      	bne.n	8008e50 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f022 0204 	bic.w	r2, r2, #4
 8008e4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a66      	ldr	r2, [pc, #408]	; (8008ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d029      	beq.n	8008eae <HAL_DMA_IRQHandler+0xae>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a65      	ldr	r2, [pc, #404]	; (8008ff4 <HAL_DMA_IRQHandler+0x1f4>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d022      	beq.n	8008eaa <HAL_DMA_IRQHandler+0xaa>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a63      	ldr	r2, [pc, #396]	; (8008ff8 <HAL_DMA_IRQHandler+0x1f8>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d01a      	beq.n	8008ea4 <HAL_DMA_IRQHandler+0xa4>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a62      	ldr	r2, [pc, #392]	; (8008ffc <HAL_DMA_IRQHandler+0x1fc>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d012      	beq.n	8008e9e <HAL_DMA_IRQHandler+0x9e>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a60      	ldr	r2, [pc, #384]	; (8009000 <HAL_DMA_IRQHandler+0x200>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d00a      	beq.n	8008e98 <HAL_DMA_IRQHandler+0x98>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a5f      	ldr	r2, [pc, #380]	; (8009004 <HAL_DMA_IRQHandler+0x204>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d102      	bne.n	8008e92 <HAL_DMA_IRQHandler+0x92>
 8008e8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008e90:	e00e      	b.n	8008eb0 <HAL_DMA_IRQHandler+0xb0>
 8008e92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e96:	e00b      	b.n	8008eb0 <HAL_DMA_IRQHandler+0xb0>
 8008e98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e9c:	e008      	b.n	8008eb0 <HAL_DMA_IRQHandler+0xb0>
 8008e9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ea2:	e005      	b.n	8008eb0 <HAL_DMA_IRQHandler+0xb0>
 8008ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ea8:	e002      	b.n	8008eb0 <HAL_DMA_IRQHandler+0xb0>
 8008eaa:	2340      	movs	r3, #64	; 0x40
 8008eac:	e000      	b.n	8008eb0 <HAL_DMA_IRQHandler+0xb0>
 8008eae:	2304      	movs	r3, #4
 8008eb0:	4a55      	ldr	r2, [pc, #340]	; (8009008 <HAL_DMA_IRQHandler+0x208>)
 8008eb2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 8094 	beq.w	8008fe6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008ec6:	e08e      	b.n	8008fe6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ecc:	2202      	movs	r2, #2
 8008ece:	409a      	lsls	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d056      	beq.n	8008f86 <HAL_DMA_IRQHandler+0x186>
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d051      	beq.n	8008f86 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0320 	and.w	r3, r3, #32
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10b      	bne.n	8008f08 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 020a 	bic.w	r2, r2, #10
 8008efe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a38      	ldr	r2, [pc, #224]	; (8008ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d029      	beq.n	8008f66 <HAL_DMA_IRQHandler+0x166>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a37      	ldr	r2, [pc, #220]	; (8008ff4 <HAL_DMA_IRQHandler+0x1f4>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d022      	beq.n	8008f62 <HAL_DMA_IRQHandler+0x162>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a35      	ldr	r2, [pc, #212]	; (8008ff8 <HAL_DMA_IRQHandler+0x1f8>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d01a      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x15c>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a34      	ldr	r2, [pc, #208]	; (8008ffc <HAL_DMA_IRQHandler+0x1fc>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d012      	beq.n	8008f56 <HAL_DMA_IRQHandler+0x156>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a32      	ldr	r2, [pc, #200]	; (8009000 <HAL_DMA_IRQHandler+0x200>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d00a      	beq.n	8008f50 <HAL_DMA_IRQHandler+0x150>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a31      	ldr	r2, [pc, #196]	; (8009004 <HAL_DMA_IRQHandler+0x204>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d102      	bne.n	8008f4a <HAL_DMA_IRQHandler+0x14a>
 8008f44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008f48:	e00e      	b.n	8008f68 <HAL_DMA_IRQHandler+0x168>
 8008f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f4e:	e00b      	b.n	8008f68 <HAL_DMA_IRQHandler+0x168>
 8008f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f54:	e008      	b.n	8008f68 <HAL_DMA_IRQHandler+0x168>
 8008f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f5a:	e005      	b.n	8008f68 <HAL_DMA_IRQHandler+0x168>
 8008f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f60:	e002      	b.n	8008f68 <HAL_DMA_IRQHandler+0x168>
 8008f62:	2320      	movs	r3, #32
 8008f64:	e000      	b.n	8008f68 <HAL_DMA_IRQHandler+0x168>
 8008f66:	2302      	movs	r3, #2
 8008f68:	4a27      	ldr	r2, [pc, #156]	; (8009008 <HAL_DMA_IRQHandler+0x208>)
 8008f6a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d034      	beq.n	8008fe6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008f84:	e02f      	b.n	8008fe6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8a:	2208      	movs	r2, #8
 8008f8c:	409a      	lsls	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	4013      	ands	r3, r2
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d028      	beq.n	8008fe8 <HAL_DMA_IRQHandler+0x1e8>
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	f003 0308 	and.w	r3, r3, #8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d023      	beq.n	8008fe8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f022 020e 	bic.w	r2, r2, #14
 8008fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb8:	2101      	movs	r1, #1
 8008fba:	fa01 f202 	lsl.w	r2, r1, r2
 8008fbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d004      	beq.n	8008fe8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
    }
  }
  return;
 8008fe6:	bf00      	nop
 8008fe8:	bf00      	nop
}
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	40020008 	.word	0x40020008
 8008ff4:	4002001c 	.word	0x4002001c
 8008ff8:	40020030 	.word	0x40020030
 8008ffc:	40020044 	.word	0x40020044
 8009000:	40020058 	.word	0x40020058
 8009004:	4002006c 	.word	0x4002006c
 8009008:	40020000 	.word	0x40020000

0800900c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
 8009018:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009022:	2101      	movs	r1, #1
 8009024:	fa01 f202 	lsl.w	r2, r1, r2
 8009028:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2b10      	cmp	r3, #16
 8009038:	d108      	bne.n	800904c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800904a:	e007      	b.n	800905c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	60da      	str	r2, [r3, #12]
}
 800905c:	bf00      	nop
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	bc80      	pop	{r7}
 8009064:	4770      	bx	lr
	...

08009068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009068:	b480      	push	{r7}
 800906a:	b08b      	sub	sp, #44	; 0x2c
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009072:	2300      	movs	r3, #0
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009076:	2300      	movs	r3, #0
 8009078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800907a:	e169      	b.n	8009350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800907c:	2201      	movs	r2, #1
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	fa02 f303 	lsl.w	r3, r2, r3
 8009084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69fa      	ldr	r2, [r7, #28]
 800908c:	4013      	ands	r3, r2
 800908e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009090:	69ba      	ldr	r2, [r7, #24]
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	429a      	cmp	r2, r3
 8009096:	f040 8158 	bne.w	800934a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	4a9a      	ldr	r2, [pc, #616]	; (8009308 <HAL_GPIO_Init+0x2a0>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d05e      	beq.n	8009162 <HAL_GPIO_Init+0xfa>
 80090a4:	4a98      	ldr	r2, [pc, #608]	; (8009308 <HAL_GPIO_Init+0x2a0>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d875      	bhi.n	8009196 <HAL_GPIO_Init+0x12e>
 80090aa:	4a98      	ldr	r2, [pc, #608]	; (800930c <HAL_GPIO_Init+0x2a4>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d058      	beq.n	8009162 <HAL_GPIO_Init+0xfa>
 80090b0:	4a96      	ldr	r2, [pc, #600]	; (800930c <HAL_GPIO_Init+0x2a4>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d86f      	bhi.n	8009196 <HAL_GPIO_Init+0x12e>
 80090b6:	4a96      	ldr	r2, [pc, #600]	; (8009310 <HAL_GPIO_Init+0x2a8>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d052      	beq.n	8009162 <HAL_GPIO_Init+0xfa>
 80090bc:	4a94      	ldr	r2, [pc, #592]	; (8009310 <HAL_GPIO_Init+0x2a8>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d869      	bhi.n	8009196 <HAL_GPIO_Init+0x12e>
 80090c2:	4a94      	ldr	r2, [pc, #592]	; (8009314 <HAL_GPIO_Init+0x2ac>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d04c      	beq.n	8009162 <HAL_GPIO_Init+0xfa>
 80090c8:	4a92      	ldr	r2, [pc, #584]	; (8009314 <HAL_GPIO_Init+0x2ac>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d863      	bhi.n	8009196 <HAL_GPIO_Init+0x12e>
 80090ce:	4a92      	ldr	r2, [pc, #584]	; (8009318 <HAL_GPIO_Init+0x2b0>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d046      	beq.n	8009162 <HAL_GPIO_Init+0xfa>
 80090d4:	4a90      	ldr	r2, [pc, #576]	; (8009318 <HAL_GPIO_Init+0x2b0>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d85d      	bhi.n	8009196 <HAL_GPIO_Init+0x12e>
 80090da:	2b12      	cmp	r3, #18
 80090dc:	d82a      	bhi.n	8009134 <HAL_GPIO_Init+0xcc>
 80090de:	2b12      	cmp	r3, #18
 80090e0:	d859      	bhi.n	8009196 <HAL_GPIO_Init+0x12e>
 80090e2:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <HAL_GPIO_Init+0x80>)
 80090e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e8:	08009163 	.word	0x08009163
 80090ec:	0800913d 	.word	0x0800913d
 80090f0:	0800914f 	.word	0x0800914f
 80090f4:	08009191 	.word	0x08009191
 80090f8:	08009197 	.word	0x08009197
 80090fc:	08009197 	.word	0x08009197
 8009100:	08009197 	.word	0x08009197
 8009104:	08009197 	.word	0x08009197
 8009108:	08009197 	.word	0x08009197
 800910c:	08009197 	.word	0x08009197
 8009110:	08009197 	.word	0x08009197
 8009114:	08009197 	.word	0x08009197
 8009118:	08009197 	.word	0x08009197
 800911c:	08009197 	.word	0x08009197
 8009120:	08009197 	.word	0x08009197
 8009124:	08009197 	.word	0x08009197
 8009128:	08009197 	.word	0x08009197
 800912c:	08009145 	.word	0x08009145
 8009130:	08009159 	.word	0x08009159
 8009134:	4a79      	ldr	r2, [pc, #484]	; (800931c <HAL_GPIO_Init+0x2b4>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d013      	beq.n	8009162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800913a:	e02c      	b.n	8009196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	623b      	str	r3, [r7, #32]
          break;
 8009142:	e029      	b.n	8009198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	3304      	adds	r3, #4
 800914a:	623b      	str	r3, [r7, #32]
          break;
 800914c:	e024      	b.n	8009198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	3308      	adds	r3, #8
 8009154:	623b      	str	r3, [r7, #32]
          break;
 8009156:	e01f      	b.n	8009198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	330c      	adds	r3, #12
 800915e:	623b      	str	r3, [r7, #32]
          break;
 8009160:	e01a      	b.n	8009198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d102      	bne.n	8009170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800916a:	2304      	movs	r3, #4
 800916c:	623b      	str	r3, [r7, #32]
          break;
 800916e:	e013      	b.n	8009198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d105      	bne.n	8009184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009178:	2308      	movs	r3, #8
 800917a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	69fa      	ldr	r2, [r7, #28]
 8009180:	611a      	str	r2, [r3, #16]
          break;
 8009182:	e009      	b.n	8009198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009184:	2308      	movs	r3, #8
 8009186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	69fa      	ldr	r2, [r7, #28]
 800918c:	615a      	str	r2, [r3, #20]
          break;
 800918e:	e003      	b.n	8009198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009190:	2300      	movs	r3, #0
 8009192:	623b      	str	r3, [r7, #32]
          break;
 8009194:	e000      	b.n	8009198 <HAL_GPIO_Init+0x130>
          break;
 8009196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	2bff      	cmp	r3, #255	; 0xff
 800919c:	d801      	bhi.n	80091a2 <HAL_GPIO_Init+0x13a>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	e001      	b.n	80091a6 <HAL_GPIO_Init+0x13e>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3304      	adds	r3, #4
 80091a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	2bff      	cmp	r3, #255	; 0xff
 80091ac:	d802      	bhi.n	80091b4 <HAL_GPIO_Init+0x14c>
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	e002      	b.n	80091ba <HAL_GPIO_Init+0x152>
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	3b08      	subs	r3, #8
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	210f      	movs	r1, #15
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	fa01 f303 	lsl.w	r3, r1, r3
 80091c8:	43db      	mvns	r3, r3
 80091ca:	401a      	ands	r2, r3
 80091cc:	6a39      	ldr	r1, [r7, #32]
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	fa01 f303 	lsl.w	r3, r1, r3
 80091d4:	431a      	orrs	r2, r3
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 80b1 	beq.w	800934a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80091e8:	4b4d      	ldr	r3, [pc, #308]	; (8009320 <HAL_GPIO_Init+0x2b8>)
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	4a4c      	ldr	r2, [pc, #304]	; (8009320 <HAL_GPIO_Init+0x2b8>)
 80091ee:	f043 0301 	orr.w	r3, r3, #1
 80091f2:	6193      	str	r3, [r2, #24]
 80091f4:	4b4a      	ldr	r3, [pc, #296]	; (8009320 <HAL_GPIO_Init+0x2b8>)
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	60bb      	str	r3, [r7, #8]
 80091fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009200:	4a48      	ldr	r2, [pc, #288]	; (8009324 <HAL_GPIO_Init+0x2bc>)
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	089b      	lsrs	r3, r3, #2
 8009206:	3302      	adds	r3, #2
 8009208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800920c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	f003 0303 	and.w	r3, r3, #3
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	220f      	movs	r2, #15
 8009218:	fa02 f303 	lsl.w	r3, r2, r3
 800921c:	43db      	mvns	r3, r3
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	4013      	ands	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a40      	ldr	r2, [pc, #256]	; (8009328 <HAL_GPIO_Init+0x2c0>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d013      	beq.n	8009254 <HAL_GPIO_Init+0x1ec>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a3f      	ldr	r2, [pc, #252]	; (800932c <HAL_GPIO_Init+0x2c4>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d00d      	beq.n	8009250 <HAL_GPIO_Init+0x1e8>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a3e      	ldr	r2, [pc, #248]	; (8009330 <HAL_GPIO_Init+0x2c8>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d007      	beq.n	800924c <HAL_GPIO_Init+0x1e4>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a3d      	ldr	r2, [pc, #244]	; (8009334 <HAL_GPIO_Init+0x2cc>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d101      	bne.n	8009248 <HAL_GPIO_Init+0x1e0>
 8009244:	2303      	movs	r3, #3
 8009246:	e006      	b.n	8009256 <HAL_GPIO_Init+0x1ee>
 8009248:	2304      	movs	r3, #4
 800924a:	e004      	b.n	8009256 <HAL_GPIO_Init+0x1ee>
 800924c:	2302      	movs	r3, #2
 800924e:	e002      	b.n	8009256 <HAL_GPIO_Init+0x1ee>
 8009250:	2301      	movs	r3, #1
 8009252:	e000      	b.n	8009256 <HAL_GPIO_Init+0x1ee>
 8009254:	2300      	movs	r3, #0
 8009256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009258:	f002 0203 	and.w	r2, r2, #3
 800925c:	0092      	lsls	r2, r2, #2
 800925e:	4093      	lsls	r3, r2
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	4313      	orrs	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009266:	492f      	ldr	r1, [pc, #188]	; (8009324 <HAL_GPIO_Init+0x2bc>)
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	089b      	lsrs	r3, r3, #2
 800926c:	3302      	adds	r3, #2
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d006      	beq.n	800928e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009280:	4b2d      	ldr	r3, [pc, #180]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	492c      	ldr	r1, [pc, #176]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	4313      	orrs	r3, r2
 800928a:	600b      	str	r3, [r1, #0]
 800928c:	e006      	b.n	800929c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800928e:	4b2a      	ldr	r3, [pc, #168]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	43db      	mvns	r3, r3
 8009296:	4928      	ldr	r1, [pc, #160]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 8009298:	4013      	ands	r3, r2
 800929a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d006      	beq.n	80092b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80092a8:	4b23      	ldr	r3, [pc, #140]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	4922      	ldr	r1, [pc, #136]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	604b      	str	r3, [r1, #4]
 80092b4:	e006      	b.n	80092c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80092b6:	4b20      	ldr	r3, [pc, #128]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	43db      	mvns	r3, r3
 80092be:	491e      	ldr	r1, [pc, #120]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 80092c0:	4013      	ands	r3, r2
 80092c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d006      	beq.n	80092de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80092d0:	4b19      	ldr	r3, [pc, #100]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	4918      	ldr	r1, [pc, #96]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	4313      	orrs	r3, r2
 80092da:	608b      	str	r3, [r1, #8]
 80092dc:	e006      	b.n	80092ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80092de:	4b16      	ldr	r3, [pc, #88]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 80092e0:	689a      	ldr	r2, [r3, #8]
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	43db      	mvns	r3, r3
 80092e6:	4914      	ldr	r1, [pc, #80]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 80092e8:	4013      	ands	r3, r2
 80092ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d021      	beq.n	800933c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80092f8:	4b0f      	ldr	r3, [pc, #60]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 80092fa:	68da      	ldr	r2, [r3, #12]
 80092fc:	490e      	ldr	r1, [pc, #56]	; (8009338 <HAL_GPIO_Init+0x2d0>)
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	4313      	orrs	r3, r2
 8009302:	60cb      	str	r3, [r1, #12]
 8009304:	e021      	b.n	800934a <HAL_GPIO_Init+0x2e2>
 8009306:	bf00      	nop
 8009308:	10320000 	.word	0x10320000
 800930c:	10310000 	.word	0x10310000
 8009310:	10220000 	.word	0x10220000
 8009314:	10210000 	.word	0x10210000
 8009318:	10120000 	.word	0x10120000
 800931c:	10110000 	.word	0x10110000
 8009320:	40021000 	.word	0x40021000
 8009324:	40010000 	.word	0x40010000
 8009328:	40010800 	.word	0x40010800
 800932c:	40010c00 	.word	0x40010c00
 8009330:	40011000 	.word	0x40011000
 8009334:	40011400 	.word	0x40011400
 8009338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800933c:	4b0b      	ldr	r3, [pc, #44]	; (800936c <HAL_GPIO_Init+0x304>)
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	43db      	mvns	r3, r3
 8009344:	4909      	ldr	r1, [pc, #36]	; (800936c <HAL_GPIO_Init+0x304>)
 8009346:	4013      	ands	r3, r2
 8009348:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	3301      	adds	r3, #1
 800934e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	fa22 f303 	lsr.w	r3, r2, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	f47f ae8e 	bne.w	800907c <HAL_GPIO_Init+0x14>
  }
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	372c      	adds	r7, #44	; 0x2c
 8009366:	46bd      	mov	sp, r7
 8009368:	bc80      	pop	{r7}
 800936a:	4770      	bx	lr
 800936c:	40010400 	.word	0x40010400

08009370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	807b      	strh	r3, [r7, #2]
 800937c:	4613      	mov	r3, r2
 800937e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009380:	787b      	ldrb	r3, [r7, #1]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d003      	beq.n	800938e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009386:	887a      	ldrh	r2, [r7, #2]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800938c:	e003      	b.n	8009396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800938e:	887b      	ldrh	r3, [r7, #2]
 8009390:	041a      	lsls	r2, r3, #16
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	611a      	str	r2, [r3, #16]
}
 8009396:	bf00      	nop
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	bc80      	pop	{r7}
 800939e:	4770      	bx	lr

080093a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	460b      	mov	r3, r1
 80093aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80093b2:	887a      	ldrh	r2, [r7, #2]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	4013      	ands	r3, r2
 80093b8:	041a      	lsls	r2, r3, #16
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	43d9      	mvns	r1, r3
 80093be:	887b      	ldrh	r3, [r7, #2]
 80093c0:	400b      	ands	r3, r1
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	611a      	str	r2, [r3, #16]
}
 80093c8:	bf00      	nop
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bc80      	pop	{r7}
 80093d0:	4770      	bx	lr
	...

080093d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d101      	bne.n	80093e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e171      	b.n	80096ca <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d12c      	bne.n	800944c <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a77      	ldr	r2, [pc, #476]	; (80095dc <HAL_I2C_Init+0x208>)
 80093fe:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a77      	ldr	r2, [pc, #476]	; (80095e0 <HAL_I2C_Init+0x20c>)
 8009404:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a76      	ldr	r2, [pc, #472]	; (80095e4 <HAL_I2C_Init+0x210>)
 800940a:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a76      	ldr	r2, [pc, #472]	; (80095e8 <HAL_I2C_Init+0x214>)
 8009410:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a75      	ldr	r2, [pc, #468]	; (80095ec <HAL_I2C_Init+0x218>)
 8009416:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a75      	ldr	r2, [pc, #468]	; (80095f0 <HAL_I2C_Init+0x21c>)
 800941c:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a74      	ldr	r2, [pc, #464]	; (80095f4 <HAL_I2C_Init+0x220>)
 8009422:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a74      	ldr	r2, [pc, #464]	; (80095f8 <HAL_I2C_Init+0x224>)
 8009428:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a73      	ldr	r2, [pc, #460]	; (80095fc <HAL_I2C_Init+0x228>)
 800942e:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a73      	ldr	r2, [pc, #460]	; (8009600 <HAL_I2C_Init+0x22c>)
 8009434:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800943a:	2b00      	cmp	r3, #0
 800943c:	d102      	bne.n	8009444 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a70      	ldr	r2, [pc, #448]	; (8009604 <HAL_I2C_Init+0x230>)
 8009442:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2224      	movs	r2, #36	; 0x24
 8009450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 0201 	bic.w	r2, r2, #1
 8009462:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009472:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009482:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009484:	f000 fd58 	bl	8009f38 <HAL_RCC_GetPCLK1Freq>
 8009488:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	4a5e      	ldr	r2, [pc, #376]	; (8009608 <HAL_I2C_Init+0x234>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d807      	bhi.n	80094a4 <HAL_I2C_Init+0xd0>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4a5d      	ldr	r2, [pc, #372]	; (800960c <HAL_I2C_Init+0x238>)
 8009498:	4293      	cmp	r3, r2
 800949a:	bf94      	ite	ls
 800949c:	2301      	movls	r3, #1
 800949e:	2300      	movhi	r3, #0
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	e006      	b.n	80094b2 <HAL_I2C_Init+0xde>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4a5a      	ldr	r2, [pc, #360]	; (8009610 <HAL_I2C_Init+0x23c>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	bf94      	ite	ls
 80094ac:	2301      	movls	r3, #1
 80094ae:	2300      	movhi	r3, #0
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e107      	b.n	80096ca <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	4a55      	ldr	r2, [pc, #340]	; (8009614 <HAL_I2C_Init+0x240>)
 80094be:	fba2 2303 	umull	r2, r3, r2, r3
 80094c2:	0c9b      	lsrs	r3, r3, #18
 80094c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6a1b      	ldr	r3, [r3, #32]
 80094e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	4a47      	ldr	r2, [pc, #284]	; (8009608 <HAL_I2C_Init+0x234>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d802      	bhi.n	80094f4 <HAL_I2C_Init+0x120>
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	3301      	adds	r3, #1
 80094f2:	e009      	b.n	8009508 <HAL_I2C_Init+0x134>
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80094fa:	fb02 f303 	mul.w	r3, r2, r3
 80094fe:	4a46      	ldr	r2, [pc, #280]	; (8009618 <HAL_I2C_Init+0x244>)
 8009500:	fba2 2303 	umull	r2, r3, r2, r3
 8009504:	099b      	lsrs	r3, r3, #6
 8009506:	3301      	adds	r3, #1
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	6812      	ldr	r2, [r2, #0]
 800950c:	430b      	orrs	r3, r1
 800950e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800951a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	4939      	ldr	r1, [pc, #228]	; (8009608 <HAL_I2C_Init+0x234>)
 8009524:	428b      	cmp	r3, r1
 8009526:	d819      	bhi.n	800955c <HAL_I2C_Init+0x188>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	1e59      	subs	r1, r3, #1
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	005b      	lsls	r3, r3, #1
 8009532:	fbb1 f3f3 	udiv	r3, r1, r3
 8009536:	1c59      	adds	r1, r3, #1
 8009538:	f640 73fc 	movw	r3, #4092	; 0xffc
 800953c:	400b      	ands	r3, r1
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00a      	beq.n	8009558 <HAL_I2C_Init+0x184>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	1e59      	subs	r1, r3, #1
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009550:	3301      	adds	r3, #1
 8009552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009556:	e071      	b.n	800963c <HAL_I2C_Init+0x268>
 8009558:	2304      	movs	r3, #4
 800955a:	e06f      	b.n	800963c <HAL_I2C_Init+0x268>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d111      	bne.n	8009588 <HAL_I2C_Init+0x1b4>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	1e58      	subs	r0, r3, #1
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6859      	ldr	r1, [r3, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	440b      	add	r3, r1
 8009572:	fbb0 f3f3 	udiv	r3, r0, r3
 8009576:	3301      	adds	r3, #1
 8009578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800957c:	2b00      	cmp	r3, #0
 800957e:	bf0c      	ite	eq
 8009580:	2301      	moveq	r3, #1
 8009582:	2300      	movne	r3, #0
 8009584:	b2db      	uxtb	r3, r3
 8009586:	e012      	b.n	80095ae <HAL_I2C_Init+0x1da>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	1e58      	subs	r0, r3, #1
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6859      	ldr	r1, [r3, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	440b      	add	r3, r1
 8009596:	0099      	lsls	r1, r3, #2
 8009598:	440b      	add	r3, r1
 800959a:	fbb0 f3f3 	udiv	r3, r0, r3
 800959e:	3301      	adds	r3, #1
 80095a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	bf0c      	ite	eq
 80095a8:	2301      	moveq	r3, #1
 80095aa:	2300      	movne	r3, #0
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <HAL_I2C_Init+0x1e2>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e042      	b.n	800963c <HAL_I2C_Init+0x268>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d12e      	bne.n	800961c <HAL_I2C_Init+0x248>
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	1e58      	subs	r0, r3, #1
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6859      	ldr	r1, [r3, #4]
 80095c6:	460b      	mov	r3, r1
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	440b      	add	r3, r1
 80095cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80095d0:	3301      	adds	r3, #1
 80095d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095da:	e02f      	b.n	800963c <HAL_I2C_Init+0x268>
 80095dc:	080096d5 	.word	0x080096d5
 80095e0:	080096e7 	.word	0x080096e7
 80095e4:	080096f9 	.word	0x080096f9
 80095e8:	0800970b 	.word	0x0800970b
 80095ec:	08009737 	.word	0x08009737
 80095f0:	08009749 	.word	0x08009749
 80095f4:	0800975b 	.word	0x0800975b
 80095f8:	0800976d 	.word	0x0800976d
 80095fc:	0800977f 	.word	0x0800977f
 8009600:	0800971d 	.word	0x0800971d
 8009604:	0800746d 	.word	0x0800746d
 8009608:	000186a0 	.word	0x000186a0
 800960c:	001e847f 	.word	0x001e847f
 8009610:	003d08ff 	.word	0x003d08ff
 8009614:	431bde83 	.word	0x431bde83
 8009618:	10624dd3 	.word	0x10624dd3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	1e58      	subs	r0, r3, #1
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6859      	ldr	r1, [r3, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	440b      	add	r3, r1
 800962a:	0099      	lsls	r1, r3, #2
 800962c:	440b      	add	r3, r1
 800962e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009632:	3301      	adds	r3, #1
 8009634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800963c:	6879      	ldr	r1, [r7, #4]
 800963e:	6809      	ldr	r1, [r1, #0]
 8009640:	4313      	orrs	r3, r2
 8009642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	69da      	ldr	r2, [r3, #28]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	431a      	orrs	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	430a      	orrs	r2, r1
 800965e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800966a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	6911      	ldr	r1, [r2, #16]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	68d2      	ldr	r2, [r2, #12]
 8009676:	4311      	orrs	r1, r2
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	6812      	ldr	r2, [r2, #0]
 800967c:	430b      	orrs	r3, r1
 800967e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	695a      	ldr	r2, [r3, #20]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	431a      	orrs	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	430a      	orrs	r2, r1
 800969a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f042 0201 	orr.w	r2, r2, #1
 80096aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop

080096d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr

080096e6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80096ee:	bf00      	nop
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bc80      	pop	{r7}
 80096f6:	4770      	bx	lr

080096f8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	bc80      	pop	{r7}
 8009708:	4770      	bx	lr

0800970a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800970a:	b480      	push	{r7}
 800970c:	b083      	sub	sp, #12
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009712:	bf00      	nop
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	bc80      	pop	{r7}
 800971a:	4770      	bx	lr

0800971c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	460b      	mov	r3, r1
 8009726:	70fb      	strb	r3, [r7, #3]
 8009728:	4613      	mov	r3, r2
 800972a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	bc80      	pop	{r7}
 8009734:	4770      	bx	lr

08009736 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009736:	b480      	push	{r7}
 8009738:	b083      	sub	sp, #12
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800973e:	bf00      	nop
 8009740:	370c      	adds	r7, #12
 8009742:	46bd      	mov	sp, r7
 8009744:	bc80      	pop	{r7}
 8009746:	4770      	bx	lr

08009748 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr

0800975a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009762:	bf00      	nop
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	bc80      	pop	{r7}
 800976a:	4770      	bx	lr

0800976c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	bc80      	pop	{r7}
 800977c:	4770      	bx	lr

0800977e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800977e:	b480      	push	{r7}
 8009780:	b083      	sub	sp, #12
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009786:	bf00      	nop
 8009788:	370c      	adds	r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	bc80      	pop	{r7}
 800978e:	4770      	bx	lr

08009790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e272      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0301 	and.w	r3, r3, #1
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 8087 	beq.w	80098be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80097b0:	4b92      	ldr	r3, [pc, #584]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f003 030c 	and.w	r3, r3, #12
 80097b8:	2b04      	cmp	r3, #4
 80097ba:	d00c      	beq.n	80097d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80097bc:	4b8f      	ldr	r3, [pc, #572]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	f003 030c 	and.w	r3, r3, #12
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d112      	bne.n	80097ee <HAL_RCC_OscConfig+0x5e>
 80097c8:	4b8c      	ldr	r3, [pc, #560]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097d4:	d10b      	bne.n	80097ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097d6:	4b89      	ldr	r3, [pc, #548]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d06c      	beq.n	80098bc <HAL_RCC_OscConfig+0x12c>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d168      	bne.n	80098bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e24c      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f6:	d106      	bne.n	8009806 <HAL_RCC_OscConfig+0x76>
 80097f8:	4b80      	ldr	r3, [pc, #512]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a7f      	ldr	r2, [pc, #508]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 80097fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009802:	6013      	str	r3, [r2, #0]
 8009804:	e02e      	b.n	8009864 <HAL_RCC_OscConfig+0xd4>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10c      	bne.n	8009828 <HAL_RCC_OscConfig+0x98>
 800980e:	4b7b      	ldr	r3, [pc, #492]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a7a      	ldr	r2, [pc, #488]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	4b78      	ldr	r3, [pc, #480]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a77      	ldr	r2, [pc, #476]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009824:	6013      	str	r3, [r2, #0]
 8009826:	e01d      	b.n	8009864 <HAL_RCC_OscConfig+0xd4>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009830:	d10c      	bne.n	800984c <HAL_RCC_OscConfig+0xbc>
 8009832:	4b72      	ldr	r3, [pc, #456]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a71      	ldr	r2, [pc, #452]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800983c:	6013      	str	r3, [r2, #0]
 800983e:	4b6f      	ldr	r3, [pc, #444]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a6e      	ldr	r2, [pc, #440]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009848:	6013      	str	r3, [r2, #0]
 800984a:	e00b      	b.n	8009864 <HAL_RCC_OscConfig+0xd4>
 800984c:	4b6b      	ldr	r3, [pc, #428]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a6a      	ldr	r2, [pc, #424]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	4b68      	ldr	r3, [pc, #416]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a67      	ldr	r2, [pc, #412]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 800985e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009862:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d013      	beq.n	8009894 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800986c:	f7fe f91a 	bl	8007aa4 <HAL_GetTick>
 8009870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009872:	e008      	b.n	8009886 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009874:	f7fe f916 	bl	8007aa4 <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	2b64      	cmp	r3, #100	; 0x64
 8009880:	d901      	bls.n	8009886 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e200      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009886:	4b5d      	ldr	r3, [pc, #372]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d0f0      	beq.n	8009874 <HAL_RCC_OscConfig+0xe4>
 8009892:	e014      	b.n	80098be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009894:	f7fe f906 	bl	8007aa4 <HAL_GetTick>
 8009898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800989a:	e008      	b.n	80098ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800989c:	f7fe f902 	bl	8007aa4 <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	2b64      	cmp	r3, #100	; 0x64
 80098a8:	d901      	bls.n	80098ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e1ec      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098ae:	4b53      	ldr	r3, [pc, #332]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1f0      	bne.n	800989c <HAL_RCC_OscConfig+0x10c>
 80098ba:	e000      	b.n	80098be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d063      	beq.n	8009992 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80098ca:	4b4c      	ldr	r3, [pc, #304]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f003 030c 	and.w	r3, r3, #12
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00b      	beq.n	80098ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80098d6:	4b49      	ldr	r3, [pc, #292]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f003 030c 	and.w	r3, r3, #12
 80098de:	2b08      	cmp	r3, #8
 80098e0:	d11c      	bne.n	800991c <HAL_RCC_OscConfig+0x18c>
 80098e2:	4b46      	ldr	r3, [pc, #280]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d116      	bne.n	800991c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098ee:	4b43      	ldr	r3, [pc, #268]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d005      	beq.n	8009906 <HAL_RCC_OscConfig+0x176>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d001      	beq.n	8009906 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e1c0      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009906:	4b3d      	ldr	r3, [pc, #244]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	00db      	lsls	r3, r3, #3
 8009914:	4939      	ldr	r1, [pc, #228]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009916:	4313      	orrs	r3, r2
 8009918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800991a:	e03a      	b.n	8009992 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d020      	beq.n	8009966 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009924:	4b36      	ldr	r3, [pc, #216]	; (8009a00 <HAL_RCC_OscConfig+0x270>)
 8009926:	2201      	movs	r2, #1
 8009928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800992a:	f7fe f8bb 	bl	8007aa4 <HAL_GetTick>
 800992e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009930:	e008      	b.n	8009944 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009932:	f7fe f8b7 	bl	8007aa4 <HAL_GetTick>
 8009936:	4602      	mov	r2, r0
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	2b02      	cmp	r3, #2
 800993e:	d901      	bls.n	8009944 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009940:	2303      	movs	r3, #3
 8009942:	e1a1      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009944:	4b2d      	ldr	r3, [pc, #180]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 0302 	and.w	r3, r3, #2
 800994c:	2b00      	cmp	r3, #0
 800994e:	d0f0      	beq.n	8009932 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009950:	4b2a      	ldr	r3, [pc, #168]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	00db      	lsls	r3, r3, #3
 800995e:	4927      	ldr	r1, [pc, #156]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009960:	4313      	orrs	r3, r2
 8009962:	600b      	str	r3, [r1, #0]
 8009964:	e015      	b.n	8009992 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009966:	4b26      	ldr	r3, [pc, #152]	; (8009a00 <HAL_RCC_OscConfig+0x270>)
 8009968:	2200      	movs	r2, #0
 800996a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800996c:	f7fe f89a 	bl	8007aa4 <HAL_GetTick>
 8009970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009972:	e008      	b.n	8009986 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009974:	f7fe f896 	bl	8007aa4 <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	2b02      	cmp	r3, #2
 8009980:	d901      	bls.n	8009986 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e180      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009986:	4b1d      	ldr	r3, [pc, #116]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0302 	and.w	r3, r3, #2
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1f0      	bne.n	8009974 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0308 	and.w	r3, r3, #8
 800999a:	2b00      	cmp	r3, #0
 800999c:	d03a      	beq.n	8009a14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d019      	beq.n	80099da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099a6:	4b17      	ldr	r3, [pc, #92]	; (8009a04 <HAL_RCC_OscConfig+0x274>)
 80099a8:	2201      	movs	r2, #1
 80099aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099ac:	f7fe f87a 	bl	8007aa4 <HAL_GetTick>
 80099b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099b2:	e008      	b.n	80099c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099b4:	f7fe f876 	bl	8007aa4 <HAL_GetTick>
 80099b8:	4602      	mov	r2, r0
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d901      	bls.n	80099c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e160      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099c6:	4b0d      	ldr	r3, [pc, #52]	; (80099fc <HAL_RCC_OscConfig+0x26c>)
 80099c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ca:	f003 0302 	and.w	r3, r3, #2
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0f0      	beq.n	80099b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80099d2:	2001      	movs	r0, #1
 80099d4:	f000 fad8 	bl	8009f88 <RCC_Delay>
 80099d8:	e01c      	b.n	8009a14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80099da:	4b0a      	ldr	r3, [pc, #40]	; (8009a04 <HAL_RCC_OscConfig+0x274>)
 80099dc:	2200      	movs	r2, #0
 80099de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099e0:	f7fe f860 	bl	8007aa4 <HAL_GetTick>
 80099e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099e6:	e00f      	b.n	8009a08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099e8:	f7fe f85c 	bl	8007aa4 <HAL_GetTick>
 80099ec:	4602      	mov	r2, r0
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d908      	bls.n	8009a08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80099f6:	2303      	movs	r3, #3
 80099f8:	e146      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
 80099fa:	bf00      	nop
 80099fc:	40021000 	.word	0x40021000
 8009a00:	42420000 	.word	0x42420000
 8009a04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a08:	4b92      	ldr	r3, [pc, #584]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0c:	f003 0302 	and.w	r3, r3, #2
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e9      	bne.n	80099e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0304 	and.w	r3, r3, #4
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 80a6 	beq.w	8009b6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a22:	2300      	movs	r3, #0
 8009a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a26:	4b8b      	ldr	r3, [pc, #556]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10d      	bne.n	8009a4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a32:	4b88      	ldr	r3, [pc, #544]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009a34:	69db      	ldr	r3, [r3, #28]
 8009a36:	4a87      	ldr	r2, [pc, #540]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a3c:	61d3      	str	r3, [r2, #28]
 8009a3e:	4b85      	ldr	r3, [pc, #532]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a46:	60bb      	str	r3, [r7, #8]
 8009a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a4e:	4b82      	ldr	r3, [pc, #520]	; (8009c58 <HAL_RCC_OscConfig+0x4c8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d118      	bne.n	8009a8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a5a:	4b7f      	ldr	r3, [pc, #508]	; (8009c58 <HAL_RCC_OscConfig+0x4c8>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a7e      	ldr	r2, [pc, #504]	; (8009c58 <HAL_RCC_OscConfig+0x4c8>)
 8009a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a66:	f7fe f81d 	bl	8007aa4 <HAL_GetTick>
 8009a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a6c:	e008      	b.n	8009a80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a6e:	f7fe f819 	bl	8007aa4 <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b64      	cmp	r3, #100	; 0x64
 8009a7a:	d901      	bls.n	8009a80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e103      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a80:	4b75      	ldr	r3, [pc, #468]	; (8009c58 <HAL_RCC_OscConfig+0x4c8>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d0f0      	beq.n	8009a6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d106      	bne.n	8009aa2 <HAL_RCC_OscConfig+0x312>
 8009a94:	4b6f      	ldr	r3, [pc, #444]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	4a6e      	ldr	r2, [pc, #440]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009a9a:	f043 0301 	orr.w	r3, r3, #1
 8009a9e:	6213      	str	r3, [r2, #32]
 8009aa0:	e02d      	b.n	8009afe <HAL_RCC_OscConfig+0x36e>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10c      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x334>
 8009aaa:	4b6a      	ldr	r3, [pc, #424]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	4a69      	ldr	r2, [pc, #420]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009ab0:	f023 0301 	bic.w	r3, r3, #1
 8009ab4:	6213      	str	r3, [r2, #32]
 8009ab6:	4b67      	ldr	r3, [pc, #412]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	4a66      	ldr	r2, [pc, #408]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009abc:	f023 0304 	bic.w	r3, r3, #4
 8009ac0:	6213      	str	r3, [r2, #32]
 8009ac2:	e01c      	b.n	8009afe <HAL_RCC_OscConfig+0x36e>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	2b05      	cmp	r3, #5
 8009aca:	d10c      	bne.n	8009ae6 <HAL_RCC_OscConfig+0x356>
 8009acc:	4b61      	ldr	r3, [pc, #388]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	4a60      	ldr	r2, [pc, #384]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009ad2:	f043 0304 	orr.w	r3, r3, #4
 8009ad6:	6213      	str	r3, [r2, #32]
 8009ad8:	4b5e      	ldr	r3, [pc, #376]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009ada:	6a1b      	ldr	r3, [r3, #32]
 8009adc:	4a5d      	ldr	r2, [pc, #372]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009ade:	f043 0301 	orr.w	r3, r3, #1
 8009ae2:	6213      	str	r3, [r2, #32]
 8009ae4:	e00b      	b.n	8009afe <HAL_RCC_OscConfig+0x36e>
 8009ae6:	4b5b      	ldr	r3, [pc, #364]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	4a5a      	ldr	r2, [pc, #360]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009aec:	f023 0301 	bic.w	r3, r3, #1
 8009af0:	6213      	str	r3, [r2, #32]
 8009af2:	4b58      	ldr	r3, [pc, #352]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	4a57      	ldr	r2, [pc, #348]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009af8:	f023 0304 	bic.w	r3, r3, #4
 8009afc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d015      	beq.n	8009b32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b06:	f7fd ffcd 	bl	8007aa4 <HAL_GetTick>
 8009b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b0c:	e00a      	b.n	8009b24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b0e:	f7fd ffc9 	bl	8007aa4 <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d901      	bls.n	8009b24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e0b1      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b24:	4b4b      	ldr	r3, [pc, #300]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009b26:	6a1b      	ldr	r3, [r3, #32]
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0ee      	beq.n	8009b0e <HAL_RCC_OscConfig+0x37e>
 8009b30:	e014      	b.n	8009b5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b32:	f7fd ffb7 	bl	8007aa4 <HAL_GetTick>
 8009b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b38:	e00a      	b.n	8009b50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b3a:	f7fd ffb3 	bl	8007aa4 <HAL_GetTick>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d901      	bls.n	8009b50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e09b      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b50:	4b40      	ldr	r3, [pc, #256]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1ee      	bne.n	8009b3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d105      	bne.n	8009b6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b62:	4b3c      	ldr	r3, [pc, #240]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009b64:	69db      	ldr	r3, [r3, #28]
 8009b66:	4a3b      	ldr	r2, [pc, #236]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	69db      	ldr	r3, [r3, #28]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 8087 	beq.w	8009c86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b78:	4b36      	ldr	r3, [pc, #216]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	f003 030c 	and.w	r3, r3, #12
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	d061      	beq.n	8009c48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d146      	bne.n	8009c1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b8c:	4b33      	ldr	r3, [pc, #204]	; (8009c5c <HAL_RCC_OscConfig+0x4cc>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b92:	f7fd ff87 	bl	8007aa4 <HAL_GetTick>
 8009b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b98:	e008      	b.n	8009bac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b9a:	f7fd ff83 	bl	8007aa4 <HAL_GetTick>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d901      	bls.n	8009bac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e06d      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009bac:	4b29      	ldr	r3, [pc, #164]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1f0      	bne.n	8009b9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bc0:	d108      	bne.n	8009bd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009bc2:	4b24      	ldr	r3, [pc, #144]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	4921      	ldr	r1, [pc, #132]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009bd4:	4b1f      	ldr	r3, [pc, #124]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a19      	ldr	r1, [r3, #32]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be4:	430b      	orrs	r3, r1
 8009be6:	491b      	ldr	r1, [pc, #108]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009be8:	4313      	orrs	r3, r2
 8009bea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009bec:	4b1b      	ldr	r3, [pc, #108]	; (8009c5c <HAL_RCC_OscConfig+0x4cc>)
 8009bee:	2201      	movs	r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bf2:	f7fd ff57 	bl	8007aa4 <HAL_GetTick>
 8009bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009bf8:	e008      	b.n	8009c0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bfa:	f7fd ff53 	bl	8007aa4 <HAL_GetTick>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d901      	bls.n	8009c0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e03d      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009c0c:	4b11      	ldr	r3, [pc, #68]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0f0      	beq.n	8009bfa <HAL_RCC_OscConfig+0x46a>
 8009c18:	e035      	b.n	8009c86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c1a:	4b10      	ldr	r3, [pc, #64]	; (8009c5c <HAL_RCC_OscConfig+0x4cc>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c20:	f7fd ff40 	bl	8007aa4 <HAL_GetTick>
 8009c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009c26:	e008      	b.n	8009c3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c28:	f7fd ff3c 	bl	8007aa4 <HAL_GetTick>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d901      	bls.n	8009c3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e026      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009c3a:	4b06      	ldr	r3, [pc, #24]	; (8009c54 <HAL_RCC_OscConfig+0x4c4>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1f0      	bne.n	8009c28 <HAL_RCC_OscConfig+0x498>
 8009c46:	e01e      	b.n	8009c86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	69db      	ldr	r3, [r3, #28]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d107      	bne.n	8009c60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e019      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
 8009c54:	40021000 	.word	0x40021000
 8009c58:	40007000 	.word	0x40007000
 8009c5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <HAL_RCC_OscConfig+0x500>)
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a1b      	ldr	r3, [r3, #32]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d106      	bne.n	8009c82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d001      	beq.n	8009c86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e000      	b.n	8009c88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	40021000 	.word	0x40021000

08009c94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e0d0      	b.n	8009e4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ca8:	4b6a      	ldr	r3, [pc, #424]	; (8009e54 <HAL_RCC_ClockConfig+0x1c0>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 0307 	and.w	r3, r3, #7
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d910      	bls.n	8009cd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cb6:	4b67      	ldr	r3, [pc, #412]	; (8009e54 <HAL_RCC_ClockConfig+0x1c0>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f023 0207 	bic.w	r2, r3, #7
 8009cbe:	4965      	ldr	r1, [pc, #404]	; (8009e54 <HAL_RCC_ClockConfig+0x1c0>)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cc6:	4b63      	ldr	r3, [pc, #396]	; (8009e54 <HAL_RCC_ClockConfig+0x1c0>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 0307 	and.w	r3, r3, #7
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d001      	beq.n	8009cd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e0b8      	b.n	8009e4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d020      	beq.n	8009d26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d005      	beq.n	8009cfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009cf0:	4b59      	ldr	r3, [pc, #356]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	4a58      	ldr	r2, [pc, #352]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009cf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009cfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 0308 	and.w	r3, r3, #8
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d08:	4b53      	ldr	r3, [pc, #332]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	4a52      	ldr	r2, [pc, #328]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009d12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d14:	4b50      	ldr	r3, [pc, #320]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	494d      	ldr	r1, [pc, #308]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d22:	4313      	orrs	r3, r2
 8009d24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d040      	beq.n	8009db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d107      	bne.n	8009d4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d3a:	4b47      	ldr	r3, [pc, #284]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d115      	bne.n	8009d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e07f      	b.n	8009e4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d107      	bne.n	8009d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d52:	4b41      	ldr	r3, [pc, #260]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d109      	bne.n	8009d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e073      	b.n	8009e4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d62:	4b3d      	ldr	r3, [pc, #244]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0302 	and.w	r3, r3, #2
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d101      	bne.n	8009d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e06b      	b.n	8009e4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d72:	4b39      	ldr	r3, [pc, #228]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f023 0203 	bic.w	r2, r3, #3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	4936      	ldr	r1, [pc, #216]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009d80:	4313      	orrs	r3, r2
 8009d82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d84:	f7fd fe8e 	bl	8007aa4 <HAL_GetTick>
 8009d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d8a:	e00a      	b.n	8009da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d8c:	f7fd fe8a 	bl	8007aa4 <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d901      	bls.n	8009da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	e053      	b.n	8009e4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009da2:	4b2d      	ldr	r3, [pc, #180]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f003 020c 	and.w	r2, r3, #12
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d1eb      	bne.n	8009d8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009db4:	4b27      	ldr	r3, [pc, #156]	; (8009e54 <HAL_RCC_ClockConfig+0x1c0>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0307 	and.w	r3, r3, #7
 8009dbc:	683a      	ldr	r2, [r7, #0]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d210      	bcs.n	8009de4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dc2:	4b24      	ldr	r3, [pc, #144]	; (8009e54 <HAL_RCC_ClockConfig+0x1c0>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f023 0207 	bic.w	r2, r3, #7
 8009dca:	4922      	ldr	r1, [pc, #136]	; (8009e54 <HAL_RCC_ClockConfig+0x1c0>)
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dd2:	4b20      	ldr	r3, [pc, #128]	; (8009e54 <HAL_RCC_ClockConfig+0x1c0>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f003 0307 	and.w	r3, r3, #7
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d001      	beq.n	8009de4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	e032      	b.n	8009e4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 0304 	and.w	r3, r3, #4
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d008      	beq.n	8009e02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009df0:	4b19      	ldr	r3, [pc, #100]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	4916      	ldr	r1, [pc, #88]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0308 	and.w	r3, r3, #8
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d009      	beq.n	8009e22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009e0e:	4b12      	ldr	r3, [pc, #72]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	00db      	lsls	r3, r3, #3
 8009e1c:	490e      	ldr	r1, [pc, #56]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009e22:	f000 f821 	bl	8009e68 <HAL_RCC_GetSysClockFreq>
 8009e26:	4602      	mov	r2, r0
 8009e28:	4b0b      	ldr	r3, [pc, #44]	; (8009e58 <HAL_RCC_ClockConfig+0x1c4>)
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	091b      	lsrs	r3, r3, #4
 8009e2e:	f003 030f 	and.w	r3, r3, #15
 8009e32:	490a      	ldr	r1, [pc, #40]	; (8009e5c <HAL_RCC_ClockConfig+0x1c8>)
 8009e34:	5ccb      	ldrb	r3, [r1, r3]
 8009e36:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3a:	4a09      	ldr	r2, [pc, #36]	; (8009e60 <HAL_RCC_ClockConfig+0x1cc>)
 8009e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009e3e:	4b09      	ldr	r3, [pc, #36]	; (8009e64 <HAL_RCC_ClockConfig+0x1d0>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fd fdec 	bl	8007a20 <HAL_InitTick>

  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	40022000 	.word	0x40022000
 8009e58:	40021000 	.word	0x40021000
 8009e5c:	0800cdf0 	.word	0x0800cdf0
 8009e60:	20000458 	.word	0x20000458
 8009e64:	2000045c 	.word	0x2000045c

08009e68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e68:	b490      	push	{r4, r7}
 8009e6a:	b08a      	sub	sp, #40	; 0x28
 8009e6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009e6e:	4b29      	ldr	r3, [pc, #164]	; (8009f14 <HAL_RCC_GetSysClockFreq+0xac>)
 8009e70:	1d3c      	adds	r4, r7, #4
 8009e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009e78:	f240 2301 	movw	r3, #513	; 0x201
 8009e7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	61fb      	str	r3, [r7, #28]
 8009e82:	2300      	movs	r3, #0
 8009e84:	61bb      	str	r3, [r7, #24]
 8009e86:	2300      	movs	r3, #0
 8009e88:	627b      	str	r3, [r7, #36]	; 0x24
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009e92:	4b21      	ldr	r3, [pc, #132]	; (8009f18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	f003 030c 	and.w	r3, r3, #12
 8009e9e:	2b04      	cmp	r3, #4
 8009ea0:	d002      	beq.n	8009ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8009ea2:	2b08      	cmp	r3, #8
 8009ea4:	d003      	beq.n	8009eae <HAL_RCC_GetSysClockFreq+0x46>
 8009ea6:	e02b      	b.n	8009f00 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009ea8:	4b1c      	ldr	r3, [pc, #112]	; (8009f1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8009eaa:	623b      	str	r3, [r7, #32]
      break;
 8009eac:	e02b      	b.n	8009f06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	0c9b      	lsrs	r3, r3, #18
 8009eb2:	f003 030f 	and.w	r3, r3, #15
 8009eb6:	3328      	adds	r3, #40	; 0x28
 8009eb8:	443b      	add	r3, r7
 8009eba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009ebe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d012      	beq.n	8009ef0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009eca:	4b13      	ldr	r3, [pc, #76]	; (8009f18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	0c5b      	lsrs	r3, r3, #17
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	3328      	adds	r3, #40	; 0x28
 8009ed6:	443b      	add	r3, r7
 8009ed8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009edc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	4a0e      	ldr	r2, [pc, #56]	; (8009f1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8009ee2:	fb03 f202 	mul.w	r2, r3, r2
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eec:	627b      	str	r3, [r7, #36]	; 0x24
 8009eee:	e004      	b.n	8009efa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	4a0b      	ldr	r2, [pc, #44]	; (8009f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ef4:	fb02 f303 	mul.w	r3, r2, r3
 8009ef8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	623b      	str	r3, [r7, #32]
      break;
 8009efe:	e002      	b.n	8009f06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009f00:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8009f02:	623b      	str	r3, [r7, #32]
      break;
 8009f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f06:	6a3b      	ldr	r3, [r7, #32]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3728      	adds	r7, #40	; 0x28
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bc90      	pop	{r4, r7}
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	0800c630 	.word	0x0800c630
 8009f18:	40021000 	.word	0x40021000
 8009f1c:	007a1200 	.word	0x007a1200
 8009f20:	003d0900 	.word	0x003d0900

08009f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f24:	b480      	push	{r7}
 8009f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f28:	4b02      	ldr	r3, [pc, #8]	; (8009f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bc80      	pop	{r7}
 8009f32:	4770      	bx	lr
 8009f34:	20000458 	.word	0x20000458

08009f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009f3c:	f7ff fff2 	bl	8009f24 <HAL_RCC_GetHCLKFreq>
 8009f40:	4602      	mov	r2, r0
 8009f42:	4b05      	ldr	r3, [pc, #20]	; (8009f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	0a1b      	lsrs	r3, r3, #8
 8009f48:	f003 0307 	and.w	r3, r3, #7
 8009f4c:	4903      	ldr	r1, [pc, #12]	; (8009f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f4e:	5ccb      	ldrb	r3, [r1, r3]
 8009f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	40021000 	.word	0x40021000
 8009f5c:	0800ce00 	.word	0x0800ce00

08009f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009f64:	f7ff ffde 	bl	8009f24 <HAL_RCC_GetHCLKFreq>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	0adb      	lsrs	r3, r3, #11
 8009f70:	f003 0307 	and.w	r3, r3, #7
 8009f74:	4903      	ldr	r1, [pc, #12]	; (8009f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f76:	5ccb      	ldrb	r3, [r1, r3]
 8009f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	40021000 	.word	0x40021000
 8009f84:	0800ce00 	.word	0x0800ce00

08009f88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009f90:	4b0a      	ldr	r3, [pc, #40]	; (8009fbc <RCC_Delay+0x34>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a0a      	ldr	r2, [pc, #40]	; (8009fc0 <RCC_Delay+0x38>)
 8009f96:	fba2 2303 	umull	r2, r3, r2, r3
 8009f9a:	0a5b      	lsrs	r3, r3, #9
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	fb02 f303 	mul.w	r3, r2, r3
 8009fa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009fa4:	bf00      	nop
  }
  while (Delay --);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	1e5a      	subs	r2, r3, #1
 8009faa:	60fa      	str	r2, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1f9      	bne.n	8009fa4 <RCC_Delay+0x1c>
}
 8009fb0:	bf00      	nop
 8009fb2:	bf00      	nop
 8009fb4:	3714      	adds	r7, #20
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bc80      	pop	{r7}
 8009fba:	4770      	bx	lr
 8009fbc:	20000458 	.word	0x20000458
 8009fc0:	10624dd3 	.word	0x10624dd3

08009fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d101      	bne.n	8009fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e04c      	b.n	800a070 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d111      	bne.n	800a006 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fbfc 	bl	800a7e8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d102      	bne.n	8009ffe <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a1f      	ldr	r2, [pc, #124]	; (800a078 <HAL_TIM_Base_Init+0xb4>)
 8009ffc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2202      	movs	r2, #2
 800a00a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	3304      	adds	r3, #4
 800a016:	4619      	mov	r1, r3
 800a018:	4610      	mov	r0, r2
 800a01a:	f000 faed 	bl	800a5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	080074e9 	.word	0x080074e9

0800a07c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d001      	beq.n	800a094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e03a      	b.n	800a10a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2202      	movs	r2, #2
 800a098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68da      	ldr	r2, [r3, #12]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f042 0201 	orr.w	r2, r2, #1
 800a0aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a18      	ldr	r2, [pc, #96]	; (800a114 <HAL_TIM_Base_Start_IT+0x98>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d00e      	beq.n	800a0d4 <HAL_TIM_Base_Start_IT+0x58>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0be:	d009      	beq.n	800a0d4 <HAL_TIM_Base_Start_IT+0x58>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a14      	ldr	r2, [pc, #80]	; (800a118 <HAL_TIM_Base_Start_IT+0x9c>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d004      	beq.n	800a0d4 <HAL_TIM_Base_Start_IT+0x58>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a13      	ldr	r2, [pc, #76]	; (800a11c <HAL_TIM_Base_Start_IT+0xa0>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d111      	bne.n	800a0f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	f003 0307 	and.w	r3, r3, #7
 800a0de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2b06      	cmp	r3, #6
 800a0e4:	d010      	beq.n	800a108 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f042 0201 	orr.w	r2, r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0f6:	e007      	b.n	800a108 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f042 0201 	orr.w	r2, r2, #1
 800a106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	bc80      	pop	{r7}
 800a112:	4770      	bx	lr
 800a114:	40012c00 	.word	0x40012c00
 800a118:	40000400 	.word	0x40000400
 800a11c:	40000800 	.word	0x40000800

0800a120 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68da      	ldr	r2, [r3, #12]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f022 0201 	bic.w	r2, r2, #1
 800a136:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6a1a      	ldr	r2, [r3, #32]
 800a13e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a142:	4013      	ands	r3, r2
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10f      	bne.n	800a168 <HAL_TIM_Base_Stop_IT+0x48>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6a1a      	ldr	r2, [r3, #32]
 800a14e:	f240 4344 	movw	r3, #1092	; 0x444
 800a152:	4013      	ands	r3, r2
 800a154:	2b00      	cmp	r3, #0
 800a156:	d107      	bne.n	800a168 <HAL_TIM_Base_Stop_IT+0x48>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f022 0201 	bic.w	r2, r2, #1
 800a166:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	bc80      	pop	{r7}
 800a17a:	4770      	bx	lr

0800a17c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	f003 0302 	and.w	r3, r3, #2
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d128      	bne.n	800a1e4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	f003 0302 	and.w	r3, r3, #2
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d121      	bne.n	800a1e4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f06f 0202 	mvn.w	r2, #2
 800a1a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	f003 0303 	and.w	r3, r3, #3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d005      	beq.n	800a1ca <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	4798      	blx	r3
 800a1c8:	e009      	b.n	800a1de <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	f003 0304 	and.w	r3, r3, #4
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d128      	bne.n	800a244 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	f003 0304 	and.w	r3, r3, #4
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	d121      	bne.n	800a244 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f06f 0204 	mvn.w	r2, #4
 800a208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2202      	movs	r2, #2
 800a20e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d005      	beq.n	800a22a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	4798      	blx	r3
 800a228:	e009      	b.n	800a23e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	f003 0308 	and.w	r3, r3, #8
 800a24e:	2b08      	cmp	r3, #8
 800a250:	d128      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f003 0308 	and.w	r3, r3, #8
 800a25c:	2b08      	cmp	r3, #8
 800a25e:	d121      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f06f 0208 	mvn.w	r2, #8
 800a268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2204      	movs	r2, #4
 800a26e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	f003 0303 	and.w	r3, r3, #3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d005      	beq.n	800a28a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	4798      	blx	r3
 800a288:	e009      	b.n	800a29e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	f003 0310 	and.w	r3, r3, #16
 800a2ae:	2b10      	cmp	r3, #16
 800a2b0:	d128      	bne.n	800a304 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	f003 0310 	and.w	r3, r3, #16
 800a2bc:	2b10      	cmp	r3, #16
 800a2be:	d121      	bne.n	800a304 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f06f 0210 	mvn.w	r2, #16
 800a2c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2208      	movs	r2, #8
 800a2ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d005      	beq.n	800a2ea <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	4798      	blx	r3
 800a2e8:	e009      	b.n	800a2fe <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d110      	bne.n	800a334 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d109      	bne.n	800a334 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f06f 0201 	mvn.w	r2, #1
 800a328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a33e:	2b80      	cmp	r3, #128	; 0x80
 800a340:	d110      	bne.n	800a364 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a34c:	2b80      	cmp	r3, #128	; 0x80
 800a34e:	d109      	bne.n	800a364 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36e:	2b40      	cmp	r3, #64	; 0x40
 800a370:	d110      	bne.n	800a394 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a37c:	2b40      	cmp	r3, #64	; 0x40
 800a37e:	d109      	bne.n	800a394 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	f003 0320 	and.w	r3, r3, #32
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	d110      	bne.n	800a3c4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	f003 0320 	and.w	r3, r3, #32
 800a3ac:	2b20      	cmp	r3, #32
 800a3ae:	d109      	bne.n	800a3c4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f06f 0220 	mvn.w	r2, #32
 800a3b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3c4:	bf00      	nop
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d101      	bne.n	800a3e4 <HAL_TIM_ConfigClockSource+0x18>
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	e0b3      	b.n	800a54c <HAL_TIM_ConfigClockSource+0x180>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2202      	movs	r2, #2
 800a3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a402:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a40a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a41c:	d03e      	beq.n	800a49c <HAL_TIM_ConfigClockSource+0xd0>
 800a41e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a422:	f200 8087 	bhi.w	800a534 <HAL_TIM_ConfigClockSource+0x168>
 800a426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a42a:	f000 8085 	beq.w	800a538 <HAL_TIM_ConfigClockSource+0x16c>
 800a42e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a432:	d87f      	bhi.n	800a534 <HAL_TIM_ConfigClockSource+0x168>
 800a434:	2b70      	cmp	r3, #112	; 0x70
 800a436:	d01a      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0xa2>
 800a438:	2b70      	cmp	r3, #112	; 0x70
 800a43a:	d87b      	bhi.n	800a534 <HAL_TIM_ConfigClockSource+0x168>
 800a43c:	2b60      	cmp	r3, #96	; 0x60
 800a43e:	d050      	beq.n	800a4e2 <HAL_TIM_ConfigClockSource+0x116>
 800a440:	2b60      	cmp	r3, #96	; 0x60
 800a442:	d877      	bhi.n	800a534 <HAL_TIM_ConfigClockSource+0x168>
 800a444:	2b50      	cmp	r3, #80	; 0x50
 800a446:	d03c      	beq.n	800a4c2 <HAL_TIM_ConfigClockSource+0xf6>
 800a448:	2b50      	cmp	r3, #80	; 0x50
 800a44a:	d873      	bhi.n	800a534 <HAL_TIM_ConfigClockSource+0x168>
 800a44c:	2b40      	cmp	r3, #64	; 0x40
 800a44e:	d058      	beq.n	800a502 <HAL_TIM_ConfigClockSource+0x136>
 800a450:	2b40      	cmp	r3, #64	; 0x40
 800a452:	d86f      	bhi.n	800a534 <HAL_TIM_ConfigClockSource+0x168>
 800a454:	2b30      	cmp	r3, #48	; 0x30
 800a456:	d064      	beq.n	800a522 <HAL_TIM_ConfigClockSource+0x156>
 800a458:	2b30      	cmp	r3, #48	; 0x30
 800a45a:	d86b      	bhi.n	800a534 <HAL_TIM_ConfigClockSource+0x168>
 800a45c:	2b20      	cmp	r3, #32
 800a45e:	d060      	beq.n	800a522 <HAL_TIM_ConfigClockSource+0x156>
 800a460:	2b20      	cmp	r3, #32
 800a462:	d867      	bhi.n	800a534 <HAL_TIM_ConfigClockSource+0x168>
 800a464:	2b00      	cmp	r3, #0
 800a466:	d05c      	beq.n	800a522 <HAL_TIM_ConfigClockSource+0x156>
 800a468:	2b10      	cmp	r3, #16
 800a46a:	d05a      	beq.n	800a522 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a46c:	e062      	b.n	800a534 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	6899      	ldr	r1, [r3, #8]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	f000 f994 	bl	800a7aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a490:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	609a      	str	r2, [r3, #8]
      break;
 800a49a:	e04e      	b.n	800a53a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6818      	ldr	r0, [r3, #0]
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	6899      	ldr	r1, [r3, #8]
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	685a      	ldr	r2, [r3, #4]
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	f000 f97d 	bl	800a7aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	689a      	ldr	r2, [r3, #8]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4be:	609a      	str	r2, [r3, #8]
      break;
 800a4c0:	e03b      	b.n	800a53a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6818      	ldr	r0, [r3, #0]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	6859      	ldr	r1, [r3, #4]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f000 f8f4 	bl	800a6bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2150      	movs	r1, #80	; 0x50
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 f94b 	bl	800a776 <TIM_ITRx_SetConfig>
      break;
 800a4e0:	e02b      	b.n	800a53a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6818      	ldr	r0, [r3, #0]
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	6859      	ldr	r1, [r3, #4]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f000 f912 	bl	800a718 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2160      	movs	r1, #96	; 0x60
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 f93b 	bl	800a776 <TIM_ITRx_SetConfig>
      break;
 800a500:	e01b      	b.n	800a53a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6818      	ldr	r0, [r3, #0]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	6859      	ldr	r1, [r3, #4]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	461a      	mov	r2, r3
 800a510:	f000 f8d4 	bl	800a6bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2140      	movs	r1, #64	; 0x40
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 f92b 	bl	800a776 <TIM_ITRx_SetConfig>
      break;
 800a520:	e00b      	b.n	800a53a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4619      	mov	r1, r3
 800a52c:	4610      	mov	r0, r2
 800a52e:	f000 f922 	bl	800a776 <TIM_ITRx_SetConfig>
        break;
 800a532:	e002      	b.n	800a53a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a534:	bf00      	nop
 800a536:	e000      	b.n	800a53a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a538:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	bc80      	pop	{r7}
 800a564:	4770      	bx	lr

0800a566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a566:	b480      	push	{r7}
 800a568:	b083      	sub	sp, #12
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a56e:	bf00      	nop
 800a570:	370c      	adds	r7, #12
 800a572:	46bd      	mov	sp, r7
 800a574:	bc80      	pop	{r7}
 800a576:	4770      	bx	lr

0800a578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	bc80      	pop	{r7}
 800a588:	4770      	bx	lr

0800a58a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b083      	sub	sp, #12
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a592:	bf00      	nop
 800a594:	370c      	adds	r7, #12
 800a596:	46bd      	mov	sp, r7
 800a598:	bc80      	pop	{r7}
 800a59a:	4770      	bx	lr

0800a59c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bc80      	pop	{r7}
 800a5ac:	4770      	bx	lr

0800a5ae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a5b6:	bf00      	nop
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bc80      	pop	{r7}
 800a5be:	4770      	bx	lr

0800a5c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bc80      	pop	{r7}
 800a5d0:	4770      	bx	lr

0800a5d2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a5da:	bf00      	nop
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bc80      	pop	{r7}
 800a5e2:	4770      	bx	lr

0800a5e4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bc80      	pop	{r7}
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a29      	ldr	r2, [pc, #164]	; (800a6b0 <TIM_Base_SetConfig+0xb8>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d00b      	beq.n	800a628 <TIM_Base_SetConfig+0x30>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a616:	d007      	beq.n	800a628 <TIM_Base_SetConfig+0x30>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a26      	ldr	r2, [pc, #152]	; (800a6b4 <TIM_Base_SetConfig+0xbc>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d003      	beq.n	800a628 <TIM_Base_SetConfig+0x30>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a25      	ldr	r2, [pc, #148]	; (800a6b8 <TIM_Base_SetConfig+0xc0>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d108      	bne.n	800a63a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a62e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	4313      	orrs	r3, r2
 800a638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a1c      	ldr	r2, [pc, #112]	; (800a6b0 <TIM_Base_SetConfig+0xb8>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d00b      	beq.n	800a65a <TIM_Base_SetConfig+0x62>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a648:	d007      	beq.n	800a65a <TIM_Base_SetConfig+0x62>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a19      	ldr	r2, [pc, #100]	; (800a6b4 <TIM_Base_SetConfig+0xbc>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d003      	beq.n	800a65a <TIM_Base_SetConfig+0x62>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a18      	ldr	r2, [pc, #96]	; (800a6b8 <TIM_Base_SetConfig+0xc0>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d108      	bne.n	800a66c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	4313      	orrs	r3, r2
 800a66a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	4313      	orrs	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	689a      	ldr	r2, [r3, #8]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4a07      	ldr	r2, [pc, #28]	; (800a6b0 <TIM_Base_SetConfig+0xb8>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d103      	bne.n	800a6a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	691a      	ldr	r2, [r3, #16]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	615a      	str	r2, [r3, #20]
}
 800a6a6:	bf00      	nop
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bc80      	pop	{r7}
 800a6ae:	4770      	bx	lr
 800a6b0:	40012c00 	.word	0x40012c00
 800a6b4:	40000400 	.word	0x40000400
 800a6b8:	40000800 	.word	0x40000800

0800a6bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6a1b      	ldr	r3, [r3, #32]
 800a6cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6a1b      	ldr	r3, [r3, #32]
 800a6d2:	f023 0201 	bic.w	r2, r3, #1
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	011b      	lsls	r3, r3, #4
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f023 030a 	bic.w	r3, r3, #10
 800a6f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	693a      	ldr	r2, [r7, #16]
 800a706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	621a      	str	r2, [r3, #32]
}
 800a70e:	bf00      	nop
 800a710:	371c      	adds	r7, #28
 800a712:	46bd      	mov	sp, r7
 800a714:	bc80      	pop	{r7}
 800a716:	4770      	bx	lr

0800a718 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6a1b      	ldr	r3, [r3, #32]
 800a728:	f023 0210 	bic.w	r2, r3, #16
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a742:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	031b      	lsls	r3, r3, #12
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a754:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	011b      	lsls	r3, r3, #4
 800a75a:	693a      	ldr	r2, [r7, #16]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	697a      	ldr	r2, [r7, #20]
 800a764:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	621a      	str	r2, [r3, #32]
}
 800a76c:	bf00      	nop
 800a76e:	371c      	adds	r7, #28
 800a770:	46bd      	mov	sp, r7
 800a772:	bc80      	pop	{r7}
 800a774:	4770      	bx	lr

0800a776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a776:	b480      	push	{r7}
 800a778:	b085      	sub	sp, #20
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a78c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	4313      	orrs	r3, r2
 800a794:	f043 0307 	orr.w	r3, r3, #7
 800a798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	609a      	str	r2, [r3, #8]
}
 800a7a0:	bf00      	nop
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bc80      	pop	{r7}
 800a7a8:	4770      	bx	lr

0800a7aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b087      	sub	sp, #28
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	607a      	str	r2, [r7, #4]
 800a7b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	021a      	lsls	r2, r3, #8
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	431a      	orrs	r2, r3
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	609a      	str	r2, [r3, #8]
}
 800a7de:	bf00      	nop
 800a7e0:	371c      	adds	r7, #28
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bc80      	pop	{r7}
 800a7e6:	4770      	bx	lr

0800a7e8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a1c      	ldr	r2, [pc, #112]	; (800a864 <TIM_ResetCallback+0x7c>)
 800a7f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a1b      	ldr	r2, [pc, #108]	; (800a868 <TIM_ResetCallback+0x80>)
 800a7fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a1a      	ldr	r2, [pc, #104]	; (800a86c <TIM_ResetCallback+0x84>)
 800a804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a19      	ldr	r2, [pc, #100]	; (800a870 <TIM_ResetCallback+0x88>)
 800a80c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a18      	ldr	r2, [pc, #96]	; (800a874 <TIM_ResetCallback+0x8c>)
 800a814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a17      	ldr	r2, [pc, #92]	; (800a878 <TIM_ResetCallback+0x90>)
 800a81c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a16      	ldr	r2, [pc, #88]	; (800a87c <TIM_ResetCallback+0x94>)
 800a824:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a15      	ldr	r2, [pc, #84]	; (800a880 <TIM_ResetCallback+0x98>)
 800a82c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a14      	ldr	r2, [pc, #80]	; (800a884 <TIM_ResetCallback+0x9c>)
 800a834:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a13      	ldr	r2, [pc, #76]	; (800a888 <TIM_ResetCallback+0xa0>)
 800a83c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a12      	ldr	r2, [pc, #72]	; (800a88c <TIM_ResetCallback+0xa4>)
 800a844:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a11      	ldr	r2, [pc, #68]	; (800a890 <TIM_ResetCallback+0xa8>)
 800a84c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a10      	ldr	r2, [pc, #64]	; (800a894 <TIM_ResetCallback+0xac>)
 800a854:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bc80      	pop	{r7}
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	08006ba1 	.word	0x08006ba1
 800a868:	0800a555 	.word	0x0800a555
 800a86c:	0800a5c1 	.word	0x0800a5c1
 800a870:	0800a5d3 	.word	0x0800a5d3
 800a874:	0800a579 	.word	0x0800a579
 800a878:	0800a58b 	.word	0x0800a58b
 800a87c:	0800a567 	.word	0x0800a567
 800a880:	0800a59d 	.word	0x0800a59d
 800a884:	0800a5af 	.word	0x0800a5af
 800a888:	0800a5e5 	.word	0x0800a5e5
 800a88c:	0800a955 	.word	0x0800a955
 800a890:	0800a967 	.word	0x0800a967
 800a894:	0800a979 	.word	0x0800a979

0800a898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d101      	bne.n	800a8b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	e046      	b.n	800a93e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a16      	ldr	r2, [pc, #88]	; (800a948 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d00e      	beq.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8fc:	d009      	beq.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a12      	ldr	r2, [pc, #72]	; (800a94c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d004      	beq.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a10      	ldr	r2, [pc, #64]	; (800a950 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d10c      	bne.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	4313      	orrs	r3, r2
 800a922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	bc80      	pop	{r7}
 800a946:	4770      	bx	lr
 800a948:	40012c00 	.word	0x40012c00
 800a94c:	40000400 	.word	0x40000400
 800a950:	40000800 	.word	0x40000800

0800a954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	bc80      	pop	{r7}
 800a964:	4770      	bx	lr

0800a966 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a966:	b480      	push	{r7}
 800a968:	b083      	sub	sp, #12
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a96e:	bf00      	nop
 800a970:	370c      	adds	r7, #12
 800a972:	46bd      	mov	sp, r7
 800a974:	bc80      	pop	{r7}
 800a976:	4770      	bx	lr

0800a978 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	bc80      	pop	{r7}
 800a988:	4770      	bx	lr
	...

0800a98c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e04a      	b.n	800aa34 <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d111      	bne.n	800a9ce <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fab4 	bl	800af20 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d102      	bne.n	800a9c6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a1e      	ldr	r2, [pc, #120]	; (800aa3c <HAL_UART_Init+0xb0>)
 800a9c4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2224      	movs	r2, #36	; 0x24
 800a9d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68da      	ldr	r2, [r3, #12]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a9e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fcbe 	bl	800b368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	691a      	ldr	r2, [r3, #16]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	695a      	ldr	r2, [r3, #20]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68da      	ldr	r2, [r3, #12]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2220      	movs	r2, #32
 800aa26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	080075a9 	.word	0x080075a9

0800aa40 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b20      	cmp	r3, #32
 800aa58:	d153      	bne.n	800ab02 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <HAL_UART_Transmit_DMA+0x26>
 800aa60:	88fb      	ldrh	r3, [r7, #6]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d101      	bne.n	800aa6a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e04c      	b.n	800ab04 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d101      	bne.n	800aa78 <HAL_UART_Transmit_DMA+0x38>
 800aa74:	2302      	movs	r3, #2
 800aa76:	e045      	b.n	800ab04 <HAL_UART_Transmit_DMA+0xc4>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800aa80:	68ba      	ldr	r2, [r7, #8]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	88fa      	ldrh	r2, [r7, #6]
 800aa8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	88fa      	ldrh	r2, [r7, #6]
 800aa90:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2221      	movs	r2, #33	; 0x21
 800aa9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa4:	4a19      	ldr	r2, [pc, #100]	; (800ab0c <HAL_UART_Transmit_DMA+0xcc>)
 800aaa6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaac:	4a18      	ldr	r2, [pc, #96]	; (800ab10 <HAL_UART_Transmit_DMA+0xd0>)
 800aaae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab4:	4a17      	ldr	r2, [pc, #92]	; (800ab14 <HAL_UART_Transmit_DMA+0xd4>)
 800aab6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aabc:	2200      	movs	r2, #0
 800aabe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800aac0:	f107 0308 	add.w	r3, r7, #8
 800aac4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	6819      	ldr	r1, [r3, #0]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3304      	adds	r3, #4
 800aad4:	461a      	mov	r2, r3
 800aad6:	88fb      	ldrh	r3, [r7, #6]
 800aad8:	f7fe f882 	bl	8008be0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aae4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	695a      	ldr	r2, [r3, #20]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aafc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	e000      	b.n	800ab04 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800ab02:	2302      	movs	r3, #2
  }
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3718      	adds	r7, #24
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	0800af8d 	.word	0x0800af8d
 800ab10:	0800afe1 	.word	0x0800afe1
 800ab14:	0800afff 	.word	0x0800afff

0800ab18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b08a      	sub	sp, #40	; 0x28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	f003 030f 	and.w	r3, r3, #15
 800ab46:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10d      	bne.n	800ab6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	f003 0320 	and.w	r3, r3, #32
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d008      	beq.n	800ab6a <HAL_UART_IRQHandler+0x52>
 800ab58:	6a3b      	ldr	r3, [r7, #32]
 800ab5a:	f003 0320 	and.w	r3, r3, #32
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fb54 	bl	800b210 <UART_Receive_IT>
      return;
 800ab68:	e180      	b.n	800ae6c <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f000 80b4 	beq.w	800acda <HAL_UART_IRQHandler+0x1c2>
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d105      	bne.n	800ab88 <HAL_UART_IRQHandler+0x70>
 800ab7c:	6a3b      	ldr	r3, [r7, #32]
 800ab7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 80a9 	beq.w	800acda <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00a      	beq.n	800aba8 <HAL_UART_IRQHandler+0x90>
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d005      	beq.n	800aba8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba0:	f043 0201 	orr.w	r2, r3, #1
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	f003 0304 	and.w	r3, r3, #4
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00a      	beq.n	800abc8 <HAL_UART_IRQHandler+0xb0>
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d005      	beq.n	800abc8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc0:	f043 0202 	orr.w	r2, r3, #2
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	f003 0302 	and.w	r3, r3, #2
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00a      	beq.n	800abe8 <HAL_UART_IRQHandler+0xd0>
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	f003 0301 	and.w	r3, r3, #1
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d005      	beq.n	800abe8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe0:	f043 0204 	orr.w	r2, r3, #4
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	f003 0308 	and.w	r3, r3, #8
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00f      	beq.n	800ac12 <HAL_UART_IRQHandler+0xfa>
 800abf2:	6a3b      	ldr	r3, [r7, #32]
 800abf4:	f003 0320 	and.w	r3, r3, #32
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d104      	bne.n	800ac06 <HAL_UART_IRQHandler+0xee>
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d005      	beq.n	800ac12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0a:	f043 0208 	orr.w	r2, r3, #8
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 8123 	beq.w	800ae62 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	f003 0320 	and.w	r3, r3, #32
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d007      	beq.n	800ac36 <HAL_UART_IRQHandler+0x11e>
 800ac26:	6a3b      	ldr	r3, [r7, #32]
 800ac28:	f003 0320 	and.w	r3, r3, #32
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 faed 	bl	800b210 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	bf14      	ite	ne
 800ac44:	2301      	movne	r3, #1
 800ac46:	2300      	moveq	r3, #0
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac50:	f003 0308 	and.w	r3, r3, #8
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d102      	bne.n	800ac5e <HAL_UART_IRQHandler+0x146>
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d033      	beq.n	800acc6 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fa2d 	bl	800b0be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d024      	beq.n	800acbc <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	695a      	ldr	r2, [r3, #20]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac80:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d013      	beq.n	800acb2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8e:	4a79      	ldr	r2, [pc, #484]	; (800ae74 <HAL_UART_IRQHandler+0x35c>)
 800ac90:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fe f83c 	bl	8008d14 <HAL_DMA_Abort_IT>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d019      	beq.n	800acd6 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800acac:	4610      	mov	r0, r2
 800acae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb0:	e011      	b.n	800acd6 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acba:	e00c      	b.n	800acd6 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acc4:	e007      	b.n	800acd6 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800acd4:	e0c5      	b.n	800ae62 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acd6:	bf00      	nop
    return;
 800acd8:	e0c3      	b.n	800ae62 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acde:	2b01      	cmp	r3, #1
 800ace0:	f040 80a3 	bne.w	800ae2a <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	f003 0310 	and.w	r3, r3, #16
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 809d 	beq.w	800ae2a <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	f003 0310 	and.w	r3, r3, #16
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 8097 	beq.w	800ae2a <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800acfc:	2300      	movs	r3, #0
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	60fb      	str	r3, [r7, #12]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d04f      	beq.n	800adc0 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800ad2a:	8a3b      	ldrh	r3, [r7, #16]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f000 809a 	beq.w	800ae66 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad36:	8a3a      	ldrh	r2, [r7, #16]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	f080 8094 	bcs.w	800ae66 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	8a3a      	ldrh	r2, [r7, #16]
 800ad42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	2b20      	cmp	r3, #32
 800ad4c:	d02b      	beq.n	800ada6 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68da      	ldr	r2, [r3, #12]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad5c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	695a      	ldr	r2, [r3, #20]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f022 0201 	bic.w	r2, r2, #1
 800ad6c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	695a      	ldr	r2, [r3, #20]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad7c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2220      	movs	r2, #32
 800ad82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68da      	ldr	r2, [r3, #12]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f022 0210 	bic.w	r2, r2, #16
 800ad9a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fd ff7c 	bl	8008c9e <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800adb2:	b292      	uxth	r2, r2
 800adb4:	1a8a      	subs	r2, r1, r2
 800adb6:	b292      	uxth	r2, r2
 800adb8:	4611      	mov	r1, r2
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 800adbe:	e052      	b.n	800ae66 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adc8:	b29b      	uxth	r3, r3
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800add2:	b29b      	uxth	r3, r3
 800add4:	2b00      	cmp	r3, #0
 800add6:	d048      	beq.n	800ae6a <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 800add8:	8a7b      	ldrh	r3, [r7, #18]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d045      	beq.n	800ae6a <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68da      	ldr	r2, [r3, #12]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800adec:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	695a      	ldr	r2, [r3, #20]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f022 0201 	bic.w	r2, r2, #1
 800adfc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2220      	movs	r2, #32
 800ae02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68da      	ldr	r2, [r3, #12]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f022 0210 	bic.w	r2, r2, #16
 800ae1a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae20:	8a7a      	ldrh	r2, [r7, #18]
 800ae22:	4611      	mov	r1, r2
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 800ae28:	e01f      	b.n	800ae6a <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d008      	beq.n	800ae46 <HAL_UART_IRQHandler+0x32e>
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d003      	beq.n	800ae46 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f97e 	bl	800b140 <UART_Transmit_IT>
    return;
 800ae44:	e012      	b.n	800ae6c <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00d      	beq.n	800ae6c <HAL_UART_IRQHandler+0x354>
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d008      	beq.n	800ae6c <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f9bf 	bl	800b1de <UART_EndTransmit_IT>
    return;
 800ae60:	e004      	b.n	800ae6c <HAL_UART_IRQHandler+0x354>
    return;
 800ae62:	bf00      	nop
 800ae64:	e002      	b.n	800ae6c <HAL_UART_IRQHandler+0x354>
      return;
 800ae66:	bf00      	nop
 800ae68:	e000      	b.n	800ae6c <HAL_UART_IRQHandler+0x354>
      return;
 800ae6a:	bf00      	nop
  }
}
 800ae6c:	3728      	adds	r7, #40	; 0x28
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	0800b117 	.word	0x0800b117

0800ae78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ae80:	bf00      	nop
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bc80      	pop	{r7}
 800ae88:	4770      	bx	lr

0800ae8a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b083      	sub	sp, #12
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ae92:	bf00      	nop
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bc80      	pop	{r7}
 800ae9a:	4770      	bx	lr

0800ae9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bc80      	pop	{r7}
 800aeac:	4770      	bx	lr

0800aeae <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b083      	sub	sp, #12
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aeb6:	bf00      	nop
 800aeb8:	370c      	adds	r7, #12
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bc80      	pop	{r7}
 800aebe:	4770      	bx	lr

0800aec0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aec8:	bf00      	nop
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	bc80      	pop	{r7}
 800aed0:	4770      	bx	lr

0800aed2 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800aed2:	b480      	push	{r7}
 800aed4:	b083      	sub	sp, #12
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800aeda:	bf00      	nop
 800aedc:	370c      	adds	r7, #12
 800aede:	46bd      	mov	sp, r7
 800aee0:	bc80      	pop	{r7}
 800aee2:	4770      	bx	lr

0800aee4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800aeec:	bf00      	nop
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bc80      	pop	{r7}
 800aef4:	4770      	bx	lr

0800aef6 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800aef6:	b480      	push	{r7}
 800aef8:	b083      	sub	sp, #12
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800aefe:	bf00      	nop
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	bc80      	pop	{r7}
 800af06:	4770      	bx	lr

0800af08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	bc80      	pop	{r7}
 800af1c:	4770      	bx	lr
	...

0800af20 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a0f      	ldr	r2, [pc, #60]	; (800af68 <UART_InitCallbacksToDefault+0x48>)
 800af2c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a0e      	ldr	r2, [pc, #56]	; (800af6c <UART_InitCallbacksToDefault+0x4c>)
 800af32:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a0e      	ldr	r2, [pc, #56]	; (800af70 <UART_InitCallbacksToDefault+0x50>)
 800af38:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a0d      	ldr	r2, [pc, #52]	; (800af74 <UART_InitCallbacksToDefault+0x54>)
 800af3e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a0d      	ldr	r2, [pc, #52]	; (800af78 <UART_InitCallbacksToDefault+0x58>)
 800af44:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a0c      	ldr	r2, [pc, #48]	; (800af7c <UART_InitCallbacksToDefault+0x5c>)
 800af4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a0c      	ldr	r2, [pc, #48]	; (800af80 <UART_InitCallbacksToDefault+0x60>)
 800af50:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a0b      	ldr	r2, [pc, #44]	; (800af84 <UART_InitCallbacksToDefault+0x64>)
 800af56:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a0b      	ldr	r2, [pc, #44]	; (800af88 <UART_InitCallbacksToDefault+0x68>)
 800af5c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800af5e:	bf00      	nop
 800af60:	370c      	adds	r7, #12
 800af62:	46bd      	mov	sp, r7
 800af64:	bc80      	pop	{r7}
 800af66:	4770      	bx	lr
 800af68:	0800ae8b 	.word	0x0800ae8b
 800af6c:	0800ae79 	.word	0x0800ae79
 800af70:	0800aeaf 	.word	0x0800aeaf
 800af74:	0800ae9d 	.word	0x0800ae9d
 800af78:	0800aec1 	.word	0x0800aec1
 800af7c:	0800aed3 	.word	0x0800aed3
 800af80:	0800aee5 	.word	0x0800aee5
 800af84:	0800aef7 	.word	0x0800aef7
 800af88:	0800af09 	.word	0x0800af09

0800af8c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af98:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f003 0320 	and.w	r3, r3, #32
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d113      	bne.n	800afd0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	695a      	ldr	r2, [r3, #20]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afbc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68da      	ldr	r2, [r3, #12]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afcc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afce:	e003      	b.n	800afd8 <UART_DMATransmitCplt+0x4c>
    huart->TxCpltCallback(huart);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	4798      	blx	r3
}
 800afd8:	bf00      	nop
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aff6:	bf00      	nop
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b084      	sub	sp, #16
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b006:	2300      	movs	r3, #0
 800b008:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	695b      	ldr	r3, [r3, #20]
 800b016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	bf14      	ite	ne
 800b01e:	2301      	movne	r3, #1
 800b020:	2300      	moveq	r3, #0
 800b022:	b2db      	uxtb	r3, r3
 800b024:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b21      	cmp	r3, #33	; 0x21
 800b030:	d108      	bne.n	800b044 <UART_DMAError+0x46>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d005      	beq.n	800b044 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2200      	movs	r2, #0
 800b03c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b03e:	68b8      	ldr	r0, [r7, #8]
 800b040:	f000 f828 	bl	800b094 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	695b      	ldr	r3, [r3, #20]
 800b04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b04e:	2b00      	cmp	r3, #0
 800b050:	bf14      	ite	ne
 800b052:	2301      	movne	r3, #1
 800b054:	2300      	moveq	r3, #0
 800b056:	b2db      	uxtb	r3, r3
 800b058:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b22      	cmp	r3, #34	; 0x22
 800b064:	d108      	bne.n	800b078 <UART_DMAError+0x7a>
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d005      	beq.n	800b078 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2200      	movs	r2, #0
 800b070:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b072:	68b8      	ldr	r0, [r7, #8]
 800b074:	f000 f823 	bl	800b0be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07c:	f043 0210 	orr.w	r2, r3, #16
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b088:	68b8      	ldr	r0, [r7, #8]
 800b08a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b08c:	bf00      	nop
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68da      	ldr	r2, [r3, #12]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b0aa:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2220      	movs	r2, #32
 800b0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bc80      	pop	{r7}
 800b0bc:	4770      	bx	lr

0800b0be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0be:	b480      	push	{r7}
 800b0c0:	b083      	sub	sp, #12
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68da      	ldr	r2, [r3, #12]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b0d4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	695a      	ldr	r2, [r3, #20]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f022 0201 	bic.w	r2, r2, #1
 800b0e4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d107      	bne.n	800b0fe <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68da      	ldr	r2, [r3, #12]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f022 0210 	bic.w	r2, r2, #16
 800b0fc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2220      	movs	r2, #32
 800b102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b10c:	bf00      	nop
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	bc80      	pop	{r7}
 800b114:	4770      	bx	lr

0800b116 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b084      	sub	sp, #16
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b122:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b138:	bf00      	nop
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	2b21      	cmp	r3, #33	; 0x21
 800b152:	d13e      	bne.n	800b1d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b15c:	d114      	bne.n	800b188 <UART_Transmit_IT+0x48>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d110      	bne.n	800b188 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	881b      	ldrh	r3, [r3, #0]
 800b170:	461a      	mov	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b17a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a1b      	ldr	r3, [r3, #32]
 800b180:	1c9a      	adds	r2, r3, #2
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	621a      	str	r2, [r3, #32]
 800b186:	e008      	b.n	800b19a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a1b      	ldr	r3, [r3, #32]
 800b18c:	1c59      	adds	r1, r3, #1
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	6211      	str	r1, [r2, #32]
 800b192:	781a      	ldrb	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10f      	bne.n	800b1ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	68da      	ldr	r2, [r3, #12]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68da      	ldr	r2, [r3, #12]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	e000      	b.n	800b1d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b1d2:	2302      	movs	r3, #2
  }
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bc80      	pop	{r7}
 800b1dc:	4770      	bx	lr

0800b1de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b082      	sub	sp, #8
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2220      	movs	r2, #32
 800b1fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	2b22      	cmp	r3, #34	; 0x22
 800b222:	f040 809b 	bne.w	800b35c <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b22e:	d117      	bne.n	800b260 <UART_Receive_IT+0x50>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	691b      	ldr	r3, [r3, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d113      	bne.n	800b260 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b238:	2300      	movs	r3, #0
 800b23a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b240:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	b29b      	uxth	r3, r3
 800b24a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b24e:	b29a      	uxth	r2, r3
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b258:	1c9a      	adds	r2, r3, #2
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	629a      	str	r2, [r3, #40]	; 0x28
 800b25e:	e026      	b.n	800b2ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b264:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800b266:	2300      	movs	r3, #0
 800b268:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b272:	d007      	beq.n	800b284 <UART_Receive_IT+0x74>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10a      	bne.n	800b292 <UART_Receive_IT+0x82>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d106      	bne.n	800b292 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	b2da      	uxtb	r2, r3
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	701a      	strb	r2, [r3, #0]
 800b290:	e008      	b.n	800b2a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a8:	1c5a      	adds	r2, r3, #1
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d14a      	bne.n	800b358 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68da      	ldr	r2, [r3, #12]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f022 0220 	bic.w	r2, r2, #32
 800b2d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	68da      	ldr	r2, [r3, #12]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	695a      	ldr	r2, [r3, #20]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f022 0201 	bic.w	r2, r2, #1
 800b2f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2220      	movs	r2, #32
 800b2f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d124      	bne.n	800b34c <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68da      	ldr	r2, [r3, #12]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f022 0210 	bic.w	r2, r2, #16
 800b316:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f003 0310 	and.w	r3, r3, #16
 800b322:	2b10      	cmp	r3, #16
 800b324:	d10a      	bne.n	800b33c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b326:	2300      	movs	r3, #0
 800b328:	60fb      	str	r3, [r7, #12]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	60fb      	str	r3, [r7, #12]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	60fb      	str	r3, [r7, #12]
 800b33a:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b344:	4611      	mov	r1, r2
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	4798      	blx	r3
 800b34a:	e003      	b.n	800b354 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b354:	2300      	movs	r3, #0
 800b356:	e002      	b.n	800b35e <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	e000      	b.n	800b35e <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800b35c:	2302      	movs	r3, #2
  }
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3718      	adds	r7, #24
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
	...

0800b368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	68da      	ldr	r2, [r3, #12]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	430a      	orrs	r2, r1
 800b384:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	689a      	ldr	r2, [r3, #8]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	691b      	ldr	r3, [r3, #16]
 800b38e:	431a      	orrs	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	695b      	ldr	r3, [r3, #20]
 800b394:	4313      	orrs	r3, r2
 800b396:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b3a2:	f023 030c 	bic.w	r3, r3, #12
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	6812      	ldr	r2, [r2, #0]
 800b3aa:	68b9      	ldr	r1, [r7, #8]
 800b3ac:	430b      	orrs	r3, r1
 800b3ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	695b      	ldr	r3, [r3, #20]
 800b3b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	699a      	ldr	r2, [r3, #24]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	430a      	orrs	r2, r1
 800b3c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a2c      	ldr	r2, [pc, #176]	; (800b47c <UART_SetConfig+0x114>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d103      	bne.n	800b3d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b3d0:	f7fe fdc6 	bl	8009f60 <HAL_RCC_GetPCLK2Freq>
 800b3d4:	60f8      	str	r0, [r7, #12]
 800b3d6:	e002      	b.n	800b3de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b3d8:	f7fe fdae 	bl	8009f38 <HAL_RCC_GetPCLK1Freq>
 800b3dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	009a      	lsls	r2, r3, #2
 800b3e8:	441a      	add	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3f4:	4a22      	ldr	r2, [pc, #136]	; (800b480 <UART_SetConfig+0x118>)
 800b3f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3fa:	095b      	lsrs	r3, r3, #5
 800b3fc:	0119      	lsls	r1, r3, #4
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	4613      	mov	r3, r2
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	4413      	add	r3, r2
 800b406:	009a      	lsls	r2, r3, #2
 800b408:	441a      	add	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	fbb2 f2f3 	udiv	r2, r2, r3
 800b414:	4b1a      	ldr	r3, [pc, #104]	; (800b480 <UART_SetConfig+0x118>)
 800b416:	fba3 0302 	umull	r0, r3, r3, r2
 800b41a:	095b      	lsrs	r3, r3, #5
 800b41c:	2064      	movs	r0, #100	; 0x64
 800b41e:	fb00 f303 	mul.w	r3, r0, r3
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	011b      	lsls	r3, r3, #4
 800b426:	3332      	adds	r3, #50	; 0x32
 800b428:	4a15      	ldr	r2, [pc, #84]	; (800b480 <UART_SetConfig+0x118>)
 800b42a:	fba2 2303 	umull	r2, r3, r2, r3
 800b42e:	095b      	lsrs	r3, r3, #5
 800b430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b434:	4419      	add	r1, r3
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4613      	mov	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	009a      	lsls	r2, r3, #2
 800b440:	441a      	add	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	fbb2 f2f3 	udiv	r2, r2, r3
 800b44c:	4b0c      	ldr	r3, [pc, #48]	; (800b480 <UART_SetConfig+0x118>)
 800b44e:	fba3 0302 	umull	r0, r3, r3, r2
 800b452:	095b      	lsrs	r3, r3, #5
 800b454:	2064      	movs	r0, #100	; 0x64
 800b456:	fb00 f303 	mul.w	r3, r0, r3
 800b45a:	1ad3      	subs	r3, r2, r3
 800b45c:	011b      	lsls	r3, r3, #4
 800b45e:	3332      	adds	r3, #50	; 0x32
 800b460:	4a07      	ldr	r2, [pc, #28]	; (800b480 <UART_SetConfig+0x118>)
 800b462:	fba2 2303 	umull	r2, r3, r2, r3
 800b466:	095b      	lsrs	r3, r3, #5
 800b468:	f003 020f 	and.w	r2, r3, #15
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	440a      	add	r2, r1
 800b472:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b474:	bf00      	nop
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	40013800 	.word	0x40013800
 800b480:	51eb851f 	.word	0x51eb851f

0800b484 <calloc>:
 800b484:	4b02      	ldr	r3, [pc, #8]	; (800b490 <calloc+0xc>)
 800b486:	460a      	mov	r2, r1
 800b488:	4601      	mov	r1, r0
 800b48a:	6818      	ldr	r0, [r3, #0]
 800b48c:	f000 b802 	b.w	800b494 <_calloc_r>
 800b490:	200004bc 	.word	0x200004bc

0800b494 <_calloc_r>:
 800b494:	b570      	push	{r4, r5, r6, lr}
 800b496:	fba1 5402 	umull	r5, r4, r1, r2
 800b49a:	b934      	cbnz	r4, 800b4aa <_calloc_r+0x16>
 800b49c:	4629      	mov	r1, r5
 800b49e:	f000 f835 	bl	800b50c <_malloc_r>
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	b928      	cbnz	r0, 800b4b2 <_calloc_r+0x1e>
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	bd70      	pop	{r4, r5, r6, pc}
 800b4aa:	220c      	movs	r2, #12
 800b4ac:	2600      	movs	r6, #0
 800b4ae:	6002      	str	r2, [r0, #0]
 800b4b0:	e7f9      	b.n	800b4a6 <_calloc_r+0x12>
 800b4b2:	462a      	mov	r2, r5
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	f000 fb83 	bl	800bbc0 <memset>
 800b4ba:	e7f4      	b.n	800b4a6 <_calloc_r+0x12>

0800b4bc <free>:
 800b4bc:	4b02      	ldr	r3, [pc, #8]	; (800b4c8 <free+0xc>)
 800b4be:	4601      	mov	r1, r0
 800b4c0:	6818      	ldr	r0, [r3, #0]
 800b4c2:	f000 bc15 	b.w	800bcf0 <_free_r>
 800b4c6:	bf00      	nop
 800b4c8:	200004bc 	.word	0x200004bc

0800b4cc <sbrk_aligned>:
 800b4cc:	b570      	push	{r4, r5, r6, lr}
 800b4ce:	4e0e      	ldr	r6, [pc, #56]	; (800b508 <sbrk_aligned+0x3c>)
 800b4d0:	460c      	mov	r4, r1
 800b4d2:	6831      	ldr	r1, [r6, #0]
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	b911      	cbnz	r1, 800b4de <sbrk_aligned+0x12>
 800b4d8:	f000 fbae 	bl	800bc38 <_sbrk_r>
 800b4dc:	6030      	str	r0, [r6, #0]
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f000 fba9 	bl	800bc38 <_sbrk_r>
 800b4e6:	1c43      	adds	r3, r0, #1
 800b4e8:	d00a      	beq.n	800b500 <sbrk_aligned+0x34>
 800b4ea:	1cc4      	adds	r4, r0, #3
 800b4ec:	f024 0403 	bic.w	r4, r4, #3
 800b4f0:	42a0      	cmp	r0, r4
 800b4f2:	d007      	beq.n	800b504 <sbrk_aligned+0x38>
 800b4f4:	1a21      	subs	r1, r4, r0
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	f000 fb9e 	bl	800bc38 <_sbrk_r>
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d101      	bne.n	800b504 <sbrk_aligned+0x38>
 800b500:	f04f 34ff 	mov.w	r4, #4294967295
 800b504:	4620      	mov	r0, r4
 800b506:	bd70      	pop	{r4, r5, r6, pc}
 800b508:	20000a60 	.word	0x20000a60

0800b50c <_malloc_r>:
 800b50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b510:	1ccd      	adds	r5, r1, #3
 800b512:	f025 0503 	bic.w	r5, r5, #3
 800b516:	3508      	adds	r5, #8
 800b518:	2d0c      	cmp	r5, #12
 800b51a:	bf38      	it	cc
 800b51c:	250c      	movcc	r5, #12
 800b51e:	2d00      	cmp	r5, #0
 800b520:	4607      	mov	r7, r0
 800b522:	db01      	blt.n	800b528 <_malloc_r+0x1c>
 800b524:	42a9      	cmp	r1, r5
 800b526:	d905      	bls.n	800b534 <_malloc_r+0x28>
 800b528:	230c      	movs	r3, #12
 800b52a:	2600      	movs	r6, #0
 800b52c:	603b      	str	r3, [r7, #0]
 800b52e:	4630      	mov	r0, r6
 800b530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b534:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b608 <_malloc_r+0xfc>
 800b538:	f000 f868 	bl	800b60c <__malloc_lock>
 800b53c:	f8d8 3000 	ldr.w	r3, [r8]
 800b540:	461c      	mov	r4, r3
 800b542:	bb5c      	cbnz	r4, 800b59c <_malloc_r+0x90>
 800b544:	4629      	mov	r1, r5
 800b546:	4638      	mov	r0, r7
 800b548:	f7ff ffc0 	bl	800b4cc <sbrk_aligned>
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	4604      	mov	r4, r0
 800b550:	d155      	bne.n	800b5fe <_malloc_r+0xf2>
 800b552:	f8d8 4000 	ldr.w	r4, [r8]
 800b556:	4626      	mov	r6, r4
 800b558:	2e00      	cmp	r6, #0
 800b55a:	d145      	bne.n	800b5e8 <_malloc_r+0xdc>
 800b55c:	2c00      	cmp	r4, #0
 800b55e:	d048      	beq.n	800b5f2 <_malloc_r+0xe6>
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	4631      	mov	r1, r6
 800b564:	4638      	mov	r0, r7
 800b566:	eb04 0903 	add.w	r9, r4, r3
 800b56a:	f000 fb65 	bl	800bc38 <_sbrk_r>
 800b56e:	4581      	cmp	r9, r0
 800b570:	d13f      	bne.n	800b5f2 <_malloc_r+0xe6>
 800b572:	6821      	ldr	r1, [r4, #0]
 800b574:	4638      	mov	r0, r7
 800b576:	1a6d      	subs	r5, r5, r1
 800b578:	4629      	mov	r1, r5
 800b57a:	f7ff ffa7 	bl	800b4cc <sbrk_aligned>
 800b57e:	3001      	adds	r0, #1
 800b580:	d037      	beq.n	800b5f2 <_malloc_r+0xe6>
 800b582:	6823      	ldr	r3, [r4, #0]
 800b584:	442b      	add	r3, r5
 800b586:	6023      	str	r3, [r4, #0]
 800b588:	f8d8 3000 	ldr.w	r3, [r8]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d038      	beq.n	800b602 <_malloc_r+0xf6>
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	42a2      	cmp	r2, r4
 800b594:	d12b      	bne.n	800b5ee <_malloc_r+0xe2>
 800b596:	2200      	movs	r2, #0
 800b598:	605a      	str	r2, [r3, #4]
 800b59a:	e00f      	b.n	800b5bc <_malloc_r+0xb0>
 800b59c:	6822      	ldr	r2, [r4, #0]
 800b59e:	1b52      	subs	r2, r2, r5
 800b5a0:	d41f      	bmi.n	800b5e2 <_malloc_r+0xd6>
 800b5a2:	2a0b      	cmp	r2, #11
 800b5a4:	d917      	bls.n	800b5d6 <_malloc_r+0xca>
 800b5a6:	1961      	adds	r1, r4, r5
 800b5a8:	42a3      	cmp	r3, r4
 800b5aa:	6025      	str	r5, [r4, #0]
 800b5ac:	bf18      	it	ne
 800b5ae:	6059      	strne	r1, [r3, #4]
 800b5b0:	6863      	ldr	r3, [r4, #4]
 800b5b2:	bf08      	it	eq
 800b5b4:	f8c8 1000 	streq.w	r1, [r8]
 800b5b8:	5162      	str	r2, [r4, r5]
 800b5ba:	604b      	str	r3, [r1, #4]
 800b5bc:	4638      	mov	r0, r7
 800b5be:	f104 060b 	add.w	r6, r4, #11
 800b5c2:	f000 f829 	bl	800b618 <__malloc_unlock>
 800b5c6:	f026 0607 	bic.w	r6, r6, #7
 800b5ca:	1d23      	adds	r3, r4, #4
 800b5cc:	1af2      	subs	r2, r6, r3
 800b5ce:	d0ae      	beq.n	800b52e <_malloc_r+0x22>
 800b5d0:	1b9b      	subs	r3, r3, r6
 800b5d2:	50a3      	str	r3, [r4, r2]
 800b5d4:	e7ab      	b.n	800b52e <_malloc_r+0x22>
 800b5d6:	42a3      	cmp	r3, r4
 800b5d8:	6862      	ldr	r2, [r4, #4]
 800b5da:	d1dd      	bne.n	800b598 <_malloc_r+0x8c>
 800b5dc:	f8c8 2000 	str.w	r2, [r8]
 800b5e0:	e7ec      	b.n	800b5bc <_malloc_r+0xb0>
 800b5e2:	4623      	mov	r3, r4
 800b5e4:	6864      	ldr	r4, [r4, #4]
 800b5e6:	e7ac      	b.n	800b542 <_malloc_r+0x36>
 800b5e8:	4634      	mov	r4, r6
 800b5ea:	6876      	ldr	r6, [r6, #4]
 800b5ec:	e7b4      	b.n	800b558 <_malloc_r+0x4c>
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	e7cc      	b.n	800b58c <_malloc_r+0x80>
 800b5f2:	230c      	movs	r3, #12
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	603b      	str	r3, [r7, #0]
 800b5f8:	f000 f80e 	bl	800b618 <__malloc_unlock>
 800b5fc:	e797      	b.n	800b52e <_malloc_r+0x22>
 800b5fe:	6025      	str	r5, [r4, #0]
 800b600:	e7dc      	b.n	800b5bc <_malloc_r+0xb0>
 800b602:	605b      	str	r3, [r3, #4]
 800b604:	deff      	udf	#255	; 0xff
 800b606:	bf00      	nop
 800b608:	20000a5c 	.word	0x20000a5c

0800b60c <__malloc_lock>:
 800b60c:	4801      	ldr	r0, [pc, #4]	; (800b614 <__malloc_lock+0x8>)
 800b60e:	f000 bb5f 	b.w	800bcd0 <__retarget_lock_acquire_recursive>
 800b612:	bf00      	nop
 800b614:	20000ba4 	.word	0x20000ba4

0800b618 <__malloc_unlock>:
 800b618:	4801      	ldr	r0, [pc, #4]	; (800b620 <__malloc_unlock+0x8>)
 800b61a:	f000 bb5a 	b.w	800bcd2 <__retarget_lock_release_recursive>
 800b61e:	bf00      	nop
 800b620:	20000ba4 	.word	0x20000ba4

0800b624 <__sflush_r>:
 800b624:	898a      	ldrh	r2, [r1, #12]
 800b626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b628:	4605      	mov	r5, r0
 800b62a:	0710      	lsls	r0, r2, #28
 800b62c:	460c      	mov	r4, r1
 800b62e:	d457      	bmi.n	800b6e0 <__sflush_r+0xbc>
 800b630:	684b      	ldr	r3, [r1, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	dc04      	bgt.n	800b640 <__sflush_r+0x1c>
 800b636:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b638:	2b00      	cmp	r3, #0
 800b63a:	dc01      	bgt.n	800b640 <__sflush_r+0x1c>
 800b63c:	2000      	movs	r0, #0
 800b63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b642:	2e00      	cmp	r6, #0
 800b644:	d0fa      	beq.n	800b63c <__sflush_r+0x18>
 800b646:	2300      	movs	r3, #0
 800b648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b64c:	682f      	ldr	r7, [r5, #0]
 800b64e:	6a21      	ldr	r1, [r4, #32]
 800b650:	602b      	str	r3, [r5, #0]
 800b652:	d032      	beq.n	800b6ba <__sflush_r+0x96>
 800b654:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b656:	89a3      	ldrh	r3, [r4, #12]
 800b658:	075a      	lsls	r2, r3, #29
 800b65a:	d505      	bpl.n	800b668 <__sflush_r+0x44>
 800b65c:	6863      	ldr	r3, [r4, #4]
 800b65e:	1ac0      	subs	r0, r0, r3
 800b660:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b662:	b10b      	cbz	r3, 800b668 <__sflush_r+0x44>
 800b664:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b666:	1ac0      	subs	r0, r0, r3
 800b668:	2300      	movs	r3, #0
 800b66a:	4602      	mov	r2, r0
 800b66c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b66e:	4628      	mov	r0, r5
 800b670:	6a21      	ldr	r1, [r4, #32]
 800b672:	47b0      	blx	r6
 800b674:	1c43      	adds	r3, r0, #1
 800b676:	89a3      	ldrh	r3, [r4, #12]
 800b678:	d106      	bne.n	800b688 <__sflush_r+0x64>
 800b67a:	6829      	ldr	r1, [r5, #0]
 800b67c:	291d      	cmp	r1, #29
 800b67e:	d82b      	bhi.n	800b6d8 <__sflush_r+0xb4>
 800b680:	4a28      	ldr	r2, [pc, #160]	; (800b724 <__sflush_r+0x100>)
 800b682:	410a      	asrs	r2, r1
 800b684:	07d6      	lsls	r6, r2, #31
 800b686:	d427      	bmi.n	800b6d8 <__sflush_r+0xb4>
 800b688:	2200      	movs	r2, #0
 800b68a:	6062      	str	r2, [r4, #4]
 800b68c:	6922      	ldr	r2, [r4, #16]
 800b68e:	04d9      	lsls	r1, r3, #19
 800b690:	6022      	str	r2, [r4, #0]
 800b692:	d504      	bpl.n	800b69e <__sflush_r+0x7a>
 800b694:	1c42      	adds	r2, r0, #1
 800b696:	d101      	bne.n	800b69c <__sflush_r+0x78>
 800b698:	682b      	ldr	r3, [r5, #0]
 800b69a:	b903      	cbnz	r3, 800b69e <__sflush_r+0x7a>
 800b69c:	6560      	str	r0, [r4, #84]	; 0x54
 800b69e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6a0:	602f      	str	r7, [r5, #0]
 800b6a2:	2900      	cmp	r1, #0
 800b6a4:	d0ca      	beq.n	800b63c <__sflush_r+0x18>
 800b6a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6aa:	4299      	cmp	r1, r3
 800b6ac:	d002      	beq.n	800b6b4 <__sflush_r+0x90>
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f000 fb1e 	bl	800bcf0 <_free_r>
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	6360      	str	r0, [r4, #52]	; 0x34
 800b6b8:	e7c1      	b.n	800b63e <__sflush_r+0x1a>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	4628      	mov	r0, r5
 800b6be:	47b0      	blx	r6
 800b6c0:	1c41      	adds	r1, r0, #1
 800b6c2:	d1c8      	bne.n	800b656 <__sflush_r+0x32>
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d0c5      	beq.n	800b656 <__sflush_r+0x32>
 800b6ca:	2b1d      	cmp	r3, #29
 800b6cc:	d001      	beq.n	800b6d2 <__sflush_r+0xae>
 800b6ce:	2b16      	cmp	r3, #22
 800b6d0:	d101      	bne.n	800b6d6 <__sflush_r+0xb2>
 800b6d2:	602f      	str	r7, [r5, #0]
 800b6d4:	e7b2      	b.n	800b63c <__sflush_r+0x18>
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6dc:	81a3      	strh	r3, [r4, #12]
 800b6de:	e7ae      	b.n	800b63e <__sflush_r+0x1a>
 800b6e0:	690f      	ldr	r7, [r1, #16]
 800b6e2:	2f00      	cmp	r7, #0
 800b6e4:	d0aa      	beq.n	800b63c <__sflush_r+0x18>
 800b6e6:	0793      	lsls	r3, r2, #30
 800b6e8:	bf18      	it	ne
 800b6ea:	2300      	movne	r3, #0
 800b6ec:	680e      	ldr	r6, [r1, #0]
 800b6ee:	bf08      	it	eq
 800b6f0:	694b      	ldreq	r3, [r1, #20]
 800b6f2:	1bf6      	subs	r6, r6, r7
 800b6f4:	600f      	str	r7, [r1, #0]
 800b6f6:	608b      	str	r3, [r1, #8]
 800b6f8:	2e00      	cmp	r6, #0
 800b6fa:	dd9f      	ble.n	800b63c <__sflush_r+0x18>
 800b6fc:	4633      	mov	r3, r6
 800b6fe:	463a      	mov	r2, r7
 800b700:	4628      	mov	r0, r5
 800b702:	6a21      	ldr	r1, [r4, #32]
 800b704:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b708:	47e0      	blx	ip
 800b70a:	2800      	cmp	r0, #0
 800b70c:	dc06      	bgt.n	800b71c <__sflush_r+0xf8>
 800b70e:	89a3      	ldrh	r3, [r4, #12]
 800b710:	f04f 30ff 	mov.w	r0, #4294967295
 800b714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b718:	81a3      	strh	r3, [r4, #12]
 800b71a:	e790      	b.n	800b63e <__sflush_r+0x1a>
 800b71c:	4407      	add	r7, r0
 800b71e:	1a36      	subs	r6, r6, r0
 800b720:	e7ea      	b.n	800b6f8 <__sflush_r+0xd4>
 800b722:	bf00      	nop
 800b724:	dfbffffe 	.word	0xdfbffffe

0800b728 <_fflush_r>:
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	690b      	ldr	r3, [r1, #16]
 800b72c:	4605      	mov	r5, r0
 800b72e:	460c      	mov	r4, r1
 800b730:	b913      	cbnz	r3, 800b738 <_fflush_r+0x10>
 800b732:	2500      	movs	r5, #0
 800b734:	4628      	mov	r0, r5
 800b736:	bd38      	pop	{r3, r4, r5, pc}
 800b738:	b118      	cbz	r0, 800b742 <_fflush_r+0x1a>
 800b73a:	6a03      	ldr	r3, [r0, #32]
 800b73c:	b90b      	cbnz	r3, 800b742 <_fflush_r+0x1a>
 800b73e:	f000 f8a9 	bl	800b894 <__sinit>
 800b742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d0f3      	beq.n	800b732 <_fflush_r+0xa>
 800b74a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b74c:	07d0      	lsls	r0, r2, #31
 800b74e:	d404      	bmi.n	800b75a <_fflush_r+0x32>
 800b750:	0599      	lsls	r1, r3, #22
 800b752:	d402      	bmi.n	800b75a <_fflush_r+0x32>
 800b754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b756:	f000 fabb 	bl	800bcd0 <__retarget_lock_acquire_recursive>
 800b75a:	4628      	mov	r0, r5
 800b75c:	4621      	mov	r1, r4
 800b75e:	f7ff ff61 	bl	800b624 <__sflush_r>
 800b762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b764:	4605      	mov	r5, r0
 800b766:	07da      	lsls	r2, r3, #31
 800b768:	d4e4      	bmi.n	800b734 <_fflush_r+0xc>
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	059b      	lsls	r3, r3, #22
 800b76e:	d4e1      	bmi.n	800b734 <_fflush_r+0xc>
 800b770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b772:	f000 faae 	bl	800bcd2 <__retarget_lock_release_recursive>
 800b776:	e7dd      	b.n	800b734 <_fflush_r+0xc>

0800b778 <fflush>:
 800b778:	4601      	mov	r1, r0
 800b77a:	b920      	cbnz	r0, 800b786 <fflush+0xe>
 800b77c:	4a04      	ldr	r2, [pc, #16]	; (800b790 <fflush+0x18>)
 800b77e:	4905      	ldr	r1, [pc, #20]	; (800b794 <fflush+0x1c>)
 800b780:	4805      	ldr	r0, [pc, #20]	; (800b798 <fflush+0x20>)
 800b782:	f000 b89f 	b.w	800b8c4 <_fwalk_sglue>
 800b786:	4b05      	ldr	r3, [pc, #20]	; (800b79c <fflush+0x24>)
 800b788:	6818      	ldr	r0, [r3, #0]
 800b78a:	f7ff bfcd 	b.w	800b728 <_fflush_r>
 800b78e:	bf00      	nop
 800b790:	20000464 	.word	0x20000464
 800b794:	0800b729 	.word	0x0800b729
 800b798:	20000470 	.word	0x20000470
 800b79c:	200004bc 	.word	0x200004bc

0800b7a0 <std>:
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	b510      	push	{r4, lr}
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b7aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7ae:	6083      	str	r3, [r0, #8]
 800b7b0:	8181      	strh	r1, [r0, #12]
 800b7b2:	6643      	str	r3, [r0, #100]	; 0x64
 800b7b4:	81c2      	strh	r2, [r0, #14]
 800b7b6:	6183      	str	r3, [r0, #24]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	2208      	movs	r2, #8
 800b7bc:	305c      	adds	r0, #92	; 0x5c
 800b7be:	f000 f9ff 	bl	800bbc0 <memset>
 800b7c2:	4b05      	ldr	r3, [pc, #20]	; (800b7d8 <std+0x38>)
 800b7c4:	6224      	str	r4, [r4, #32]
 800b7c6:	6263      	str	r3, [r4, #36]	; 0x24
 800b7c8:	4b04      	ldr	r3, [pc, #16]	; (800b7dc <std+0x3c>)
 800b7ca:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7cc:	4b04      	ldr	r3, [pc, #16]	; (800b7e0 <std+0x40>)
 800b7ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7d0:	4b04      	ldr	r3, [pc, #16]	; (800b7e4 <std+0x44>)
 800b7d2:	6323      	str	r3, [r4, #48]	; 0x30
 800b7d4:	bd10      	pop	{r4, pc}
 800b7d6:	bf00      	nop
 800b7d8:	0800b9dd 	.word	0x0800b9dd
 800b7dc:	0800b9ff 	.word	0x0800b9ff
 800b7e0:	0800ba37 	.word	0x0800ba37
 800b7e4:	0800ba5b 	.word	0x0800ba5b

0800b7e8 <stdio_exit_handler>:
 800b7e8:	4a02      	ldr	r2, [pc, #8]	; (800b7f4 <stdio_exit_handler+0xc>)
 800b7ea:	4903      	ldr	r1, [pc, #12]	; (800b7f8 <stdio_exit_handler+0x10>)
 800b7ec:	4803      	ldr	r0, [pc, #12]	; (800b7fc <stdio_exit_handler+0x14>)
 800b7ee:	f000 b869 	b.w	800b8c4 <_fwalk_sglue>
 800b7f2:	bf00      	nop
 800b7f4:	20000464 	.word	0x20000464
 800b7f8:	0800b729 	.word	0x0800b729
 800b7fc:	20000470 	.word	0x20000470

0800b800 <cleanup_stdio>:
 800b800:	6841      	ldr	r1, [r0, #4]
 800b802:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <cleanup_stdio+0x34>)
 800b804:	b510      	push	{r4, lr}
 800b806:	4299      	cmp	r1, r3
 800b808:	4604      	mov	r4, r0
 800b80a:	d001      	beq.n	800b810 <cleanup_stdio+0x10>
 800b80c:	f7ff ff8c 	bl	800b728 <_fflush_r>
 800b810:	68a1      	ldr	r1, [r4, #8]
 800b812:	4b09      	ldr	r3, [pc, #36]	; (800b838 <cleanup_stdio+0x38>)
 800b814:	4299      	cmp	r1, r3
 800b816:	d002      	beq.n	800b81e <cleanup_stdio+0x1e>
 800b818:	4620      	mov	r0, r4
 800b81a:	f7ff ff85 	bl	800b728 <_fflush_r>
 800b81e:	68e1      	ldr	r1, [r4, #12]
 800b820:	4b06      	ldr	r3, [pc, #24]	; (800b83c <cleanup_stdio+0x3c>)
 800b822:	4299      	cmp	r1, r3
 800b824:	d004      	beq.n	800b830 <cleanup_stdio+0x30>
 800b826:	4620      	mov	r0, r4
 800b828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b82c:	f7ff bf7c 	b.w	800b728 <_fflush_r>
 800b830:	bd10      	pop	{r4, pc}
 800b832:	bf00      	nop
 800b834:	20000a64 	.word	0x20000a64
 800b838:	20000acc 	.word	0x20000acc
 800b83c:	20000b34 	.word	0x20000b34

0800b840 <global_stdio_init.part.0>:
 800b840:	b510      	push	{r4, lr}
 800b842:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <global_stdio_init.part.0+0x30>)
 800b844:	4c0b      	ldr	r4, [pc, #44]	; (800b874 <global_stdio_init.part.0+0x34>)
 800b846:	4a0c      	ldr	r2, [pc, #48]	; (800b878 <global_stdio_init.part.0+0x38>)
 800b848:	4620      	mov	r0, r4
 800b84a:	601a      	str	r2, [r3, #0]
 800b84c:	2104      	movs	r1, #4
 800b84e:	2200      	movs	r2, #0
 800b850:	f7ff ffa6 	bl	800b7a0 <std>
 800b854:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b858:	2201      	movs	r2, #1
 800b85a:	2109      	movs	r1, #9
 800b85c:	f7ff ffa0 	bl	800b7a0 <std>
 800b860:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b864:	2202      	movs	r2, #2
 800b866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b86a:	2112      	movs	r1, #18
 800b86c:	f7ff bf98 	b.w	800b7a0 <std>
 800b870:	20000b9c 	.word	0x20000b9c
 800b874:	20000a64 	.word	0x20000a64
 800b878:	0800b7e9 	.word	0x0800b7e9

0800b87c <__sfp_lock_acquire>:
 800b87c:	4801      	ldr	r0, [pc, #4]	; (800b884 <__sfp_lock_acquire+0x8>)
 800b87e:	f000 ba27 	b.w	800bcd0 <__retarget_lock_acquire_recursive>
 800b882:	bf00      	nop
 800b884:	20000ba5 	.word	0x20000ba5

0800b888 <__sfp_lock_release>:
 800b888:	4801      	ldr	r0, [pc, #4]	; (800b890 <__sfp_lock_release+0x8>)
 800b88a:	f000 ba22 	b.w	800bcd2 <__retarget_lock_release_recursive>
 800b88e:	bf00      	nop
 800b890:	20000ba5 	.word	0x20000ba5

0800b894 <__sinit>:
 800b894:	b510      	push	{r4, lr}
 800b896:	4604      	mov	r4, r0
 800b898:	f7ff fff0 	bl	800b87c <__sfp_lock_acquire>
 800b89c:	6a23      	ldr	r3, [r4, #32]
 800b89e:	b11b      	cbz	r3, 800b8a8 <__sinit+0x14>
 800b8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8a4:	f7ff bff0 	b.w	800b888 <__sfp_lock_release>
 800b8a8:	4b04      	ldr	r3, [pc, #16]	; (800b8bc <__sinit+0x28>)
 800b8aa:	6223      	str	r3, [r4, #32]
 800b8ac:	4b04      	ldr	r3, [pc, #16]	; (800b8c0 <__sinit+0x2c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1f5      	bne.n	800b8a0 <__sinit+0xc>
 800b8b4:	f7ff ffc4 	bl	800b840 <global_stdio_init.part.0>
 800b8b8:	e7f2      	b.n	800b8a0 <__sinit+0xc>
 800b8ba:	bf00      	nop
 800b8bc:	0800b801 	.word	0x0800b801
 800b8c0:	20000b9c 	.word	0x20000b9c

0800b8c4 <_fwalk_sglue>:
 800b8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8c8:	4607      	mov	r7, r0
 800b8ca:	4688      	mov	r8, r1
 800b8cc:	4614      	mov	r4, r2
 800b8ce:	2600      	movs	r6, #0
 800b8d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8d4:	f1b9 0901 	subs.w	r9, r9, #1
 800b8d8:	d505      	bpl.n	800b8e6 <_fwalk_sglue+0x22>
 800b8da:	6824      	ldr	r4, [r4, #0]
 800b8dc:	2c00      	cmp	r4, #0
 800b8de:	d1f7      	bne.n	800b8d0 <_fwalk_sglue+0xc>
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8e6:	89ab      	ldrh	r3, [r5, #12]
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d907      	bls.n	800b8fc <_fwalk_sglue+0x38>
 800b8ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	d003      	beq.n	800b8fc <_fwalk_sglue+0x38>
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	47c0      	blx	r8
 800b8fa:	4306      	orrs	r6, r0
 800b8fc:	3568      	adds	r5, #104	; 0x68
 800b8fe:	e7e9      	b.n	800b8d4 <_fwalk_sglue+0x10>

0800b900 <iprintf>:
 800b900:	b40f      	push	{r0, r1, r2, r3}
 800b902:	b507      	push	{r0, r1, r2, lr}
 800b904:	4906      	ldr	r1, [pc, #24]	; (800b920 <iprintf+0x20>)
 800b906:	ab04      	add	r3, sp, #16
 800b908:	6808      	ldr	r0, [r1, #0]
 800b90a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b90e:	6881      	ldr	r1, [r0, #8]
 800b910:	9301      	str	r3, [sp, #4]
 800b912:	f000 fa5d 	bl	800bdd0 <_vfiprintf_r>
 800b916:	b003      	add	sp, #12
 800b918:	f85d eb04 	ldr.w	lr, [sp], #4
 800b91c:	b004      	add	sp, #16
 800b91e:	4770      	bx	lr
 800b920:	200004bc 	.word	0x200004bc

0800b924 <_puts_r>:
 800b924:	6a03      	ldr	r3, [r0, #32]
 800b926:	b570      	push	{r4, r5, r6, lr}
 800b928:	4605      	mov	r5, r0
 800b92a:	460e      	mov	r6, r1
 800b92c:	6884      	ldr	r4, [r0, #8]
 800b92e:	b90b      	cbnz	r3, 800b934 <_puts_r+0x10>
 800b930:	f7ff ffb0 	bl	800b894 <__sinit>
 800b934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b936:	07db      	lsls	r3, r3, #31
 800b938:	d405      	bmi.n	800b946 <_puts_r+0x22>
 800b93a:	89a3      	ldrh	r3, [r4, #12]
 800b93c:	0598      	lsls	r0, r3, #22
 800b93e:	d402      	bmi.n	800b946 <_puts_r+0x22>
 800b940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b942:	f000 f9c5 	bl	800bcd0 <__retarget_lock_acquire_recursive>
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	0719      	lsls	r1, r3, #28
 800b94a:	d513      	bpl.n	800b974 <_puts_r+0x50>
 800b94c:	6923      	ldr	r3, [r4, #16]
 800b94e:	b18b      	cbz	r3, 800b974 <_puts_r+0x50>
 800b950:	3e01      	subs	r6, #1
 800b952:	68a3      	ldr	r3, [r4, #8]
 800b954:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b958:	3b01      	subs	r3, #1
 800b95a:	60a3      	str	r3, [r4, #8]
 800b95c:	b9e9      	cbnz	r1, 800b99a <_puts_r+0x76>
 800b95e:	2b00      	cmp	r3, #0
 800b960:	da2e      	bge.n	800b9c0 <_puts_r+0x9c>
 800b962:	4622      	mov	r2, r4
 800b964:	210a      	movs	r1, #10
 800b966:	4628      	mov	r0, r5
 800b968:	f000 f87b 	bl	800ba62 <__swbuf_r>
 800b96c:	3001      	adds	r0, #1
 800b96e:	d007      	beq.n	800b980 <_puts_r+0x5c>
 800b970:	250a      	movs	r5, #10
 800b972:	e007      	b.n	800b984 <_puts_r+0x60>
 800b974:	4621      	mov	r1, r4
 800b976:	4628      	mov	r0, r5
 800b978:	f000 f8b0 	bl	800badc <__swsetup_r>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	d0e7      	beq.n	800b950 <_puts_r+0x2c>
 800b980:	f04f 35ff 	mov.w	r5, #4294967295
 800b984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b986:	07da      	lsls	r2, r3, #31
 800b988:	d405      	bmi.n	800b996 <_puts_r+0x72>
 800b98a:	89a3      	ldrh	r3, [r4, #12]
 800b98c:	059b      	lsls	r3, r3, #22
 800b98e:	d402      	bmi.n	800b996 <_puts_r+0x72>
 800b990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b992:	f000 f99e 	bl	800bcd2 <__retarget_lock_release_recursive>
 800b996:	4628      	mov	r0, r5
 800b998:	bd70      	pop	{r4, r5, r6, pc}
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	da04      	bge.n	800b9a8 <_puts_r+0x84>
 800b99e:	69a2      	ldr	r2, [r4, #24]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	dc06      	bgt.n	800b9b2 <_puts_r+0x8e>
 800b9a4:	290a      	cmp	r1, #10
 800b9a6:	d004      	beq.n	800b9b2 <_puts_r+0x8e>
 800b9a8:	6823      	ldr	r3, [r4, #0]
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	6022      	str	r2, [r4, #0]
 800b9ae:	7019      	strb	r1, [r3, #0]
 800b9b0:	e7cf      	b.n	800b952 <_puts_r+0x2e>
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	f000 f854 	bl	800ba62 <__swbuf_r>
 800b9ba:	3001      	adds	r0, #1
 800b9bc:	d1c9      	bne.n	800b952 <_puts_r+0x2e>
 800b9be:	e7df      	b.n	800b980 <_puts_r+0x5c>
 800b9c0:	250a      	movs	r5, #10
 800b9c2:	6823      	ldr	r3, [r4, #0]
 800b9c4:	1c5a      	adds	r2, r3, #1
 800b9c6:	6022      	str	r2, [r4, #0]
 800b9c8:	701d      	strb	r5, [r3, #0]
 800b9ca:	e7db      	b.n	800b984 <_puts_r+0x60>

0800b9cc <puts>:
 800b9cc:	4b02      	ldr	r3, [pc, #8]	; (800b9d8 <puts+0xc>)
 800b9ce:	4601      	mov	r1, r0
 800b9d0:	6818      	ldr	r0, [r3, #0]
 800b9d2:	f7ff bfa7 	b.w	800b924 <_puts_r>
 800b9d6:	bf00      	nop
 800b9d8:	200004bc 	.word	0x200004bc

0800b9dc <__sread>:
 800b9dc:	b510      	push	{r4, lr}
 800b9de:	460c      	mov	r4, r1
 800b9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e4:	f000 f916 	bl	800bc14 <_read_r>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	bfab      	itete	ge
 800b9ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9ee:	89a3      	ldrhlt	r3, [r4, #12]
 800b9f0:	181b      	addge	r3, r3, r0
 800b9f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9f6:	bfac      	ite	ge
 800b9f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9fa:	81a3      	strhlt	r3, [r4, #12]
 800b9fc:	bd10      	pop	{r4, pc}

0800b9fe <__swrite>:
 800b9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba02:	461f      	mov	r7, r3
 800ba04:	898b      	ldrh	r3, [r1, #12]
 800ba06:	4605      	mov	r5, r0
 800ba08:	05db      	lsls	r3, r3, #23
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	4616      	mov	r6, r2
 800ba0e:	d505      	bpl.n	800ba1c <__swrite+0x1e>
 800ba10:	2302      	movs	r3, #2
 800ba12:	2200      	movs	r2, #0
 800ba14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba18:	f000 f8ea 	bl	800bbf0 <_lseek_r>
 800ba1c:	89a3      	ldrh	r3, [r4, #12]
 800ba1e:	4632      	mov	r2, r6
 800ba20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba24:	81a3      	strh	r3, [r4, #12]
 800ba26:	4628      	mov	r0, r5
 800ba28:	463b      	mov	r3, r7
 800ba2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba32:	f000 b911 	b.w	800bc58 <_write_r>

0800ba36 <__sseek>:
 800ba36:	b510      	push	{r4, lr}
 800ba38:	460c      	mov	r4, r1
 800ba3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba3e:	f000 f8d7 	bl	800bbf0 <_lseek_r>
 800ba42:	1c43      	adds	r3, r0, #1
 800ba44:	89a3      	ldrh	r3, [r4, #12]
 800ba46:	bf15      	itete	ne
 800ba48:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba52:	81a3      	strheq	r3, [r4, #12]
 800ba54:	bf18      	it	ne
 800ba56:	81a3      	strhne	r3, [r4, #12]
 800ba58:	bd10      	pop	{r4, pc}

0800ba5a <__sclose>:
 800ba5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba5e:	f000 b8b7 	b.w	800bbd0 <_close_r>

0800ba62 <__swbuf_r>:
 800ba62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba64:	460e      	mov	r6, r1
 800ba66:	4614      	mov	r4, r2
 800ba68:	4605      	mov	r5, r0
 800ba6a:	b118      	cbz	r0, 800ba74 <__swbuf_r+0x12>
 800ba6c:	6a03      	ldr	r3, [r0, #32]
 800ba6e:	b90b      	cbnz	r3, 800ba74 <__swbuf_r+0x12>
 800ba70:	f7ff ff10 	bl	800b894 <__sinit>
 800ba74:	69a3      	ldr	r3, [r4, #24]
 800ba76:	60a3      	str	r3, [r4, #8]
 800ba78:	89a3      	ldrh	r3, [r4, #12]
 800ba7a:	071a      	lsls	r2, r3, #28
 800ba7c:	d525      	bpl.n	800baca <__swbuf_r+0x68>
 800ba7e:	6923      	ldr	r3, [r4, #16]
 800ba80:	b31b      	cbz	r3, 800baca <__swbuf_r+0x68>
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	6922      	ldr	r2, [r4, #16]
 800ba86:	b2f6      	uxtb	r6, r6
 800ba88:	1a98      	subs	r0, r3, r2
 800ba8a:	6963      	ldr	r3, [r4, #20]
 800ba8c:	4637      	mov	r7, r6
 800ba8e:	4283      	cmp	r3, r0
 800ba90:	dc04      	bgt.n	800ba9c <__swbuf_r+0x3a>
 800ba92:	4621      	mov	r1, r4
 800ba94:	4628      	mov	r0, r5
 800ba96:	f7ff fe47 	bl	800b728 <_fflush_r>
 800ba9a:	b9e0      	cbnz	r0, 800bad6 <__swbuf_r+0x74>
 800ba9c:	68a3      	ldr	r3, [r4, #8]
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	60a3      	str	r3, [r4, #8]
 800baa2:	6823      	ldr	r3, [r4, #0]
 800baa4:	1c5a      	adds	r2, r3, #1
 800baa6:	6022      	str	r2, [r4, #0]
 800baa8:	701e      	strb	r6, [r3, #0]
 800baaa:	6962      	ldr	r2, [r4, #20]
 800baac:	1c43      	adds	r3, r0, #1
 800baae:	429a      	cmp	r2, r3
 800bab0:	d004      	beq.n	800babc <__swbuf_r+0x5a>
 800bab2:	89a3      	ldrh	r3, [r4, #12]
 800bab4:	07db      	lsls	r3, r3, #31
 800bab6:	d506      	bpl.n	800bac6 <__swbuf_r+0x64>
 800bab8:	2e0a      	cmp	r6, #10
 800baba:	d104      	bne.n	800bac6 <__swbuf_r+0x64>
 800babc:	4621      	mov	r1, r4
 800babe:	4628      	mov	r0, r5
 800bac0:	f7ff fe32 	bl	800b728 <_fflush_r>
 800bac4:	b938      	cbnz	r0, 800bad6 <__swbuf_r+0x74>
 800bac6:	4638      	mov	r0, r7
 800bac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baca:	4621      	mov	r1, r4
 800bacc:	4628      	mov	r0, r5
 800bace:	f000 f805 	bl	800badc <__swsetup_r>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d0d5      	beq.n	800ba82 <__swbuf_r+0x20>
 800bad6:	f04f 37ff 	mov.w	r7, #4294967295
 800bada:	e7f4      	b.n	800bac6 <__swbuf_r+0x64>

0800badc <__swsetup_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	4b2a      	ldr	r3, [pc, #168]	; (800bb88 <__swsetup_r+0xac>)
 800bae0:	4605      	mov	r5, r0
 800bae2:	6818      	ldr	r0, [r3, #0]
 800bae4:	460c      	mov	r4, r1
 800bae6:	b118      	cbz	r0, 800baf0 <__swsetup_r+0x14>
 800bae8:	6a03      	ldr	r3, [r0, #32]
 800baea:	b90b      	cbnz	r3, 800baf0 <__swsetup_r+0x14>
 800baec:	f7ff fed2 	bl	800b894 <__sinit>
 800baf0:	89a3      	ldrh	r3, [r4, #12]
 800baf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baf6:	0718      	lsls	r0, r3, #28
 800baf8:	d422      	bmi.n	800bb40 <__swsetup_r+0x64>
 800bafa:	06d9      	lsls	r1, r3, #27
 800bafc:	d407      	bmi.n	800bb0e <__swsetup_r+0x32>
 800bafe:	2309      	movs	r3, #9
 800bb00:	602b      	str	r3, [r5, #0]
 800bb02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb06:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0a:	81a3      	strh	r3, [r4, #12]
 800bb0c:	e034      	b.n	800bb78 <__swsetup_r+0x9c>
 800bb0e:	0758      	lsls	r0, r3, #29
 800bb10:	d512      	bpl.n	800bb38 <__swsetup_r+0x5c>
 800bb12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb14:	b141      	cbz	r1, 800bb28 <__swsetup_r+0x4c>
 800bb16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb1a:	4299      	cmp	r1, r3
 800bb1c:	d002      	beq.n	800bb24 <__swsetup_r+0x48>
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f000 f8e6 	bl	800bcf0 <_free_r>
 800bb24:	2300      	movs	r3, #0
 800bb26:	6363      	str	r3, [r4, #52]	; 0x34
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb2e:	81a3      	strh	r3, [r4, #12]
 800bb30:	2300      	movs	r3, #0
 800bb32:	6063      	str	r3, [r4, #4]
 800bb34:	6923      	ldr	r3, [r4, #16]
 800bb36:	6023      	str	r3, [r4, #0]
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	f043 0308 	orr.w	r3, r3, #8
 800bb3e:	81a3      	strh	r3, [r4, #12]
 800bb40:	6923      	ldr	r3, [r4, #16]
 800bb42:	b94b      	cbnz	r3, 800bb58 <__swsetup_r+0x7c>
 800bb44:	89a3      	ldrh	r3, [r4, #12]
 800bb46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb4e:	d003      	beq.n	800bb58 <__swsetup_r+0x7c>
 800bb50:	4621      	mov	r1, r4
 800bb52:	4628      	mov	r0, r5
 800bb54:	f000 fc0f 	bl	800c376 <__smakebuf_r>
 800bb58:	89a0      	ldrh	r0, [r4, #12]
 800bb5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb5e:	f010 0301 	ands.w	r3, r0, #1
 800bb62:	d00a      	beq.n	800bb7a <__swsetup_r+0x9e>
 800bb64:	2300      	movs	r3, #0
 800bb66:	60a3      	str	r3, [r4, #8]
 800bb68:	6963      	ldr	r3, [r4, #20]
 800bb6a:	425b      	negs	r3, r3
 800bb6c:	61a3      	str	r3, [r4, #24]
 800bb6e:	6923      	ldr	r3, [r4, #16]
 800bb70:	b943      	cbnz	r3, 800bb84 <__swsetup_r+0xa8>
 800bb72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb76:	d1c4      	bne.n	800bb02 <__swsetup_r+0x26>
 800bb78:	bd38      	pop	{r3, r4, r5, pc}
 800bb7a:	0781      	lsls	r1, r0, #30
 800bb7c:	bf58      	it	pl
 800bb7e:	6963      	ldrpl	r3, [r4, #20]
 800bb80:	60a3      	str	r3, [r4, #8]
 800bb82:	e7f4      	b.n	800bb6e <__swsetup_r+0x92>
 800bb84:	2000      	movs	r0, #0
 800bb86:	e7f7      	b.n	800bb78 <__swsetup_r+0x9c>
 800bb88:	200004bc 	.word	0x200004bc

0800bb8c <memmove>:
 800bb8c:	4288      	cmp	r0, r1
 800bb8e:	b510      	push	{r4, lr}
 800bb90:	eb01 0402 	add.w	r4, r1, r2
 800bb94:	d902      	bls.n	800bb9c <memmove+0x10>
 800bb96:	4284      	cmp	r4, r0
 800bb98:	4623      	mov	r3, r4
 800bb9a:	d807      	bhi.n	800bbac <memmove+0x20>
 800bb9c:	1e43      	subs	r3, r0, #1
 800bb9e:	42a1      	cmp	r1, r4
 800bba0:	d008      	beq.n	800bbb4 <memmove+0x28>
 800bba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbaa:	e7f8      	b.n	800bb9e <memmove+0x12>
 800bbac:	4601      	mov	r1, r0
 800bbae:	4402      	add	r2, r0
 800bbb0:	428a      	cmp	r2, r1
 800bbb2:	d100      	bne.n	800bbb6 <memmove+0x2a>
 800bbb4:	bd10      	pop	{r4, pc}
 800bbb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbbe:	e7f7      	b.n	800bbb0 <memmove+0x24>

0800bbc0 <memset>:
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	4402      	add	r2, r0
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d100      	bne.n	800bbca <memset+0xa>
 800bbc8:	4770      	bx	lr
 800bbca:	f803 1b01 	strb.w	r1, [r3], #1
 800bbce:	e7f9      	b.n	800bbc4 <memset+0x4>

0800bbd0 <_close_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	4d05      	ldr	r5, [pc, #20]	; (800bbec <_close_r+0x1c>)
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	4608      	mov	r0, r1
 800bbda:	602b      	str	r3, [r5, #0]
 800bbdc:	f7fb fe77 	bl	80078ce <_close>
 800bbe0:	1c43      	adds	r3, r0, #1
 800bbe2:	d102      	bne.n	800bbea <_close_r+0x1a>
 800bbe4:	682b      	ldr	r3, [r5, #0]
 800bbe6:	b103      	cbz	r3, 800bbea <_close_r+0x1a>
 800bbe8:	6023      	str	r3, [r4, #0]
 800bbea:	bd38      	pop	{r3, r4, r5, pc}
 800bbec:	20000ba0 	.word	0x20000ba0

0800bbf0 <_lseek_r>:
 800bbf0:	b538      	push	{r3, r4, r5, lr}
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	4608      	mov	r0, r1
 800bbf6:	4611      	mov	r1, r2
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	4d05      	ldr	r5, [pc, #20]	; (800bc10 <_lseek_r+0x20>)
 800bbfc:	602a      	str	r2, [r5, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f7fb fe89 	bl	8007916 <_lseek>
 800bc04:	1c43      	adds	r3, r0, #1
 800bc06:	d102      	bne.n	800bc0e <_lseek_r+0x1e>
 800bc08:	682b      	ldr	r3, [r5, #0]
 800bc0a:	b103      	cbz	r3, 800bc0e <_lseek_r+0x1e>
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	bd38      	pop	{r3, r4, r5, pc}
 800bc10:	20000ba0 	.word	0x20000ba0

0800bc14 <_read_r>:
 800bc14:	b538      	push	{r3, r4, r5, lr}
 800bc16:	4604      	mov	r4, r0
 800bc18:	4608      	mov	r0, r1
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	4d05      	ldr	r5, [pc, #20]	; (800bc34 <_read_r+0x20>)
 800bc20:	602a      	str	r2, [r5, #0]
 800bc22:	461a      	mov	r2, r3
 800bc24:	f7fb fe1a 	bl	800785c <_read>
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	d102      	bne.n	800bc32 <_read_r+0x1e>
 800bc2c:	682b      	ldr	r3, [r5, #0]
 800bc2e:	b103      	cbz	r3, 800bc32 <_read_r+0x1e>
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	20000ba0 	.word	0x20000ba0

0800bc38 <_sbrk_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	4d05      	ldr	r5, [pc, #20]	; (800bc54 <_sbrk_r+0x1c>)
 800bc3e:	4604      	mov	r4, r0
 800bc40:	4608      	mov	r0, r1
 800bc42:	602b      	str	r3, [r5, #0]
 800bc44:	f7fb fe74 	bl	8007930 <_sbrk>
 800bc48:	1c43      	adds	r3, r0, #1
 800bc4a:	d102      	bne.n	800bc52 <_sbrk_r+0x1a>
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	b103      	cbz	r3, 800bc52 <_sbrk_r+0x1a>
 800bc50:	6023      	str	r3, [r4, #0]
 800bc52:	bd38      	pop	{r3, r4, r5, pc}
 800bc54:	20000ba0 	.word	0x20000ba0

0800bc58 <_write_r>:
 800bc58:	b538      	push	{r3, r4, r5, lr}
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	4608      	mov	r0, r1
 800bc5e:	4611      	mov	r1, r2
 800bc60:	2200      	movs	r2, #0
 800bc62:	4d05      	ldr	r5, [pc, #20]	; (800bc78 <_write_r+0x20>)
 800bc64:	602a      	str	r2, [r5, #0]
 800bc66:	461a      	mov	r2, r3
 800bc68:	f7fb fe15 	bl	8007896 <_write>
 800bc6c:	1c43      	adds	r3, r0, #1
 800bc6e:	d102      	bne.n	800bc76 <_write_r+0x1e>
 800bc70:	682b      	ldr	r3, [r5, #0]
 800bc72:	b103      	cbz	r3, 800bc76 <_write_r+0x1e>
 800bc74:	6023      	str	r3, [r4, #0]
 800bc76:	bd38      	pop	{r3, r4, r5, pc}
 800bc78:	20000ba0 	.word	0x20000ba0

0800bc7c <__errno>:
 800bc7c:	4b01      	ldr	r3, [pc, #4]	; (800bc84 <__errno+0x8>)
 800bc7e:	6818      	ldr	r0, [r3, #0]
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	200004bc 	.word	0x200004bc

0800bc88 <__libc_init_array>:
 800bc88:	b570      	push	{r4, r5, r6, lr}
 800bc8a:	2600      	movs	r6, #0
 800bc8c:	4d0c      	ldr	r5, [pc, #48]	; (800bcc0 <__libc_init_array+0x38>)
 800bc8e:	4c0d      	ldr	r4, [pc, #52]	; (800bcc4 <__libc_init_array+0x3c>)
 800bc90:	1b64      	subs	r4, r4, r5
 800bc92:	10a4      	asrs	r4, r4, #2
 800bc94:	42a6      	cmp	r6, r4
 800bc96:	d109      	bne.n	800bcac <__libc_init_array+0x24>
 800bc98:	f000 fbda 	bl	800c450 <_init>
 800bc9c:	2600      	movs	r6, #0
 800bc9e:	4d0a      	ldr	r5, [pc, #40]	; (800bcc8 <__libc_init_array+0x40>)
 800bca0:	4c0a      	ldr	r4, [pc, #40]	; (800bccc <__libc_init_array+0x44>)
 800bca2:	1b64      	subs	r4, r4, r5
 800bca4:	10a4      	asrs	r4, r4, #2
 800bca6:	42a6      	cmp	r6, r4
 800bca8:	d105      	bne.n	800bcb6 <__libc_init_array+0x2e>
 800bcaa:	bd70      	pop	{r4, r5, r6, pc}
 800bcac:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcb0:	4798      	blx	r3
 800bcb2:	3601      	adds	r6, #1
 800bcb4:	e7ee      	b.n	800bc94 <__libc_init_array+0xc>
 800bcb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcba:	4798      	blx	r3
 800bcbc:	3601      	adds	r6, #1
 800bcbe:	e7f2      	b.n	800bca6 <__libc_init_array+0x1e>
 800bcc0:	0800ce3c 	.word	0x0800ce3c
 800bcc4:	0800ce3c 	.word	0x0800ce3c
 800bcc8:	0800ce3c 	.word	0x0800ce3c
 800bccc:	0800ce40 	.word	0x0800ce40

0800bcd0 <__retarget_lock_acquire_recursive>:
 800bcd0:	4770      	bx	lr

0800bcd2 <__retarget_lock_release_recursive>:
 800bcd2:	4770      	bx	lr

0800bcd4 <memcpy>:
 800bcd4:	440a      	add	r2, r1
 800bcd6:	4291      	cmp	r1, r2
 800bcd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcdc:	d100      	bne.n	800bce0 <memcpy+0xc>
 800bcde:	4770      	bx	lr
 800bce0:	b510      	push	{r4, lr}
 800bce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bce6:	4291      	cmp	r1, r2
 800bce8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcec:	d1f9      	bne.n	800bce2 <memcpy+0xe>
 800bcee:	bd10      	pop	{r4, pc}

0800bcf0 <_free_r>:
 800bcf0:	b538      	push	{r3, r4, r5, lr}
 800bcf2:	4605      	mov	r5, r0
 800bcf4:	2900      	cmp	r1, #0
 800bcf6:	d040      	beq.n	800bd7a <_free_r+0x8a>
 800bcf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcfc:	1f0c      	subs	r4, r1, #4
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	bfb8      	it	lt
 800bd02:	18e4      	addlt	r4, r4, r3
 800bd04:	f7ff fc82 	bl	800b60c <__malloc_lock>
 800bd08:	4a1c      	ldr	r2, [pc, #112]	; (800bd7c <_free_r+0x8c>)
 800bd0a:	6813      	ldr	r3, [r2, #0]
 800bd0c:	b933      	cbnz	r3, 800bd1c <_free_r+0x2c>
 800bd0e:	6063      	str	r3, [r4, #4]
 800bd10:	6014      	str	r4, [r2, #0]
 800bd12:	4628      	mov	r0, r5
 800bd14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd18:	f7ff bc7e 	b.w	800b618 <__malloc_unlock>
 800bd1c:	42a3      	cmp	r3, r4
 800bd1e:	d908      	bls.n	800bd32 <_free_r+0x42>
 800bd20:	6820      	ldr	r0, [r4, #0]
 800bd22:	1821      	adds	r1, r4, r0
 800bd24:	428b      	cmp	r3, r1
 800bd26:	bf01      	itttt	eq
 800bd28:	6819      	ldreq	r1, [r3, #0]
 800bd2a:	685b      	ldreq	r3, [r3, #4]
 800bd2c:	1809      	addeq	r1, r1, r0
 800bd2e:	6021      	streq	r1, [r4, #0]
 800bd30:	e7ed      	b.n	800bd0e <_free_r+0x1e>
 800bd32:	461a      	mov	r2, r3
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	b10b      	cbz	r3, 800bd3c <_free_r+0x4c>
 800bd38:	42a3      	cmp	r3, r4
 800bd3a:	d9fa      	bls.n	800bd32 <_free_r+0x42>
 800bd3c:	6811      	ldr	r1, [r2, #0]
 800bd3e:	1850      	adds	r0, r2, r1
 800bd40:	42a0      	cmp	r0, r4
 800bd42:	d10b      	bne.n	800bd5c <_free_r+0x6c>
 800bd44:	6820      	ldr	r0, [r4, #0]
 800bd46:	4401      	add	r1, r0
 800bd48:	1850      	adds	r0, r2, r1
 800bd4a:	4283      	cmp	r3, r0
 800bd4c:	6011      	str	r1, [r2, #0]
 800bd4e:	d1e0      	bne.n	800bd12 <_free_r+0x22>
 800bd50:	6818      	ldr	r0, [r3, #0]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	4408      	add	r0, r1
 800bd56:	6010      	str	r0, [r2, #0]
 800bd58:	6053      	str	r3, [r2, #4]
 800bd5a:	e7da      	b.n	800bd12 <_free_r+0x22>
 800bd5c:	d902      	bls.n	800bd64 <_free_r+0x74>
 800bd5e:	230c      	movs	r3, #12
 800bd60:	602b      	str	r3, [r5, #0]
 800bd62:	e7d6      	b.n	800bd12 <_free_r+0x22>
 800bd64:	6820      	ldr	r0, [r4, #0]
 800bd66:	1821      	adds	r1, r4, r0
 800bd68:	428b      	cmp	r3, r1
 800bd6a:	bf01      	itttt	eq
 800bd6c:	6819      	ldreq	r1, [r3, #0]
 800bd6e:	685b      	ldreq	r3, [r3, #4]
 800bd70:	1809      	addeq	r1, r1, r0
 800bd72:	6021      	streq	r1, [r4, #0]
 800bd74:	6063      	str	r3, [r4, #4]
 800bd76:	6054      	str	r4, [r2, #4]
 800bd78:	e7cb      	b.n	800bd12 <_free_r+0x22>
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	20000a5c 	.word	0x20000a5c

0800bd80 <__sfputc_r>:
 800bd80:	6893      	ldr	r3, [r2, #8]
 800bd82:	b410      	push	{r4}
 800bd84:	3b01      	subs	r3, #1
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	6093      	str	r3, [r2, #8]
 800bd8a:	da07      	bge.n	800bd9c <__sfputc_r+0x1c>
 800bd8c:	6994      	ldr	r4, [r2, #24]
 800bd8e:	42a3      	cmp	r3, r4
 800bd90:	db01      	blt.n	800bd96 <__sfputc_r+0x16>
 800bd92:	290a      	cmp	r1, #10
 800bd94:	d102      	bne.n	800bd9c <__sfputc_r+0x1c>
 800bd96:	bc10      	pop	{r4}
 800bd98:	f7ff be63 	b.w	800ba62 <__swbuf_r>
 800bd9c:	6813      	ldr	r3, [r2, #0]
 800bd9e:	1c58      	adds	r0, r3, #1
 800bda0:	6010      	str	r0, [r2, #0]
 800bda2:	7019      	strb	r1, [r3, #0]
 800bda4:	4608      	mov	r0, r1
 800bda6:	bc10      	pop	{r4}
 800bda8:	4770      	bx	lr

0800bdaa <__sfputs_r>:
 800bdaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdac:	4606      	mov	r6, r0
 800bdae:	460f      	mov	r7, r1
 800bdb0:	4614      	mov	r4, r2
 800bdb2:	18d5      	adds	r5, r2, r3
 800bdb4:	42ac      	cmp	r4, r5
 800bdb6:	d101      	bne.n	800bdbc <__sfputs_r+0x12>
 800bdb8:	2000      	movs	r0, #0
 800bdba:	e007      	b.n	800bdcc <__sfputs_r+0x22>
 800bdbc:	463a      	mov	r2, r7
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdc4:	f7ff ffdc 	bl	800bd80 <__sfputc_r>
 800bdc8:	1c43      	adds	r3, r0, #1
 800bdca:	d1f3      	bne.n	800bdb4 <__sfputs_r+0xa>
 800bdcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdd0 <_vfiprintf_r>:
 800bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd4:	460d      	mov	r5, r1
 800bdd6:	4614      	mov	r4, r2
 800bdd8:	4698      	mov	r8, r3
 800bdda:	4606      	mov	r6, r0
 800bddc:	b09d      	sub	sp, #116	; 0x74
 800bdde:	b118      	cbz	r0, 800bde8 <_vfiprintf_r+0x18>
 800bde0:	6a03      	ldr	r3, [r0, #32]
 800bde2:	b90b      	cbnz	r3, 800bde8 <_vfiprintf_r+0x18>
 800bde4:	f7ff fd56 	bl	800b894 <__sinit>
 800bde8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdea:	07d9      	lsls	r1, r3, #31
 800bdec:	d405      	bmi.n	800bdfa <_vfiprintf_r+0x2a>
 800bdee:	89ab      	ldrh	r3, [r5, #12]
 800bdf0:	059a      	lsls	r2, r3, #22
 800bdf2:	d402      	bmi.n	800bdfa <_vfiprintf_r+0x2a>
 800bdf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdf6:	f7ff ff6b 	bl	800bcd0 <__retarget_lock_acquire_recursive>
 800bdfa:	89ab      	ldrh	r3, [r5, #12]
 800bdfc:	071b      	lsls	r3, r3, #28
 800bdfe:	d501      	bpl.n	800be04 <_vfiprintf_r+0x34>
 800be00:	692b      	ldr	r3, [r5, #16]
 800be02:	b99b      	cbnz	r3, 800be2c <_vfiprintf_r+0x5c>
 800be04:	4629      	mov	r1, r5
 800be06:	4630      	mov	r0, r6
 800be08:	f7ff fe68 	bl	800badc <__swsetup_r>
 800be0c:	b170      	cbz	r0, 800be2c <_vfiprintf_r+0x5c>
 800be0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be10:	07dc      	lsls	r4, r3, #31
 800be12:	d504      	bpl.n	800be1e <_vfiprintf_r+0x4e>
 800be14:	f04f 30ff 	mov.w	r0, #4294967295
 800be18:	b01d      	add	sp, #116	; 0x74
 800be1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1e:	89ab      	ldrh	r3, [r5, #12]
 800be20:	0598      	lsls	r0, r3, #22
 800be22:	d4f7      	bmi.n	800be14 <_vfiprintf_r+0x44>
 800be24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be26:	f7ff ff54 	bl	800bcd2 <__retarget_lock_release_recursive>
 800be2a:	e7f3      	b.n	800be14 <_vfiprintf_r+0x44>
 800be2c:	2300      	movs	r3, #0
 800be2e:	9309      	str	r3, [sp, #36]	; 0x24
 800be30:	2320      	movs	r3, #32
 800be32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be36:	2330      	movs	r3, #48	; 0x30
 800be38:	f04f 0901 	mov.w	r9, #1
 800be3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800be40:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800bff0 <_vfiprintf_r+0x220>
 800be44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be48:	4623      	mov	r3, r4
 800be4a:	469a      	mov	sl, r3
 800be4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be50:	b10a      	cbz	r2, 800be56 <_vfiprintf_r+0x86>
 800be52:	2a25      	cmp	r2, #37	; 0x25
 800be54:	d1f9      	bne.n	800be4a <_vfiprintf_r+0x7a>
 800be56:	ebba 0b04 	subs.w	fp, sl, r4
 800be5a:	d00b      	beq.n	800be74 <_vfiprintf_r+0xa4>
 800be5c:	465b      	mov	r3, fp
 800be5e:	4622      	mov	r2, r4
 800be60:	4629      	mov	r1, r5
 800be62:	4630      	mov	r0, r6
 800be64:	f7ff ffa1 	bl	800bdaa <__sfputs_r>
 800be68:	3001      	adds	r0, #1
 800be6a:	f000 80a9 	beq.w	800bfc0 <_vfiprintf_r+0x1f0>
 800be6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be70:	445a      	add	r2, fp
 800be72:	9209      	str	r2, [sp, #36]	; 0x24
 800be74:	f89a 3000 	ldrb.w	r3, [sl]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f000 80a1 	beq.w	800bfc0 <_vfiprintf_r+0x1f0>
 800be7e:	2300      	movs	r3, #0
 800be80:	f04f 32ff 	mov.w	r2, #4294967295
 800be84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be88:	f10a 0a01 	add.w	sl, sl, #1
 800be8c:	9304      	str	r3, [sp, #16]
 800be8e:	9307      	str	r3, [sp, #28]
 800be90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be94:	931a      	str	r3, [sp, #104]	; 0x68
 800be96:	4654      	mov	r4, sl
 800be98:	2205      	movs	r2, #5
 800be9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be9e:	4854      	ldr	r0, [pc, #336]	; (800bff0 <_vfiprintf_r+0x220>)
 800bea0:	f000 fac8 	bl	800c434 <memchr>
 800bea4:	9a04      	ldr	r2, [sp, #16]
 800bea6:	b9d8      	cbnz	r0, 800bee0 <_vfiprintf_r+0x110>
 800bea8:	06d1      	lsls	r1, r2, #27
 800beaa:	bf44      	itt	mi
 800beac:	2320      	movmi	r3, #32
 800beae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beb2:	0713      	lsls	r3, r2, #28
 800beb4:	bf44      	itt	mi
 800beb6:	232b      	movmi	r3, #43	; 0x2b
 800beb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bebc:	f89a 3000 	ldrb.w	r3, [sl]
 800bec0:	2b2a      	cmp	r3, #42	; 0x2a
 800bec2:	d015      	beq.n	800bef0 <_vfiprintf_r+0x120>
 800bec4:	4654      	mov	r4, sl
 800bec6:	2000      	movs	r0, #0
 800bec8:	f04f 0c0a 	mov.w	ip, #10
 800becc:	9a07      	ldr	r2, [sp, #28]
 800bece:	4621      	mov	r1, r4
 800bed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bed4:	3b30      	subs	r3, #48	; 0x30
 800bed6:	2b09      	cmp	r3, #9
 800bed8:	d94d      	bls.n	800bf76 <_vfiprintf_r+0x1a6>
 800beda:	b1b0      	cbz	r0, 800bf0a <_vfiprintf_r+0x13a>
 800bedc:	9207      	str	r2, [sp, #28]
 800bede:	e014      	b.n	800bf0a <_vfiprintf_r+0x13a>
 800bee0:	eba0 0308 	sub.w	r3, r0, r8
 800bee4:	fa09 f303 	lsl.w	r3, r9, r3
 800bee8:	4313      	orrs	r3, r2
 800beea:	46a2      	mov	sl, r4
 800beec:	9304      	str	r3, [sp, #16]
 800beee:	e7d2      	b.n	800be96 <_vfiprintf_r+0xc6>
 800bef0:	9b03      	ldr	r3, [sp, #12]
 800bef2:	1d19      	adds	r1, r3, #4
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	9103      	str	r1, [sp, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	bfbb      	ittet	lt
 800befc:	425b      	neglt	r3, r3
 800befe:	f042 0202 	orrlt.w	r2, r2, #2
 800bf02:	9307      	strge	r3, [sp, #28]
 800bf04:	9307      	strlt	r3, [sp, #28]
 800bf06:	bfb8      	it	lt
 800bf08:	9204      	strlt	r2, [sp, #16]
 800bf0a:	7823      	ldrb	r3, [r4, #0]
 800bf0c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf0e:	d10c      	bne.n	800bf2a <_vfiprintf_r+0x15a>
 800bf10:	7863      	ldrb	r3, [r4, #1]
 800bf12:	2b2a      	cmp	r3, #42	; 0x2a
 800bf14:	d134      	bne.n	800bf80 <_vfiprintf_r+0x1b0>
 800bf16:	9b03      	ldr	r3, [sp, #12]
 800bf18:	3402      	adds	r4, #2
 800bf1a:	1d1a      	adds	r2, r3, #4
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	9203      	str	r2, [sp, #12]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	bfb8      	it	lt
 800bf24:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf28:	9305      	str	r3, [sp, #20]
 800bf2a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bff4 <_vfiprintf_r+0x224>
 800bf2e:	2203      	movs	r2, #3
 800bf30:	4650      	mov	r0, sl
 800bf32:	7821      	ldrb	r1, [r4, #0]
 800bf34:	f000 fa7e 	bl	800c434 <memchr>
 800bf38:	b138      	cbz	r0, 800bf4a <_vfiprintf_r+0x17a>
 800bf3a:	2240      	movs	r2, #64	; 0x40
 800bf3c:	9b04      	ldr	r3, [sp, #16]
 800bf3e:	eba0 000a 	sub.w	r0, r0, sl
 800bf42:	4082      	lsls	r2, r0
 800bf44:	4313      	orrs	r3, r2
 800bf46:	3401      	adds	r4, #1
 800bf48:	9304      	str	r3, [sp, #16]
 800bf4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf4e:	2206      	movs	r2, #6
 800bf50:	4829      	ldr	r0, [pc, #164]	; (800bff8 <_vfiprintf_r+0x228>)
 800bf52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf56:	f000 fa6d 	bl	800c434 <memchr>
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	d03f      	beq.n	800bfde <_vfiprintf_r+0x20e>
 800bf5e:	4b27      	ldr	r3, [pc, #156]	; (800bffc <_vfiprintf_r+0x22c>)
 800bf60:	bb1b      	cbnz	r3, 800bfaa <_vfiprintf_r+0x1da>
 800bf62:	9b03      	ldr	r3, [sp, #12]
 800bf64:	3307      	adds	r3, #7
 800bf66:	f023 0307 	bic.w	r3, r3, #7
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	9303      	str	r3, [sp, #12]
 800bf6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf70:	443b      	add	r3, r7
 800bf72:	9309      	str	r3, [sp, #36]	; 0x24
 800bf74:	e768      	b.n	800be48 <_vfiprintf_r+0x78>
 800bf76:	460c      	mov	r4, r1
 800bf78:	2001      	movs	r0, #1
 800bf7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf7e:	e7a6      	b.n	800bece <_vfiprintf_r+0xfe>
 800bf80:	2300      	movs	r3, #0
 800bf82:	f04f 0c0a 	mov.w	ip, #10
 800bf86:	4619      	mov	r1, r3
 800bf88:	3401      	adds	r4, #1
 800bf8a:	9305      	str	r3, [sp, #20]
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf92:	3a30      	subs	r2, #48	; 0x30
 800bf94:	2a09      	cmp	r2, #9
 800bf96:	d903      	bls.n	800bfa0 <_vfiprintf_r+0x1d0>
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d0c6      	beq.n	800bf2a <_vfiprintf_r+0x15a>
 800bf9c:	9105      	str	r1, [sp, #20]
 800bf9e:	e7c4      	b.n	800bf2a <_vfiprintf_r+0x15a>
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfa8:	e7f0      	b.n	800bf8c <_vfiprintf_r+0x1bc>
 800bfaa:	ab03      	add	r3, sp, #12
 800bfac:	9300      	str	r3, [sp, #0]
 800bfae:	462a      	mov	r2, r5
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	4b13      	ldr	r3, [pc, #76]	; (800c000 <_vfiprintf_r+0x230>)
 800bfb4:	a904      	add	r1, sp, #16
 800bfb6:	f3af 8000 	nop.w
 800bfba:	4607      	mov	r7, r0
 800bfbc:	1c78      	adds	r0, r7, #1
 800bfbe:	d1d6      	bne.n	800bf6e <_vfiprintf_r+0x19e>
 800bfc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfc2:	07d9      	lsls	r1, r3, #31
 800bfc4:	d405      	bmi.n	800bfd2 <_vfiprintf_r+0x202>
 800bfc6:	89ab      	ldrh	r3, [r5, #12]
 800bfc8:	059a      	lsls	r2, r3, #22
 800bfca:	d402      	bmi.n	800bfd2 <_vfiprintf_r+0x202>
 800bfcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfce:	f7ff fe80 	bl	800bcd2 <__retarget_lock_release_recursive>
 800bfd2:	89ab      	ldrh	r3, [r5, #12]
 800bfd4:	065b      	lsls	r3, r3, #25
 800bfd6:	f53f af1d 	bmi.w	800be14 <_vfiprintf_r+0x44>
 800bfda:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfdc:	e71c      	b.n	800be18 <_vfiprintf_r+0x48>
 800bfde:	ab03      	add	r3, sp, #12
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	462a      	mov	r2, r5
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	4b06      	ldr	r3, [pc, #24]	; (800c000 <_vfiprintf_r+0x230>)
 800bfe8:	a904      	add	r1, sp, #16
 800bfea:	f000 f87d 	bl	800c0e8 <_printf_i>
 800bfee:	e7e4      	b.n	800bfba <_vfiprintf_r+0x1ea>
 800bff0:	0800ce08 	.word	0x0800ce08
 800bff4:	0800ce0e 	.word	0x0800ce0e
 800bff8:	0800ce12 	.word	0x0800ce12
 800bffc:	00000000 	.word	0x00000000
 800c000:	0800bdab 	.word	0x0800bdab

0800c004 <_printf_common>:
 800c004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c008:	4616      	mov	r6, r2
 800c00a:	4699      	mov	r9, r3
 800c00c:	688a      	ldr	r2, [r1, #8]
 800c00e:	690b      	ldr	r3, [r1, #16]
 800c010:	4607      	mov	r7, r0
 800c012:	4293      	cmp	r3, r2
 800c014:	bfb8      	it	lt
 800c016:	4613      	movlt	r3, r2
 800c018:	6033      	str	r3, [r6, #0]
 800c01a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c01e:	460c      	mov	r4, r1
 800c020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c024:	b10a      	cbz	r2, 800c02a <_printf_common+0x26>
 800c026:	3301      	adds	r3, #1
 800c028:	6033      	str	r3, [r6, #0]
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	0699      	lsls	r1, r3, #26
 800c02e:	bf42      	ittt	mi
 800c030:	6833      	ldrmi	r3, [r6, #0]
 800c032:	3302      	addmi	r3, #2
 800c034:	6033      	strmi	r3, [r6, #0]
 800c036:	6825      	ldr	r5, [r4, #0]
 800c038:	f015 0506 	ands.w	r5, r5, #6
 800c03c:	d106      	bne.n	800c04c <_printf_common+0x48>
 800c03e:	f104 0a19 	add.w	sl, r4, #25
 800c042:	68e3      	ldr	r3, [r4, #12]
 800c044:	6832      	ldr	r2, [r6, #0]
 800c046:	1a9b      	subs	r3, r3, r2
 800c048:	42ab      	cmp	r3, r5
 800c04a:	dc2b      	bgt.n	800c0a4 <_printf_common+0xa0>
 800c04c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c050:	1e13      	subs	r3, r2, #0
 800c052:	6822      	ldr	r2, [r4, #0]
 800c054:	bf18      	it	ne
 800c056:	2301      	movne	r3, #1
 800c058:	0692      	lsls	r2, r2, #26
 800c05a:	d430      	bmi.n	800c0be <_printf_common+0xba>
 800c05c:	4649      	mov	r1, r9
 800c05e:	4638      	mov	r0, r7
 800c060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c064:	47c0      	blx	r8
 800c066:	3001      	adds	r0, #1
 800c068:	d023      	beq.n	800c0b2 <_printf_common+0xae>
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	6922      	ldr	r2, [r4, #16]
 800c06e:	f003 0306 	and.w	r3, r3, #6
 800c072:	2b04      	cmp	r3, #4
 800c074:	bf14      	ite	ne
 800c076:	2500      	movne	r5, #0
 800c078:	6833      	ldreq	r3, [r6, #0]
 800c07a:	f04f 0600 	mov.w	r6, #0
 800c07e:	bf08      	it	eq
 800c080:	68e5      	ldreq	r5, [r4, #12]
 800c082:	f104 041a 	add.w	r4, r4, #26
 800c086:	bf08      	it	eq
 800c088:	1aed      	subeq	r5, r5, r3
 800c08a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c08e:	bf08      	it	eq
 800c090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c094:	4293      	cmp	r3, r2
 800c096:	bfc4      	itt	gt
 800c098:	1a9b      	subgt	r3, r3, r2
 800c09a:	18ed      	addgt	r5, r5, r3
 800c09c:	42b5      	cmp	r5, r6
 800c09e:	d11a      	bne.n	800c0d6 <_printf_common+0xd2>
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	e008      	b.n	800c0b6 <_printf_common+0xb2>
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	4652      	mov	r2, sl
 800c0a8:	4649      	mov	r1, r9
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	47c0      	blx	r8
 800c0ae:	3001      	adds	r0, #1
 800c0b0:	d103      	bne.n	800c0ba <_printf_common+0xb6>
 800c0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ba:	3501      	adds	r5, #1
 800c0bc:	e7c1      	b.n	800c042 <_printf_common+0x3e>
 800c0be:	2030      	movs	r0, #48	; 0x30
 800c0c0:	18e1      	adds	r1, r4, r3
 800c0c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0c6:	1c5a      	adds	r2, r3, #1
 800c0c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0cc:	4422      	add	r2, r4
 800c0ce:	3302      	adds	r3, #2
 800c0d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0d4:	e7c2      	b.n	800c05c <_printf_common+0x58>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	4622      	mov	r2, r4
 800c0da:	4649      	mov	r1, r9
 800c0dc:	4638      	mov	r0, r7
 800c0de:	47c0      	blx	r8
 800c0e0:	3001      	adds	r0, #1
 800c0e2:	d0e6      	beq.n	800c0b2 <_printf_common+0xae>
 800c0e4:	3601      	adds	r6, #1
 800c0e6:	e7d9      	b.n	800c09c <_printf_common+0x98>

0800c0e8 <_printf_i>:
 800c0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0ec:	7e0f      	ldrb	r7, [r1, #24]
 800c0ee:	4691      	mov	r9, r2
 800c0f0:	2f78      	cmp	r7, #120	; 0x78
 800c0f2:	4680      	mov	r8, r0
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	469a      	mov	sl, r3
 800c0f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c0fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c0fe:	d807      	bhi.n	800c110 <_printf_i+0x28>
 800c100:	2f62      	cmp	r7, #98	; 0x62
 800c102:	d80a      	bhi.n	800c11a <_printf_i+0x32>
 800c104:	2f00      	cmp	r7, #0
 800c106:	f000 80d5 	beq.w	800c2b4 <_printf_i+0x1cc>
 800c10a:	2f58      	cmp	r7, #88	; 0x58
 800c10c:	f000 80c1 	beq.w	800c292 <_printf_i+0x1aa>
 800c110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c118:	e03a      	b.n	800c190 <_printf_i+0xa8>
 800c11a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c11e:	2b15      	cmp	r3, #21
 800c120:	d8f6      	bhi.n	800c110 <_printf_i+0x28>
 800c122:	a101      	add	r1, pc, #4	; (adr r1, 800c128 <_printf_i+0x40>)
 800c124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c128:	0800c181 	.word	0x0800c181
 800c12c:	0800c195 	.word	0x0800c195
 800c130:	0800c111 	.word	0x0800c111
 800c134:	0800c111 	.word	0x0800c111
 800c138:	0800c111 	.word	0x0800c111
 800c13c:	0800c111 	.word	0x0800c111
 800c140:	0800c195 	.word	0x0800c195
 800c144:	0800c111 	.word	0x0800c111
 800c148:	0800c111 	.word	0x0800c111
 800c14c:	0800c111 	.word	0x0800c111
 800c150:	0800c111 	.word	0x0800c111
 800c154:	0800c29b 	.word	0x0800c29b
 800c158:	0800c1c1 	.word	0x0800c1c1
 800c15c:	0800c255 	.word	0x0800c255
 800c160:	0800c111 	.word	0x0800c111
 800c164:	0800c111 	.word	0x0800c111
 800c168:	0800c2bd 	.word	0x0800c2bd
 800c16c:	0800c111 	.word	0x0800c111
 800c170:	0800c1c1 	.word	0x0800c1c1
 800c174:	0800c111 	.word	0x0800c111
 800c178:	0800c111 	.word	0x0800c111
 800c17c:	0800c25d 	.word	0x0800c25d
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	1d1a      	adds	r2, r3, #4
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	602a      	str	r2, [r5, #0]
 800c188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c18c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c190:	2301      	movs	r3, #1
 800c192:	e0a0      	b.n	800c2d6 <_printf_i+0x1ee>
 800c194:	6820      	ldr	r0, [r4, #0]
 800c196:	682b      	ldr	r3, [r5, #0]
 800c198:	0607      	lsls	r7, r0, #24
 800c19a:	f103 0104 	add.w	r1, r3, #4
 800c19e:	6029      	str	r1, [r5, #0]
 800c1a0:	d501      	bpl.n	800c1a6 <_printf_i+0xbe>
 800c1a2:	681e      	ldr	r6, [r3, #0]
 800c1a4:	e003      	b.n	800c1ae <_printf_i+0xc6>
 800c1a6:	0646      	lsls	r6, r0, #25
 800c1a8:	d5fb      	bpl.n	800c1a2 <_printf_i+0xba>
 800c1aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c1ae:	2e00      	cmp	r6, #0
 800c1b0:	da03      	bge.n	800c1ba <_printf_i+0xd2>
 800c1b2:	232d      	movs	r3, #45	; 0x2d
 800c1b4:	4276      	negs	r6, r6
 800c1b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1ba:	230a      	movs	r3, #10
 800c1bc:	4859      	ldr	r0, [pc, #356]	; (800c324 <_printf_i+0x23c>)
 800c1be:	e012      	b.n	800c1e6 <_printf_i+0xfe>
 800c1c0:	682b      	ldr	r3, [r5, #0]
 800c1c2:	6820      	ldr	r0, [r4, #0]
 800c1c4:	1d19      	adds	r1, r3, #4
 800c1c6:	6029      	str	r1, [r5, #0]
 800c1c8:	0605      	lsls	r5, r0, #24
 800c1ca:	d501      	bpl.n	800c1d0 <_printf_i+0xe8>
 800c1cc:	681e      	ldr	r6, [r3, #0]
 800c1ce:	e002      	b.n	800c1d6 <_printf_i+0xee>
 800c1d0:	0641      	lsls	r1, r0, #25
 800c1d2:	d5fb      	bpl.n	800c1cc <_printf_i+0xe4>
 800c1d4:	881e      	ldrh	r6, [r3, #0]
 800c1d6:	2f6f      	cmp	r7, #111	; 0x6f
 800c1d8:	bf0c      	ite	eq
 800c1da:	2308      	moveq	r3, #8
 800c1dc:	230a      	movne	r3, #10
 800c1de:	4851      	ldr	r0, [pc, #324]	; (800c324 <_printf_i+0x23c>)
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1e6:	6865      	ldr	r5, [r4, #4]
 800c1e8:	2d00      	cmp	r5, #0
 800c1ea:	bfa8      	it	ge
 800c1ec:	6821      	ldrge	r1, [r4, #0]
 800c1ee:	60a5      	str	r5, [r4, #8]
 800c1f0:	bfa4      	itt	ge
 800c1f2:	f021 0104 	bicge.w	r1, r1, #4
 800c1f6:	6021      	strge	r1, [r4, #0]
 800c1f8:	b90e      	cbnz	r6, 800c1fe <_printf_i+0x116>
 800c1fa:	2d00      	cmp	r5, #0
 800c1fc:	d04b      	beq.n	800c296 <_printf_i+0x1ae>
 800c1fe:	4615      	mov	r5, r2
 800c200:	fbb6 f1f3 	udiv	r1, r6, r3
 800c204:	fb03 6711 	mls	r7, r3, r1, r6
 800c208:	5dc7      	ldrb	r7, [r0, r7]
 800c20a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c20e:	4637      	mov	r7, r6
 800c210:	42bb      	cmp	r3, r7
 800c212:	460e      	mov	r6, r1
 800c214:	d9f4      	bls.n	800c200 <_printf_i+0x118>
 800c216:	2b08      	cmp	r3, #8
 800c218:	d10b      	bne.n	800c232 <_printf_i+0x14a>
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	07de      	lsls	r6, r3, #31
 800c21e:	d508      	bpl.n	800c232 <_printf_i+0x14a>
 800c220:	6923      	ldr	r3, [r4, #16]
 800c222:	6861      	ldr	r1, [r4, #4]
 800c224:	4299      	cmp	r1, r3
 800c226:	bfde      	ittt	le
 800c228:	2330      	movle	r3, #48	; 0x30
 800c22a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c22e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c232:	1b52      	subs	r2, r2, r5
 800c234:	6122      	str	r2, [r4, #16]
 800c236:	464b      	mov	r3, r9
 800c238:	4621      	mov	r1, r4
 800c23a:	4640      	mov	r0, r8
 800c23c:	f8cd a000 	str.w	sl, [sp]
 800c240:	aa03      	add	r2, sp, #12
 800c242:	f7ff fedf 	bl	800c004 <_printf_common>
 800c246:	3001      	adds	r0, #1
 800c248:	d14a      	bne.n	800c2e0 <_printf_i+0x1f8>
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295
 800c24e:	b004      	add	sp, #16
 800c250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c254:	6823      	ldr	r3, [r4, #0]
 800c256:	f043 0320 	orr.w	r3, r3, #32
 800c25a:	6023      	str	r3, [r4, #0]
 800c25c:	2778      	movs	r7, #120	; 0x78
 800c25e:	4832      	ldr	r0, [pc, #200]	; (800c328 <_printf_i+0x240>)
 800c260:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c264:	6823      	ldr	r3, [r4, #0]
 800c266:	6829      	ldr	r1, [r5, #0]
 800c268:	061f      	lsls	r7, r3, #24
 800c26a:	f851 6b04 	ldr.w	r6, [r1], #4
 800c26e:	d402      	bmi.n	800c276 <_printf_i+0x18e>
 800c270:	065f      	lsls	r7, r3, #25
 800c272:	bf48      	it	mi
 800c274:	b2b6      	uxthmi	r6, r6
 800c276:	07df      	lsls	r7, r3, #31
 800c278:	bf48      	it	mi
 800c27a:	f043 0320 	orrmi.w	r3, r3, #32
 800c27e:	6029      	str	r1, [r5, #0]
 800c280:	bf48      	it	mi
 800c282:	6023      	strmi	r3, [r4, #0]
 800c284:	b91e      	cbnz	r6, 800c28e <_printf_i+0x1a6>
 800c286:	6823      	ldr	r3, [r4, #0]
 800c288:	f023 0320 	bic.w	r3, r3, #32
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	2310      	movs	r3, #16
 800c290:	e7a6      	b.n	800c1e0 <_printf_i+0xf8>
 800c292:	4824      	ldr	r0, [pc, #144]	; (800c324 <_printf_i+0x23c>)
 800c294:	e7e4      	b.n	800c260 <_printf_i+0x178>
 800c296:	4615      	mov	r5, r2
 800c298:	e7bd      	b.n	800c216 <_printf_i+0x12e>
 800c29a:	682b      	ldr	r3, [r5, #0]
 800c29c:	6826      	ldr	r6, [r4, #0]
 800c29e:	1d18      	adds	r0, r3, #4
 800c2a0:	6961      	ldr	r1, [r4, #20]
 800c2a2:	6028      	str	r0, [r5, #0]
 800c2a4:	0635      	lsls	r5, r6, #24
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	d501      	bpl.n	800c2ae <_printf_i+0x1c6>
 800c2aa:	6019      	str	r1, [r3, #0]
 800c2ac:	e002      	b.n	800c2b4 <_printf_i+0x1cc>
 800c2ae:	0670      	lsls	r0, r6, #25
 800c2b0:	d5fb      	bpl.n	800c2aa <_printf_i+0x1c2>
 800c2b2:	8019      	strh	r1, [r3, #0]
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	4615      	mov	r5, r2
 800c2b8:	6123      	str	r3, [r4, #16]
 800c2ba:	e7bc      	b.n	800c236 <_printf_i+0x14e>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	2100      	movs	r1, #0
 800c2c0:	1d1a      	adds	r2, r3, #4
 800c2c2:	602a      	str	r2, [r5, #0]
 800c2c4:	681d      	ldr	r5, [r3, #0]
 800c2c6:	6862      	ldr	r2, [r4, #4]
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f000 f8b3 	bl	800c434 <memchr>
 800c2ce:	b108      	cbz	r0, 800c2d4 <_printf_i+0x1ec>
 800c2d0:	1b40      	subs	r0, r0, r5
 800c2d2:	6060      	str	r0, [r4, #4]
 800c2d4:	6863      	ldr	r3, [r4, #4]
 800c2d6:	6123      	str	r3, [r4, #16]
 800c2d8:	2300      	movs	r3, #0
 800c2da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2de:	e7aa      	b.n	800c236 <_printf_i+0x14e>
 800c2e0:	462a      	mov	r2, r5
 800c2e2:	4649      	mov	r1, r9
 800c2e4:	4640      	mov	r0, r8
 800c2e6:	6923      	ldr	r3, [r4, #16]
 800c2e8:	47d0      	blx	sl
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	d0ad      	beq.n	800c24a <_printf_i+0x162>
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	079b      	lsls	r3, r3, #30
 800c2f2:	d413      	bmi.n	800c31c <_printf_i+0x234>
 800c2f4:	68e0      	ldr	r0, [r4, #12]
 800c2f6:	9b03      	ldr	r3, [sp, #12]
 800c2f8:	4298      	cmp	r0, r3
 800c2fa:	bfb8      	it	lt
 800c2fc:	4618      	movlt	r0, r3
 800c2fe:	e7a6      	b.n	800c24e <_printf_i+0x166>
 800c300:	2301      	movs	r3, #1
 800c302:	4632      	mov	r2, r6
 800c304:	4649      	mov	r1, r9
 800c306:	4640      	mov	r0, r8
 800c308:	47d0      	blx	sl
 800c30a:	3001      	adds	r0, #1
 800c30c:	d09d      	beq.n	800c24a <_printf_i+0x162>
 800c30e:	3501      	adds	r5, #1
 800c310:	68e3      	ldr	r3, [r4, #12]
 800c312:	9903      	ldr	r1, [sp, #12]
 800c314:	1a5b      	subs	r3, r3, r1
 800c316:	42ab      	cmp	r3, r5
 800c318:	dcf2      	bgt.n	800c300 <_printf_i+0x218>
 800c31a:	e7eb      	b.n	800c2f4 <_printf_i+0x20c>
 800c31c:	2500      	movs	r5, #0
 800c31e:	f104 0619 	add.w	r6, r4, #25
 800c322:	e7f5      	b.n	800c310 <_printf_i+0x228>
 800c324:	0800ce19 	.word	0x0800ce19
 800c328:	0800ce2a 	.word	0x0800ce2a

0800c32c <__swhatbuf_r>:
 800c32c:	b570      	push	{r4, r5, r6, lr}
 800c32e:	460c      	mov	r4, r1
 800c330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c334:	4615      	mov	r5, r2
 800c336:	2900      	cmp	r1, #0
 800c338:	461e      	mov	r6, r3
 800c33a:	b096      	sub	sp, #88	; 0x58
 800c33c:	da0c      	bge.n	800c358 <__swhatbuf_r+0x2c>
 800c33e:	89a3      	ldrh	r3, [r4, #12]
 800c340:	2100      	movs	r1, #0
 800c342:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c346:	bf0c      	ite	eq
 800c348:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c34c:	2340      	movne	r3, #64	; 0x40
 800c34e:	2000      	movs	r0, #0
 800c350:	6031      	str	r1, [r6, #0]
 800c352:	602b      	str	r3, [r5, #0]
 800c354:	b016      	add	sp, #88	; 0x58
 800c356:	bd70      	pop	{r4, r5, r6, pc}
 800c358:	466a      	mov	r2, sp
 800c35a:	f000 f849 	bl	800c3f0 <_fstat_r>
 800c35e:	2800      	cmp	r0, #0
 800c360:	dbed      	blt.n	800c33e <__swhatbuf_r+0x12>
 800c362:	9901      	ldr	r1, [sp, #4]
 800c364:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c368:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c36c:	4259      	negs	r1, r3
 800c36e:	4159      	adcs	r1, r3
 800c370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c374:	e7eb      	b.n	800c34e <__swhatbuf_r+0x22>

0800c376 <__smakebuf_r>:
 800c376:	898b      	ldrh	r3, [r1, #12]
 800c378:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c37a:	079d      	lsls	r5, r3, #30
 800c37c:	4606      	mov	r6, r0
 800c37e:	460c      	mov	r4, r1
 800c380:	d507      	bpl.n	800c392 <__smakebuf_r+0x1c>
 800c382:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c386:	6023      	str	r3, [r4, #0]
 800c388:	6123      	str	r3, [r4, #16]
 800c38a:	2301      	movs	r3, #1
 800c38c:	6163      	str	r3, [r4, #20]
 800c38e:	b002      	add	sp, #8
 800c390:	bd70      	pop	{r4, r5, r6, pc}
 800c392:	466a      	mov	r2, sp
 800c394:	ab01      	add	r3, sp, #4
 800c396:	f7ff ffc9 	bl	800c32c <__swhatbuf_r>
 800c39a:	9900      	ldr	r1, [sp, #0]
 800c39c:	4605      	mov	r5, r0
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f7ff f8b4 	bl	800b50c <_malloc_r>
 800c3a4:	b948      	cbnz	r0, 800c3ba <__smakebuf_r+0x44>
 800c3a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3aa:	059a      	lsls	r2, r3, #22
 800c3ac:	d4ef      	bmi.n	800c38e <__smakebuf_r+0x18>
 800c3ae:	f023 0303 	bic.w	r3, r3, #3
 800c3b2:	f043 0302 	orr.w	r3, r3, #2
 800c3b6:	81a3      	strh	r3, [r4, #12]
 800c3b8:	e7e3      	b.n	800c382 <__smakebuf_r+0xc>
 800c3ba:	89a3      	ldrh	r3, [r4, #12]
 800c3bc:	6020      	str	r0, [r4, #0]
 800c3be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3c2:	81a3      	strh	r3, [r4, #12]
 800c3c4:	9b00      	ldr	r3, [sp, #0]
 800c3c6:	6120      	str	r0, [r4, #16]
 800c3c8:	6163      	str	r3, [r4, #20]
 800c3ca:	9b01      	ldr	r3, [sp, #4]
 800c3cc:	b15b      	cbz	r3, 800c3e6 <__smakebuf_r+0x70>
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3d4:	f000 f81e 	bl	800c414 <_isatty_r>
 800c3d8:	b128      	cbz	r0, 800c3e6 <__smakebuf_r+0x70>
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	f023 0303 	bic.w	r3, r3, #3
 800c3e0:	f043 0301 	orr.w	r3, r3, #1
 800c3e4:	81a3      	strh	r3, [r4, #12]
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	431d      	orrs	r5, r3
 800c3ea:	81a5      	strh	r5, [r4, #12]
 800c3ec:	e7cf      	b.n	800c38e <__smakebuf_r+0x18>
	...

0800c3f0 <_fstat_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	4d06      	ldr	r5, [pc, #24]	; (800c410 <_fstat_r+0x20>)
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	4608      	mov	r0, r1
 800c3fa:	4611      	mov	r1, r2
 800c3fc:	602b      	str	r3, [r5, #0]
 800c3fe:	f7fb fa71 	bl	80078e4 <_fstat>
 800c402:	1c43      	adds	r3, r0, #1
 800c404:	d102      	bne.n	800c40c <_fstat_r+0x1c>
 800c406:	682b      	ldr	r3, [r5, #0]
 800c408:	b103      	cbz	r3, 800c40c <_fstat_r+0x1c>
 800c40a:	6023      	str	r3, [r4, #0]
 800c40c:	bd38      	pop	{r3, r4, r5, pc}
 800c40e:	bf00      	nop
 800c410:	20000ba0 	.word	0x20000ba0

0800c414 <_isatty_r>:
 800c414:	b538      	push	{r3, r4, r5, lr}
 800c416:	2300      	movs	r3, #0
 800c418:	4d05      	ldr	r5, [pc, #20]	; (800c430 <_isatty_r+0x1c>)
 800c41a:	4604      	mov	r4, r0
 800c41c:	4608      	mov	r0, r1
 800c41e:	602b      	str	r3, [r5, #0]
 800c420:	f7fb fa6f 	bl	8007902 <_isatty>
 800c424:	1c43      	adds	r3, r0, #1
 800c426:	d102      	bne.n	800c42e <_isatty_r+0x1a>
 800c428:	682b      	ldr	r3, [r5, #0]
 800c42a:	b103      	cbz	r3, 800c42e <_isatty_r+0x1a>
 800c42c:	6023      	str	r3, [r4, #0]
 800c42e:	bd38      	pop	{r3, r4, r5, pc}
 800c430:	20000ba0 	.word	0x20000ba0

0800c434 <memchr>:
 800c434:	4603      	mov	r3, r0
 800c436:	b510      	push	{r4, lr}
 800c438:	b2c9      	uxtb	r1, r1
 800c43a:	4402      	add	r2, r0
 800c43c:	4293      	cmp	r3, r2
 800c43e:	4618      	mov	r0, r3
 800c440:	d101      	bne.n	800c446 <memchr+0x12>
 800c442:	2000      	movs	r0, #0
 800c444:	e003      	b.n	800c44e <memchr+0x1a>
 800c446:	7804      	ldrb	r4, [r0, #0]
 800c448:	3301      	adds	r3, #1
 800c44a:	428c      	cmp	r4, r1
 800c44c:	d1f6      	bne.n	800c43c <memchr+0x8>
 800c44e:	bd10      	pop	{r4, pc}

0800c450 <_init>:
 800c450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c452:	bf00      	nop
 800c454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c456:	bc08      	pop	{r3}
 800c458:	469e      	mov	lr, r3
 800c45a:	4770      	bx	lr

0800c45c <_fini>:
 800c45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45e:	bf00      	nop
 800c460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c462:	bc08      	pop	{r3}
 800c464:	469e      	mov	lr, r3
 800c466:	4770      	bx	lr
