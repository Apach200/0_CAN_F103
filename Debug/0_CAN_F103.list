
0_CAN_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800cd18  0800cd18  0001cd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3f8  0800d3f8  00020384  2**0
                  CONTENTS
  4 .ARM          00000000  0800d3f8  0800d3f8  00020384  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d3f8  0800d3f8  00020384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3f8  0800d3f8  0001d3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3fc  0800d3fc  0001d3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000384  20000000  0800d400  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  20000384  0800d784  00020384  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20000a6c  0800d784  00020a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203ad  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023896  00000000  00000000  000203f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bf2  00000000  00000000  00043c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  00048878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012c6  00000000  00000000  00049fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cd37  00000000  00000000  0004b26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000200ae  00000000  00000000  00067fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099fd3  00000000  00000000  00088053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069a4  00000000  00000000  00122028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  001289cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000384 	.word	0x20000384
 8000128:	00000000 	.word	0x00000000
 800012c:	0800cd00 	.word	0x0800cd00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000388 	.word	0x20000388
 8000148:	0800cd00 	.word	0x0800cd00

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CO_getUint8>:
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t
CO_getUint8(const void* buf) {
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	781b      	ldrb	r3, [r3, #0]
    uint8_t value;
    (void)memmove((void*)&value, buf, sizeof(value));
 8000168:	73fb      	strb	r3, [r7, #15]
    return value;
 800016a:	7bfb      	ldrb	r3, [r7, #15]
}
 800016c:	4618      	mov	r0, r3
 800016e:	3714      	adds	r7, #20
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr

08000176 <CO_setUint8>:
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t
CO_setUint8(void* buf, uint8_t value) {
 8000176:	b480      	push	{r7}
 8000178:	b083      	sub	sp, #12
 800017a:	af00      	add	r7, sp, #0
 800017c:	6078      	str	r0, [r7, #4]
 800017e:	460b      	mov	r3, r1
 8000180:	70fb      	strb	r3, [r7, #3]
 8000182:	78fa      	ldrb	r2, [r7, #3]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	701a      	strb	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8000188:	2301      	movs	r3, #1
}
 800018a:	4618      	mov	r0, r3
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <CO_setUint32>:
    return (uint8_t)(sizeof(value));
}

/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t
CO_setUint32(void* buf, uint32_t value) {
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
 800019c:	6039      	str	r1, [r7, #0]
 800019e:	683a      	ldr	r2, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 80001a4:	2304      	movs	r3, #4
}
 80001a6:	4618      	mov	r0, r3
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr

080001b0 <OD_getIndex>:
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t
OD_getIndex(const OD_entry_t* entry) {
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d002      	beq.n	80001c4 <OD_getIndex+0x14>
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	881b      	ldrh	r3, [r3, #0]
 80001c2:	e000      	b.n	80001c6 <OD_getIndex+0x16>
 80001c4:	2300      	movs	r3, #0
}
 80001c6:	4618      	mov	r0, r3
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr

080001d0 <OD_extension_init>:
 * NULL, extension will be removed.
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d101      	bne.n	80001e4 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80001e0:	2305      	movs	r3, #5
 80001e2:	e003      	b.n	80001ec <OD_extension_init+0x1c>
    }
    entry->extension = extension;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	683a      	ldr	r2, [r7, #0]
 80001e8:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80001ea:	2300      	movs	r3, #0
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	370c      	adds	r7, #12
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr

080001f6 <OD_get_u32>:
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80001f6:	b580      	push	{r7, lr}
 80001f8:	b086      	sub	sp, #24
 80001fa:	af02      	add	r7, sp, #8
 80001fc:	60f8      	str	r0, [r7, #12]
 80001fe:	607a      	str	r2, [r7, #4]
 8000200:	603b      	str	r3, [r7, #0]
 8000202:	460b      	mov	r3, r1
 8000204:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000206:	7af9      	ldrb	r1, [r7, #11]
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	9300      	str	r3, [sp, #0]
 800020c:	2304      	movs	r3, #4
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	68f8      	ldr	r0, [r7, #12]
 8000212:	f001 fb81 	bl	8001918 <OD_get_value>
 8000216:	4603      	mov	r3, r0
}
 8000218:	4618      	mov	r0, r3
 800021a:	3710      	adds	r7, #16
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <OD_read_1014_default>:
 * Custom functions for read/write OD object "COB-ID EMCY"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1014_default(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count < sizeof(uint32_t))
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d00c      	beq.n	800024e <OD_read_1014_default+0x2e>
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	7d1b      	ldrb	r3, [r3, #20]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d108      	bne.n	800024e <OD_read_1014_default+0x2e>
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d005      	beq.n	800024e <OD_read_1014_default+0x2e>
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b03      	cmp	r3, #3
 8000246:	d902      	bls.n	800024e <OD_read_1014_default+0x2e>
        || (countRead == NULL)) {
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d101      	bne.n	8000252 <OD_read_1014_default+0x32>
        return ODR_DEV_INCOMPAT;
 800024e:	2309      	movs	r3, #9
 8000250:	e01a      	b.n	8000288 <OD_read_1014_default+0x68>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0U : 0x80000000U;
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <OD_read_1014_default+0x44>
 8000260:	2300      	movs	r3, #0
 8000262:	e001      	b.n	8000268 <OD_read_1014_default+0x48>
 8000264:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000268:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + (uint32_t)em->nodeId;
 800026a:	697b      	ldr	r3, [r7, #20]
 800026c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000270:	3380      	adds	r3, #128	; 0x80
 8000272:	693a      	ldr	r2, [r7, #16]
 8000274:	4313      	orrs	r3, r2
 8000276:	613b      	str	r3, [r7, #16]
    (void)CO_setUint32(buf, COB_IDEmergency32);
 8000278:	6939      	ldr	r1, [r7, #16]
 800027a:	68b8      	ldr	r0, [r7, #8]
 800027c:	f7ff ff8a 	bl	8000194 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	2204      	movs	r2, #4
 8000284:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000286:	2300      	movs	r3, #0
}
 8000288:	4618      	mov	r0, r3
 800028a:	3718      	adds	r7, #24
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <OD_read_1003>:
 * Custom functions for read/write OD object _OD_statusBits_, optional
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1003(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
 800029c:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL) || ((count < 4U) && (stream->subIndex > 0U))
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d00f      	beq.n	80002c4 <OD_read_1003+0x34>
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <OD_read_1003+0x34>
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d009      	beq.n	80002c4 <OD_read_1003+0x34>
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d803      	bhi.n	80002be <OD_read_1003+0x2e>
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	7d1b      	ldrb	r3, [r3, #20]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d102      	bne.n	80002c4 <OD_read_1003+0x34>
        || (count < 1U)) {
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d101      	bne.n	80002c8 <OD_read_1003+0x38>
        return ODR_DEV_INCOMPAT;
 80002c4:	2309      	movs	r3, #9
 80002c6:	e04d      	b.n	8000364 <OD_read_1003+0xd4>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2U) {
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	7f1b      	ldrb	r3, [r3, #28]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d801      	bhi.n	80002da <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 80002d6:	2309      	movs	r3, #9
 80002d8:	e044      	b.n	8000364 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0U) {
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	7d1b      	ldrb	r3, [r3, #20]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d10b      	bne.n	80002fa <OD_read_1003+0x6a>
        (void)CO_setUint8(buf, em->fifoCount);
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002e8:	4619      	mov	r1, r3
 80002ea:	68b8      	ldr	r0, [r7, #8]
 80002ec:	f7ff ff43 	bl	8000176 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	2201      	movs	r2, #1
 80002f4:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80002f6:	2300      	movs	r3, #0
 80002f8:	e034      	b.n	8000364 <OD_read_1003+0xd4>
    } else if (stream->subIndex <= em->fifoCount) {
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	7d1a      	ldrb	r2, [r3, #20]
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000304:	429a      	cmp	r2, r3
 8000306:	d82c      	bhi.n	8000362 <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - (int16_t)stream->subIndex;
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	7f5b      	ldrb	r3, [r3, #29]
 800030c:	b29a      	uxth	r2, r3
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	7d1b      	ldrb	r3, [r3, #20]
 8000312:	b29b      	uxth	r3, r3
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	b29b      	uxth	r3, r3
 8000318:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 800031a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800031e:	2b00      	cmp	r3, #0
 8000320:	da07      	bge.n	8000332 <OD_read_1003+0xa2>
            index += (int16_t)em->fifoSize;
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	7f1b      	ldrb	r3, [r3, #28]
 8000326:	b29a      	uxth	r2, r3
 8000328:	8afb      	ldrh	r3, [r7, #22]
 800032a:	4413      	add	r3, r2
 800032c:	b29b      	uxth	r3, r3
 800032e:	82fb      	strh	r3, [r7, #22]
 8000330:	e007      	b.n	8000342 <OD_read_1003+0xb2>
        } else if (index >= (int16_t)(em->fifoSize)) {
 8000332:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000336:	693a      	ldr	r2, [r7, #16]
 8000338:	7f12      	ldrb	r2, [r2, #28]
 800033a:	4293      	cmp	r3, r2
 800033c:	db01      	blt.n	8000342 <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 800033e:	2309      	movs	r3, #9
 8000340:	e010      	b.n	8000364 <OD_read_1003+0xd4>
        } else { /* MISRA C 2004 14.10 */
        }
        (void)CO_setUint32(buf, em->fifo[index].msg);
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	699a      	ldr	r2, [r3, #24]
 8000346:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800034a:	00db      	lsls	r3, r3, #3
 800034c:	4413      	add	r3, r2
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4619      	mov	r1, r3
 8000352:	68b8      	ldr	r0, [r7, #8]
 8000354:	f7ff ff1e 	bl	8000194 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2204      	movs	r2, #4
 800035c:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 800035e:	2300      	movs	r3, #0
 8000360:	e000      	b.n	8000364 <OD_read_1003+0xd4>
    } else {
        return ODR_NO_DATA;
 8000362:	2319      	movs	r3, #25
    }
}
 8000364:	4618      	mov	r0, r3
 8000366:	3718      	adds	r7, #24
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <OD_write_1003>:

static ODR_t
OD_write_1003(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != 1U) || (countWritten == NULL)) {
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d00c      	beq.n	800039a <OD_write_1003+0x2e>
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	7d1b      	ldrb	r3, [r3, #20]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d108      	bne.n	800039a <OD_write_1003+0x2e>
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d005      	beq.n	800039a <OD_write_1003+0x2e>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2b01      	cmp	r3, #1
 8000392:	d102      	bne.n	800039a <OD_write_1003+0x2e>
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d101      	bne.n	800039e <OD_write_1003+0x32>
        return ODR_DEV_INCOMPAT;
 800039a:	2309      	movs	r3, #9
 800039c:	e012      	b.n	80003c4 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0U) {
 800039e:	68b8      	ldr	r0, [r7, #8]
 80003a0:	f7ff fedc 	bl	800015c <CO_getUint8>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 80003aa:	230f      	movs	r3, #15
 80003ac:	e00a      	b.n	80003c4 <OD_write_1003+0x58>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	2200      	movs	r2, #0
 80003b8:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3718      	adds	r7, #24
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <CO_EM_init>:
           OD_entry_t* OD_statusBits,
#endif
#if (((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0) || defined CO_DOXYGEN
           CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#endif
           const uint8_t nodeId, uint32_t* errInfo) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af02      	add	r7, sp, #8
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
 80003d8:	603b      	str	r3, [r7, #0]
    (void)nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 80003da:	2300      	movs	r3, #0
 80003dc:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((em == NULL) || (OD_1001_errReg == NULL)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d01a      	beq.n	800041a <CO_EM_init+0x4e>
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d017      	beq.n	800041a <CO_EM_init+0x4e>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        || ((fifo == NULL) && (fifoSize >= 2U))
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d103      	bne.n	80003f8 <CO_EM_init+0x2c>
 80003f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d810      	bhi.n	800041a <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        || (OD_1014_cobIdEm == NULL) || (CANdevTx == NULL) || (nodeId < 1U) || (nodeId > 127U)
 80003f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d00d      	beq.n	800041a <CO_EM_init+0x4e>
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d00a      	beq.n	800041a <CO_EM_init+0x4e>
 8000404:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000408:	2b00      	cmp	r3, #0
 800040a:	d006      	beq.n	800041a <CO_EM_init+0x4e>
 800040c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8000410:	2b00      	cmp	r3, #0
 8000412:	db02      	blt.n	800041a <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
        || (OD_1003_preDefErr == NULL)
 8000414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000416:	2b00      	cmp	r3, #0
 8000418:	d102      	bne.n	8000420 <CO_EM_init+0x54>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
        || (CANdevRx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800041a:	f04f 33ff 	mov.w	r3, #4294967295
 800041e:	e0a7      	b.n	8000570 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    (void)memset(em, 0, sizeof(CO_EM_t));
 8000420:	2250      	movs	r2, #80	; 0x50
 8000422:	2100      	movs	r1, #0
 8000424:	68f8      	ldr	r0, [r7, #12]
 8000426:	f00c f823 	bl	800c470 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	68ba      	ldr	r2, [r7, #8]
 800042e:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 8000430:	2300      	movs	r3, #0
 8000432:	2201      	movs	r2, #1
 8000434:	2100      	movs	r1, #0
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f001 fae8 	bl	8001a0c <OD_getPtr>
 800043c:	4602      	mov	r2, r0
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d10c      	bne.n	8000464 <CO_EM_init+0x98>
        if (errInfo != NULL) {
 800044a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800044c:	2b00      	cmp	r3, #0
 800044e:	d006      	beq.n	800045e <CO_EM_init+0x92>
            *errInfo = OD_getIndex(OD_1001_errReg);
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff fead 	bl	80001b0 <OD_getIndex>
 8000456:	4603      	mov	r3, r0
 8000458:	461a      	mov	r2, r3
 800045a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800045c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800045e:	f06f 030b 	mvn.w	r3, #11
 8000462:	e085      	b.n	8000570 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    em->fifo = fifo;
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	683a      	ldr	r2, [r7, #0]
 8000470:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000478:	771a      	strb	r2, [r3, #28]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 800047a:	f107 0210 	add.w	r2, r7, #16
 800047e:	2301      	movs	r3, #1
 8000480:	2100      	movs	r1, #0
 8000482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000484:	f7ff feb7 	bl	80001f6 <OD_get_u32>
 8000488:	4603      	mov	r3, r0
 800048a:	75bb      	strb	r3, [r7, #22]
    if ((odRet != ODR_OK) || ((COB_IDEmergency32 & 0x7FFFF800U) != 0U)) {
 800048c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d104      	bne.n	800049e <CO_EM_init+0xd2>
 8000494:	693a      	ldr	r2, [r7, #16]
 8000496:	4b38      	ldr	r3, [pc, #224]	; (8000578 <CO_EM_init+0x1ac>)
 8000498:	4013      	ands	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	d010      	beq.n	80004c0 <CO_EM_init+0xf4>
        if (errInfo != NULL) {
 800049e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d006      	beq.n	80004b2 <CO_EM_init+0xe6>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80004a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004a6:	f7ff fe83 	bl	80001b0 <OD_getIndex>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461a      	mov	r2, r3
 80004ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004b0:	601a      	str	r2, [r3, #0]
        }
        /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) {
 80004b2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d002      	beq.n	80004c0 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 80004ba:	f06f 030b 	mvn.w	r3, #11
 80004be:	e057      	b.n	8000570 <CO_EM_init+0x1a4>
     * memory. In that case it is necessary to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) {
        producerCanId += nodeId;
    }
#else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + (uint16_t)nodeId;
 80004c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	3380      	adds	r3, #128	; 0x80
 80004c8:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000U) == 0U;
 80004ca:	693b      	ldr	r3, [r7, #16]
 80004cc:	43db      	mvns	r3, r3
 80004ce:	0fdb      	lsrs	r3, r3, #31
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	461a      	mov	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	4a26      	ldr	r2, [pc, #152]	; (800057c <CO_EM_init+0x1b0>)
 80004e2:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a26      	ldr	r2, [pc, #152]	; (8000580 <CO_EM_init+0x1b4>)
 80004e8:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3330      	adds	r3, #48	; 0x30
 80004ee:	4619      	mov	r1, r3
 80004f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004f2:	f7ff fe6d 	bl	80001d0 <OD_extension_init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80004fa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d00c      	beq.n	800051c <CO_EM_init+0x150>
        if (errInfo != NULL) {
 8000502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000504:	2b00      	cmp	r3, #0
 8000506:	d006      	beq.n	8000516 <CO_EM_init+0x14a>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8000508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800050a:	f7ff fe51 	bl	80001b0 <OD_getIndex>
 800050e:	4603      	mov	r3, r0
 8000510:	461a      	mov	r2, r3
 8000512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000514:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8000516:	f06f 030b 	mvn.w	r3, #11
 800051a:	e029      	b.n	8000570 <CO_EM_init+0x1a4>
    }
#endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, producerCanId, false, 8U, false);
 8000526:	8aba      	ldrh	r2, [r7, #20]
 8000528:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800052a:	2300      	movs	r3, #0
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2308      	movs	r3, #8
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2300      	movs	r3, #0
 8000534:	68b8      	ldr	r0, [r7, #8]
 8000536:	f006 fd41 	bl	8006fbc <CO_CANtxBufferInit>
 800053a:	4602      	mov	r2, r0
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (em->CANtxBuff == NULL) {
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000544:	2b00      	cmp	r3, #0
 8000546:	d102      	bne.n	800054e <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	e010      	b.n	8000570 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT */
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <CO_EM_init+0x1b8>)
 8000558:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <CO_EM_init+0x1bc>)
 800055e:	649a      	str	r2, [r3, #72]	; 0x48
    (void)OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3340      	adds	r3, #64	; 0x40
 8000564:	4619      	mov	r1, r3
 8000566:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000568:	f7ff fe32 	bl	80001d0 <OD_extension_init>
    em->pFunctSignalRx = NULL;
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CO_CAN_ID_EMERGENCY, 0x780, false, (void*)em, CO_EM_receive);
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 800056c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	7ffff800 	.word	0x7ffff800
 800057c:	08000221 	.word	0x08000221
 8000580:	0800152f 	.word	0x0800152f
 8000584:	08000291 	.word	0x08000291
 8000588:	0800036d 	.word	0x0800036d

0800058c <CO_EM_process>:
    }
}
#endif

void
CO_EM_process(CO_EM_t* em, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af02      	add	r7, sp, #8
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) == 0
    (void)timeDifference_us; /* may be unused */
#endif

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	8a5b      	ldrh	r3, [r3, #18]
 80005a0:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	8a1b      	ldrh	r3, [r3, #16]
 80005a6:	8aba      	ldrh	r2, [r7, #20]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	f000 80a3 	beq.w	80006f4 <CO_EM_process+0x168>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	8a1a      	ldrh	r2, [r3, #16]
 80005b2:	8abb      	ldrh	r3, [r7, #20]
 80005b4:	4053      	eors	r3, r2
 80005b6:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	8aba      	ldrh	r2, [r7, #20]
 80005bc:	821a      	strh	r2, [r3, #16]

        if ((CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U) {
 80005be:	8a7a      	ldrh	r2, [r7, #18]
 80005c0:	f240 1301 	movw	r3, #257	; 0x101
 80005c4:	4013      	ands	r3, r2
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d010      	beq.n	80005ec <CO_EM_process+0x60>
            CO_error(em, (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U, CO_EM_CAN_BUS_WARNING,
 80005ca:	8aba      	ldrh	r2, [r7, #20]
 80005cc:	f240 1301 	movw	r3, #257	; 0x101
 80005d0:	4013      	ands	r3, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	bf14      	ite	ne
 80005d6:	2301      	movne	r3, #1
 80005d8:	2300      	moveq	r3, #0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	2300      	movs	r3, #0
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	2201      	movs	r2, #1
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f000 f91b 	bl	8000822 <CO_error>
                     CO_EMC_NO_ERROR, 0);
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PASSIVE) != 0U) {
 80005ec:	8a7b      	ldrh	r3, [r7, #18]
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d010      	beq.n	8000618 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0U, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 80005f6:	8abb      	ldrh	r3, [r7, #20]
 80005f8:	f003 0302 	and.w	r3, r3, #2
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf14      	ite	ne
 8000600:	2301      	movne	r3, #1
 8000602:	2300      	moveq	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	2300      	movs	r3, #0
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	f248 1320 	movw	r3, #33056	; 0x8120
 8000610:	2207      	movs	r2, #7
 8000612:	68f8      	ldr	r0, [r7, #12]
 8000614:	f000 f905 	bl	8000822 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) != 0U) {
 8000618:	8a7b      	ldrh	r3, [r7, #18]
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	2b00      	cmp	r3, #0
 8000620:	d010      	beq.n	8000644 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0U, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
 8000622:	8abb      	ldrh	r3, [r7, #20]
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	2b00      	cmp	r3, #0
 800062a:	bf14      	ite	ne
 800062c:	2301      	movne	r3, #1
 800062e:	2300      	moveq	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	4619      	mov	r1, r3
 8000634:	2300      	movs	r3, #0
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	f248 1340 	movw	r3, #33088	; 0x8140
 800063c:	2212      	movs	r2, #18
 800063e:	68f8      	ldr	r0, [r7, #12]
 8000640:	f000 f8ef 	bl	8000822 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) != 0U) {
 8000644:	8a7b      	ldrh	r3, [r7, #18]
 8000646:	f003 0308 	and.w	r3, r3, #8
 800064a:	2b00      	cmp	r3, #0
 800064c:	d010      	beq.n	8000670 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0U, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 800064e:	8abb      	ldrh	r3, [r7, #20]
 8000650:	f003 0308 	and.w	r3, r3, #8
 8000654:	2b00      	cmp	r3, #0
 8000656:	bf14      	ite	ne
 8000658:	2301      	movne	r3, #1
 800065a:	2300      	moveq	r3, #0
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	2300      	movs	r3, #0
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	f248 1310 	movw	r3, #33040	; 0x8110
 8000668:	2214      	movs	r2, #20
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f000 f8d9 	bl	8000822 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) != 0U) {
 8000670:	8a7b      	ldrh	r3, [r7, #18]
 8000672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000676:	2b00      	cmp	r3, #0
 8000678:	d010      	beq.n	800069c <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0U, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
 800067a:	8abb      	ldrh	r3, [r7, #20]
 800067c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	2300      	movs	r3, #0
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000694:	2215      	movs	r2, #21
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f000 f8c3 	bl	8000822 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_PASSIVE) != 0U) {
 800069c:	8a7b      	ldrh	r3, [r7, #18]
 800069e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d010      	beq.n	80006c8 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0U, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 80006a6:	8abb      	ldrh	r3, [r7, #20]
 80006a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf14      	ite	ne
 80006b0:	2301      	movne	r3, #1
 80006b2:	2300      	moveq	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4619      	mov	r1, r3
 80006b8:	2300      	movs	r3, #0
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	f248 1320 	movw	r3, #33056	; 0x8120
 80006c0:	2206      	movs	r2, #6
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f000 f8ad 	bl	8000822 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) != 0U) {
 80006c8:	8a7b      	ldrh	r3, [r7, #18]
 80006ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d010      	beq.n	80006f4 <CO_EM_process+0x168>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0U, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 80006d2:	8abb      	ldrh	r3, [r7, #20]
 80006d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006d8:	2b00      	cmp	r3, #0
 80006da:	bf14      	ite	ne
 80006dc:	2301      	movne	r3, #1
 80006de:	2300      	moveq	r3, #0
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	2300      	movs	r3, #0
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	f248 1310 	movw	r3, #33040	; 0x8110
 80006ec:	2213      	movs	r2, #19
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f000 f897 	bl	8000822 <CO_error>
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 80006f4:	2300      	movs	r3, #0
 80006f6:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	795b      	ldrb	r3, [r3, #5]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <CO_EM_process+0x17c>
        errorRegister |= (uint8_t)CO_ERR_REG_GENERIC_ERR;
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= (uint8_t)CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	789b      	ldrb	r3, [r3, #2]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d103      	bne.n	8000718 <CO_EM_process+0x18c>
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	78db      	ldrb	r3, [r3, #3]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <CO_EM_process+0x194>
        errorRegister |= (uint8_t)CO_ERR_REG_COMMUNICATION;
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= (uint8_t)CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	7a1b      	ldrb	r3, [r3, #8]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d103      	bne.n	8000730 <CO_EM_process+0x1a4>
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	7a5b      	ldrb	r3, [r3, #9]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d003      	beq.n	8000738 <CO_EM_process+0x1ac>
        errorRegister |= (uint8_t)CO_ERR_REG_MANUFACTURER;
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000736:	75fb      	strb	r3, [r7, #23]
    }
    *em->errorRegister = errorRegister;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	7dfa      	ldrb	r2, [r7, #23]
 800073e:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d067      	beq.n	8000816 <CO_EM_process+0x28a>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    if (em->fifoSize >= 2U) {
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	7f1b      	ldrb	r3, [r3, #28]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d965      	bls.n	800081a <CO_EM_process+0x28e>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	7f9b      	ldrb	r3, [r3, #30]
 8000752:	747b      	strb	r3, [r7, #17]

        if (!em->CANtxBuff->bufferFull && (fifoPpPtr != em->fifoWrPtr)
            && (em->inhibitEmTimer >= em->inhibitEmTime_us)) {
            em->inhibitEmTimer = 0;
#else
        if ((!em->CANtxBuff->bufferFull) && (fifoPpPtr != em->fifoWrPtr)) {
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d15d      	bne.n	800081a <CO_EM_process+0x28e>
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	7f5b      	ldrb	r3, [r3, #29]
 8000762:	7c7a      	ldrb	r2, [r7, #17]
 8000764:	429a      	cmp	r2, r3
 8000766:	d058      	beq.n	800081a <CO_EM_process+0x28e>
#endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t)errorRegister << 16;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	7c7b      	ldrb	r3, [r7, #17]
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	4413      	add	r3, r2
 8000772:	6819      	ldr	r1, [r3, #0]
 8000774:	7dfb      	ldrb	r3, [r7, #23]
 8000776:	041a      	lsls	r2, r3, #16
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	6998      	ldr	r0, [r3, #24]
 800077c:	7c7b      	ldrb	r3, [r7, #17]
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	4403      	add	r3, r0
 8000782:	430a      	orrs	r2, r1
 8000784:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            (void)memcpy((void*)em->CANtxBuff->data, (void*)&em->fifo[fifoPpPtr].msg, sizeof(em->CANtxBuff->data));
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078a:	1d58      	adds	r0, r3, #5
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	699a      	ldr	r2, [r3, #24]
 8000790:	7c7b      	ldrb	r3, [r7, #17]
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	4413      	add	r3, r2
 8000796:	2208      	movs	r2, #8
 8000798:	4619      	mov	r1, r3
 800079a:	f00b fef3 	bl	800c584 <memcpy>
            (void)CO_CANsend(em->CANdevTx, em->CANtxBuff);
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	695a      	ldr	r2, [r3, #20]
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a6:	4619      	mov	r1, r3
 80007a8:	4610      	mov	r0, r2
 80007aa:	f006 fc81 	bl	80070b0 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
#endif

            /* increment pointer */
            fifoPpPtr++;
 80007ae:	7c7b      	ldrb	r3, [r7, #17]
 80007b0:	3301      	adds	r3, #1
 80007b2:	747b      	strb	r3, [r7, #17]
            em->fifoPpPtr = (fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0U;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	7f1b      	ldrb	r3, [r3, #28]
 80007b8:	7c7a      	ldrb	r2, [r7, #17]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d201      	bcs.n	80007c2 <CO_EM_process+0x236>
 80007be:	7c7a      	ldrb	r2, [r7, #17]
 80007c0:	e000      	b.n	80007c4 <CO_EM_process+0x238>
 80007c2:	2200      	movs	r2, #0
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all messages from fifo buffer are processed */
            if (em->fifoOverflow == 1U) {
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	7fdb      	ldrb	r3, [r3, #31]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10c      	bne.n	80007ea <CO_EM_process+0x25e>
                em->fifoOverflow = 2;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2202      	movs	r2, #2
 80007d4:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0);
 80007d6:	2300      	movs	r3, #0
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007de:	2220      	movs	r2, #32
 80007e0:	2101      	movs	r1, #1
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	f000 f81d 	bl	8000822 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 80007e8:	e017      	b.n	800081a <CO_EM_process+0x28e>
            } else if ((em->fifoOverflow == 2U) && (em->fifoPpPtr == em->fifoWrPtr)) {
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	7fdb      	ldrb	r3, [r3, #31]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d113      	bne.n	800081a <CO_EM_process+0x28e>
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	7f9a      	ldrb	r2, [r3, #30]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	7f5b      	ldrb	r3, [r3, #29]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d10d      	bne.n	800081a <CO_EM_process+0x28e>
                em->fifoOverflow = 0;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2200      	movs	r2, #0
 8000802:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000804:	2300      	movs	r3, #0
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2300      	movs	r3, #0
 800080a:	2220      	movs	r2, #32
 800080c:	2100      	movs	r1, #0
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f000 f807 	bl	8000822 <CO_error>
    return;
 8000814:	e001      	b.n	800081a <CO_EM_process+0x28e>
        return;
 8000816:	bf00      	nop
 8000818:	e000      	b.n	800081c <CO_EM_process+0x290>
    return;
 800081a:	bf00      	nop
}
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <CO_error>:

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 8000822:	b480      	push	{r7}
 8000824:	b08d      	sub	sp, #52	; 0x34
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	4611      	mov	r1, r2
 800082e:	461a      	mov	r2, r3
 8000830:	460b      	mov	r3, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) {
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	f000 80a6 	beq.w	800098c <CO_error+0x16a>
        return;
    }

    uint8_t index = errorBit >> 3;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	08db      	lsrs	r3, r3, #3
 8000844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	2201      	movs	r2, #1
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 8000858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800085c:	2b09      	cmp	r3, #9
 800085e:	d90a      	bls.n	8000876 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000860:	2305      	movs	r3, #5
 8000862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 8000866:	2301      	movs	r3, #1
 8000868:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 800086c:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8000870:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 8000876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000882:	781a      	ldrb	r2, [r3, #0]
 8000884:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000888:	4013      	ands	r3, r2
 800088a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d004      	beq.n	800089e <CO_error+0x7c>
        if (errorStatusBitMasked != 0U) {
 8000894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000898:	2b00      	cmp	r3, #0
 800089a:	d006      	beq.n	80008aa <CO_error+0x88>
            return;
 800089c:	e079      	b.n	8000992 <CO_error+0x170>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 800089e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d074      	beq.n	8000990 <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 80008a6:	2300      	movs	r3, #0
 80008a8:	80bb      	strh	r3, [r7, #4]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	061a      	lsls	r2, r3, #24
 80008ae:	88bb      	ldrh	r3, [r7, #4]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 80008b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008b6:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80008bc:	f3ef 8210 	mrs	r2, PRIMASK
 80008c0:	617a      	str	r2, [r7, #20]
  return(result);
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 80008c6:	b672      	cpsid	i
}
 80008c8:	bf00      	nop
    if (setError) {
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d008      	beq.n	80008e2 <CO_error+0xc0>
        *errorStatusBits |= bitmask;
 80008d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80008d8:	4313      	orrs	r3, r2
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	e00b      	b.n	80008fa <CO_error+0xd8>
    } else {
        *errorStatusBits &= ~bitmask;
 80008e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b25a      	sxtb	r2, r3
 80008e8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80008ec:	43db      	mvns	r3, r3
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4013      	ands	r3, r2
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f8:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	7f1b      	ldrb	r3, [r3, #28]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d93c      	bls.n	800097c <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	7f5b      	ldrb	r3, [r3, #29]
 8000906:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 8000908:	7efb      	ldrb	r3, [r7, #27]
 800090a:	3301      	adds	r3, #1
 800090c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	7f1b      	ldrb	r3, [r3, #28]
 8000914:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000918:	429a      	cmp	r2, r3
 800091a:	d302      	bcc.n	8000922 <CO_error+0x100>
            fifoWrPtrNext = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	7f9b      	ldrb	r3, [r3, #30]
 8000926:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800092a:	429a      	cmp	r2, r3
 800092c:	d103      	bne.n	8000936 <CO_error+0x114>
            em->fifoOverflow = 1;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2201      	movs	r2, #1
 8000932:	77da      	strb	r2, [r3, #31]
 8000934:	e022      	b.n	800097c <CO_error+0x15a>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	699a      	ldr	r2, [r3, #24]
 800093a:	7efb      	ldrb	r3, [r7, #27]
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	4413      	add	r3, r2
 8000940:	6a3a      	ldr	r2, [r7, #32]
 8000942:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	699a      	ldr	r2, [r3, #24]
 8000948:	7efb      	ldrb	r3, [r7, #27]
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	4413      	add	r3, r2
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000958:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000960:	461a      	mov	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	7f1b      	ldrb	r3, [r3, #28]
 8000966:	3b01      	subs	r3, #1
 8000968:	429a      	cmp	r2, r3
 800096a:	d207      	bcs.n	800097c <CO_error+0x15a>
                em->fifoCount++;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000972:	3301      	adds	r3, #1
 8000974:	b2da      	uxtb	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	f383 8810 	msr	PRIMASK, r3
}
 800098a:	e002      	b.n	8000992 <CO_error+0x170>
        return;
 800098c:	bf00      	nop
 800098e:	e000      	b.n	8000992 <CO_error+0x170>
            return;
 8000990:	bf00      	nop
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
#endif
#endif
}
 8000992:	3734      	adds	r7, #52	; 0x34
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <CO_getUint32>:
CO_getUint32(const void* buf) {
 800099a:	b480      	push	{r7}
 800099c:	b085      	sub	sp, #20
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 80009a6:	60fb      	str	r3, [r7, #12]
    return value;
 80009a8:	68fb      	ldr	r3, [r7, #12]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <OD_getIndex+0x14>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	e000      	b.n	80009ca <OD_getIndex+0x16>
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d101      	bne.n	80009e8 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80009e4:	2305      	movs	r3, #5
 80009e6:	e003      	b.n	80009f0 <OD_extension_init+0x1c>
    entry->extension = extension;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af02      	add	r7, sp, #8
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	460b      	mov	r3, r1
 8000a08:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000a0a:	7af9      	ldrb	r1, [r7, #11]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2304      	movs	r3, #4
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f000 ff7f 	bl	8001918 <OD_get_value>
 8000a1a:	4603      	mov	r3, r0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_HBcons_receive(void* object, void* msg) {
 8000a24:	b480      	push	{r7}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t* HBconsNode = object;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	3305      	adds	r3, #5
 8000a3c:	60fb      	str	r3, [r7, #12]

    if (DLC == 1U) {
 8000a3e:	7cfb      	ldrb	r3, [r7, #19]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d107      	bne.n	8000a54 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b25a      	sxtb	r2, r3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	2201      	movs	r2, #1
 8000a52:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000a54:	bf00      	nop
 8000a56:	371c      	adds	r7, #28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <OD_write_1016>:
 * Custom function for writing OD object "Consumer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1016(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b088      	sub	sp, #32
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t* HBcons = stream->object;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	61fb      	str	r3, [r7, #28]

    if ((stream == NULL) || (buf == NULL) || (stream->subIndex < 1U)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d012      	beq.n	8000a9e <OD_write_1016+0x40>
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00f      	beq.n	8000a9e <OD_write_1016+0x40>
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	7d1b      	ldrb	r3, [r3, #20]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00b      	beq.n	8000a9e <OD_write_1016+0x40>
        || (stream->subIndex > HBcons->numberOfMonitoredNodes) || (count != sizeof(uint32_t))
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	7d1a      	ldrb	r2, [r3, #20]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	7a1b      	ldrb	r3, [r3, #8]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d805      	bhi.n	8000a9e <OD_write_1016+0x40>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d102      	bne.n	8000a9e <OD_write_1016+0x40>
        || (countWritten == NULL)) {
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <OD_write_1016+0x44>
        return ODR_DEV_INCOMPAT;
 8000a9e:	2309      	movs	r3, #9
 8000aa0:	e020      	b.n	8000ae4 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000aa2:	68b8      	ldr	r0, [r7, #8]
 8000aa4:	f7ff ff79 	bl	800099a <CO_getUint32>
 8000aa8:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	0c1b      	lsrs	r3, r3, #16
 8000aae:	75fb      	strb	r3, [r7, #23]
    uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1U, nodeId, consumer_time);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	7d1b      	ldrb	r3, [r3, #20]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	b2d9      	uxtb	r1, r3
 8000abc:	8abb      	ldrh	r3, [r7, #20]
 8000abe:	7dfa      	ldrb	r2, [r7, #23]
 8000ac0:	69f8      	ldr	r0, [r7, #28]
 8000ac2:	f000 f8bd 	bl	8000c40 <CO_HBconsumer_initEntry>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	74fb      	strb	r3, [r7, #19]
    if (ret != CO_ERROR_NO) {
 8000aca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	e006      	b.n	8000ae4 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	68b9      	ldr	r1, [r7, #8]
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f000 fd26 	bl	800152e <OD_writeOriginal>
 8000ae2:	4603      	mov	r3, r0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <CO_HBconsumer_init>:
#endif

CO_ReturnError_t
CO_HBconsumer_init(CO_HBconsumer_t* HBcons, CO_EM_t* em, CO_HBconsNode_t* monitoredNodes, uint8_t monitoredNodesCount,
                   OD_entry_t* OD_1016_HBcons, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdxStart, uint32_t* errInfo) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if ((HBcons == NULL) || (em == NULL) || (monitoredNodes == NULL) || (OD_1016_HBcons == NULL)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <CO_HBconsumer_init+0x2c>
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d008      	beq.n	8000b18 <CO_HBconsumer_init+0x2c>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d005      	beq.n	8000b18 <CO_HBconsumer_init+0x2c>
 8000b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <CO_HBconsumer_init+0x2c>
        || (CANdevRx == NULL)) {
 8000b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <CO_HBconsumer_init+0x32>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1c:	e087      	b.n	8000c2e <CO_HBconsumer_init+0x142>
    }

    /* Configure object variables */
    (void)memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000b1e:	2230      	movs	r2, #48	; 0x30
 8000b20:	2100      	movs	r1, #0
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f00b fca4 	bl	800c470 <memset>
    HBcons->em = em;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b38:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000b3e:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
                                         ? (OD_1016_HBcons->subEntriesCount - 1U)
                                         : monitoredNodesCount;
 8000b40:	78fa      	ldrb	r2, [r7, #3]
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b44:	789b      	ldrb	r3, [r3, #2]
 8000b46:	3b01      	subs	r3, #1
                                         : monitoredNodesCount;
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	bf28      	it	cs
 8000b4c:	4613      	movcs	r3, r2
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000b54:	2300      	movs	r3, #0
 8000b56:	77fb      	strb	r3, [r7, #31]
 8000b58:	e041      	b.n	8000bde <CO_HBconsumer_init+0xf2>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1U, &val, true);
 8000b5a:	7ffb      	ldrb	r3, [r7, #31]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	b2d9      	uxtb	r1, r3
 8000b60:	f107 0214 	add.w	r2, r7, #20
 8000b64:	2301      	movs	r3, #1
 8000b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b68:	f7ff ff47 	bl	80009fa <OD_get_u32>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8000b70:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d00c      	beq.n	8000b92 <CO_HBconsumer_init+0xa6>
            if (errInfo != NULL) {
 8000b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d006      	beq.n	8000b8c <CO_HBconsumer_init+0xa0>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8000b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b80:	f7ff ff18 	bl	80009b4 <OD_getIndex>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b8a:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8000b8c:	f06f 030b 	mvn.w	r3, #11
 8000b90:	e04d      	b.n	8000c2e <CO_HBconsumer_init+0x142>
        }

        uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	0c1b      	lsrs	r3, r3, #16
 8000b96:	777b      	strb	r3, [r7, #29]
        uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, consumer_time);
 8000b9c:	8b7b      	ldrh	r3, [r7, #26]
 8000b9e:	7f7a      	ldrb	r2, [r7, #29]
 8000ba0:	7ff9      	ldrb	r1, [r7, #31]
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f000 f84c 	bl	8000c40 <CO_HBconsumer_initEntry>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8000bac:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d011      	beq.n	8000bd8 <CO_HBconsumer_init+0xec>
            if (errInfo != NULL) {
 8000bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <CO_HBconsumer_init+0xdc>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8000bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000bbc:	f7ff fefa 	bl	80009b4 <OD_getIndex>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc6:	601a      	str	r2, [r3, #0]
            }
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) {
 8000bc8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000bcc:	f113 0f0c 	cmn.w	r3, #12
 8000bd0:	d002      	beq.n	8000bd8 <CO_HBconsumer_init+0xec>
                return ret;
 8000bd2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000bd6:	e02a      	b.n	8000c2e <CO_HBconsumer_init+0x142>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000bd8:	7ffb      	ldrb	r3, [r7, #31]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	77fb      	strb	r3, [r7, #31]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	7a1b      	ldrb	r3, [r3, #8]
 8000be2:	7ffa      	ldrb	r2, [r7, #31]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d3b8      	bcc.n	8000b5a <CO_HBconsumer_init+0x6e>
        }
    }

    /* configure extension for OD */
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    HBcons->OD_1016_extension.object = HBcons;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <CO_HBconsumer_init+0x14c>)
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <CO_HBconsumer_init+0x150>)
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3320      	adds	r3, #32
 8000bfe:	4619      	mov	r1, r3
 8000c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c02:	f7ff fee7 	bl	80009d4 <OD_extension_init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8000c0a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00c      	beq.n	8000c2c <CO_HBconsumer_init+0x140>
        if (errInfo != NULL) {
 8000c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d006      	beq.n	8000c26 <CO_HBconsumer_init+0x13a>
            *errInfo = OD_getIndex(OD_1016_HBcons);
 8000c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c1a:	f7ff fecb 	bl	80009b4 <OD_getIndex>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c24:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8000c26:	f06f 030b 	mvn.w	r3, #11
 8000c2a:	e000      	b.n	8000c2e <CO_HBconsumer_init+0x142>
    }
#endif

    return CO_ERROR_NO;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	0800147f 	.word	0x0800147f
 8000c3c:	08000a5f 	.word	0x08000a5f

08000c40 <CO_HBconsumer_initEntry>:

static CO_ReturnError_t
CO_HBconsumer_initEntry(CO_HBconsumer_t* HBcons, uint8_t idx, uint8_t nodeId, uint16_t consumerTime_ms) {
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b08d      	sub	sp, #52	; 0x34
 8000c44:	af04      	add	r7, sp, #16
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	4608      	mov	r0, r1
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4603      	mov	r3, r0
 8000c50:	70fb      	strb	r3, [r7, #3]
 8000c52:	460b      	mov	r3, r1
 8000c54:	70bb      	strb	r3, [r7, #2]
 8000c56:	4613      	mov	r3, r2
 8000c58:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if ((HBcons == NULL) || (idx >= HBcons->numberOfMonitoredNodes)) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d004      	beq.n	8000c6e <CO_HBconsumer_initEntry+0x2e>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7a1b      	ldrb	r3, [r3, #8]
 8000c68:	78fa      	ldrb	r2, [r7, #3]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d302      	bcc.n	8000c74 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e076      	b.n	8000d62 <CO_HBconsumer_initEntry+0x122>
    }

    /* verify for duplicate entries */
    if ((consumerTime_ms != 0U) && (nodeId != 0U)) {
 8000c74:	883b      	ldrh	r3, [r7, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d024      	beq.n	8000cc4 <CO_HBconsumer_initEntry+0x84>
 8000c7a:	78bb      	ldrb	r3, [r7, #2]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d021      	beq.n	8000cc4 <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	77bb      	strb	r3, [r7, #30]
 8000c84:	e019      	b.n	8000cba <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	7fbb      	ldrb	r3, [r7, #30]
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	4413      	add	r3, r2
 8000c90:	f107 0408 	add.w	r4, r7, #8
 8000c94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if ((idx != i) && (node.time_us != 0U) && (node.nodeId == nodeId)) {
 8000c9a:	78fa      	ldrb	r2, [r7, #3]
 8000c9c:	7fbb      	ldrb	r3, [r7, #30]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d008      	beq.n	8000cb4 <CO_HBconsumer_initEntry+0x74>
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d005      	beq.n	8000cb4 <CO_HBconsumer_initEntry+0x74>
 8000ca8:	7a3b      	ldrb	r3, [r7, #8]
 8000caa:	78ba      	ldrb	r2, [r7, #2]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d101      	bne.n	8000cb4 <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 8000cb0:	23f4      	movs	r3, #244	; 0xf4
 8000cb2:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000cb4:	7fbb      	ldrb	r3, [r7, #30]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	77bb      	strb	r3, [r7, #30]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7a1b      	ldrb	r3, [r3, #8]
 8000cbe:	7fba      	ldrb	r2, [r7, #30]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d3e0      	bcc.n	8000c86 <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8000cc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d148      	bne.n	8000d5e <CO_HBconsumer_initEntry+0x11e>
        uint16_t COB_ID;

        CO_HBconsNode_t* monitoredNode = &HBcons->monitoredNodes[idx];
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	4413      	add	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	78ba      	ldrb	r2, [r7, #2]
 8000cdc:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (uint32_t)consumerTime_ms * 1000U;
 8000cde:	883b      	ldrh	r3, [r7, #0]
 8000ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce4:	fb03 f202 	mul.w	r2, r3, r2
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	22ff      	movs	r2, #255	; 0xff
 8000cf0:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if ((monitoredNode->nodeId != 0U) && (monitoredNode->time_us != 0U)) {
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d00d      	beq.n	8000d1c <CO_HBconsumer_initEntry+0xdc>
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d009      	beq.n	8000d1c <CO_HBconsumer_initEntry+0xdc>
            COB_ID = monitoredNode->nodeId + (uint16_t)CO_CAN_ID_HEARTBEAT;
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000d12:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	2201      	movs	r2, #1
 8000d18:	709a      	strb	r2, [r3, #2]
 8000d1a:	e007      	b.n	8000d2c <CO_HBconsumer_initEntry+0xec>
        } else {
            COB_ID = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6998      	ldr	r0, [r3, #24]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	8b9a      	ldrh	r2, [r3, #28]
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	4413      	add	r3, r2
 8000d3a:	b299      	uxth	r1, r3
                                 (void*)&HBcons->monitoredNodes[idx], CO_HBcons_receive);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8000d46:	8bba      	ldrh	r2, [r7, #28]
 8000d48:	4c08      	ldr	r4, [pc, #32]	; (8000d6c <CO_HBconsumer_initEntry+0x12c>)
 8000d4a:	9402      	str	r4, [sp, #8]
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d56:	f006 f8d5 	bl	8006f04 <CO_CANrxBufferInit>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	77fb      	strb	r3, [r7, #31]
    }
    return ret;
 8000d5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	08000a25 	.word	0x08000a25

08000d70 <CO_HBconsumer_process>:
}
#endif /* (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI */

void
CO_HBconsumer_process(CO_HBconsumer_t* HBcons, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                      uint32_t* timerNext_us) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8000d82:	2301      	movs	r3, #1
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d077      	beq.n	8000e7c <CO_HBconsumer_process+0x10c>
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d073      	beq.n	8000e7c <CO_HBconsumer_process+0x10c>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d9a:	e068      	b.n	8000e6e <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000da8:	011b      	lsls	r3, r3, #4
 8000daa:	4413      	add	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	789b      	ldrb	r3, [r3, #2]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d055      	beq.n	8000e62 <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d022      	beq.n	8000e04 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d112      	bne.n	8000dee <CO_HBconsumer_process+0x7e>
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
                        monitoredNode->pFunctSignalRemoteReset(monitoredNode->nodeId, i,
                                                               monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	789b      	ldrb	r3, [r3, #2]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d10a      	bne.n	8000de6 <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	f248 1330 	movw	r3, #33072	; 0x8130
 8000dde:	221c      	movs	r2, #28
 8000de0:	2101      	movs	r1, #1
 8000de2:	f7ff fd1e 	bl	8000822 <CO_error>
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	2201      	movs	r2, #1
 8000dea:	709a      	strb	r2, [r3, #2]
 8000dec:	e007      	b.n	8000dfe <CO_HBconsumer_process+0x8e>
                        && monitoredNode->pFunctSignalHbStarted != NULL) {
                        monitoredNode->pFunctSignalHbStarted(monitoredNode->nodeId, i,
                                                             monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	2202      	movs	r2, #2
 8000df2:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	2200      	movs	r2, #0
 8000df8:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	789b      	ldrb	r3, [r3, #2]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d11c      	bne.n	8000e46 <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	441a      	add	r2, r3
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d310      	bcc.n	8000e46 <CO_HBconsumer_process+0xd6>
                    if (monitoredNode->pFunctSignalTimeout != NULL) {
                        monitoredNode->pFunctSignalTimeout(monitoredNode->nodeId, i,
                                                           monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	6818      	ldr	r0, [r3, #0]
 8000e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	f248 1330 	movw	r3, #33072	; 0x8130
 8000e32:	221b      	movs	r2, #27
 8000e34:	2101      	movs	r1, #1
 8000e36:	f7ff fcf4 	bl	8000822 <CO_error>
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	22ff      	movs	r2, #255	; 0xff
 8000e3e:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2203      	movs	r2, #3
 8000e44:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	789b      	ldrb	r3, [r3, #2]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d001      	beq.n	8000e52 <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000e58:	2b05      	cmp	r3, #5
 8000e5a:	d003      	beq.n	8000e64 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e60:	e000      	b.n	8000e64 <CO_HBconsumer_process+0xf4>
                continue;
 8000e62:	bf00      	nop
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e68:	3301      	adds	r3, #1
 8000e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	7a1b      	ldrb	r3, [r3, #8]
 8000e72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d390      	bcc.n	8000d9c <CO_HBconsumer_process+0x2c>
 8000e7a:	e028      	b.n	8000ece <CO_HBconsumer_process+0x15e>
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    } else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d103      	bne.n	8000e8a <CO_HBconsumer_process+0x11a>
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d021      	beq.n	8000ece <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	77fb      	strb	r3, [r7, #31]
 8000e8e:	e015      	b.n	8000ebc <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	7ffb      	ldrb	r3, [r7, #31]
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4413      	add	r3, r2
 8000e9a:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	22ff      	movs	r2, #255	; 0xff
 8000ea0:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	789b      	ldrb	r3, [r3, #2]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d002      	beq.n	8000eb6 <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000eb6:	7ffb      	ldrb	r3, [r7, #31]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	77fb      	strb	r3, [r7, #31]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	7a1b      	ldrb	r3, [r3, #8]
 8000ec0:	7ffa      	ldrb	r2, [r7, #31]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d3e4      	bcc.n	8000e90 <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d114      	bne.n	8000f00 <CO_HBconsumer_process+0x190>
 8000ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d011      	beq.n	8000f00 <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	221b      	movs	r2, #27
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f7ff fc9a 	bl	8000822 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6818      	ldr	r0, [r3, #0]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	221c      	movs	r2, #28
 8000efa:	2100      	movs	r1, #0
 8000efc:	f7ff fc91 	bl	8000822 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f04:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f0a:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	615a      	str	r2, [r3, #20]
}
 8000f12:	bf00      	nop
 8000f14:	3730      	adds	r7, #48	; 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <CO_getUint16>:
CO_getUint16(const void* buf) {
 8000f1a:	b480      	push	{r7}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 8000f28:	81fb      	strh	r3, [r7, #14]
    return value;
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <OD_getIndex+0x14>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	e000      	b.n	8000f4c <OD_getIndex+0x16>
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8000f66:	2305      	movs	r3, #5
 8000f68:	e003      	b.n	8000f72 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000f8c:	7af9      	ldrb	r1, [r7, #11]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2302      	movs	r3, #2
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f000 fcbe 	bl	8001918 <OD_get_value>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <CO_isError>:
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8000fa6:	b480      	push	{r7}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	08db      	lsrs	r3, r3, #3
 8000fb6:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
            || (em->errorStatusBits[index] & bitmask) != 0)
               ? true
               : false;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00a      	beq.n	8000fe2 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	d807      	bhi.n	8000fe2 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	5cd2      	ldrb	r2, [r2, r3]
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
               : false;
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <CO_isError+0x40>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <CO_isError+0x42>
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <CO_getErrorRegister>:
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t
CO_getErrorRegister(CO_EM_t* em) {
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d007      	beq.n	8001010 <CO_getErrorRegister+0x1e>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <CO_getErrorRegister+0x1e>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	e000      	b.n	8001012 <CO_getErrorRegister+0x20>
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_NMT_receive(void* object, void* msg) {
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	791b      	ldrb	r3, [r3, #4]
 800102a:	75fb      	strb	r3, [r7, #23]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3305      	adds	r3, #5
 8001030:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	3301      	adds	r3, #1
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t* NMT = (CO_NMT_t*)object;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	60bb      	str	r3, [r7, #8]

    if ((DLC == 2U) && ((nodeId == 0U) || (nodeId == NMT->nodeId))) {
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d10a      	bne.n	8001060 <CO_NMT_receive+0x44>
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d004      	beq.n	800105a <CO_NMT_receive+0x3e>
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	78db      	ldrb	r3, [r3, #3]
 8001054:	7bba      	ldrb	r2, [r7, #14]
 8001056:	429a      	cmp	r2, r3
 8001058:	d102      	bne.n	8001060 <CO_NMT_receive+0x44>
        NMT->internalCommand = command;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <OD_write_1017>:
 * Custom function for writing OD object "Producer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1017(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint16_t))
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00c      	beq.n	8001098 <OD_write_1017+0x2e>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	7d1b      	ldrb	r3, [r3, #20]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d108      	bne.n	8001098 <OD_write_1017+0x2e>
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <OD_write_1017+0x2e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d102      	bne.n	8001098 <OD_write_1017+0x2e>
        || (countWritten == NULL)) {
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <OD_write_1017+0x32>
        return ODR_DEV_INCOMPAT;
 8001098:	2309      	movs	r3, #9
 800109a:	e017      	b.n	80010cc <OD_write_1017+0x62>
    }

    CO_NMT_t* NMT = (CO_NMT_t*)stream->object;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000U;
 80010a2:	68b8      	ldr	r0, [r7, #8]
 80010a4:	f7ff ff39 	bl	8000f1a <CO_getUint16>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b0:	fb03 f202 	mul.w	r2, r3, r2
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f000 fa32 	bl	800152e <OD_writeOriginal>
 80010ca:	4603      	mov	r3, r0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <CO_NMT_init>:
CO_NMT_init(CO_NMT_t* NMT, OD_entry_t* OD_1017_ProducerHbTime, CO_EM_t* em, uint8_t nodeId, uint16_t NMTcontrol,
            uint16_t firstHBTime_ms, CO_CANmodule_t* NMT_CANdevRx, uint16_t NMT_rxIdx, uint16_t CANidRxNMT,
#if (((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0) || defined CO_DOXYGEN
            CO_CANmodule_t* NMT_CANdevTx, uint16_t NMT_txIdx, uint16_t CANidTxNMT,
#endif
            CO_CANmodule_t* HB_CANdevTx, uint16_t HB_txIdx, uint16_t CANidTxHB, uint32_t* errInfo) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af04      	add	r7, sp, #16
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80010e2:	2300      	movs	r3, #0
 80010e4:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((NMT == NULL) || (OD_1017_ProducerHbTime == NULL) || (em == NULL) || (NMT_CANdevRx == NULL)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00b      	beq.n	8001104 <CO_NMT_init+0x30>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d008      	beq.n	8001104 <CO_NMT_init+0x30>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <CO_NMT_init+0x30>
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <CO_NMT_init+0x30>
        || (HB_CANdevTx == NULL)
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <CO_NMT_init+0x36>
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
        || (NMT_CANdevTx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
 8001108:	e097      	b.n	800123a <CO_NMT_init+0x166>
    }

    /* clear the object */
    (void)memset(NMT, 0, sizeof(CO_NMT_t));
 800110a:	222c      	movs	r2, #44	; 0x2c
 800110c:	2100      	movs	r1, #0
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f00b f9ae 	bl	800c470 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	78fa      	ldrb	r2, [r7, #3]
 8001124:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	8c3a      	ldrh	r2, [r7, #32]
 800112a:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (uint32_t)firstHBTime_ms * 1000U;
 8001132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001138:	fb03 f202 	mul.w	r2, r3, r2
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001140:	f107 0214 	add.w	r2, r7, #20
 8001144:	2301      	movs	r3, #1
 8001146:	2100      	movs	r1, #0
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f7ff ff17 	bl	8000f7c <OD_get_u16>
 800114e:	4603      	mov	r3, r0
 8001150:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001152:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00c      	beq.n	8001174 <CO_NMT_init+0xa0>
        if (errInfo != NULL) {
 800115a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <CO_NMT_init+0x9a>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f7ff fee8 	bl	8000f36 <OD_getIndex>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800116c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800116e:	f06f 030b 	mvn.w	r3, #11
 8001172:	e062      	b.n	800123a <CO_NMT_init+0x166>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000U;
 8001174:	8abb      	ldrh	r3, [r7, #20]
 8001176:	461a      	mov	r2, r3
 8001178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117c:	fb03 f202 	mul.w	r2, r3, r2
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4a2d      	ldr	r2, [pc, #180]	; (8001244 <CO_NMT_init+0x170>)
 800118e:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4a2d      	ldr	r2, [pc, #180]	; (8001248 <CO_NMT_init+0x174>)
 8001194:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3310      	adds	r3, #16
 800119a:	4619      	mov	r1, r3
 800119c:	68b8      	ldr	r0, [r7, #8]
 800119e:	f7ff feda 	bl	8000f56 <OD_extension_init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80011a6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00c      	beq.n	80011c8 <CO_NMT_init+0xf4>
        if (errInfo != NULL) {
 80011ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <CO_NMT_init+0xee>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80011b4:	68b8      	ldr	r0, [r7, #8]
 80011b6:	f7ff febe 	bl	8000f36 <OD_getIndex>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011c0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80011c2:	f06f 030b 	mvn.w	r3, #11
 80011c6:	e038      	b.n	800123a <CO_NMT_init+0x166>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d903      	bls.n	80011dc <CO_NMT_init+0x108>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(NMT_CANdevRx, NMT_rxIdx, CANidRxNMT, 0x7FF, false, (void*)NMT, CO_NMT_receive);
 80011dc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80011de:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <CO_NMT_init+0x178>)
 80011e2:	9302      	str	r3, [sp, #8]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2300      	movs	r3, #0
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011f2:	f005 fe87 	bl	8006f04 <CO_CANrxBufferInit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	75fb      	strb	r3, [r7, #23]
    if (ret != CO_ERROR_NO) {
 80011fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <CO_NMT_init+0x134>
        return ret;
 8001202:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001206:	e018      	b.n	800123a <CO_NMT_init+0x166>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(HB_CANdevTx, HB_txIdx, CANidTxHB, false, 1, false);
 800120e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001210:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001212:	2300      	movs	r3, #0
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2301      	movs	r3, #1
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800121e:	f005 fecd 	bl	8006fbc <CO_CANtxBufferInit>
 8001222:	4602      	mov	r2, r0
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
    if (NMT->HB_TXbuff == NULL) {
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <CO_NMT_init+0x162>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	e001      	b.n	800123a <CO_NMT_init+0x166>
    }

    return ret;
 8001236:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	0800147f 	.word	0x0800147f
 8001248:	0800106b 	.word	0x0800106b
 800124c:	0800101d 	.word	0x0800101d

08001250 <CO_NMT_process>:
    }
}
#endif

CO_NMT_reset_cmd_t
CO_NMT_process(CO_NMT_t* NMT, CO_NMT_internalState_t* NMTstate, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	; 0x38
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 800126c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	633b      	str	r3, [r7, #48]	; 0x30

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us) ? (NMT->HBproducerTimer - timeDifference_us) : 0U;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	429a      	cmp	r2, r3
 8001284:	d204      	bcs.n	8001290 <CO_NMT_process+0x40>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	e000      	b.n	8001292 <CO_NMT_process+0x42>
 8001290:	2300      	movs	r3, #0
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed */
    if (NNTinit
 8001296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10e      	bne.n	80012ba <CO_NMT_process+0x6a>
        || ((NMT->HBproducerTime_us != 0U)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d02b      	beq.n	80012fc <CO_NMT_process+0xac>
            && ((NMT->HBproducerTimer == 0U) || (NMTstateCpy != NMT->operatingStatePrev)))) {
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <CO_NMT_process+0x6a>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012b2:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d020      	beq.n	80012fc <CO_NMT_process+0xac>
        NMT->HB_TXbuff->data[0] = (uint8_t)NMTstateCpy;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012be:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80012c2:	715a      	strb	r2, [r3, #5]
        (void)CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4610      	mov	r0, r2
 80012d0:	f005 feee 	bl	80070b0 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 80012d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d10b      	bne.n	80012f4 <CO_NMT_process+0xa4>
            /* NMT slave self starting */
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	889b      	ldrh	r3, [r3, #4]
 80012e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
                              ? CO_NMT_OPERATIONAL
                              : CO_NMT_PRE_OPERATIONAL;
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <CO_NMT_process+0x9c>
 80012e8:	2305      	movs	r3, #5
 80012ea:	e000      	b.n	80012ee <CO_NMT_process+0x9e>
 80012ec:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 80012ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012f2:	e003      	b.n	80012fc <CO_NMT_process+0xac>
        } else {
            /* Start timer from the beginning. If OS is slow, time sliding may occur. However,
             * heartbeat is not for synchronization, it is for health report. In case of
             * initializing, timer is set in the CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001302:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	789b      	ldrb	r3, [r3, #2]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d02a      	beq.n	8001362 <CO_NMT_process+0x112>
        switch (NMT->internalCommand) {
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	789b      	ldrb	r3, [r3, #2]
 8001310:	2b82      	cmp	r3, #130	; 0x82
 8001312:	d01e      	beq.n	8001352 <CO_NMT_process+0x102>
 8001314:	2b82      	cmp	r3, #130	; 0x82
 8001316:	dc20      	bgt.n	800135a <CO_NMT_process+0x10a>
 8001318:	2b81      	cmp	r3, #129	; 0x81
 800131a:	d016      	beq.n	800134a <CO_NMT_process+0xfa>
 800131c:	2b81      	cmp	r3, #129	; 0x81
 800131e:	dc1c      	bgt.n	800135a <CO_NMT_process+0x10a>
 8001320:	2b80      	cmp	r3, #128	; 0x80
 8001322:	d00e      	beq.n	8001342 <CO_NMT_process+0xf2>
 8001324:	2b80      	cmp	r3, #128	; 0x80
 8001326:	dc18      	bgt.n	800135a <CO_NMT_process+0x10a>
 8001328:	2b01      	cmp	r3, #1
 800132a:	d002      	beq.n	8001332 <CO_NMT_process+0xe2>
 800132c:	2b02      	cmp	r3, #2
 800132e:	d004      	beq.n	800133a <CO_NMT_process+0xea>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
            case CO_NMT_NO_COMMAND:
            default:
                /* done */
                break;
 8001330:	e013      	b.n	800135a <CO_NMT_process+0x10a>
            case CO_NMT_ENTER_OPERATIONAL: NMTstateCpy = CO_NMT_OPERATIONAL; break;
 8001332:	2305      	movs	r3, #5
 8001334:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001338:	e010      	b.n	800135c <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_STOPPED: NMTstateCpy = CO_NMT_STOPPED; break;
 800133a:	2304      	movs	r3, #4
 800133c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001340:	e00c      	b.n	800135c <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_PRE_OPERATIONAL: NMTstateCpy = CO_NMT_PRE_OPERATIONAL; break;
 8001342:	237f      	movs	r3, #127	; 0x7f
 8001344:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001348:	e008      	b.n	800135c <CO_NMT_process+0x10c>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
 800134a:	2302      	movs	r3, #2
 800134c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001350:	e004      	b.n	800135c <CO_NMT_process+0x10c>
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
 8001352:	2301      	movs	r3, #1
 8001354:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001358:	e000      	b.n	800135c <CO_NMT_process+0x10c>
                break;
 800135a:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t ErrOnBusOffHB = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_BUSOFF_HB) != 0U);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	889b      	ldrh	r3, [r3, #4]
 8001366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136a:	2b00      	cmp	r3, #0
 800136c:	bf14      	ite	ne
 800136e:	2301      	movne	r3, #1
 8001370:	2300      	moveq	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t ErrBusOff = CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	2112      	movs	r1, #18
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe12 	bl	8000fa6 <CO_isError>
 8001382:	62b8      	str	r0, [r7, #40]	; 0x28
    bool_t ErrHbCons = CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	211b      	movs	r1, #27
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe0b 	bl	8000fa6 <CO_isError>
 8001390:	6278      	str	r0, [r7, #36]	; 0x24
    bool_t ErrHbConsRemote = CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	211c      	movs	r1, #28
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fe04 	bl	8000fa6 <CO_isError>
 800139e:	6238      	str	r0, [r7, #32]
    bool_t busOff_HB = ErrOnBusOffHB && (ErrBusOff || ErrHbCons || ErrHbConsRemote);
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00a      	beq.n	80013bc <CO_NMT_process+0x16c>
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d105      	bne.n	80013b8 <CO_NMT_process+0x168>
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <CO_NMT_process+0x168>
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <CO_NMT_process+0x16c>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <CO_NMT_process+0x16e>
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]

    bool_t ErrNMTErrReg = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_ERR_REG) != 0U);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	889b      	ldrh	r3, [r3, #4]
 80013c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf14      	ite	ne
 80013cc:	2301      	movne	r3, #1
 80013ce:	2300      	moveq	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	61bb      	str	r3, [r7, #24]
    bool_t ErrNMTcontrol = ((CO_getErrorRegister(NMT->em) & (uint8_t)NMT->NMTcontrol) != 0U);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fe0a 	bl	8000ff2 <CO_getErrorRegister>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	889b      	ldrh	r3, [r3, #4]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4013      	ands	r3, r2
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf14      	ite	ne
 80013f0:	2301      	movne	r3, #1
 80013f2:	2300      	moveq	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = ErrNMTErrReg && ErrNMTcontrol;
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <CO_NMT_process+0x1b8>
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <CO_NMT_process+0x1b8>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <CO_NMT_process+0x1ba>
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]

    if ((NMTstateCpy == CO_NMT_OPERATIONAL) && (busOff_HB || errRegMasked)) {
 800140c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001410:	2b05      	cmp	r3, #5
 8001412:	d111      	bne.n	8001438 <CO_NMT_process+0x1e8>
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <CO_NMT_process+0x1d0>
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00b      	beq.n	8001438 <CO_NMT_process+0x1e8>
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	889b      	ldrh	r3, [r3, #4]
 8001424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                                                                                            : CO_NMT_PRE_OPERATIONAL;
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <CO_NMT_process+0x1e0>
 800142c:	2304      	movs	r3, #4
 800142e:	e000      	b.n	8001432 <CO_NMT_process+0x1e2>
 8001430:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8001432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001436:	e011      	b.n	800145c <CO_NMT_process+0x20c>
    } else if ((((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0U)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	889b      	ldrh	r3, [r3, #4]
 800143c:	b21b      	sxth	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	da0c      	bge.n	800145c <CO_NMT_process+0x20c>
               && (NMTstateCpy == CO_NMT_PRE_OPERATIONAL) && (!busOff_HB && !errRegMasked)) {
 8001442:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001446:	2b7f      	cmp	r3, #127	; 0x7f
 8001448:	d108      	bne.n	800145c <CO_NMT_process+0x20c>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <CO_NMT_process+0x20c>
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <CO_NMT_process+0x20c>
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8001456:	2305      	movs	r3, #5
 8001458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001462:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) {
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <CO_NMT_process+0x222>
        *NMTstate = NMTstateCpy;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001470:	701a      	strb	r2, [r3, #0]
    }

    return resetCommand;
 8001472:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8001476:	4618      	mov	r0, r3
 8001478:	3738      	adds	r7, #56	; 0x38
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <OD_readOriginal>:
#include <string.h>
#define OD_DEFINITION
#include "301/CO_ODinterface.h"

ODR_t
OD_readOriginal(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800147e:	b580      	push	{r7, lr}
 8001480:	b088      	sub	sp, #32
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL)) {
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <OD_readOriginal+0x20>
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <OD_readOriginal+0x20>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 800149e:	2309      	movs	r3, #9
 80014a0:	e041      	b.n	8001526 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61fb      	str	r3, [r7, #28]
    const uint8_t* dataOrig = stream->dataOrig;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80014b4:	230e      	movs	r3, #14
 80014b6:	e036      	b.n	8001526 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d103      	bne.n	80014cc <OD_readOriginal+0x4e>
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d922      	bls.n	8001512 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d801      	bhi.n	80014da <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80014d6:	2309      	movs	r3, #9
 80014d8:	e025      	b.n	8001526 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4413      	add	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d90a      	bls.n	800150c <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	441a      	add	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001506:	23ff      	movs	r3, #255	; 0xff
 8001508:	75fb      	strb	r3, [r7, #23]
 800150a:	e002      	b.n	8001512 <OD_readOriginal+0x94>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
        }
    }

    (void)memcpy((void*)buf, (const void*)dataOrig, dataLenToCopy);
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	69b9      	ldr	r1, [r7, #24]
 8001516:	68b8      	ldr	r0, [r7, #8]
 8001518:	f00b f834 	bl	800c584 <memcpy>

    *countRead = dataLenToCopy;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001522:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <OD_writeOriginal>:

ODR_t
OD_writeOriginal(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800152e:	b580      	push	{r7, lr}
 8001530:	b088      	sub	sp, #32
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <OD_writeOriginal+0x20>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <OD_writeOriginal+0x20>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 800154e:	2309      	movs	r3, #9
 8001550:	e056      	b.n	8001600 <OD_writeOriginal+0xd2>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61fb      	str	r3, [r7, #28]
    OD_size_t dataLenRemain = dataLenToCopy;      /* remaining length of dataOrig buffer */
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	61bb      	str	r3, [r7, #24]
    uint8_t* dataOrig = stream->dataOrig;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	617b      	str	r3, [r7, #20]

    if (dataOrig == NULL) {
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <OD_writeOriginal+0x3e>
        return ODR_SUB_NOT_EXIST;
 8001568:	230e      	movs	r3, #14
 800156a:	e049      	b.n	8001600 <OD_writeOriginal+0xd2>
    }

    ODR_t returnCode = ODR_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	74fb      	strb	r3, [r7, #19]

    /* If previous write was partial or OD variable length is larger than current buffer size,
     * then data was (will be) written in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d103      	bne.n	8001580 <OD_writeOriginal+0x52>
 8001578:	69fa      	ldr	r2, [r7, #28]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	d924      	bls.n	80015ca <OD_writeOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	429a      	cmp	r2, r3
 8001588:	d801      	bhi.n	800158e <OD_writeOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 800158a:	2309      	movs	r3, #9
 800158c:	e038      	b.n	8001600 <OD_writeOriginal+0xd2>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	61fb      	str	r3, [r7, #28]
        dataLenRemain = dataLenToCopy;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	61bb      	str	r3, [r7, #24]
        dataOrig += stream->dataOffset;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	4413      	add	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]

        if (dataLenToCopy > count) {
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d90a      	bls.n	80015c4 <OD_writeOriginal+0x96>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	441a      	add	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80015be:	23ff      	movs	r3, #255	; 0xff
 80015c0:	74fb      	strb	r3, [r7, #19]
 80015c2:	e002      	b.n	80015ca <OD_writeOriginal+0x9c>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d201      	bcs.n	80015d6 <OD_writeOriginal+0xa8>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 80015d2:	230c      	movs	r3, #12
 80015d4:	e014      	b.n	8001600 <OD_writeOriginal+0xd2>
    }

    /* additional check for Misra c compliance */
    if ((dataLenToCopy <= dataLenRemain) && (dataLenToCopy <= count)) {
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d80f      	bhi.n	80015fe <OD_writeOriginal+0xd0>
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d80b      	bhi.n	80015fe <OD_writeOriginal+0xd0>
        (void)memcpy((void*)dataOrig, (const void*)buf, dataLenToCopy);
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f00a ffca 	bl	800c584 <memcpy>
 80015f0:	bf00      	nop
    } else {
        return ODR_DEV_INCOMPAT;
    }

    *countWritten = dataLenToCopy;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	601a      	str	r2, [r3, #0]
    return returnCode;
 80015f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015fc:	e000      	b.n	8001600 <OD_writeOriginal+0xd2>
        return ODR_DEV_INCOMPAT;
 80015fe:	2309      	movs	r3, #9
}
 8001600:	4618      	mov	r0, r3
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_readDisabled(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countRead;
    return ODR_UNSUPP_ACCESS;
 8001616:	2302      	movs	r3, #2
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_writeDisabled(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countWritten;
    return ODR_UNSUPP_ACCESS;
 8001630:	2302      	movs	r3, #2
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <OD_find>:

OD_entry_t*
OD_find(OD_t* od, uint16_t index) {
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
    if ((od == NULL) || (od->size == 0U)) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <OD_find+0x1a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <OD_find+0x1e>
        return NULL;
 8001656:	2300      	movs	r3, #0
 8001658:	e046      	b.n	80016e8 <OD_find+0xac>
    }

    uint16_t min = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1U;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	3b01      	subs	r3, #1
 8001664:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. If Object
     * Dictionary has up to N entries, then the max number of loop passes is log2(N) */
    while (min < max)
 8001666:	e026      	b.n	80016b6 <OD_find+0x7a>
    {
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001668:	8afa      	ldrh	r2, [r7, #22]
 800166a:	8abb      	ldrh	r3, [r7, #20]
 800166c:	4413      	add	r3, r2
 800166e:	105b      	asrs	r3, r3, #1
 8001670:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6859      	ldr	r1, [r3, #4]
 8001676:	89fa      	ldrh	r2, [r7, #14]
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) { return entry;}
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	887a      	ldrh	r2, [r7, #2]
 800168a:	429a      	cmp	r2, r3
 800168c:	d101      	bne.n	8001692 <OD_find+0x56>
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	e02a      	b.n	80016e8 <OD_find+0xac>



        if (index < entry->index) { max = (cur > 0U) ? (cur - 1U) : cur;}
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	429a      	cmp	r2, r3
 800169a:	d209      	bcs.n	80016b0 <OD_find+0x74>
 800169c:	89fb      	ldrh	r3, [r7, #14]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <OD_find+0x6e>
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	e000      	b.n	80016ac <OD_find+0x70>
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	82bb      	strh	r3, [r7, #20]
 80016ae:	e002      	b.n	80016b6 <OD_find+0x7a>
           	   	   	   	   	   	   else {min = cur + 1U;}
 80016b0:	89fb      	ldrh	r3, [r7, #14]
 80016b2:	3301      	adds	r3, #1
 80016b4:	82fb      	strh	r3, [r7, #22]
    while (min < max)
 80016b6:	8afa      	ldrh	r2, [r7, #22]
 80016b8:	8abb      	ldrh	r3, [r7, #20]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d3d4      	bcc.n	8001668 <OD_find+0x2c>


    }


    if (min == max) {
 80016be:	8afa      	ldrh	r2, [r7, #22]
 80016c0:	8abb      	ldrh	r3, [r7, #20]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d10f      	bne.n	80016e6 <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6859      	ldr	r1, [r3, #4]
 80016ca:	8afa      	ldrh	r2, [r7, #22]
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	887a      	ldrh	r2, [r7, #2]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d101      	bne.n	80016e6 <OD_find+0xaa>
            return entry;
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	e000      	b.n	80016e8 <OD_find+0xac>
        }
    }

    return NULL; /* entry does not exist in OD */
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	371c      	adds	r7, #28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
	...

080016f4 <OD_getSub>:

ODR_t
OD_getSub(const OD_entry_t* entry, uint8_t subIndex, OD_IO_t* io, bool_t odOrig) {
 80016f4:	b480      	push	{r7}
 80016f6:	b08d      	sub	sp, #52	; 0x34
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	460b      	mov	r3, r1
 8001702:	72fb      	strb	r3, [r7, #11]
    if ((entry == NULL) || (entry->odObject == NULL)) {
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <OD_getSub+0x1e>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <OD_getSub+0x22>
        return ODR_IDX_NOT_EXIST;
 8001712:	2305      	movs	r3, #5
 8001714:	e0d7      	b.n	80018c6 <OD_getSub+0x1d2>
    }
    if (io == NULL) {
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <OD_getSub+0x2c>
        return ODR_DEV_INCOMPAT;
 800171c:	2309      	movs	r3, #9
 800171e:	e0d2      	b.n	80018c6 <OD_getSub+0x1d2>
    }

    OD_stream_t* stream = &io->stream;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & (uint8_t)ODT_TYPE_MASK) {
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	78db      	ldrb	r3, [r3, #3]
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	2b03      	cmp	r3, #3
 800172e:	d051      	beq.n	80017d4 <OD_getSub+0xe0>
 8001730:	2b03      	cmp	r3, #3
 8001732:	f300 808d 	bgt.w	8001850 <OD_getSub+0x15c>
 8001736:	2b01      	cmp	r3, #1
 8001738:	d002      	beq.n	8001740 <OD_getSub+0x4c>
 800173a:	2b02      	cmp	r3, #2
 800173c:	d015      	beq.n	800176a <OD_getSub+0x76>
 800173e:	e087      	b.n	8001850 <OD_getSub+0x15c>
        case ODT_VAR: {
            if (subIndex > 0U) {
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <OD_getSub+0x56>
                return ODR_SUB_NOT_EXIST;
 8001746:	230e      	movs	r3, #14
 8001748:	e0bd      	b.n	80018c6 <OD_getSub+0x1d2>
            }
            CO_PROGMEM OD_obj_var_t* odo = entry->odObject;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	617b      	str	r3, [r7, #20]

            stream->attribute = odo->attribute;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	791a      	ldrb	r2, [r3, #4]
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	609a      	str	r2, [r3, #8]
            break;
 8001768:	e074      	b.n	8001854 <OD_getSub+0x160>
        }
        case ODT_ARR: {
            if (subIndex >= entry->subEntriesCount) {
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	789b      	ldrb	r3, [r3, #2]
 800176e:	7afa      	ldrb	r2, [r7, #11]
 8001770:	429a      	cmp	r2, r3
 8001772:	d301      	bcc.n	8001778 <OD_getSub+0x84>
                return ODR_SUB_NOT_EXIST;
 8001774:	230e      	movs	r3, #14
 8001776:	e0a6      	b.n	80018c6 <OD_getSub+0x1d2>
            }
            CO_PROGMEM OD_obj_array_t* odo = entry->odObject;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	61fb      	str	r3, [r7, #28]

            if (subIndex == 0U) {
 800177e:	7afb      	ldrb	r3, [r7, #11]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10b      	bne.n	800179c <OD_getSub+0xa8>
                stream->attribute = odo->attribute0;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	7a1a      	ldrb	r2, [r3, #8]
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	741a      	strb	r2, [r3, #16]
                stream->dataOrig = odo->dataOrig0;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	601a      	str	r2, [r3, #0]
                stream->dataLength = 1;
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	2201      	movs	r2, #1
 8001798:	609a      	str	r2, [r3, #8]
                stream->attribute = odo->attribute;
                uint8_t* ptr = odo->dataOrig;
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
                stream->dataLength = odo->dataElementLength;
            }
            break;
 800179a:	e05b      	b.n	8001854 <OD_getSub+0x160>
                stream->attribute = odo->attribute;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	7a5a      	ldrb	r2, [r3, #9]
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	741a      	strb	r2, [r3, #16]
                uint8_t* ptr = odo->dataOrig;
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	61bb      	str	r3, [r7, #24]
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <OD_getSub+0xd0>
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	7afa      	ldrb	r2, [r7, #11]
 80017b6:	3a01      	subs	r2, #1
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4413      	add	r3, r2
 80017c2:	e000      	b.n	80017c6 <OD_getSub+0xd2>
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c8:	6013      	str	r3, [r2, #0]
                stream->dataLength = odo->dataElementLength;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	609a      	str	r2, [r3, #8]
            break;
 80017d2:	e03f      	b.n	8001854 <OD_getSub+0x160>
        }
        case ODT_REC: {
            CO_PROGMEM OD_obj_record_t* odoArr = entry->odObject;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	623b      	str	r3, [r7, #32]
            CO_PROGMEM OD_obj_record_t* odo = NULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80017e4:	e01c      	b.n	8001820 <OD_getSub+0x12c>
                if (odoArr[i].subIndex == subIndex) {
 80017e6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	461a      	mov	r2, r3
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	4413      	add	r3, r2
 80017f8:	791b      	ldrb	r3, [r3, #4]
 80017fa:	7afa      	ldrb	r2, [r7, #11]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d10a      	bne.n	8001816 <OD_getSub+0x122>
                    odo = &odoArr[i];
 8001800:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	461a      	mov	r2, r3
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	4413      	add	r3, r2
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8001814:	e00a      	b.n	800182c <OD_getSub+0x138>
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001816:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800181a:	3301      	adds	r3, #1
 800181c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	789b      	ldrb	r3, [r3, #2]
 8001824:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001828:	429a      	cmp	r2, r3
 800182a:	d3dc      	bcc.n	80017e6 <OD_getSub+0xf2>
                }
            }
            if (odo == NULL) {
 800182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <OD_getSub+0x142>
                return ODR_SUB_NOT_EXIST;
 8001832:	230e      	movs	r3, #14
 8001834:	e047      	b.n	80018c6 <OD_getSub+0x1d2>
            }

            stream->attribute = odo->attribute;
 8001836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001838:	795a      	ldrb	r2, [r3, #5]
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	609a      	str	r2, [r3, #8]
            break;
 800184e:	e001      	b.n	8001854 <OD_getSub+0x160>
        }
        default: {
            return ODR_DEV_INCOMPAT;
 8001850:	2309      	movs	r3, #9
 8001852:	e038      	b.n	80018c6 <OD_getSub+0x1d2>
            break;
        }
    }

    /* Access data from the original OD location */
    if ((entry->extension == NULL) || odOrig) {
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <OD_getSub+0x16e>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <OD_getSub+0x182>
        io->read = OD_readOriginal;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <OD_getSub+0x1dc>)
 8001866:	619a      	str	r2, [r3, #24]
        io->write = OD_writeOriginal;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <OD_getSub+0x1e0>)
 800186c:	61da      	str	r2, [r3, #28]
        stream->object = NULL;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	2200      	movs	r2, #0
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	e01c      	b.n	80018b0 <OD_getSub+0x1bc>
    }
    /* Access data from extension specified by application */
    else {
        io->read = (entry->extension->read != NULL) ? entry->extension->read : OD_readDisabled;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <OD_getSub+0x194>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	e000      	b.n	800188a <OD_getSub+0x196>
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <OD_getSub+0x1e4>)
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6193      	str	r3, [r2, #24]
        io->write = (entry->extension->write != NULL) ? entry->extension->write : OD_writeDisabled;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <OD_getSub+0x1ac>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	e000      	b.n	80018a2 <OD_getSub+0x1ae>
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <OD_getSub+0x1e8>)
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	61d3      	str	r3, [r2, #28]
        stream->object = entry->extension->object;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]

    /* Add informative data */
    stream->index = entry->index;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	881a      	ldrh	r2, [r3, #0]
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	825a      	strh	r2, [r3, #18]
    stream->subIndex = subIndex;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	7afa      	ldrb	r2, [r7, #11]
 80018c2:	751a      	strb	r2, [r3, #20]

    return ODR_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3734      	adds	r7, #52	; 0x34
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	0800147f 	.word	0x0800147f
 80018d4:	0800152f 	.word	0x0800152f
 80018d8:	08001609 	.word	0x08001609
 80018dc:	08001623 	.word	0x08001623

080018e0 <OD_getSDOabCode>:

uint32_t
OD_getSDOabCode(ODR_t returnCode)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return ((returnCode < ODR_OK) || (returnCode >= ODR_COUNT)) ? abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db03      	blt.n	80018fa <OD_getSDOabCode+0x1a>
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b19      	cmp	r3, #25
 80018f8:	dd02      	ble.n	8001900 <OD_getSDOabCode+0x20>
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <OD_getSDOabCode+0x34>)
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	e004      	b.n	800190a <OD_getSDOabCode+0x2a>
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	4a03      	ldr	r2, [pc, #12]	; (8001914 <OD_getSDOabCode+0x34>)
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	0800cef0 	.word	0x0800cef0

08001918 <OD_get_value>:

ODR_t
OD_get_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b091      	sub	sp, #68	; 0x44
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	460b      	mov	r3, r1
 8001926:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <OD_get_value+0x1a>
        return ODR_DEV_INCOMPAT;
 800192e:	2309      	movs	r3, #9
 8001930:	e02b      	b.n	800198a <OD_get_value+0x72>
    }

    OD_IO_t io = {NULL};
 8001932:	f107 0318 	add.w	r3, r7, #24
 8001936:	2220      	movs	r2, #32
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f00a fd98 	bl	800c470 <memset>
    OD_stream_t* stream = &io.stream;
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t countRd = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 800194a:	f107 0218 	add.w	r2, r7, #24
 800194e:	7af9      	ldrb	r1, [r7, #11]
 8001950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7ff fece 	bl	80016f4 <OD_getSub>
 8001958:	4603      	mov	r3, r0
 800195a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) {
 800195e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <OD_get_value+0x54>
        return ret;
 8001966:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800196a:	e00e      	b.n	800198a <OD_get_value+0x72>
    }
    if (stream->dataLength != len) {
 800196c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d001      	beq.n	800197a <OD_get_value+0x62>
        return ODR_TYPE_MISMATCH;
 8001976:	230b      	movs	r3, #11
 8001978:	e007      	b.n	800198a <OD_get_value+0x72>
    }

    return io.read(stream, val, len, &countRd);
 800197a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001986:	47a0      	blx	r4
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3744      	adds	r7, #68	; 0x44
 800198e:	46bd      	mov	sp, r7
 8001990:	bd90      	pop	{r4, r7, pc}

08001992 <OD_set_value>:

ODR_t
OD_set_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001992:	b590      	push	{r4, r7, lr}
 8001994:	b091      	sub	sp, #68	; 0x44
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	460b      	mov	r3, r1
 80019a0:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <OD_set_value+0x1a>
        return ODR_DEV_INCOMPAT;
 80019a8:	2309      	movs	r3, #9
 80019aa:	e02b      	b.n	8001a04 <OD_set_value+0x72>
    }

    OD_IO_t io = {NULL};
 80019ac:	f107 0318 	add.w	r3, r7, #24
 80019b0:	2220      	movs	r2, #32
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00a fd5b 	bl	800c470 <memset>
    OD_stream_t* stream = &io.stream;
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t countWritten = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 80019c4:	f107 0218 	add.w	r2, r7, #24
 80019c8:	7af9      	ldrb	r1, [r7, #11]
 80019ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff fe91 	bl	80016f4 <OD_getSub>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) {
 80019d8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <OD_set_value+0x54>
        return ret;
 80019e0:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80019e4:	e00e      	b.n	8001a04 <OD_set_value+0x72>
    }
    if (stream->dataLength != len) {
 80019e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <OD_set_value+0x62>
        return ODR_TYPE_MISMATCH;
 80019f0:	230b      	movs	r3, #11
 80019f2:	e007      	b.n	8001a04 <OD_set_value+0x72>
    }

    return io.write(stream, val, len, &countWritten);
 80019f4:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a00:	47a0      	blx	r4
 8001a02:	4603      	mov	r3, r0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3744      	adds	r7, #68	; 0x44
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}

08001a0c <OD_getPtr>:

void*
OD_getPtr(const OD_entry_t* entry, uint8_t subIndex, OD_size_t len, ODR_t* err) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t* stream = &io.stream;
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001a22:	f107 0210 	add.w	r2, r7, #16
 8001a26:	7af9      	ldrb	r1, [r7, #11]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff fe62 	bl	80016f4 <OD_getSub>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 8001a36:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d116      	bne.n	8001a6c <OD_getPtr+0x60>
        if ((stream->dataOrig == NULL) || (stream->dataLength == 0U)) {
 8001a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <OD_getPtr+0x42>
 8001a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001a4e:	2309      	movs	r3, #9
 8001a50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a54:	e00a      	b.n	8001a6c <OD_getPtr+0x60>
        } else if ((len != 0U) && (len != stream->dataLength)) {
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <OD_getPtr+0x60>
 8001a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d002      	beq.n	8001a6c <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001a66:	230b      	movs	r3, #11
 8001a68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }

    if (err != NULL) {
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <OD_getPtr+0x6e>
        *err = errCopy;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001a78:	701a      	strb	r2, [r3, #0]
    }

    return (errCopy == ODR_OK) ? stream->dataOrig : NULL;
 8001a7a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <OD_getPtr+0x7c>
 8001a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	e000      	b.n	8001a8a <OD_getPtr+0x7e>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3738      	adds	r7, #56	; 0x38
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001a9e:	73fb      	strb	r3, [r7, #15]
    return value;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <CO_getUint16>:
CO_getUint16(const void* buf) {
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 8001aba:	81fb      	strh	r3, [r7, #14]
    return value;
 8001abc:	89fb      	ldrh	r3, [r7, #14]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001ad4:	60fb      	str	r3, [r7, #12]
    return value;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
 8001aec:	683a      	ldr	r2, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8001af2:	2304      	movs	r3, #4
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <OD_getIndex+0x14>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	e000      	b.n	8001b14 <OD_getIndex+0x16>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e003      	b.n	8001b3a <OD_extension_init+0x1c>
    entry->extension = extension;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	460b      	mov	r3, r1
 8001b52:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001b54:	7af9      	ldrb	r1, [r7, #11]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff feda 	bl	8001918 <OD_get_value>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af02      	add	r7, sp, #8
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001b7e:	7af9      	ldrb	r1, [r7, #11]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2302      	movs	r3, #2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f7ff fec5 	bl	8001918 <OD_get_value>
 8001b8e:	4603      	mov	r3, r0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001ba8:	7af9      	ldrb	r1, [r7, #11]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2304      	movs	r3, #4
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f7ff feb0 	bl	8001918 <OD_get_value>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <OD_write_dummy>:
 * Custom function for write dummy OD object. Will be used only from RPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_dummy(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    if (countWritten != NULL) {
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <OD_write_dummy+0x1a>
        *countWritten = count;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	601a      	str	r2, [r3, #0]
    }
    return ODR_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <OD_read_dummy>:
 * Custom function for read dummy OD object. Will be used only from TPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_dummy(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
    if ((buf == NULL) || (stream == NULL) || (countRead == NULL)) {
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <OD_read_dummy+0x20>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <OD_read_dummy+0x20>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8001c08:	2309      	movs	r3, #9
 8001c0a:	e010      	b.n	8001c2e <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d902      	bls.n	8001c1c <OD_read_dummy+0x34>
        count = stream->dataLength;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	607b      	str	r3, [r7, #4]
    }

    (void)memset(buf, 0, count);
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	2100      	movs	r1, #0
 8001c20:	68b8      	ldr	r0, [r7, #8]
 8001c22:	f00a fc25 	bl	800c470 <memset>

    *countRead = count;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <PDOconfigMap>:
 * @param OD Object Dictionary.
 *
 * @return ODR_OK on success, otherwise error reason.
 */
static ODR_t
PDOconfigMap(CO_PDO_common_t* PDO, uint32_t map, uint8_t mapIndex, bool_t isRPDO, OD_t* OD) {
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b092      	sub	sp, #72	; 0x48
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t)(map >> 16);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	0c1b      	lsrs	r3, r3, #16
 8001c4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t)(map >> 8);
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t)map;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 8001c5e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001c62:	08db      	lsrs	r3, r3, #3
 8001c64:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t* OD_IO = &PDO->OD_IO[mapIndex];
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	015b      	lsls	r3, r3, #5
 8001c6c:	3310      	adds	r3, #16
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4413      	add	r3, r2
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8001c74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d901      	bls.n	8001c80 <PDOconfigMap+0x48>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	e090      	b.n	8001da2 <PDOconfigMap+0x16a>
    }

    /* is there a reference to the dummy entry */
    if ((index < 0x20U) && (subIndex == 0U)) {
 8001c80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001c84:	2b1f      	cmp	r3, #31
 8001c86:	d81a      	bhi.n	8001cbe <PDOconfigMap+0x86>
 8001c88:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d116      	bne.n	8001cbe <PDOconfigMap+0x86>
        OD_stream_t* stream = &OD_IO->stream;
 8001c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c92:	63bb      	str	r3, [r7, #56]	; 0x38
        (void)memset(stream, 0, sizeof(OD_stream_t));
 8001c94:	2218      	movs	r2, #24
 8001c96:	2100      	movs	r1, #0
 8001c98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001c9a:	f00a fbe9 	bl	800c470 <memset>
        stream->dataLength = mappedLength;
 8001c9e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca4:	609a      	str	r2, [r3, #8]
        stream->dataOffset = mappedLength;
 8001ca6:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cac:	60da      	str	r2, [r3, #12]
        OD_IO->read = OD_read_dummy;
 8001cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb0:	4a3e      	ldr	r2, [pc, #248]	; (8001dac <PDOconfigMap+0x174>)
 8001cb2:	619a      	str	r2, [r3, #24]
        OD_IO->write = OD_write_dummy;
 8001cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb6:	4a3e      	ldr	r2, [pc, #248]	; (8001db0 <PDOconfigMap+0x178>)
 8001cb8:	61da      	str	r2, [r3, #28]
        return ODR_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e071      	b.n	8001da2 <PDOconfigMap+0x16a>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t* entry = OD_find(OD, index);
 8001cbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001cc6:	f7ff fcb9 	bl	800163c <OD_find>
 8001cca:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8001ccc:	f107 0210 	add.w	r2, r7, #16
 8001cd0:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001cd8:	f7ff fd0c 	bl	80016f4 <OD_getSub>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 8001ce2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <PDOconfigMap+0xb8>
        return odRet;
 8001cea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001cee:	e058      	b.n	8001da2 <PDOconfigMap+0x16a>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? (OD_attr_t)(ODA_RPDO) : (OD_attr_t)(ODA_TPDO);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <PDOconfigMap+0xc2>
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	e000      	b.n	8001cfc <PDOconfigMap+0xc4>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if (((OD_IOcopy.stream.attribute & testAttribute) == 0U) || ((mappedLengthBits & 0x07U) != 0U)
 8001d00:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001d08:	4013      	ands	r3, r2
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00a      	beq.n	8001d26 <PDOconfigMap+0xee>
 8001d10:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d104      	bne.n	8001d26 <PDOconfigMap+0xee>
        || (OD_IOcopy.stream.dataLength < mappedLength)) {
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d201      	bcs.n	8001d2a <PDOconfigMap+0xf2>
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8001d26:	2306      	movs	r3, #6
 8001d28:	e03b      	b.n	8001da2 <PDOconfigMap+0x16a>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8001d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d2c:	461d      	mov	r5, r3
 8001d2e:	f107 0410 	add.w	r4, r7, #16
 8001d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    OD_IO->stream.dataOffset = mappedLength;
 8001d3e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d44:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d129      	bne.n	8001da0 <PDOconfigMap+0x168>
        if ((subIndex < (OD_FLAGS_PDO_SIZE * 8U)) && (entry->extension != NULL)) {
 8001d4c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001d50:	2b1f      	cmp	r3, #31
 8001d52:	d81f      	bhi.n	8001d94 <PDOconfigMap+0x15c>
 8001d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d01b      	beq.n	8001d94 <PDOconfigMap+0x15c>
            PDO->flagPDObyte[mapIndex] = &entry->extension->flagsPDO[subIndex >> 3];
 8001d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5e:	6899      	ldr	r1, [r3, #8]
 8001d60:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001d64:	08db      	lsrs	r3, r3, #3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	3308      	adds	r3, #8
 8001d6c:	440b      	add	r3, r1
 8001d6e:	1d19      	adds	r1, r3, #4
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3244      	adds	r2, #68	; 0x44
 8001d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1U << (subIndex & 0x07U);
 8001d78:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	2201      	movs	r2, #1
 8001d82:	409a      	lsls	r2, r3
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	b2d1      	uxtb	r1, r2
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8001d92:	e005      	b.n	8001da0 <PDOconfigMap+0x168>
        } else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8001d94:	79fa      	ldrb	r2, [r7, #7]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3244      	adds	r2, #68	; 0x44
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3748      	adds	r7, #72	; 0x48
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bdb0      	pop	{r4, r5, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	08001be9 	.word	0x08001be9
 8001db0:	08001bc3 	.word	0x08001bc3

08001db4 <PDO_initMapping>:
 *
 * @return #CO_ReturnError_t CO_ERROR_NO on success.
 */
static CO_ReturnError_t
PDO_initMapping(CO_PDO_common_t* PDO, OD_t* OD, OD_entry_t* OD_PDOMapPar, bool_t isRPDO, uint32_t* errInfo,
                uint32_t* erroneousMap) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8001dca:	f107 021b 	add.w	r2, r7, #27
 8001dce:	2301      	movs	r3, #1
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff feb6 	bl	8001b44 <OD_get_u8>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8001dde:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00c      	beq.n	8001e00 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8001de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fe86 	bl	8001afe <OD_getIndex>
 8001df2:	4603      	mov	r3, r0
 8001df4:	021a      	lsls	r2, r3, #8
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001dfa:	f06f 030b 	mvn.w	r3, #11
 8001dfe:	e07f      	b.n	8001f00 <PDO_initMapping+0x14c>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001e06:	e05b      	b.n	8001ec0 <PDO_initMapping+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8001e08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e0c:	015b      	lsls	r3, r3, #5
 8001e0e:	3310      	adds	r3, #16
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1U, &map, true);
 8001e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b2d9      	uxtb	r1, r3
 8001e22:	f107 0214 	add.w	r2, r7, #20
 8001e26:	2301      	movs	r3, #1
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff feb5 	bl	8001b98 <OD_get_u32>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 8001e34:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001e38:	2b0e      	cmp	r3, #14
 8001e3a:	d03b      	beq.n	8001eb4 <PDO_initMapping+0x100>
            continue;
        }
        if (odRet != ODR_OK) {
 8001e3c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00f      	beq.n	8001e64 <PDO_initMapping+0xb0>
            if (errInfo != NULL) {
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <PDO_initMapping+0xaa>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8) | i;
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fe57 	bl	8001afe <OD_getIndex>
 8001e50:	4603      	mov	r3, r0
 8001e52:	021a      	lsls	r2, r3, #8
 8001e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5c:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8001e5e:	f06f 030b 	mvn.w	r3, #11
 8001e62:	e04d      	b.n	8001f00 <PDO_initMapping+0x14c>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 8001e64:	6979      	ldr	r1, [r7, #20]
 8001e66:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fee1 	bl	8001c38 <PDOconfigMap>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 8001e7c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00c      	beq.n	8001e9e <PDO_initMapping+0xea>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	22ff      	movs	r2, #255	; 0xff
 8001e8e:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0U) {
 8001e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <PDO_initMapping+0xea>
                *erroneousMap = map;
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9c:	601a      	str	r2, [r3, #0]
            }
        }

        if (i < mappedObjectsCount) {
 8001e9e:	7efb      	ldrb	r3, [r7, #27]
 8001ea0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d206      	bcs.n	8001eb6 <PDO_initMapping+0x102>
            pdoDataLength += OD_IO->stream.dataOffset;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eae:	4413      	add	r3, r2
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	e000      	b.n	8001eb6 <PDO_initMapping+0x102>
            continue;
 8001eb4:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8001eb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001ec0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ec4:	2b07      	cmp	r3, #7
 8001ec6:	d99f      	bls.n	8001e08 <PDO_initMapping+0x54>
        }
    }
    if ((pdoDataLength > CO_PDO_MAX_SIZE) || ((pdoDataLength == 0U) && (mappedObjectsCount > 0U))) {
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d805      	bhi.n	8001eda <PDO_initMapping+0x126>
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <PDO_initMapping+0x134>
 8001ed4:	7efb      	ldrb	r3, [r7, #27]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d006      	beq.n	8001ee8 <PDO_initMapping+0x134>
        if (*erroneousMap == 0U) {
 8001eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <PDO_initMapping+0x134>
            *erroneousMap = 1;
 8001ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
        }
    }

    if (*erroneousMap == 0U) {
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <PDO_initMapping+0x14a>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8001ef8:	7efa      	ldrb	r2, [r7, #27]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <OD_write_PDO_mapping>:
 * Custom function for writing OD object "PDO mapping parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_PDO_mapping(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	; 0x38
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES)) {
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d009      	beq.n	8001f30 <OD_write_PDO_mapping+0x28>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <OD_write_PDO_mapping+0x28>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <OD_write_PDO_mapping+0x28>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	7d1b      	ldrb	r3, [r3, #20]
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d901      	bls.n	8001f34 <OD_write_PDO_mapping+0x2c>
        return ODR_DEV_INCOMPAT;
 8001f30:	2309      	movs	r3, #9
 8001f32:	e07e      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t* PDO = stream->object;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if ((PDO->valid) || ((PDO->mappedObjectsCount != 0U) && (stream->subIndex > 0U))) {
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d107      	bne.n	8001f52 <OD_write_PDO_mapping+0x4a>
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	7b5b      	ldrb	r3, [r3, #13]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <OD_write_PDO_mapping+0x4e>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	7d1b      	ldrb	r3, [r3, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8001f52:	2302      	movs	r3, #2
 8001f54:	e06d      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
    }

    if (stream->subIndex == 0U) {
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	7d1b      	ldrb	r3, [r3, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d145      	bne.n	8001fea <OD_write_PDO_mapping+0xe2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8001f5e:	68b8      	ldr	r0, [r7, #8]
 8001f60:	f7ff fd97 	bl	8001a92 <CO_getUint8>
 8001f64:	4603      	mov	r3, r0
 8001f66:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8001f6c:	7fbb      	ldrb	r3, [r7, #30]
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d901      	bls.n	8001f76 <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 8001f72:	2307      	movs	r3, #7
 8001f74:	e05d      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001f7c:	e01b      	b.n	8001fb6 <OD_write_PDO_mapping+0xae>
            OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8001f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f82:	015b      	lsls	r3, r3, #5
 8001f84:	3310      	adds	r3, #16
 8001f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f88:	4413      	add	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t)OD_IO->stream.dataLength;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t)OD_IO->stream.dataOffset;
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d901      	bls.n	8001fa4 <OD_write_PDO_mapping+0x9c>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8001fa0:	2306      	movs	r3, #6
 8001fa2:	e046      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
            }
            pdoDataLength += mappedLength;
 8001fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8001fac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001fb6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001fba:	7fbb      	ldrb	r3, [r7, #30]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d3de      	bcc.n	8001f7e <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d901      	bls.n	8001fca <OD_write_PDO_mapping+0xc2>
            return ODR_MAP_LEN;
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	e033      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
        }
        if ((pdoDataLength == 0U) && (mappedObjectsCount > 0U)) {
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d104      	bne.n	8001fda <OD_write_PDO_mapping+0xd2>
 8001fd0:	7fbb      	ldrb	r3, [r7, #30]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <OD_write_PDO_mapping+0xd2>
            return ODR_INVALID_VALUE;
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	e02b      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8001fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	7fba      	ldrb	r2, [r7, #30]
 8001fe6:	735a      	strb	r2, [r3, #13]
 8001fe8:	e01c      	b.n	8002024 <OD_write_PDO_mapping+0x11c>
    } else {
        uint32_t val = CO_getUint32(buf);
 8001fea:	68b8      	ldr	r0, [r7, #8]
 8001fec:	f7ff fd6c 	bl	8001ac8 <CO_getUint32>
 8001ff0:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex - 1U, PDO->isRPDO, PDO->OD);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	7d1b      	ldrb	r3, [r3, #20]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	460b      	mov	r3, r1
 800200a:	6a39      	ldr	r1, [r7, #32]
 800200c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800200e:	f7ff fe13 	bl	8001c38 <PDOconfigMap>
 8002012:	4603      	mov	r3, r0
 8002014:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8002016:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <OD_write_PDO_mapping+0x11c>
            return odRet;
 800201e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002022:	e006      	b.n	8002032 <OD_write_PDO_mapping+0x12a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f7ff fa7f 	bl	800152e <OD_writeOriginal>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3730      	adds	r7, #48	; 0x30
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <OD_read_PDO_commParam>:
 * Custom function for reading OD object "PDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_PDO_commParam(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800203a:	b580      	push	{r7, lr}
 800203c:	b088      	sub	sp, #32
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7ff fa15 	bl	800147e <OD_readOriginal>
 8002054:	4603      	mov	r3, r0
 8002056:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if ((returnCode == ODR_OK) && (stream->subIndex == 1U) && (*countRead == 4U)) {
 8002058:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d134      	bne.n	80020ca <OD_read_PDO_commParam+0x90>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	7d1b      	ldrb	r3, [r3, #20]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d130      	bne.n	80020ca <OD_read_PDO_commParam+0x90>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d12c      	bne.n	80020ca <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t* PDO = stream->object;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002076:	68b8      	ldr	r0, [r7, #8]
 8002078:	f7ff fd26 	bl	8001ac8 <CO_getUint32>
 800207c:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	b29b      	uxth	r3, r3
 8002082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002086:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if ((CAN_ID != 0U) && (CAN_ID == (PDO->preDefinedCanId & 0xFF80U))) {
 8002088:	8a7b      	ldrh	r3, [r7, #18]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d011      	beq.n	80020b2 <OD_read_PDO_commParam+0x78>
 800208e:	8a7a      	ldrh	r2, [r7, #18]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8002096:	4619      	mov	r1, r3
 8002098:	f64f 7380 	movw	r3, #65408	; 0xff80
 800209c:	400b      	ands	r3, r1
 800209e:	429a      	cmp	r2, r3
 80020a0:	d107      	bne.n	80020b2 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000U) | PDO->preDefinedCanId;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	041b      	lsls	r3, r3, #16
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) {
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <OD_read_PDO_commParam+0x88>
            COB_ID |= 0x80000000U;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020c0:	61fb      	str	r3, [r7, #28]
        }

        (void)CO_setUint32(buf, COB_ID);
 80020c2:	69f9      	ldr	r1, [r7, #28]
 80020c4:	68b8      	ldr	r0, [r7, #8]
 80020c6:	f7ff fd0c 	bl	8001ae2 <CO_setUint32>
    }

    return returnCode;
 80020ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <CO_PDO_receive>:
 * will be received. For more information and description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void
CO_PDO_receive(void* object, void* msg) {
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b088      	sub	sp, #32
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
    CO_RPDO_t* RPDO = object;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	791b      	ldrb	r3, [r3, #4]
 80020ec:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	3305      	adds	r3, #5
 80020f2:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 80020fa:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d03e      	beq.n	8002182 <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	7b1b      	ldrb	r3, [r3, #12]
 8002108:	7cfa      	ldrb	r2, [r7, #19]
 800210a:	429a      	cmp	r2, r3
 800210c:	d334      	bcc.n	8002178 <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	7b1b      	ldrb	r3, [r3, #12]
 8002112:	7cfa      	ldrb	r2, [r7, #19]
 8002114:	429a      	cmp	r2, r3
 8002116:	d105      	bne.n	8002124 <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) {
 8002118:	7ffb      	ldrb	r3, [r7, #31]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d107      	bne.n	800212e <CO_PDO_receive+0x58>
                    err = CO_RPDO_RX_OK;
 800211e:	230b      	movs	r3, #11
 8002120:	77fb      	strb	r3, [r7, #31]
 8002122:	e004      	b.n	800212e <CO_PDO_receive+0x58>
                }
            } else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 8002124:	7ffb      	ldrb	r3, [r7, #31]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <CO_PDO_receive+0x58>
                    err = CO_RPDO_RX_LONG;
 800212a:	230d      	movs	r3, #13
 800212c:	77fb      	strb	r3, [r7, #31]
                }
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	77bb      	strb	r3, [r7, #30]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if (RPDO->synchronous && (RPDO->SYNC != NULL) && RPDO->SYNC->CANrxToggle) {
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00c      	beq.n	8002156 <CO_PDO_receive+0x80>
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <CO_PDO_receive+0x80>
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <CO_PDO_receive+0x80>
                bufNo = 1;
 8002152:	2301      	movs	r3, #1
 8002154:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            (void)memcpy(RPDO->CANrxData[bufNo], data, CO_PDO_MAX_SIZE);
 8002156:	7fbb      	ldrb	r3, [r7, #30]
 8002158:	332e      	adds	r3, #46	; 0x2e
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4413      	add	r3, r2
 8002160:	2208      	movs	r2, #8
 8002162:	68f9      	ldr	r1, [r7, #12]
 8002164:	4618      	mov	r0, r3
 8002166:	f00a fa0d 	bl	800c584 <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 800216a:	7fba      	ldrb	r2, [r7, #30]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	325a      	adds	r2, #90	; 0x5a
 8002170:	2101      	movs	r1, #1
 8002172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002176:	e004      	b.n	8002182 <CO_PDO_receive+0xac>
            /* Optional signal to RTOS, which can resume task, which handles the RPDO. */
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        } else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 8002178:	7ffb      	ldrb	r3, [r7, #31]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 800217e:	230c      	movs	r3, #12
 8002180:	77fb      	strb	r3, [r7, #31]
        } else { /* MISRA C 2004 14.10 */
        }
    }

    RPDO->receiveError = err;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	7ffa      	ldrb	r2, [r7, #31]
 8002186:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
}
 800218a:	bf00      	nop
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <OD_write_14xx>:
 * Custom function for writing OD object "RPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_14xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b092      	sub	sp, #72	; 0x48
 8002198:	af04      	add	r7, sp, #16
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <OD_write_14xx+0x26>
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <OD_write_14xx+0x26>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <OD_write_14xx+0x26>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d901      	bls.n	80021be <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 80021ba:	2309      	movs	r3, #9
 80021bc:	e102      	b.n	80023c4 <OD_write_14xx+0x230>
    }

    CO_RPDO_t* RPDO = stream->object;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 80021c8:	f107 0310 	add.w	r3, r7, #16
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f00a f9d7 	bl	800c584 <memcpy>

    switch (stream->subIndex) {
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	7d1b      	ldrb	r3, [r3, #20]
 80021da:	2b05      	cmp	r3, #5
 80021dc:	f000 80d5 	beq.w	800238a <OD_write_14xx+0x1f6>
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	f300 80e4 	bgt.w	80023ae <OD_write_14xx+0x21a>
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d003      	beq.n	80021f2 <OD_write_14xx+0x5e>
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	f000 80a6 	beq.w	800233c <OD_write_14xx+0x1a8>
            break;
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 80021f0:	e0dd      	b.n	80023ae <OD_write_14xx+0x21a>
            uint32_t COB_ID = CO_getUint32(buf);
 80021f2:	68b8      	ldr	r0, [r7, #8]
 80021f4:	f7ff fc68 	bl	8001ac8 <CO_getUint32>
 80021f8:	61f8      	str	r0, [r7, #28]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002202:	86fb      	strh	r3, [r7, #54]	; 0x36
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	43db      	mvns	r3, r3
 8002208:	0fdb      	lsrs	r3, r3, #31
 800220a:	b2db      	uxtb	r3, r3
 800220c:	61bb      	str	r3, [r7, #24]
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && PDO->valid && (CAN_ID != PDO->configuredCanId))
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	4b6e      	ldr	r3, [pc, #440]	; (80023cc <OD_write_14xx+0x238>)
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d13d      	bne.n	8002294 <OD_write_14xx+0x100>
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <OD_write_14xx+0x9e>
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <OD_write_14xx+0x9e>
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800222c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800222e:	429a      	cmp	r2, r3
 8002230:	d130      	bne.n	8002294 <OD_write_14xx+0x100>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d026      	beq.n	8002286 <OD_write_14xx+0xf2>
 8002238:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800223a:	2b7f      	cmp	r3, #127	; 0x7f
 800223c:	d92a      	bls.n	8002294 <OD_write_14xx+0x100>
 800223e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002244:	d903      	bls.n	800224e <OD_write_14xx+0xba>
 8002246:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002248:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800224c:	d922      	bls.n	8002294 <OD_write_14xx+0x100>
 800224e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002250:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002254:	d903      	bls.n	800225e <OD_write_14xx+0xca>
 8002256:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002258:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800225c:	d31a      	bcc.n	8002294 <OD_write_14xx+0x100>
 800225e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002260:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002264:	d903      	bls.n	800226e <OD_write_14xx+0xda>
 8002266:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002268:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800226c:	d312      	bcc.n	8002294 <OD_write_14xx+0x100>
 800226e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002270:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002274:	d303      	bcc.n	800227e <OD_write_14xx+0xea>
 8002276:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002278:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800227c:	d30a      	bcc.n	8002294 <OD_write_14xx+0x100>
 800227e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002280:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002284:	d806      	bhi.n	8002294 <OD_write_14xx+0x100>
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <OD_write_14xx+0x104>
 800228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228e:	7b5b      	ldrb	r3, [r3, #13]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <OD_write_14xx+0x104>
                return ODR_INVALID_VALUE;
 8002294:	230f      	movs	r3, #15
 8002296:	e095      	b.n	80023c4 <OD_write_14xx+0x230>
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d106      	bne.n	80022b0 <OD_write_14xx+0x11c>
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 80022a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80022aa:	429a      	cmp	r2, r3
 80022ac:	f000 8081 	beq.w	80023b2 <OD_write_14xx+0x21e>
                if (CAN_ID == PDO->preDefinedCanId) {
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 80022b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d108      	bne.n	80022ce <OD_write_14xx+0x13a>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fc0a 	bl	8001ae2 <CO_setUint32>
                if (!valid) {
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <OD_write_14xx+0x144>
                    CAN_ID = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	86fb      	strh	r3, [r7, #54]	; 0x36
                CO_ReturnError_t ret = CO_CANrxBufferInit(PDO->CANdev, PDO->CANdevIdx, CAN_ID, 0x7FF, false,
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	6858      	ldr	r0, [r3, #4]
 80022dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022de:	f8b3 1140 	ldrh.w	r1, [r3, #320]	; 0x140
 80022e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80022e4:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <OD_write_14xx+0x23c>)
 80022e6:	9302      	str	r3, [sp, #8]
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	2300      	movs	r3, #0
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80022f4:	f004 fe06 	bl	8006f04 <CO_CANrxBufferInit>
 80022f8:	4603      	mov	r3, r0
 80022fa:	75fb      	strb	r3, [r7, #23]
                if (valid && (ret == CO_ERROR_NO)) {
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <OD_write_14xx+0x186>
 8002302:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d107      	bne.n	800231a <OD_write_14xx+0x186>
                    PDO->valid = true;
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	2201      	movs	r2, #1
 800230e:	609a      	str	r2, [r3, #8]
                    PDO->configuredCanId = CAN_ID;
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002312:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002314:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
            break;
 8002318:	e04b      	b.n	80023b2 <OD_write_14xx+0x21e>
                    PDO->valid = false;
 800231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
                    CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002322:	2200      	movs	r2, #0
 8002324:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                    CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232a:	2200      	movs	r2, #0
 800232c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
                    if (ret != CO_ERROR_NO) {
 8002330:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d03c      	beq.n	80023b2 <OD_write_14xx+0x21e>
                        return ODR_DEV_INCOMPAT;
 8002338:	2309      	movs	r3, #9
 800233a:	e043      	b.n	80023c4 <OD_write_14xx+0x230>
        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 800233c:	68b8      	ldr	r0, [r7, #8]
 800233e:	f7ff fba8 	bl	8001a92 <CO_getUint8>
 8002342:	4603      	mov	r3, r0
 8002344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 8002348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800234c:	2bf0      	cmp	r3, #240	; 0xf0
 800234e:	d905      	bls.n	800235c <OD_write_14xx+0x1c8>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 8002350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002354:	2bfd      	cmp	r3, #253	; 0xfd
 8002356:	d801      	bhi.n	800235c <OD_write_14xx+0x1c8>
                return ODR_INVALID_VALUE;
 8002358:	230f      	movs	r3, #15
 800235a:	e033      	b.n	80023c4 <OD_write_14xx+0x230>
            bool_t synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 800235c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002360:	2bf0      	cmp	r3, #240	; 0xf0
 8002362:	bf94      	ite	ls
 8002364:	2301      	movls	r3, #1
 8002366:	2300      	movhi	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	623b      	str	r3, [r7, #32]
            if (RPDO->synchronous != synchronous) {
 800236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236e:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8002372:	6a3a      	ldr	r2, [r7, #32]
 8002374:	429a      	cmp	r2, r3
 8002376:	d003      	beq.n	8002380 <OD_write_14xx+0x1ec>
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237a:	2200      	movs	r2, #0
 800237c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
            RPDO->synchronous = synchronous;
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	6a3a      	ldr	r2, [r7, #32]
 8002384:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            break;
 8002388:	e014      	b.n	80023b4 <OD_write_14xx+0x220>
            uint32_t eventTime = CO_getUint16(buf);
 800238a:	68b8      	ldr	r0, [r7, #8]
 800238c:	f7ff fb8e 	bl	8001aac <CO_getUint16>
 8002390:	4603      	mov	r3, r0
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
            RPDO->timeoutTime_us = eventTime * 1000U;
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800239a:	fb03 f202 	mul.w	r2, r3, r2
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
            RPDO->timeoutTimer = 0;
 80023a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a6:	2200      	movs	r2, #0
 80023a8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
            break;
 80023ac:	e002      	b.n	80023b4 <OD_write_14xx+0x220>
            break;
 80023ae:	bf00      	nop
 80023b0:	e000      	b.n	80023b4 <OD_write_14xx+0x220>
            break;
 80023b2:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80023b4:	f107 0110 	add.w	r1, r7, #16
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f7ff f8b6 	bl	800152e <OD_writeOriginal>
 80023c2:	4603      	mov	r3, r0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3738      	adds	r7, #56	; 0x38
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	3ffff800 	.word	0x3ffff800
 80023d0:	080020d7 	.word	0x080020d7

080023d4 <CO_RPDO_init>:
CO_RPDO_init(CO_RPDO_t* RPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_14xx_RPDOCommPar, OD_entry_t* OD_16xx_RPDOMapPar,
             CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint32_t* errInfo) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b090      	sub	sp, #64	; 0x40
 80023d8:	af04      	add	r7, sp, #16
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if ((RPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_14xx_RPDOCommPar == NULL) || (OD_16xx_RPDOMapPar == NULL)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00e      	beq.n	800240a <CO_RPDO_init+0x36>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <CO_RPDO_init+0x36>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <CO_RPDO_init+0x36>
 80023f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <CO_RPDO_init+0x36>
 80023fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <CO_RPDO_init+0x36>
        || (CANdevRx == NULL)) {
 8002404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <CO_RPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295
 800240e:	e115      	b.n	800263c <CO_RPDO_init+0x268>
    }

    /* clear object */
    (void)memset(RPDO, 0, sizeof(CO_RPDO_t));
 8002410:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8002414:	2100      	movs	r1, #0
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f00a f82a 	bl	800c470 <memset>

    /* Configure object variables */
    PDO->em = em;
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002426:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO, OD, OD_16xx_RPDOMapPar, true, errInfo, &erroneousMap);
 800242c:	f107 031c 	add.w	r3, r7, #28
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	2301      	movs	r3, #1
 8002438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800243e:	f7ff fcb9 	bl	8001db4 <PDO_initMapping>
 8002442:	4603      	mov	r3, r0
 8002444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret != CO_ERROR_NO) {
 8002448:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <CO_RPDO_init+0x82>
        return ret;
 8002450:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002454:	e0f2      	b.n	800263c <CO_RPDO_init+0x268>
    }

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 800245a:	f107 0218 	add.w	r2, r7, #24
 800245e:	2301      	movs	r3, #1
 8002460:	2101      	movs	r1, #1
 8002462:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002464:	f7ff fb98 	bl	8001b98 <OD_get_u32>
 8002468:	4603      	mov	r3, r0
 800246a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800246e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00e      	beq.n	8002494 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 8002476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1U;
 800247c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800247e:	f7ff fb3e 	bl	8001afe <OD_getIndex>
 8002482:	4603      	mov	r3, r0
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800248e:	f06f 030b 	mvn.w	r3, #11
 8002492:	e0d3      	b.n	800263c <CO_RPDO_init+0x268>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	43db      	mvns	r3, r3
 8002498:	0fdb      	lsrs	r3, r3, #31
 800249a:	b2db      	uxtb	r3, r3
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024a6:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00d      	beq.n	80024ca <CO_RPDO_init+0xf6>
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	7b5b      	ldrb	r3, [r3, #13]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <CO_RPDO_init+0xe8>
 80024b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <CO_RPDO_init+0xf6>
        valid = false;
 80024bc:	2300      	movs	r3, #0
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0U) {
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <CO_RPDO_init+0xf6>
            erroneousMap = 1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00e      	beq.n	80024ee <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d001      	beq.n	80024de <CO_RPDO_init+0x10a>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	e000      	b.n	80024e0 <CO_RPDO_init+0x10c>
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80024e6:	221a      	movs	r2, #26
 80024e8:	2101      	movs	r1, #1
 80024ea:	f7fe f99a 	bl	8000822 <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 80024f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <CO_RPDO_init+0x13c>
 80024fe:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002500:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002502:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002506:	400b      	ands	r3, r1
 8002508:	429a      	cmp	r2, r3
 800250a:	d101      	bne.n	8002510 <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 800250c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800250e:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CAN_ID, 0x7FF, false, (void*)RPDO, CO_PDO_receive);
 8002510:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002512:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8002516:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <CO_RPDO_init+0x270>)
 8002518:	9302      	str	r3, [sp, #8]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	2300      	movs	r3, #0
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002526:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002528:	f004 fcec 	bl	8006f04 <CO_CANrxBufferInit>
 800252c:	4603      	mov	r3, r0
 800252e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret != CO_ERROR_NO) {
 8002532:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <CO_RPDO_init+0x16c>
        return ret;
 800253a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800253e:	e07d      	b.n	800263c <CO_RPDO_init+0x268>
    }

    PDO->valid = valid;
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002544:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - transmission type */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8002546:	23fe      	movs	r3, #254	; 0xfe
 8002548:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 800254a:	f107 0217 	add.w	r2, r7, #23
 800254e:	2301      	movs	r3, #1
 8002550:	2102      	movs	r1, #2
 8002552:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002554:	f7ff faf6 	bl	8001b44 <OD_get_u8>
 8002558:	4603      	mov	r3, r0
 800255a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800255e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00e      	beq.n	8002584 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 8002566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2U;
 800256c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800256e:	f7ff fac6 	bl	8001afe <OD_getIndex>
 8002572:	4603      	mov	r3, r0
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	f043 0202 	orr.w	r2, r3, #2
 800257a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800257e:	f06f 030b 	mvn.w	r3, #11
 8002582:	e05b      	b.n	800263c <CO_RPDO_init+0x268>
    }

    RPDO->SYNC = SYNC;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    RPDO->synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	2bf0      	cmp	r3, #240	; 0xf0
 8002590:	bf94      	ite	ls
 8002592:	2301      	movls	r3, #1
 8002594:	2300      	movhi	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif

    /* Configure communication parameter - event-timer (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
    uint16_t eventTime = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	82bb      	strh	r3, [r7, #20]
    (void)OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 80025a4:	f107 0214 	add.w	r2, r7, #20
 80025a8:	2301      	movs	r3, #1
 80025aa:	2105      	movs	r1, #5
 80025ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025ae:	f7ff fade 	bl	8001b6e <OD_get_u16>
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000U;
 80025b2:	8abb      	ldrh	r3, [r7, #20]
 80025b4:	461a      	mov	r2, r3
 80025b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ba:	fb03 f202 	mul.w	r2, r3, r2
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = true;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	2201      	movs	r2, #1
 80025c8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD = OD;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->CANdevIdx = CANdevRxIdx;
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80025da:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80025e2:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    PDO->configuredCanId = CAN_ID;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80025ea:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    PDO->OD_communicationParam_ext.object = RPDO;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	4a13      	ldr	r2, [pc, #76]	; (8002648 <CO_RPDO_init+0x274>)
 80025fa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	4a12      	ldr	r2, [pc, #72]	; (800264c <CO_RPDO_init+0x278>)
 8002602:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    PDO->OD_mappingParam_extension.object = RPDO;
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	4a0f      	ldr	r2, [pc, #60]	; (8002650 <CO_RPDO_init+0x27c>)
 8002612:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <CO_RPDO_init+0x280>)
 800261a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    (void)OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002624:	4619      	mov	r1, r3
 8002626:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002628:	f7ff fa79 	bl	8001b1e <OD_extension_init>
    (void)OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002632:	4619      	mov	r1, r3
 8002634:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002636:	f7ff fa72 	bl	8001b1e <OD_extension_init>
#endif

    return CO_ERROR_NO;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3730      	adds	r7, #48	; 0x30
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	080020d7 	.word	0x080020d7
 8002648:	0800203b 	.word	0x0800203b
 800264c:	08002195 	.word	0x08002195
 8002650:	0800147f 	.word	0x0800147f
 8002654:	08001f09 	.word	0x08001f09

08002658 <CO_RPDO_process>:
void
CO_RPDO_process(CO_RPDO_t* RPDO,
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b097      	sub	sp, #92	; 0x5c
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
    (void)syncWas;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
    (void)timerNext_us;
#endif

    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	633b      	str	r3, [r7, #48]	; 0x30

    if (PDO->valid && NMTisOperational
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8124 	beq.w	80028bc <CO_RPDO_process+0x264>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8120 	beq.w	80028bc <CO_RPDO_process+0x264>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (syncWas || !RPDO->synchronous)
 800267c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <CO_RPDO_process+0x36>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8002688:	2b00      	cmp	r3, #0
 800268a:	f040 8117 	bne.w	80028bc <CO_RPDO_process+0x264>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8002694:	2b0a      	cmp	r3, #10
 8002696:	d927      	bls.n	80026e8 <CO_RPDO_process+0x90>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800269e:	2b0b      	cmp	r3, #11
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint16_t code = (RPDO->receiveError == CO_RPDO_RX_SHORT) ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 80026b0:	2b0c      	cmp	r3, #12
 80026b2:	d102      	bne.n	80026ba <CO_RPDO_process+0x62>
 80026b4:	f248 2310 	movw	r3, #33296	; 0x8210
 80026b8:	e001      	b.n	80026be <CO_RPDO_process+0x66>
 80026ba:	f248 2320 	movw	r3, #33312	; 0x8220
 80026be:	857b      	strh	r3, [r7, #42]	; 0x2a
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH, code, PDO->dataLength);
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	7b1b      	ldrb	r3, [r3, #12]
 80026c8:	461a      	mov	r2, r3
 80026ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026cc:	9200      	str	r2, [sp, #0]
 80026ce:	2204      	movs	r2, #4
 80026d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026d2:	f7fe f8a6 	bl	8000822 <CO_error>
            RPDO->receiveError = setError ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <CO_RPDO_process+0x88>
 80026dc:	2201      	movs	r2, #1
 80026de:	e000      	b.n	80026e2 <CO_RPDO_process+0x8a>
 80026e0:	2200      	movs	r2, #0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (RPDO->synchronous && (RPDO->SYNC != NULL) && !RPDO->SYNC->CANrxToggle) {
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <CO_RPDO_process+0xbc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <CO_RPDO_process+0xbc>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d102      	bne.n	8002714 <CO_RPDO_process+0xbc>
            bufNo = 1;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8002714:	2300      	movs	r3, #0
 8002716:	64bb      	str	r3, [r7, #72]	; 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002718:	e07d      	b.n	8002816 <CO_RPDO_process+0x1be>
            rpdoReceived = true;
 800271a:	2301      	movs	r3, #1
 800271c:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t* dataRPDO = RPDO->CANrxData[bufNo];
 800271e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002722:	332e      	adds	r3, #46	; 0x2e
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	647b      	str	r3, [r7, #68]	; 0x44
            OD_size_t verifyLength = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	643b      	str	r3, [r7, #64]	; 0x40

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8002730:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	325a      	adds	r2, #90	; 0x5a
 8002738:	2100      	movs	r1, #0
 800273a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800273e:	2300      	movs	r3, #0
 8002740:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002744:	e04a      	b.n	80027dc <CO_RPDO_process+0x184>
                OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002746:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800274a:	015b      	lsls	r3, r3, #5
 800274c:	3310      	adds	r3, #16
 800274e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002750:	4413      	add	r3, r2
 8002752:	627b      	str	r3, [r7, #36]	; 0x24

                /* get mappedLength from temporary storage */
                OD_size_t* dataOffset = &OD_IO->stream.dataOffset;
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	330c      	adds	r3, #12
 8002758:	623b      	str	r3, [r7, #32]
                uint8_t mappedLength = (uint8_t)(*dataOffset);
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	77fb      	strb	r3, [r7, #31]

                /* additional safety check. */
                verifyLength += (OD_size_t)mappedLength;
 8002760:	7ffb      	ldrb	r3, [r7, #31]
 8002762:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002764:	4413      	add	r3, r2
 8002766:	643b      	str	r3, [r7, #64]	; 0x40
                if (verifyLength > CO_PDO_MAX_SIZE) {
 8002768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800276a:	2b08      	cmp	r3, #8
 800276c:	d83d      	bhi.n	80027ea <CO_RPDO_process+0x192>
                    break;
                }

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	63bb      	str	r3, [r7, #56]	; 0x38
                if (ODdataLength > CO_PDO_MAX_SIZE) {
 8002774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002776:	2b08      	cmp	r3, #8
 8002778:	d901      	bls.n	800277e <CO_RPDO_process+0x126>
                    ODdataLength = CO_PDO_MAX_SIZE;
 800277a:	2308      	movs	r3, #8
 800277c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t* dataOD;
                if (ODdataLength > mappedLength) {
 800277e:	7ffb      	ldrb	r3, [r7, #31]
 8002780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002782:	429a      	cmp	r2, r3
 8002784:	d911      	bls.n	80027aa <CO_RPDO_process+0x152>
                    (void)memset(buf, 0, sizeof(buf));
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	2208      	movs	r2, #8
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f009 fe6e 	bl	800c470 <memset>
                    (void)memcpy(buf, dataRPDO, mappedLength);
 8002794:	7ffa      	ldrb	r2, [r7, #31]
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800279c:	4618      	mov	r0, r3
 800279e:	f009 fef1 	bl	800c584 <memcpy>
                    dataOD = buf;
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
 80027a8:	e001      	b.n	80027ae <CO_RPDO_process+0x156>
                } else {
                    dataOD = dataRPDO;
 80027aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
                }
#endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD, ODdataLength, &countWritten);
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	69dc      	ldr	r4, [r3, #28]
 80027b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027ba:	f107 0310 	add.w	r3, r7, #16
 80027be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027c2:	47a0      	blx	r4
                *dataOffset = mappedLength;
 80027c4:	7ffa      	ldrb	r2, [r7, #31]
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 80027ca:	7ffb      	ldrb	r3, [r7, #31]
 80027cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027ce:	4413      	add	r3, r2
 80027d0:	647b      	str	r3, [r7, #68]	; 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80027d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027d6:	3301      	adds	r3, #1
 80027d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	7b5b      	ldrb	r3, [r3, #13]
 80027e0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d3ae      	bcc.n	8002746 <CO_RPDO_process+0xee>
 80027e8:	e000      	b.n	80027ec <CO_RPDO_process+0x194>
                    break;
 80027ea:	bf00      	nop
            for (uint8_t i = 0; i < PDO->dataLength; i++) {
                *PDO->mapPointer[i] = dataRPDO[i];
            }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

            if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 80027ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d805      	bhi.n	80027fe <CO_RPDO_process+0x1a6>
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	7b1b      	ldrb	r3, [r3, #12]
 80027f6:	461a      	mov	r2, r3
 80027f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00b      	beq.n	8002816 <CO_RPDO_process+0x1be>
                /* bug in software, should not happen */
                CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL,
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 800280e:	222c      	movs	r2, #44	; 0x2c
 8002810:	2101      	movs	r1, #1
 8002812:	f7fe f806 	bl	8000822 <CO_error>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002816:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	325a      	adds	r2, #90	; 0x5a
 800281e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f47f af79 	bne.w	800271a <CO_RPDO_process+0xc2>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void)rpdoReceived;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        if (RPDO->timeoutTime_us > 0U) {
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d058      	beq.n	80028e4 <CO_RPDO_process+0x28c>
            if (rpdoReceived) {
 8002832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002834:	2b00      	cmp	r3, #0
 8002836:	d017      	beq.n	8002868 <CO_RPDO_process+0x210>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8002844:	429a      	cmp	r2, r3
 8002846:	d90a      	bls.n	800285e <CO_RPDO_process+0x206>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT, RPDO->timeoutTimer);
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	2300      	movs	r3, #0
 8002856:	2217      	movs	r2, #23
 8002858:	2100      	movs	r1, #0
 800285a:	f7fd ffe2 	bl	8000822 <CO_error>
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    ) {
 8002866:	e03d      	b.n	80028e4 <CO_RPDO_process+0x28c>
            } else if ((RPDO->timeoutTimer > 0U) && (RPDO->timeoutTimer < RPDO->timeoutTime_us)) {
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800286e:	2b00      	cmp	r3, #0
 8002870:	d038      	beq.n	80028e4 <CO_RPDO_process+0x28c>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800287e:	429a      	cmp	r2, r3
 8002880:	d230      	bcs.n	80028e4 <CO_RPDO_process+0x28c>
                RPDO->timeoutTimer += timeDifference_us;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	441a      	add	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800289e:	429a      	cmp	r2, r3
 80028a0:	d920      	bls.n	80028e4 <CO_RPDO_process+0x28c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT, CO_EMC_RPDO_TIMEOUT, RPDO->timeoutTimer);
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f248 2350 	movw	r3, #33360	; 0x8250
 80028b2:	2217      	movs	r2, #23
 80028b4:	2101      	movs	r1, #1
 80028b6:	f7fd ffb4 	bl	8000822 <CO_error>
    ) {
 80028ba:	e013      	b.n	80028e4 <CO_RPDO_process+0x28c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    }  /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (!PDO->valid || !NMTisOperational) {
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <CO_RPDO_process+0x272>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <CO_RPDO_process+0x28e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
            RPDO->timeoutTimer = 0;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        RPDO->timeoutTimer = 0;
#endif
#endif
    }
}
 80028e2:	e000      	b.n	80028e6 <CO_RPDO_process+0x28e>
    ) {
 80028e4:	bf00      	nop
}
 80028e6:	bf00      	nop
 80028e8:	3754      	adds	r7, #84	; 0x54
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd90      	pop	{r4, r7, pc}
	...

080028f0 <OD_write_18xx>:
 * Custom function for writing OD object "TPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_18xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b093      	sub	sp, #76	; 0x4c
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <OD_write_18xx+0x26>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <OD_write_18xx+0x26>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <OD_write_18xx+0x26>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b04      	cmp	r3, #4
 8002914:	d901      	bls.n	800291a <OD_write_18xx+0x2a>
		{
		 return ODR_DEV_INCOMPAT;
 8002916:	2309      	movs	r3, #9
 8002918:	e136      	b.n	8002b88 <OD_write_18xx+0x298>
		}

    CO_TPDO_t* TPDO = stream->object;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8002920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002922:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	4618      	mov	r0, r3
 800292e:	f009 fe29 	bl	800c584 <memcpy>

    switch (stream->subIndex) {
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	7d1b      	ldrb	r3, [r3, #20]
 8002936:	3b01      	subs	r3, #1
 8002938:	2b05      	cmp	r3, #5
 800293a:	f200 811a 	bhi.w	8002b72 <OD_write_18xx+0x282>
 800293e:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <OD_write_18xx+0x54>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	0800295d 	.word	0x0800295d
 8002948:	08002a93 	.word	0x08002a93
 800294c:	08002af5 	.word	0x08002af5
 8002950:	08002b73 	.word	0x08002b73
 8002954:	08002b23 	.word	0x08002b23
 8002958:	08002b47 	.word	0x08002b47
        case 1: { /* COB-ID used by PDO */
            uint32_t COB_ID = CO_getUint32(buf);
 800295c:	68b8      	ldr	r0, [r7, #8]
 800295e:	f7ff f8b3 	bl	8001ac8 <CO_getUint32>
 8002962:	6238      	str	r0, [r7, #32]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	b29b      	uxth	r3, r3
 8002968:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800296c:	87fb      	strh	r3, [r7, #62]	; 0x3e
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	43db      	mvns	r3, r3
 8002972:	0fdb      	lsrs	r3, r3, #31
 8002974:	b2db      	uxtb	r3, r3
 8002976:	61fb      	str	r3, [r7, #28]

            /* bits 11...29 must be zero, PDO must be disabled on change, CAN_ID == 0 is
             * not allowed, mapping must be configured before enabling the PDO */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (PDO->valid && (CAN_ID != PDO->configuredCanId)))
 8002978:	6a3a      	ldr	r2, [r7, #32]
 800297a:	4b85      	ldr	r3, [pc, #532]	; (8002b90 <OD_write_18xx+0x2a0>)
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d13d      	bne.n	80029fe <OD_write_18xx+0x10e>
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d009      	beq.n	800299c <OD_write_18xx+0xac>
 8002988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <OD_write_18xx+0xac>
 8002990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002992:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8002996:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002998:	429a      	cmp	r2, r3
 800299a:	d130      	bne.n	80029fe <OD_write_18xx+0x10e>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d026      	beq.n	80029f0 <OD_write_18xx+0x100>
 80029a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029a4:	2b7f      	cmp	r3, #127	; 0x7f
 80029a6:	d92a      	bls.n	80029fe <OD_write_18xx+0x10e>
 80029a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ae:	d903      	bls.n	80029b8 <OD_write_18xx+0xc8>
 80029b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029b2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80029b6:	d922      	bls.n	80029fe <OD_write_18xx+0x10e>
 80029b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029ba:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80029be:	d903      	bls.n	80029c8 <OD_write_18xx+0xd8>
 80029c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80029c6:	d31a      	bcc.n	80029fe <OD_write_18xx+0x10e>
 80029c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80029ce:	d903      	bls.n	80029d8 <OD_write_18xx+0xe8>
 80029d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029d2:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80029d6:	d312      	bcc.n	80029fe <OD_write_18xx+0x10e>
 80029d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029da:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80029de:	d303      	bcc.n	80029e8 <OD_write_18xx+0xf8>
 80029e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029e6:	d30a      	bcc.n	80029fe <OD_write_18xx+0x10e>
 80029e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029ee:	d806      	bhi.n	80029fe <OD_write_18xx+0x10e>
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <OD_write_18xx+0x112>
 80029f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f8:	7b5b      	ldrb	r3, [r3, #13]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <OD_write_18xx+0x112>
                return ODR_INVALID_VALUE;
 80029fe:	230f      	movs	r3, #15
 8002a00:	e0c2      	b.n	8002b88 <OD_write_18xx+0x298>
            }

            /* parameter changed? */
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId))
 8002a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d106      	bne.n	8002a1a <OD_write_18xx+0x12a>
 8002a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8002a12:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002a14:	429a      	cmp	r2, r3
 8002a16:	f000 80ae 	beq.w	8002b76 <OD_write_18xx+0x286>
            {
                /* if default CAN-ID is written, store to OD without Node-ID */
                if (CAN_ID == PDO->preDefinedCanId)
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1c:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8002a20:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d108      	bne.n	8002a38 <OD_write_18xx+0x148>
					{
					 (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f855 	bl	8001ae2 <CO_setUint32>
					}

                if (!valid) {CAN_ID = 0; }
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <OD_write_18xx+0x152>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	87fb      	strh	r3, [r7, #62]	; 0x3e



                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8002a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a44:	6858      	ldr	r0, [r3, #4]
 8002a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a48:	f8b3 1140 	ldrh.w	r1, [r3, #320]	; 0x140
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4e:	7b1b      	ldrb	r3, [r3, #12]
                    PDO->CANdev, PDO->CANdevIdx, CAN_ID, false, PDO->dataLength,
                    TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8002a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a52:	f892 216c 	ldrb.w	r2, [r2, #364]	; 0x16c
                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8002a56:	2af0      	cmp	r2, #240	; 0xf0
 8002a58:	bf94      	ite	ls
 8002a5a:	2201      	movls	r2, #1
 8002a5c:	2200      	movhi	r2, #0
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	4614      	mov	r4, r2
 8002a62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002a64:	9401      	str	r4, [sp, #4]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f004 faa7 	bl	8006fbc <CO_CANtxBufferInit>
 8002a6e:	61b8      	str	r0, [r7, #24]

                if (CANtxBuff == NULL) {return ODR_DEV_INCOMPAT;}
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <OD_write_18xx+0x18a>
 8002a76:	2309      	movs	r3, #9
 8002a78:	e086      	b.n	8002b88 <OD_write_18xx+0x298>




                TPDO->CANtxBuff = CANtxBuff;
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                PDO->valid = valid;
 8002a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 8002a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002a8c:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
            }
            break;
 8002a90:	e071      	b.n	8002b76 <OD_write_18xx+0x286>
        }

        case 2:
        		{ /* transmission type */
        		uint8_t transmissionType = CO_getUint8(buf);
 8002a92:	68b8      	ldr	r0, [r7, #8]
 8002a94:	f7fe fffd 	bl	8001a92 <CO_getUint8>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
				if (
 8002a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aa2:	2bf0      	cmp	r3, #240	; 0xf0
 8002aa4:	d905      	bls.n	8002ab2 <OD_write_18xx+0x1c2>
						(transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
					 && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
 8002aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aaa:	2bfd      	cmp	r3, #253	; 0xfd
 8002aac:	d801      	bhi.n	8002ab2 <OD_write_18xx+0x1c2>
					) {return ODR_INVALID_VALUE;}
 8002aae:	230f      	movs	r3, #15
 8002ab0:	e06a      	b.n	8002b88 <OD_write_18xx+0x298>


				TPDO->CANtxBuff->syncFlag = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 8002ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ab6:	2bf0      	cmp	r3, #240	; 0xf0
 8002ab8:	bf94      	ite	ls
 8002aba:	2301      	movls	r3, #1
 8002abc:	2300      	movhi	r3, #0
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac2:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002ac6:	615a      	str	r2, [r3, #20]
				TPDO->syncCounter = 255;
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aca:	22ff      	movs	r2, #255	; 0xff
 8002acc:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#else
            if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
                	{return ODR_INVALID_VALUE; }

#endif
				TPDO->transmissionType = transmissionType;
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002ad6:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
				TPDO->sendRequest = true;
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	2201      	movs	r2, #1
 8002ade:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
				TPDO->inhibitTimer = 0;
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
				TPDO->eventTimer = 0;
 8002aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif
				break;
 8002af2:	e041      	b.n	8002b78 <OD_write_18xx+0x288>
        }

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        case 3: { /* inhibit time */
            if (PDO->valid) {
 8002af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <OD_write_18xx+0x210>
                return ODR_INVALID_VALUE;
 8002afc:	230f      	movs	r3, #15
 8002afe:	e043      	b.n	8002b88 <OD_write_18xx+0x298>
            }
            uint32_t inhibitTime = CO_getUint16(buf);
 8002b00:	68b8      	ldr	r0, [r7, #8]
 8002b02:	f7fe ffd3 	bl	8001aac <CO_getUint16>
 8002b06:	4603      	mov	r3, r0
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
            TPDO->inhibitTime_us = inhibitTime * 100U;
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	2264      	movs	r2, #100	; 0x64
 8002b0e:	fb03 f202 	mul.w	r2, r3, r2
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            TPDO->inhibitTimer = 0;
 8002b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
            break;
 8002b20:	e02a      	b.n	8002b78 <OD_write_18xx+0x288>
        }

        case 5: { /* event-timer */
            uint32_t eventTime = CO_getUint16(buf);
 8002b22:	68b8      	ldr	r0, [r7, #8]
 8002b24:	f7fe ffc2 	bl	8001aac <CO_getUint16>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
            TPDO->eventTime_us = eventTime * 1000U;
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b32:	fb03 f202 	mul.w	r2, r3, r2
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            TPDO->eventTimer = 0;
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            break;
 8002b44:	e018      	b.n	8002b78 <OD_write_18xx+0x288>
        }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        case 6: { /* SYNC start value */
            uint8_t syncStartValue = CO_getUint8(buf);
 8002b46:	68b8      	ldr	r0, [r7, #8]
 8002b48:	f7fe ffa3 	bl	8001a92 <CO_getUint8>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

            if (PDO->valid || (syncStartValue > 240U)) {
 8002b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d103      	bne.n	8002b62 <OD_write_18xx+0x272>
 8002b5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b5e:	2bf0      	cmp	r3, #240	; 0xf0
 8002b60:	d901      	bls.n	8002b66 <OD_write_18xx+0x276>
                return ODR_INVALID_VALUE;
 8002b62:	230f      	movs	r3, #15
 8002b64:	e010      	b.n	8002b88 <OD_write_18xx+0x298>
            }
            TPDO->syncStartValue = syncStartValue;
 8002b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b68:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002b6c:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
            break;
 8002b70:	e002      	b.n	8002b78 <OD_write_18xx+0x288>
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <OD_write_18xx+0x288>
            break;
 8002b76:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002b78:	f107 0114 	add.w	r1, r7, #20
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7fe fcd4 	bl	800152e <OD_writeOriginal>
 8002b86:	4603      	mov	r3, r0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3744      	adds	r7, #68	; 0x44
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd90      	pop	{r4, r7, pc}
 8002b90:	3ffff800 	.word	0x3ffff800

08002b94 <CO_TPDO_init>:
CO_TPDO_init(CO_TPDO_t* TPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_18xx_TPDOCommPar, OD_entry_t* OD_1Axx_TPDOMapPar,
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint32_t* errInfo) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08e      	sub	sp, #56	; 0x38
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if ((TPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_18xx_TPDOCommPar == NULL) || (OD_1Axx_TPDOMapPar == NULL)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00e      	beq.n	8002bca <CO_TPDO_init+0x36>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <CO_TPDO_init+0x36>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <CO_TPDO_init+0x36>
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <CO_TPDO_init+0x36>
 8002bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <CO_TPDO_init+0x36>
        || (CANdevTx == NULL)) {
 8002bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <CO_TPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295
 8002bce:	e144      	b.n	8002e5a <CO_TPDO_init+0x2c6>
    }

    /* clear object */
    (void)memset(TPDO, 0, sizeof(CO_TPDO_t));
 8002bd0:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f009 fc4a 	bl	800c470 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002be6:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO, OD, OD_1Axx_TPDOMapPar, false, errInfo, &erroneousMap);
 8002bec:	f107 031c 	add.w	r3, r7, #28
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bfe:	f7ff f8d9 	bl	8001db4 <PDO_initMapping>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret != CO_ERROR_NO) {
 8002c08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <CO_TPDO_init+0x82>
        return ret;
 8002c10:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002c14:	e121      	b.n	8002e5a <CO_TPDO_init+0x2c6>
    }

    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8002c16:	23fe      	movs	r3, #254	; 0xfe
 8002c18:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8002c1a:	f107 021b 	add.w	r2, r7, #27
 8002c1e:	2301      	movs	r3, #1
 8002c20:	2102      	movs	r1, #2
 8002c22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c24:	f7fe ff8e 	bl	8001b44 <OD_get_u8>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002c2e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00e      	beq.n	8002c54 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 8002c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2U;
 8002c3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c3e:	f7fe ff5e 	bl	8001afe <OD_getIndex>
 8002c42:	4603      	mov	r3, r0
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	f043 0202 	orr.w	r2, r3, #2
 8002c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002c4e:	f06f 030b 	mvn.w	r3, #11
 8002c52:	e102      	b.n	8002e5a <CO_TPDO_init+0x2c6>
    }
    if ((transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
 8002c54:	7efb      	ldrb	r3, [r7, #27]
 8002c56:	2bfd      	cmp	r3, #253	; 0xfd
 8002c58:	d804      	bhi.n	8002c64 <CO_TPDO_init+0xd0>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 8002c5a:	7efb      	ldrb	r3, [r7, #27]
 8002c5c:	2bf0      	cmp	r3, #240	; 0xf0
 8002c5e:	d901      	bls.n	8002c64 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8002c60:	23fe      	movs	r3, #254	; 0xfe
 8002c62:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 8002c64:	7efa      	ldrb	r2, [r7, #27]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
    TPDO->sendRequest = true;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8002c78:	f107 0214 	add.w	r2, r7, #20
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	2101      	movs	r1, #1
 8002c80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c82:	f7fe ff89 	bl	8001b98 <OD_get_u32>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002c8c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00e      	beq.n	8002cb2 <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 8002c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1U;
 8002c9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c9c:	f7fe ff2f 	bl	8001afe <OD_getIndex>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	f043 0201 	orr.w	r2, r3, #1
 8002ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002caa:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002cac:	f06f 030b 	mvn.w	r3, #11
 8002cb0:	e0d3      	b.n	8002e5a <CO_TPDO_init+0x2c6>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	0fdb      	lsrs	r3, r3, #31
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cc4:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <CO_TPDO_init+0x154>
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	7b5b      	ldrb	r3, [r3, #13]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <CO_TPDO_init+0x146>
 8002cd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <CO_TPDO_init+0x154>
        valid = false;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0U) {
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <CO_TPDO_init+0x154>
            erroneousMap = 1;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00e      	beq.n	8002d0c <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d001      	beq.n	8002cfc <CO_TPDO_init+0x168>
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	e000      	b.n	8002cfe <CO_TPDO_init+0x16a>
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8002d04:	221a      	movs	r2, #26
 8002d06:	2101      	movs	r1, #1
 8002d08:	f7fd fd8b 	bl	8000822 <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <CO_TPDO_init+0x182>
        CAN_ID = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 8002d16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <CO_TPDO_init+0x19a>
 8002d1c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002d1e:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002d20:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002d24:	400b      	ands	r3, r1
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d101      	bne.n	8002d2e <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 8002d2a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002d2c:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	7b1b      	ldrb	r3, [r3, #12]
                                         TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	f892 216c 	ldrb.w	r2, [r2, #364]	; 0x16c
    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 8002d38:	2af0      	cmp	r2, #240	; 0xf0
 8002d3a:	bf94      	ite	ls
 8002d3c:	2201      	movls	r2, #1
 8002d3e:	2200      	movhi	r2, #0
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	4610      	mov	r0, r2
 8002d44:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002d46:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8002d4a:	9001      	str	r0, [sp, #4]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002d52:	f004 f933 	bl	8006fbc <CO_CANtxBufferInit>
 8002d56:	4602      	mov	r2, r0
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    if (TPDO->CANtxBuff == NULL) {
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6c:	e075      	b.n	8002e5a <CO_TPDO_init+0x2c6>
    }

    PDO->valid = valid;
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d72:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    uint16_t inhibitTime = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	823b      	strh	r3, [r7, #16]
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8002d7c:	f107 0212 	add.w	r2, r7, #18
 8002d80:	2301      	movs	r3, #1
 8002d82:	2103      	movs	r1, #3
 8002d84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d86:	f7fe fef2 	bl	8001b6e <OD_get_u16>
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8002d8a:	f107 0210 	add.w	r2, r7, #16
 8002d8e:	2301      	movs	r3, #1
 8002d90:	2105      	movs	r1, #5
 8002d92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d94:	f7fe feeb 	bl	8001b6e <OD_get_u16>
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100U;
 8002d98:	8a7b      	ldrh	r3, [r7, #18]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2364      	movs	r3, #100	; 0x64
 8002d9e:	fb03 f202 	mul.w	r2, r3, r2
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000U;
 8002da8:	8a3b      	ldrh	r3, [r7, #16]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002db0:	fb03 f202 	mul.w	r2, r3, r2
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
#endif

    /* Configure communication parameter - SYNC start value (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    TPDO->syncStartValue = 0;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
    (void)OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8002dc8:	2301      	movs	r3, #1
 8002dca:	2106      	movs	r1, #6
 8002dcc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002dce:	f7fe feb9 	bl	8001b44 <OD_get_u8>
    TPDO->SYNC = SYNC;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    TPDO->syncCounter = 255;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	22ff      	movs	r2, #255	; 0xff
 8002dde:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = false;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD = OD;
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->CANdevIdx = CANdevTxIdx;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002df8:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002e00:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    PDO->configuredCanId = CAN_ID;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002e08:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    PDO->OD_communicationParam_ext.object = TPDO;
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <CO_TPDO_init+0x2d0>)
 8002e18:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <CO_TPDO_init+0x2d4>)
 8002e20:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    PDO->OD_mappingParam_extension.object = TPDO;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	4a0f      	ldr	r2, [pc, #60]	; (8002e6c <CO_TPDO_init+0x2d8>)
 8002e30:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	4a0e      	ldr	r2, [pc, #56]	; (8002e70 <CO_TPDO_init+0x2dc>)
 8002e38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    (void)OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002e42:	4619      	mov	r1, r3
 8002e44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e46:	f7fe fe6a 	bl	8001b1e <OD_extension_init>
    (void)OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002e50:	4619      	mov	r1, r3
 8002e52:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002e54:	f7fe fe63 	bl	8001b1e <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3730      	adds	r7, #48	; 0x30
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	0800203b 	.word	0x0800203b
 8002e68:	080028f1 	.word	0x080028f1
 8002e6c:	0800147f 	.word	0x0800147f
 8002e70:	08001f09 	.word	0x08001f09

08002e74 <CO_TPDOsend>:
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t
CO_TPDOsend(CO_TPDO_t* TPDO) {
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b093      	sub	sp, #76	; 0x4c
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t* dataTPDO = &TPDO->CANtxBuff->data[0];
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002e86:	3305      	adds	r3, #5
 8002e88:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t verifyLength = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	63bb      	str	r3, [r7, #56]	; 0x38

#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
                          || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO));
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d004      	beq.n	8002ea2 <CO_TPDOsend+0x2e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8002e9e:	2bfd      	cmp	r3, #253	; 0xfd
 8002ea0:	d901      	bls.n	8002ea6 <CO_TPDOsend+0x32>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <CO_TPDOsend+0x34>
 8002ea6:	2300      	movs	r3, #0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002eb0:	e066      	b.n	8002f80 <CO_TPDOsend+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002eb6:	015b      	lsls	r3, r3, #5
 8002eb8:	3310      	adds	r3, #16
 8002eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ebc:	4413      	add	r3, r2
 8002ebe:	623b      	str	r3, [r7, #32]
        OD_stream_t* stream = &OD_IO->stream;
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	61fb      	str	r3, [r7, #28]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t)stream->dataOffset;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	76fb      	strb	r3, [r7, #27]

        /* additional safety check */
        verifyLength += (OD_size_t)mappedLength;
 8002eca:	7efb      	ldrb	r3, [r7, #27]
 8002ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ece:	4413      	add	r3, r2
 8002ed0:	63bb      	str	r3, [r7, #56]	; 0x38
        if (verifyLength > CO_PDO_MAX_SIZE) {
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d85a      	bhi.n	8002f8e <CO_TPDOsend+0x11a>
            break;
        }

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30
        if (ODdataLength > CO_PDO_MAX_SIZE) {
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d901      	bls.n	8002ee8 <CO_TPDOsend+0x74>
            ODdataLength = CO_PDO_MAX_SIZE;
 8002ee4:	2308      	movs	r3, #8
 8002ee6:	633b      	str	r3, [r7, #48]	; 0x30
        }
        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t* dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8002ee8:	7efb      	ldrb	r3, [r7, #27]
 8002eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d90a      	bls.n	8002f06 <CO_TPDOsend+0x92>
            (void)memset(buf, 0, sizeof(buf));
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f009 fab9 	bl	800c470 <memset>
            dataTPDOCopy = buf;
 8002efe:	f107 030c 	add.w	r3, r7, #12
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f04:	e001      	b.n	8002f0a <CO_TPDOsend+0x96>
        } else {
            dataTPDOCopy = dataTPDO;
 8002f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read() and store mappedLength back to stream.dataOffset */
        stream->dataOffset = 0;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	699c      	ldr	r4, [r3, #24]
 8002f14:	f107 0308 	add.w	r3, r7, #8
 8002f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f1c:	69f8      	ldr	r0, [r7, #28]
 8002f1e:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8002f20:	7efa      	ldrb	r2, [r7, #27]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	60da      	str	r2, [r3, #12]
            }
        }
#endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 8002f26:	7efb      	ldrb	r3, [r7, #27]
 8002f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d906      	bls.n	8002f3c <CO_TPDOsend+0xc8>
            (void)memcpy(dataTPDO, buf, mappedLength);
 8002f2e:	7efa      	ldrb	r2, [r7, #27]
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	4619      	mov	r1, r3
 8002f36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f38:	f009 fb24 	bl	800c584 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
#if OD_FLAGS_PDO_SIZE > 0
        uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8002f3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	3244      	adds	r2, #68	; 0x44
 8002f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f48:	617b      	str	r3, [r7, #20]
        if ((flagPDObyte != NULL) && eventDriven) {
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00e      	beq.n	8002f6e <CO_TPDOsend+0xfa>
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <CO_TPDOsend+0xfa>
            *flagPDObyte |= PDO->flagPDObitmask[i];
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	781a      	ldrb	r2, [r3, #0]
 8002f5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f60:	440b      	add	r3, r1
 8002f62:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002f66:	4313      	orrs	r3, r2
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	701a      	strb	r2, [r3, #0]
        }
#endif

        dataTPDO += mappedLength;
 8002f6e:	7efb      	ldrb	r3, [r7, #27]
 8002f70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f72:	4413      	add	r3, r2
 8002f74:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002f76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	7b5b      	ldrb	r3, [r3, #13]
 8002f84:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d392      	bcc.n	8002eb2 <CO_TPDOsend+0x3e>
 8002f8c:	e000      	b.n	8002f90 <CO_TPDOsend+0x11c>
            break;
 8002f8e:	bf00      	nop
        }
#endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 8002f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d805      	bhi.n	8002fa2 <CO_TPDOsend+0x12e>
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	7b1b      	ldrb	r3, [r3, #12]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00e      	beq.n	8002fc0 <CO_TPDOsend+0x14c>
        /* bug in software, should not happen */
        CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL, (0x200000 | verifyLength));
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8002fb2:	222c      	movs	r2, #44	; 0x2c
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	f7fd fc34 	bl	8000822 <CO_error>
        return CO_ERROR_DATA_CORRUPT;
 8002fba:	f06f 030c 	mvn.w	r3, #12
 8002fbe:	e019      	b.n	8002ff4 <CO_TPDOsend+0x180>
    }

    TPDO->sendRequest = false;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    TPDO->eventTimer = TPDO->eventTime_us;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002fea:	4619      	mov	r1, r3
 8002fec:	4610      	mov	r0, r2
 8002fee:	f004 f85f 	bl	80070b0 <CO_CANsend>
 8002ff2:	4603      	mov	r3, r0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3744      	adds	r7, #68	; 0x44
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd90      	pop	{r4, r7, pc}

08002ffc <CO_TPDO_process>:
void
CO_TPDO_process(CO_TPDO_t* TPDO,
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || defined CO_DOXYGEN
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	61bb      	str	r3, [r7, #24]
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)) != 0
    (void)timerNext_us;
#endif
    (void)syncWas;

    if (PDO->valid && NMTisOperational) {
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80dc 	beq.w	80031d0 <CO_TPDO_process+0x1d4>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80d8 	beq.w	80031d0 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || (OD_FLAGS_PDO_SIZE > 0)
        if ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d004      	beq.n	8003034 <CO_TPDO_process+0x38>
            || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8003030:	2bfd      	cmp	r3, #253	; 0xfd
 8003032:	d946      	bls.n	80030c2 <CO_TPDO_process+0xc6>
            /* event timer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            if (TPDO->eventTime_us != 0U) {
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800303a:	2b00      	cmp	r3, #0
 800303c:	d018      	beq.n	8003070 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	d205      	bcs.n	8003056 <CO_TPDO_process+0x5a>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	e000      	b.n	8003058 <CO_TPDO_process+0x5c>
 8003056:	2300      	movs	r3, #0
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                if (TPDO->eventTimer == 0U) {
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif
            }
#endif
            /* check for any OD_requestTPDO() */
#if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003076:	2b00      	cmp	r3, #0
 8003078:	d123      	bne.n	80030c2 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800307a:	2300      	movs	r3, #0
 800307c:	77fb      	strb	r3, [r7, #31]
 800307e:	e01b      	b.n	80030b8 <CO_TPDO_process+0xbc>
                    uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8003080:	7ffa      	ldrb	r2, [r7, #31]
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	3244      	adds	r2, #68	; 0x44
 8003086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308a:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00f      	beq.n	80030b2 <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0U) {
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	7ffb      	ldrb	r3, [r7, #31]
 8003098:	69b9      	ldr	r1, [r7, #24]
 800309a:	440b      	add	r3, r1
 800309c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80030a0:	4013      	ands	r3, r2
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d104      	bne.n	80030b2 <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
                            break;
 80030b0:	e007      	b.n	80030c2 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80030b2:	7ffb      	ldrb	r3, [r7, #31]
 80030b4:	3301      	adds	r3, #1
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	7b5b      	ldrb	r3, [r3, #13]
 80030bc:	7ffa      	ldrb	r2, [r7, #31]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d3de      	bcc.n	8003080 <CO_TPDO_process+0x84>
#endif
        }
#endif /* ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0) */

        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 80030c8:	2bfd      	cmp	r3, #253	; 0xfd
 80030ca:	d91d      	bls.n	8003108 <CO_TPDO_process+0x10c>
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
                                                                          : 0U;
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d205      	bcs.n	80030e4 <CO_TPDO_process+0xe8>
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
                                                                          : 0U;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	e000      	b.n	80030e6 <CO_TPDO_process+0xea>
 80030e4:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184

            /* send TPDO */
            if (TPDO->sendRequest && (TPDO->inhibitTimer == 0U)) {
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d07d      	beq.n	80031f2 <CO_TPDO_process+0x1f6>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d178      	bne.n	80031f2 <CO_TPDO_process+0x1f6>
                (void)CO_TPDOsend(TPDO);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f7ff feb7 	bl	8002e74 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003106:	e074      	b.n	80031f2 <CO_TPDO_process+0x1f6>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        else if ((TPDO->SYNC != NULL) && syncWas) {
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800310e:	2b00      	cmp	r3, #0
 8003110:	d06f      	beq.n	80031f2 <CO_TPDO_process+0x1f6>
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	2b00      	cmp	r3, #0
 8003116:	d06c      	beq.n	80031f2 <CO_TPDO_process+0x1f6>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d108      	bne.n	8003134 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) {
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003128:	2b00      	cmp	r3, #0
 800312a:	d062      	beq.n	80031f2 <CO_TPDO_process+0x1f6>
                    (void)CO_TPDOsend(TPDO);
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7ff fea1 	bl	8002e74 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003132:	e05e      	b.n	80031f2 <CO_TPDO_process+0x1f6>
                }
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255U) {
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800313a:	2bff      	cmp	r3, #255	; 0xff
 800313c:	d119      	bne.n	8003172 <CO_TPDO_process+0x176>
                    if ((TPDO->SYNC->counterOverflowValue != 0U) && (TPDO->syncStartValue != 0U)) {
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003144:	7c5b      	ldrb	r3, [r3, #17]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <CO_TPDO_process+0x162>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8003150:	2b00      	cmp	r3, #0
 8003152:	d004      	beq.n	800315e <CO_TPDO_process+0x162>
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	22fe      	movs	r2, #254	; 0xfe
 8003158:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 800315c:	e009      	b.n	8003172 <CO_TPDO_process+0x176>
                    } else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = (TPDO->transmissionType / 2U) + 1U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	b2db      	uxtb	r3, r3
 8003168:	3301      	adds	r3, #1
 800316a:	b2da      	uxtb	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC with matched syncStartValue. */
                if (TPDO->syncCounter == 254U) {
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8003178:	2bfe      	cmp	r3, #254	; 0xfe
 800317a:	d112      	bne.n	80031a2 <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003182:	7c9a      	ldrb	r2, [r3, #18]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800318a:	429a      	cmp	r2, r3
 800318c:	d131      	bne.n	80031f2 <CO_TPDO_process+0x1f6>
                        TPDO->syncCounter = TPDO->transmissionType;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                        (void)CO_TPDOsend(TPDO);
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f7ff fe6a 	bl	8002e74 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80031a0:	e027      	b.n	80031f2 <CO_TPDO_process+0x1f6>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0U) {
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11a      	bne.n	80031f2 <CO_TPDO_process+0x1f6>
                    TPDO->syncCounter = TPDO->transmissionType;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                    (void)CO_TPDOsend(TPDO);
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7ff fe53 	bl	8002e74 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80031ce:	e010      	b.n	80031f2 <CO_TPDO_process+0x1f6>
        }
#endif

    } else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        TPDO->inhibitTimer = 0;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        TPDO->eventTimer = 0;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        TPDO->syncCounter = 255;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	22ff      	movs	r2, #255	; 0xff
 80031ec:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#endif
    }
}
 80031f0:	e000      	b.n	80031f4 <CO_TPDO_process+0x1f8>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80031f2:	bf00      	nop
}
 80031f4:	bf00      	nop
 80031f6:	3720      	adds	r7, #32
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <CO_getUint8>:
CO_getUint8(const void* buf) {
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003208:	73fb      	strb	r3, [r7, #15]
    return value;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8003216:	b480      	push	{r7}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003222:	60fb      	str	r3, [r7, #12]
    return value;
 8003224:	68fb      	ldr	r3, [r7, #12]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <OD_getIndex+0x14>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	e000      	b.n	8003246 <OD_getIndex+0x16>
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8003260:	2305      	movs	r3, #5
 8003262:	e003      	b.n	800326c <OD_extension_init+0x1c>
    entry->extension = extension;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af02      	add	r7, sp, #8
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	460b      	mov	r3, r1
 8003284:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003286:	7af9      	ldrb	r1, [r7, #11]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	2301      	movs	r3, #1
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7fe fb41 	bl	8001918 <OD_get_value>
 8003296:	4603      	mov	r3, r0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	460b      	mov	r3, r1
 80032ae:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80032b0:	7af9      	ldrb	r1, [r7, #11]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2304      	movs	r3, #4
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f7fe fb2c 	bl	8001918 <OD_get_value>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <OD_set_u32>:
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t
OD_set_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t val, bool_t odOrig) {
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af02      	add	r7, sp, #8
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	460b      	mov	r3, r1
 80032d8:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 80032da:	1d3a      	adds	r2, r7, #4
 80032dc:	7af9      	ldrb	r1, [r7, #11]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	2304      	movs	r3, #4
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7fe fb54 	bl	8001992 <OD_set_value>
 80032ea:	4603      	mov	r3, r0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDO_receive(void* object, void* msg) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t* SDO = (CO_SDOserver_t*)object;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	791b      	ldrb	r3, [r3, #4]
 8003306:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	3305      	adds	r3, #5
 800330c:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8U) {
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d115      	bne.n	8003340 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80U) {
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b80      	cmp	r3, #128	; 0x80
 800331a:	d103      	bne.n	8003324 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2200      	movs	r2, #0
 8003320:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8003322:	e00d      	b.n	8003340 <CO_SDO_receive+0x4c>
        } else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d109      	bne.n	8003340 <CO_SDO_receive+0x4c>
            (void)memcpy(SDO->CANrxData, data, DLC);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	3340      	adds	r3, #64	; 0x40
 8003330:	7cfa      	ldrb	r2, [r7, #19]
 8003332:	68f9      	ldr	r1, [r7, #12]
 8003334:	4618      	mov	r0, r3
 8003336:	f009 f925 	bl	800c584 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2201      	movs	r2, #1
 800333e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <CO_SDOserver_init_canRxTx>:

/* helper for configuring CANrx and CANtx */
static CO_ReturnError_t
CO_SDOserver_init_canRxTx(CO_SDOserver_t* SDO, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANdevTxIdx,
                          uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af04      	add	r7, sp, #16
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	4611      	mov	r1, r2
 8003354:	461a      	mov	r2, r3
 8003356:	460b      	mov	r3, r1
 8003358:	80fb      	strh	r3, [r7, #6]
 800335a:	4613      	mov	r3, r2
 800335c:	80bb      	strh	r3, [r7, #4]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    /* proceed only, if parameters change */
    if ((COB_IDClientToServer == SDO->COB_IDClientToServer) && (COB_IDServerToClient == SDO->COB_IDServerToClient)) {
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003362:	6a3a      	ldr	r2, [r7, #32]
 8003364:	429a      	cmp	r2, r3
 8003366:	d106      	bne.n	8003376 <CO_SDOserver_init_canRxTx+0x2e>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336e:	429a      	cmp	r2, r3
 8003370:	d101      	bne.n	8003376 <CO_SDOserver_init_canRxTx+0x2e>
        return CO_ERROR_NO;
 8003372:	2300      	movs	r3, #0
 8003374:	e04e      	b.n	8003414 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a3a      	ldr	r2, [r7, #32]
 800337a:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)COB_IDClientToServer : 0U;
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	2b00      	cmp	r3, #0
 8003386:	db02      	blt.n	800338e <CO_SDOserver_init_canRxTx+0x46>
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	b29b      	uxth	r3, r3
 800338c:	e000      	b.n	8003390 <CO_SDOserver_init_canRxTx+0x48>
 800338e:	2300      	movs	r3, #0
 8003390:	82fb      	strh	r3, [r7, #22]
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)COB_IDServerToClient : 0U;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	db02      	blt.n	800339e <CO_SDOserver_init_canRxTx+0x56>
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	b29b      	uxth	r3, r3
 800339c:	e000      	b.n	80033a0 <CO_SDOserver_init_canRxTx+0x58>
 800339e:	2300      	movs	r3, #0
 80033a0:	82bb      	strh	r3, [r7, #20]
    if ((idC2S != 0U) && (idS2C != 0U)) {
 80033a2:	8afb      	ldrh	r3, [r7, #22]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d006      	beq.n	80033b6 <CO_SDOserver_init_canRxTx+0x6e>
 80033a8:	8abb      	ldrh	r3, [r7, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	611a      	str	r2, [r3, #16]
 80033b4:	e006      	b.n	80033c4 <CO_SDOserver_init_canRxTx+0x7c>
    } else {
        idC2S = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, idC2S, 0x7FF, false, (void*)SDO, CO_SDO_receive);
 80033c4:	8afa      	ldrh	r2, [r7, #22]
 80033c6:	88f9      	ldrh	r1, [r7, #6]
 80033c8:	4b14      	ldr	r3, [pc, #80]	; (800341c <CO_SDOserver_init_canRxTx+0xd4>)
 80033ca:	9302      	str	r3, [sp, #8]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	2300      	movs	r3, #0
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80033d8:	68b8      	ldr	r0, [r7, #8]
 80033da:	f003 fd93 	bl	8006f04 <CO_CANrxBufferInit>
 80033de:	4603      	mov	r3, r0
 80033e0:	74fb      	strb	r3, [r7, #19]

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(SDO->CANdevTx, CANdevTxIdx, idS2C, false, 8, false);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	8aba      	ldrh	r2, [r7, #20]
 80033e8:	88b9      	ldrh	r1, [r7, #4]
 80033ea:	2300      	movs	r3, #0
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	2308      	movs	r3, #8
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2300      	movs	r3, #0
 80033f4:	f003 fde2 	bl	8006fbc <CO_CANtxBufferInit>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	605a      	str	r2, [r3, #4]

    if (SDO->CANtxBuff == NULL) {
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d104      	bne.n	8003410 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003406:	23ff      	movs	r3, #255	; 0xff
 8003408:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8003410:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	080032f5 	.word	0x080032f5

08003420 <OD_write_1201_additional>:
 * Custom function for writing OD object _SDO server parameter_, additional channels
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1201_additional(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b08f      	sub	sp, #60	; 0x3c
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <OD_write_1201_additional+0x20>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <OD_write_1201_additional+0x20>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8003440:	2309      	movs	r3, #9
 8003442:	e0f9      	b.n	8003638 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t* SDO = (CO_SDOserver_t*)stream->object;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	7d1b      	ldrb	r3, [r3, #20]
 800344e:	2b03      	cmp	r3, #3
 8003450:	f200 80e8 	bhi.w	8003624 <OD_write_1201_additional+0x204>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <OD_write_1201_additional+0x3c>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	0800346d 	.word	0x0800346d
 8003460:	08003471 	.word	0x08003471
 8003464:	08003535 	.word	0x08003535
 8003468:	080035fb 	.word	0x080035fb
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 800346c:	2304      	movs	r3, #4
 800346e:	e0e3      	b.n	8003638 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8003470:	68b8      	ldr	r0, [r7, #8]
 8003472:	f7ff fed0 	bl	8003216 <CO_getUint32>
 8003476:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003480:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FFU);
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003486:	b29b      	uxth	r3, r3
 8003488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800348c:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	43db      	mvns	r3, r3
 8003492:	0fdb      	lsrs	r3, r3, #31
 8003494:	b2db      	uxtb	r3, r3
 8003496:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || ((valid && SDO->valid) && (CAN_ID != CAN_ID_cur))
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4b69      	ldr	r3, [pc, #420]	; (8003640 <OD_write_1201_additional+0x220>)
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d134      	bne.n	800350c <OD_write_1201_additional+0xec>
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <OD_write_1201_additional+0x98>
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <OD_write_1201_additional+0x98>
 80034b0:	8afa      	ldrh	r2, [r7, #22]
 80034b2:	8abb      	ldrh	r3, [r7, #20]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d129      	bne.n	800350c <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d028      	beq.n	8003510 <OD_write_1201_additional+0xf0>
 80034be:	8afb      	ldrh	r3, [r7, #22]
 80034c0:	2b7f      	cmp	r3, #127	; 0x7f
 80034c2:	d923      	bls.n	800350c <OD_write_1201_additional+0xec>
 80034c4:	8afb      	ldrh	r3, [r7, #22]
 80034c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ca:	d903      	bls.n	80034d4 <OD_write_1201_additional+0xb4>
 80034cc:	8afb      	ldrh	r3, [r7, #22]
 80034ce:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80034d2:	d91b      	bls.n	800350c <OD_write_1201_additional+0xec>
 80034d4:	8afb      	ldrh	r3, [r7, #22]
 80034d6:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80034da:	d903      	bls.n	80034e4 <OD_write_1201_additional+0xc4>
 80034dc:	8afb      	ldrh	r3, [r7, #22]
 80034de:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034e2:	d313      	bcc.n	800350c <OD_write_1201_additional+0xec>
 80034e4:	8afb      	ldrh	r3, [r7, #22]
 80034e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034ea:	d903      	bls.n	80034f4 <OD_write_1201_additional+0xd4>
 80034ec:	8afb      	ldrh	r3, [r7, #22]
 80034ee:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80034f2:	d30b      	bcc.n	800350c <OD_write_1201_additional+0xec>
 80034f4:	8afb      	ldrh	r3, [r7, #22]
 80034f6:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80034fa:	d303      	bcc.n	8003504 <OD_write_1201_additional+0xe4>
 80034fc:	8afb      	ldrh	r3, [r7, #22]
 80034fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003502:	d303      	bcc.n	800350c <OD_write_1201_additional+0xec>
 8003504:	8afb      	ldrh	r3, [r7, #22]
 8003506:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800350a:	d901      	bls.n	8003510 <OD_write_1201_additional+0xf0>
                return ODR_INVALID_VALUE;
 800350c:	230f      	movs	r3, #15
 800350e:	e093      	b.n	8003638 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx, COB_ID,
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003512:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003516:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	f8b3 004e 	ldrh.w	r0, [r3, #78]	; 0x4e
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4603      	mov	r3, r0
 800352c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800352e:	f7ff ff0b 	bl	8003348 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDServerToClient);
            break;
 8003532:	e07a      	b.n	800362a <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8003534:	68b8      	ldr	r0, [r7, #8]
 8003536:	f7ff fe6e 	bl	8003216 <CO_getUint32>
 800353a:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	b29b      	uxth	r3, r3
 8003540:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003544:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FFU);
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	b29b      	uxth	r3, r3
 800354c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003550:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	43db      	mvns	r3, r3
 8003556:	0fdb      	lsrs	r3, r3, #31
 8003558:	b2db      	uxtb	r3, r3
 800355a:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (SDO->valid && (CAN_ID != CAN_ID_cur)))
 800355c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355e:	4b38      	ldr	r3, [pc, #224]	; (8003640 <OD_write_1201_additional+0x220>)
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d134      	bne.n	80035d0 <OD_write_1201_additional+0x1b0>
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <OD_write_1201_additional+0x15c>
 800356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <OD_write_1201_additional+0x15c>
 8003574:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003576:	8c3b      	ldrh	r3, [r7, #32]
 8003578:	429a      	cmp	r2, r3
 800357a:	d129      	bne.n	80035d0 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d028      	beq.n	80035d4 <OD_write_1201_additional+0x1b4>
 8003582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003584:	2b7f      	cmp	r3, #127	; 0x7f
 8003586:	d923      	bls.n	80035d0 <OD_write_1201_additional+0x1b0>
 8003588:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800358a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358e:	d903      	bls.n	8003598 <OD_write_1201_additional+0x178>
 8003590:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003592:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003596:	d91b      	bls.n	80035d0 <OD_write_1201_additional+0x1b0>
 8003598:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800359a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800359e:	d903      	bls.n	80035a8 <OD_write_1201_additional+0x188>
 80035a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035a6:	d313      	bcc.n	80035d0 <OD_write_1201_additional+0x1b0>
 80035a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035ae:	d903      	bls.n	80035b8 <OD_write_1201_additional+0x198>
 80035b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035b2:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80035b6:	d30b      	bcc.n	80035d0 <OD_write_1201_additional+0x1b0>
 80035b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035ba:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80035be:	d303      	bcc.n	80035c8 <OD_write_1201_additional+0x1a8>
 80035c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035c6:	d303      	bcc.n	80035d0 <OD_write_1201_additional+0x1b0>
 80035c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035ce:	d901      	bls.n	80035d4 <OD_write_1201_additional+0x1b4>
                return ODR_INVALID_VALUE;
 80035d0:	230f      	movs	r3, #15
 80035d2:	e031      	b.n	8003638 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx,
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	f8b3 404e 	ldrh.w	r4, [r3, #78]	; 0x4e
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ea:	9201      	str	r2, [sp, #4]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	4623      	mov	r3, r4
 80035f0:	4602      	mov	r2, r0
 80035f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035f4:	f7ff fea8 	bl	8003348 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDClientToServer, COB_ID);
            break;
 80035f8:	e017      	b.n	800362a <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1U) {
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d001      	beq.n	8003604 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8003600:	230b      	movs	r3, #11
 8003602:	e019      	b.n	8003638 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8003604:	68b8      	ldr	r0, [r7, #8]
 8003606:	f7ff fdf9 	bl	80031fc <CO_getUint8>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8003610:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <OD_write_1201_additional+0x200>
 8003618:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800361c:	2b00      	cmp	r3, #0
 800361e:	da03      	bge.n	8003628 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8003620:	230f      	movs	r3, #15
 8003622:	e009      	b.n	8003638 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default: return ODR_SUB_NOT_EXIST; break;
 8003624:	230e      	movs	r3, #14
 8003626:	e007      	b.n	8003638 <OD_write_1201_additional+0x218>
            break;
 8003628:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f7fd ff7c 	bl	800152e <OD_writeOriginal>
 8003636:	4603      	mov	r3, r0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3734      	adds	r7, #52	; 0x34
 800363c:	46bd      	mov	sp, r7
 800363e:	bd90      	pop	{r4, r7, pc}
 8003640:	3ffff800 	.word	0x3ffff800

08003644 <CO_SDOserver_init>:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOserver_init(CO_SDOserver_t* SDO, OD_t* OD, OD_entry_t* OD_1200_SDOsrvPar, uint8_t nodeId,
                  uint16_t SDOtimeoutTime_ms, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx,
                  uint16_t CANdevTxIdx, uint32_t* errInfo) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b08c      	sub	sp, #48	; 0x30
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if ((SDO == NULL) || (OD == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <CO_SDOserver_init+0x26>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <CO_SDOserver_init+0x26>
 800365e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <CO_SDOserver_init+0x26>
 8003664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	e0f5      	b.n	800385c <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	731a      	strb	r2, [r3, #12]
#if (((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED)) != 0
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 800367c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800367e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003682:	fb03 f202 	mul.w	r2, r3, r2
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	679a      	str	r2, [r3, #120]	; 0x78
#endif
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) != 0
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d117      	bne.n	80036c6 <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if ((nodeId < 1U) || (nodeId > 127U)) {
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <CO_SDOserver_init+0x60>
 800369c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	da02      	bge.n	80036aa <CO_SDOserver_init+0x66>
            return CO_ERROR_ILLEGAL_ARGUMENT;
 80036a4:	f04f 33ff 	mov.w	r3, #4294967295
 80036a8:	e0d8      	b.n	800385c <CO_SDOserver_init+0x218>
        }

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80036b2:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80036bc:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	611a      	str	r2, [r3, #16]
 80036c4:	e0a4      	b.n	8003810 <CO_SDOserver_init+0x1cc>
    } else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fdb2 	bl	8003230 <OD_getIndex>
 80036cc:	4603      	mov	r3, r0
 80036ce:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == (uint16_t)OD_H1200_SDO_SERVER_1_PARAM) {
 80036d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036d2:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80036d6:	d123      	bne.n	8003720 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if ((nodeId < 1U) || (nodeId > 127U)) {
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <CO_SDOserver_init+0xa2>
 80036de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	da02      	bge.n	80036ec <CO_SDOserver_init+0xa8>
                return CO_ERROR_ILLEGAL_ARGUMENT;
 80036e6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ea:	e0b7      	b.n	800385c <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80036f4:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80036fe:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	611a      	str	r2, [r3, #16]

            (void)OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8003706:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003708:	2301      	movs	r3, #1
 800370a:	2101      	movs	r1, #1
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff fddc 	bl	80032ca <OD_set_u32>
            (void)OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8003712:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003714:	2301      	movs	r3, #1
 8003716:	2102      	movs	r1, #2
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fdd6 	bl	80032ca <OD_set_u32>
 800371e:	e077      	b.n	8003810 <CO_SDOserver_init+0x1cc>
        } else if ((OD_SDOsrvParIdx > (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
 8003720:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003722:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8003726:	d96f      	bls.n	8003808 <CO_SDOserver_init+0x1c4>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8003728:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800372a:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800372e:	d26b      	bcs.n	8003808 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8003730:	f107 021d 	add.w	r2, r7, #29
 8003734:	2301      	movs	r3, #1
 8003736:	2100      	movs	r1, #0
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff fd9c 	bl	8003276 <OD_get_u8>
 800373e:	4603      	mov	r3, r0
 8003740:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1, &COB_IDClientToServer32, true);
 8003744:	f107 0218 	add.w	r2, r7, #24
 8003748:	2301      	movs	r3, #1
 800374a:	2101      	movs	r1, #1
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff fda7 	bl	80032a0 <OD_get_u32>
 8003752:	4603      	mov	r3, r0
 8003754:	f887 3020 	strb.w	r3, [r7, #32]
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2, &COB_IDServerToClient32, true);
 8003758:	f107 0214 	add.w	r2, r7, #20
 800375c:	2301      	movs	r3, #1
 800375e:	2102      	movs	r1, #2
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff fd9d 	bl	80032a0 <OD_get_u32>
 8003766:	4603      	mov	r3, r0
 8003768:	77fb      	strb	r3, [r7, #31]

            if ((odRet0 != ODR_OK) || ((maxSubIndex != 2U) && (maxSubIndex != 3U)) || (odRet1 != ODR_OK)
 800376a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <CO_SDOserver_init+0x14a>
 8003772:	7f7b      	ldrb	r3, [r7, #29]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d002      	beq.n	800377e <CO_SDOserver_init+0x13a>
 8003778:	7f7b      	ldrb	r3, [r7, #29]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d107      	bne.n	800378e <CO_SDOserver_init+0x14a>
 800377e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <CO_SDOserver_init+0x14a>
                || (odRet2 != ODR_OK)) {
 8003786:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <CO_SDOserver_init+0x15c>
                if (errInfo != NULL) {
 800378e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <CO_SDOserver_init+0x156>
                    *errInfo = OD_SDOsrvParIdx;
 8003794:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003798:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 800379a:	f06f 030b 	mvn.w	r3, #11
 800379e:	e05d      	b.n	800385c <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	db05      	blt.n	80037b2 <CO_SDOserver_init+0x16e>
                                       ? (uint16_t)(COB_IDClientToServer32 & 0x7FFU)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 80037aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	e000      	b.n	80037b4 <CO_SDOserver_init+0x170>
 80037b2:	2300      	movs	r3, #0
 80037b4:	84fb      	strh	r3, [r7, #38]	; 0x26
                                       : 0U;
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db05      	blt.n	80037c8 <CO_SDOserver_init+0x184>
                                       ? (uint16_t)(COB_IDServerToClient32 & 0x7FFU)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 80037c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	e000      	b.n	80037ca <CO_SDOserver_init+0x186>
 80037c8:	2300      	movs	r3, #0
 80037ca:	84bb      	strh	r3, [r7, #36]	; 0x24
                                       : 0U;

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
            SDO->OD_1200_extension.object = SDO;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a23      	ldr	r2, [pc, #140]	; (8003864 <CO_SDOserver_init+0x220>)
 80037d6:	65da      	str	r2, [r3, #92]	; 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a23      	ldr	r2, [pc, #140]	; (8003868 <CO_SDOserver_init+0x224>)
 80037dc:	661a      	str	r2, [r3, #96]	; 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar, &SDO->OD_1200_extension);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3358      	adds	r3, #88	; 0x58
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fd33 	bl	8003250 <OD_extension_init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	77bb      	strb	r3, [r7, #30]
            if (odRetE != ODR_OK) {
 80037ee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) {
 80037f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <CO_SDOserver_init+0x1be>
                    *errInfo = OD_SDOsrvParIdx;
 80037fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80037fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003800:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 8003802:	f06f 030b 	mvn.w	r3, #11
 8003806:	e029      	b.n	800385c <CO_SDOserver_init+0x218>
            }
#endif
        } else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003808:	f04f 33ff 	mov.w	r3, #4294967295
 800380c:	e026      	b.n	800385c <CO_SDOserver_init+0x218>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 800380e:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	63da      	str	r2, [r3, #60]	; 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO->CANdevRx = CANdevRx;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800381a:	649a      	str	r2, [r3, #72]	; 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003820:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    SDO->CANdevTxIdx = CANdevTxIdx;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800382a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = 0;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800383e:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO, CANdevRx, CANdevRxIdx, CANdevTxIdx, CanId_ClientToServer,
 8003840:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003842:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003844:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8003848:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800384a:	9201      	str	r2, [sp, #4]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	4603      	mov	r3, r0
 8003850:	460a      	mov	r2, r1
 8003852:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7ff fd77 	bl	8003348 <CO_SDOserver_init_canRxTx>
 800385a:	4603      	mov	r3, r0
                                     CanId_ServerToClient);
}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	0800147f 	.word	0x0800147f
 8003868:	08003421 	.word	0x08003421

0800386c <validateAndWriteToOD>:
 * @param crcOperation 0=none, 1=calculate, 2=calculate and compare
 * @parma crcClient crc checksum to campare with
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
validateAndWriteToOD(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, uint8_t crcOperation, uint16_t crcClient) {
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b08b      	sub	sp, #44	; 0x2c
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	4611      	mov	r1, r2
 8003878:	461a      	mov	r2, r3
 800387a:	460b      	mov	r3, r1
 800387c:	71fb      	strb	r3, [r7, #7]
 800387e:	4613      	mov	r3, r2
 8003880:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003888:	627b      	str	r3, [r7, #36]	; 0x24

    if (SDO->finished) {
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8082 	beq.w	8003998 <validateAndWriteToOD+0x12c>
        /* Verify if size of data downloaded matches size indicated. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran != SDO->sizeInd)) {
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <validateAndWriteToOD+0x5c>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d00f      	beq.n	80038c8 <validateAndWriteToOD+0x5c>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d901      	bls.n	80038b8 <validateAndWriteToOD+0x4c>
 80038b4:	4a73      	ldr	r2, [pc, #460]	; (8003a84 <validateAndWriteToOD+0x218>)
 80038b6:	e000      	b.n	80038ba <validateAndWriteToOD+0x4e>
 80038b8:	4a73      	ldr	r2, [pc, #460]	; (8003a88 <validateAndWriteToOD+0x21c>)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	751a      	strb	r2, [r3, #20]
            return false;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e0d8      	b.n	8003a7a <validateAndWriteToOD+0x20e>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be shorter than size of the
         * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
         * also OD data size, (temporary, send information about EOF into OD_IO.write) */
        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038d4:	b25b      	sxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	da42      	bge.n	8003960 <validateAndWriteToOD+0xf4>
            && ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd))
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <validateAndWriteToOD+0x7e>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d93a      	bls.n	8003960 <validateAndWriteToOD+0xf4>
            && ((SDO->bufOffsetWr + 2U) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE)) {
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038f0:	3302      	adds	r3, #2
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d834      	bhi.n	8003960 <validateAndWriteToOD+0xf4>
            SDO->buf[SDO->bufOffsetWr] = 0;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            SDO->bufOffsetWr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran++;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	66da      	str	r2, [r3, #108]	; 0x6c
            if ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd)) {
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <validateAndWriteToOD+0xc2>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003928:	6a3a      	ldr	r2, [r7, #32]
 800392a:	429a      	cmp	r2, r3
 800392c:	d913      	bls.n	8003956 <validateAndWriteToOD+0xea>
                SDO->buf[SDO->bufOffsetWr] = 0;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                SDO->bufOffsetWr++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran++;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	66da      	str	r2, [r3, #108]	; 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	621a      	str	r2, [r3, #32]
 800395e:	e02d      	b.n	80039bc <validateAndWriteToOD+0x150>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check. */
        else if (sizeInOd == 0U) {
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d104      	bne.n	8003970 <validateAndWriteToOD+0x104>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	621a      	str	r2, [r3, #32]
 800396e:	e025      	b.n	80039bc <validateAndWriteToOD+0x150>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003974:	6a3a      	ldr	r2, [r7, #32]
 8003976:	429a      	cmp	r2, r3
 8003978:	d020      	beq.n	80039bc <validateAndWriteToOD+0x150>
            *abortCode = (SDO->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800397e:	6a3a      	ldr	r2, [r7, #32]
 8003980:	429a      	cmp	r2, r3
 8003982:	d201      	bcs.n	8003988 <validateAndWriteToOD+0x11c>
 8003984:	4a3f      	ldr	r2, [pc, #252]	; (8003a84 <validateAndWriteToOD+0x218>)
 8003986:	e000      	b.n	800398a <validateAndWriteToOD+0x11e>
 8003988:	4a3f      	ldr	r2, [pc, #252]	; (8003a88 <validateAndWriteToOD+0x21c>)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	751a      	strb	r2, [r3, #20]
            return false;
 8003994:	2300      	movs	r3, #0
 8003996:	e070      	b.n	8003a7a <validateAndWriteToOD+0x20e>
        } else { /* MISRA C 2004 14.10 */
        }
    } else {
        /* Verify if size of data downloaded is not too large. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran > SDO->sizeInd)) {
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <validateAndWriteToOD+0x150>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d907      	bls.n	80039bc <validateAndWriteToOD+0x150>
            *abortCode = CO_SDO_AB_DATA_LONG;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4a35      	ldr	r2, [pc, #212]	; (8003a84 <validateAndWriteToOD+0x218>)
 80039b0:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	751a      	strb	r2, [r3, #20]
            return false;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e05e      	b.n	8003a7a <validateAndWriteToOD+0x20e>
    (void)crcOperation;
    (void)crcClient;
    (void)bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c4:	f3ef 8210 	mrs	r2, PRIMASK
 80039c8:	617a      	str	r2, [r7, #20]
  return(result);
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80039ce:	b672      	cpsid	i
}
 80039d0:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf, SDO->bufOffsetWr, &countWritten);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f103 0018 	add.w	r0, r3, #24
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80039e8:	f107 0310 	add.w	r3, r7, #16
 80039ec:	47a0      	blx	r4
 80039ee:	4603      	mov	r3, r0
 80039f0:	77fb      	strb	r3, [r7, #31]
    CO_UNLOCK_OD(SDO->CANdevTx);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f383 8810 	msr	PRIMASK, r3
}
 8003a00:	bf00      	nop

    SDO->bufOffsetWr = 0;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* verify write error value */
    if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8003a0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d011      	beq.n	8003a36 <validateAndWriteToOD+0x1ca>
 8003a12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d00c      	beq.n	8003a36 <validateAndWriteToOD+0x1ca>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003a1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fd ff5d 	bl	80018e0 <OD_getSDOabCode>
 8003a26:	4602      	mov	r2, r0
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	751a      	strb	r2, [r3, #20]
        return false;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e021      	b.n	8003a7a <validateAndWriteToOD+0x20e>
    } else if (SDO->finished && (odRet == ODR_PARTIAL)) {
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00c      	beq.n	8003a58 <validateAndWriteToOD+0x1ec>
 8003a3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d107      	bne.n	8003a58 <validateAndWriteToOD+0x1ec>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <validateAndWriteToOD+0x21c>)
 8003a4c:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	751a      	strb	r2, [r3, #20]
        return false;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e010      	b.n	8003a7a <validateAndWriteToOD+0x20e>
    } else if (!SDO->finished && (odRet == ODR_OK)) {
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10b      	bne.n	8003a78 <validateAndWriteToOD+0x20c>
 8003a60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <validateAndWriteToOD+0x20c>
        /* OD variable was written completely, but SDO download still has data */
        *abortCode = CO_SDO_AB_DATA_LONG;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4a06      	ldr	r2, [pc, #24]	; (8003a84 <validateAndWriteToOD+0x218>)
 8003a6c:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	751a      	strb	r2, [r3, #20]
        return false;
 8003a74:	2300      	movs	r3, #0
 8003a76:	e000      	b.n	8003a7a <validateAndWriteToOD+0x20e>
    } else { /* MISRA C 2004 14.10 */
    }

    return true;
 8003a78:	2301      	movs	r3, #1
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	372c      	adds	r7, #44	; 0x2c
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd90      	pop	{r4, r7, pc}
 8003a82:	bf00      	nop
 8003a84:	06070012 	.word	0x06070012
 8003a88:	06070013 	.word	0x06070013

08003a8c <readFromOd>:
 * @parma countMinimum if data size in buffer is less than countMinimum, then buffer is refilled from OD variable
 * @param calculateCrc if true, crc is calculated
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
readFromOd(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, OD_size_t countMinimum, bool_t calculateCrc) {
 8003a8c:	b590      	push	{r4, r7, lr}
 8003a8e:	b08d      	sub	sp, #52	; 0x34
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) == 0
    (void)calculateCrc; /* may be unused */
#endif
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24

    if (!SDO->finished && (countRemain < countMinimum)) {
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f040 80ab 	bne.w	8003c0a <readFromOd+0x17e>
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	f080 80a6 	bcs.w	8003c0a <readFromOd+0x17e>
        /* first move remaining data to the start of the buffer */
        (void)memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ad0:	4413      	add	r3, r2
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f008 fcb1 	bl	800c43c <memmove>
        SDO->bufOffsetRd = 0;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        SDO->bufOffsetWr = countRemain;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	f1c3 0320 	rsb	r3, r3, #32
 8003af0:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]

        CO_LOCK_OD(SDO->CANdevTx);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afa:	f3ef 8210 	mrs	r2, PRIMASK
 8003afe:	617a      	str	r2, [r7, #20]
  return(result);
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003b04:	b672      	cpsid	i
}
 8003b06:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, &SDO->buf[countRemain], countRdRequest, &countRd);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f103 0018 	add.w	r0, r3, #24
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	3380      	adds	r3, #128	; 0x80
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	18d1      	adds	r1, r2, r3
 8003b1a:	f107 0310 	add.w	r3, r7, #16
 8003b1e:	6a3a      	ldr	r2, [r7, #32]
 8003b20:	47a0      	blx	r4
 8003b22:	4603      	mov	r3, r0
 8003b24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        CO_UNLOCK_OD(SDO->CANdevTx);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f383 8810 	msr	PRIMASK, r3
}
 8003b36:	bf00      	nop

        if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8003b38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d011      	beq.n	8003b64 <readFromOd+0xd8>
 8003b40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d00c      	beq.n	8003b64 <readFromOd+0xd8>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003b4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd fec6 	bl	80018e0 <OD_getSDOabCode>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	751a      	strb	r2, [r3, #20]
            return false;
 8003b60:	2300      	movs	r3, #0
 8003b62:	e053      	b.n	8003c0c <readFromOd+0x180>
        }

        /* if data is string, send only data up to null termination */
        OD_size_t lastRd = countRd + countRemain;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b68:	4413      	add	r3, r2
 8003b6a:	61fb      	str	r3, [r7, #28]
        if ((countRd > 0U) && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d027      	beq.n	8003bc2 <readFromOd+0x136>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b78:	b25b      	sxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	da21      	bge.n	8003bc2 <readFromOd+0x136>
            SDO->buf[lastRd] = 0; /* (SDO->buf is one byte larger) */
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	3380      	adds	r3, #128	; 0x80
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char*)&SDO->buf[countRemain]);
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	3380      	adds	r3, #128	; 0x80
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4413      	add	r3, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fc fada 	bl	800014c <strlen>
 8003b98:	62b8      	str	r0, [r7, #40]	; 0x28
            if (countStr == 0U) {
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <readFromOd+0x118>
                countStr = 1;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
            } /* zero length is not allowed */
            if (countStr < countRd) {
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d20a      	bcs.n	8003bc2 <readFromOd+0x136>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	441a      	add	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	441a      	add	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        if ((SDO->bufOffsetWr == 0U) || (odRet == ODR_PARTIAL)) {
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <readFromOd+0x156>
 8003bd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d110      	bne.n	8003c04 <readFromOd+0x178>
            SDO->finished = false;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	675a      	str	r2, [r3, #116]	; 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d90a      	bls.n	8003c0a <readFromOd+0x17e>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4a07      	ldr	r2, [pc, #28]	; (8003c14 <readFromOd+0x188>)
 8003bf8:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	751a      	strb	r2, [r3, #20]
                return false;
 8003c00:	2300      	movs	r3, #0
 8003c02:	e003      	b.n	8003c0c <readFromOd+0x180>
            }
        } else {
            SDO->finished = true;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	675a      	str	r2, [r3, #116]	; 0x74
        if (calculateCrc && SDO->block_crcEnabled) {
            SDO->block_crc = crc16_ccitt(&SDO->buf[countRemain], countRd, SDO->block_crc);
        }
#endif
    }
    return true;
 8003c0a:	2301      	movs	r3, #1
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3734      	adds	r7, #52	; 0x34
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd90      	pop	{r4, r7, pc}
 8003c14:	06040047 	.word	0x06040047

08003c18 <CO_SDOserver_process>:
#endif

CO_SDO_return_t
CO_SDOserver_process(CO_SDOserver_t* SDO, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                     uint32_t* timerNext_us) {
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b09b      	sub	sp, #108	; 0x6c
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8003c2c:	f06f 0301 	mvn.w	r3, #1
 8003c30:	f000 bd00 	b.w	8004634 <CO_SDOserver_process+0xa1c>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bf14      	ite	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	657b      	str	r3, [r7, #84]	; 0x54

    if ((SDO->state == CO_SDO_ST_IDLE) && SDO->valid && !isNew) {
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	7d1b      	ldrb	r3, [r3, #20]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <CO_SDOserver_process+0x56>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d006      	beq.n	8003c6e <CO_SDOserver_process+0x56>
 8003c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003c6c:	e2d7      	b.n	800421e <CO_SDOserver_process+0x606>
    } else if (!NMTisPreOrOperational || !SDO->valid) {
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <CO_SDOserver_process+0x64>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	63da      	str	r2, [r3, #60]	; 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003c8e:	e2c6      	b.n	800421e <CO_SDOserver_process+0x606>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8003c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 82c3 	beq.w	800421e <CO_SDOserver_process+0x606>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	7d1b      	ldrb	r3, [r3, #20]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f040 80cc 	bne.w	8003e3c <CO_SDOserver_process+0x224>
            bool_t upload = false;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0U) == 0x20U) {
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d103      	bne.n	8003cbe <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2211      	movs	r2, #17
 8003cba:	751a      	strb	r2, [r3, #20]
 8003cbc:	e00f      	b.n	8003cde <CO_SDOserver_process+0xc6>
            } else if (SDO->CANrxData[0] == 0x40U) {
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	d105      	bne.n	8003cd4 <CO_SDOserver_process+0xbc>
                upload = true;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2221      	movs	r2, #33	; 0x21
 8003cd0:	751a      	strb	r2, [r3, #20]
 8003cd2:	e004      	b.n	8003cde <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8003cd4:	4ba7      	ldr	r3, [pc, #668]	; (8003f74 <CO_SDOserver_process+0x35c>)
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d162      	bne.n	8003daa <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = (uint16_t)((((uint16_t)SDO->CANrxData[2]) << 8) | SDO->CANrxData[1]);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	b21a      	sxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf4:	b21b      	sxth	r3, r3
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	b21b      	sxth	r3, r3
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->subIndex = SDO->CANrxData[3];
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex, &SDO->OD_IO, false);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f7fd fc90 	bl	800163c <OD_find>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f103 0218 	add.w	r2, r3, #24
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f7fd fce3 	bl	80016f4 <OD_getSub>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                if (odRet != ODR_OK) {
 8003d34:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003d3c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fd fdcd 	bl	80018e0 <OD_getSDOabCode>
 8003d46:	4603      	mov	r3, r0
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	751a      	strb	r2, [r3, #20]
 8003d50:	e02b      	b.n	8003daa <CO_SDOserver_process+0x192>
                } else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d105      	bne.n	8003d6c <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8003d60:	4b85      	ldr	r3, [pc, #532]	; (8003f78 <CO_SDOserver_process+0x360>)
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	751a      	strb	r2, [r3, #20]
 8003d6a:	e01e      	b.n	8003daa <CO_SDOserver_process+0x192>
                    } else if (upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U)) {
 8003d6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00c      	beq.n	8003d8c <CO_SDOserver_process+0x174>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d105      	bne.n	8003d8c <CO_SDOserver_process+0x174>
                        abortCode = CO_SDO_AB_WRITEONLY;
 8003d80:	4b7e      	ldr	r3, [pc, #504]	; (8003f7c <CO_SDOserver_process+0x364>)
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	751a      	strb	r2, [r3, #20]
 8003d8a:	e00e      	b.n	8003daa <CO_SDOserver_process+0x192>
                    } else if (!upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U)) {
 8003d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <CO_SDOserver_process+0x192>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d104      	bne.n	8003daa <CO_SDOserver_process+0x192>
                        abortCode = CO_SDO_AB_READONLY;
 8003da0:	4b77      	ldr	r3, [pc, #476]	; (8003f80 <CO_SDOserver_process+0x368>)
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	751a      	strb	r2, [r3, #20]
                }
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            /* load data from object dictionary, if upload and no error */
            if (upload && (abortCode == CO_SDO_AB_NONE)) {
 8003daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d045      	beq.n	8003e3c <CO_SDOserver_process+0x224>
 8003db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d142      	bne.n	8003e3c <CO_SDOserver_process+0x224>
                SDO->bufOffsetRd = 0;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->bufOffsetWr = 0;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	66da      	str	r2, [r3, #108]	; 0x6c
                SDO->finished = false;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	675a      	str	r2, [r3, #116]	; 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8003dd2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2207      	movs	r2, #7
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f7ff fe56 	bl	8003a8c <readFromOd>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02a      	beq.n	8003e3c <CO_SDOserver_process+0x224>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d01a      	beq.n	8003e24 <CO_SDOserver_process+0x20c>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1a      	ldr	r2, [r3, #32]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	669a      	str	r2, [r3, #104]	; 0x68

                        if (SDO->sizeInd == 0U) {
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <CO_SDOserver_process+0x1f2>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	669a      	str	r2, [r3, #104]	; 0x68
 8003e08:	e018      	b.n	8003e3c <CO_SDOserver_process+0x224>
                        } else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d011      	beq.n	8003e3c <CO_SDOserver_process+0x224>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003e18:	4b5a      	ldr	r3, [pc, #360]	; (8003f84 <CO_SDOserver_process+0x36c>)
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	751a      	strb	r2, [r3, #20]
 8003e22:	e00b      	b.n	8003e3c <CO_SDOserver_process+0x224>
                        } else { /* MISRA C 2004 14.10 */
                        }
                    } else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e2a:	b25b      	sxtb	r3, r3
                                           ? SDO->OD_IO.stream.dataLength
                                           : 0U;
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	db02      	blt.n	8003e36 <CO_SDOserver_process+0x21e>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	e000      	b.n	8003e38 <CO_SDOserver_process+0x220>
 8003e36:	2300      	movs	r3, #0
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	6693      	str	r3, [r2, #104]	; 0x68
                }
            }
#endif    /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        bool isOKstate = (SDO->state != CO_SDO_ST_IDLE);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	7d1b      	ldrb	r3, [r3, #20]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf14      	ite	ne
 8003e46:	2301      	movne	r3, #1
 8003e48:	2300      	moveq	r3, #0
 8003e4a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        isOKstate = (SDO->state != CO_SDO_ST_ABORT) && isOKstate;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	7d1b      	ldrb	r3, [r3, #20]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d005      	beq.n	8003e64 <CO_SDOserver_process+0x24c>
 8003e58:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <CO_SDOserver_process+0x24c>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <CO_SDOserver_process+0x24e>
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8003e6a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        if (isOKstate) {
 8003e76:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 81c7 	beq.w	800420e <CO_SDOserver_process+0x5f6>
            switch (SDO->state) {
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	7d1b      	ldrb	r3, [r3, #20]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	3b11      	subs	r3, #17
 8003e88:	2b12      	cmp	r3, #18
 8003e8a:	f200 81b1 	bhi.w	80041f0 <CO_SDOserver_process+0x5d8>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <CO_SDOserver_process+0x27c>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ee1 	.word	0x08003ee1
 8003e98:	080041f1 	.word	0x080041f1
 8003e9c:	080040a9 	.word	0x080040a9
 8003ea0:	080041f1 	.word	0x080041f1
 8003ea4:	080041f1 	.word	0x080041f1
 8003ea8:	080041f1 	.word	0x080041f1
 8003eac:	080041f1 	.word	0x080041f1
 8003eb0:	080041f1 	.word	0x080041f1
 8003eb4:	080041f1 	.word	0x080041f1
 8003eb8:	080041f1 	.word	0x080041f1
 8003ebc:	080041f1 	.word	0x080041f1
 8003ec0:	080041f1 	.word	0x080041f1
 8003ec4:	080041f1 	.word	0x080041f1
 8003ec8:	080041f1 	.word	0x080041f1
 8003ecc:	080041f1 	.word	0x080041f1
 8003ed0:	080041f1 	.word	0x080041f1
 8003ed4:	0800419f 	.word	0x0800419f
 8003ed8:	080041f1 	.word	0x080041f1
 8003edc:	080041a7 	.word	0x080041a7
                case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
                    if ((SDO->CANrxData[0] & 0x02U) != 0U) {
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80a2 	beq.w	8004034 <CO_SDOserver_process+0x41c>
                        /* Expedited transfer, max 4 bytes of data */

                        /* Size of OD variable (>0 if indicated) */
                        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	647b      	str	r3, [r7, #68]	; 0x44

                        /* Get SDO data size (indicated by SDO client or get from OD) */
                        OD_size_t dataSizeToWrite = 4;
 8003ef6:	2304      	movs	r3, #4
 8003ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <CO_SDOserver_process+0x306>
                            dataSizeToWrite -= ((OD_size_t)(SDO->CANrxData[0]) >> 2) & 0x03U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f0e:	089b      	lsrs	r3, r3, #2
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f1c:	e007      	b.n	8003f2e <CO_SDOserver_process+0x316>
                        } else if ((sizeInOd > 0U) && (sizeInOd < 4U)) {
 8003f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <CO_SDOserver_process+0x316>
 8003f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d801      	bhi.n	8003f2e <CO_SDOserver_process+0x316>
                            dataSizeToWrite = sizeInOd;
 8003f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* copy data to the temp buffer, swap data if necessary */
                        uint8_t buf[6] = {0};
 8003f2e:	2300      	movs	r3, #0
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
 8003f32:	2300      	movs	r3, #0
 8003f34:	853b      	strh	r3, [r7, #40]	; 0x28
                        (void)memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8003f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f42:	4618      	mov	r0, r3
 8003f44:	f008 fb1e 	bl	800c584 <memcpy>
#endif

                        /* If dataType is string, then size of data downloaded may be shorter as size of
                         * the OD data buffer. If so, add two zero bytes to terminate (unicode) string.
                         * Shorten also OD data size, (temporary, send information about EOF into OD_IO.write) */
                        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f4e:	b25b      	sxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	da21      	bge.n	8003f98 <CO_SDOserver_process+0x380>
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 8003f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <CO_SDOserver_process+0x34a>
 8003f5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d21a      	bcs.n	8003f98 <CO_SDOserver_process+0x380>
                            OD_size_t delta = sizeInOd - dataSizeToWrite;
 8003f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	643b      	str	r3, [r7, #64]	; 0x40
                            dataSizeToWrite += (delta == 1U) ? 1U : 2U;
 8003f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10b      	bne.n	8003f88 <CO_SDOserver_process+0x370>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e00a      	b.n	8003f8a <CO_SDOserver_process+0x372>
 8003f74:	05040001 	.word	0x05040001
 8003f78:	06010000 	.word	0x06010000
 8003f7c:	06010001 	.word	0x06010001
 8003f80:	06010002 	.word	0x06010002
 8003f84:	06040047 	.word	0x06040047
 8003f88:	2302      	movs	r3, #2
 8003f8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f8c:	4413      	add	r3, r2
 8003f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f94:	621a      	str	r2, [r3, #32]
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 8003f96:	e016      	b.n	8003fc6 <CO_SDOserver_process+0x3ae>
                        } else if (sizeInOd == 0U) {
 8003f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d103      	bne.n	8003fa6 <CO_SDOserver_process+0x38e>
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fa2:	621a      	str	r2, [r3, #32]
 8003fa4:	e00f      	b.n	8003fc6 <CO_SDOserver_process+0x3ae>
                        }
                        /* Verify if size of data downloaded matches data size in OD. */
                        else if (dataSizeToWrite != sizeInOd) {
 8003fa6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d00b      	beq.n	8003fc6 <CO_SDOserver_process+0x3ae>
                            abortCode = (dataSizeToWrite > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003fae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d901      	bls.n	8003fba <CO_SDOserver_process+0x3a2>
 8003fb6:	4b91      	ldr	r3, [pc, #580]	; (80041fc <CO_SDOserver_process+0x5e4>)
 8003fb8:	e000      	b.n	8003fbc <CO_SDOserver_process+0x3a4>
 8003fba:	4b91      	ldr	r3, [pc, #580]	; (8004200 <CO_SDOserver_process+0x5e8>)
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	751a      	strb	r2, [r3, #20]
                            break;
 8003fc4:	e123      	b.n	800420e <CO_SDOserver_process+0x5f6>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* Copy data */
                        OD_size_t countWritten = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	623b      	str	r3, [r7, #32]

                        CO_LOCK_OD(SDO->CANdevTx);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fce:	f3ef 8210 	mrs	r2, PRIMASK
 8003fd2:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8003fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd6:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd8:	b672      	cpsid	i
}
 8003fda:	bf00      	nop
                        ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf, dataSizeToWrite, &countWritten);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f103 0018 	add.w	r0, r3, #24
 8003fe6:	f107 0320 	add.w	r3, r7, #32
 8003fea:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003fee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ff0:	47a0      	blx	r4
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        CO_UNLOCK_OD(SDO->CANdevTx);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	f383 8810 	msr	PRIMASK, r3
}
 8004006:	bf00      	nop

                        if (odRet != ODR_OK) {
 8004008:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <CO_SDOserver_process+0x40e>
                            abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004010:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004014:	4618      	mov	r0, r3
 8004016:	f7fd fc63 	bl	80018e0 <OD_getSDOabCode>
 800401a:	4603      	mov	r3, r0
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	751a      	strb	r2, [r3, #20]
                            break;
 8004024:	e0f3      	b.n	800420e <CO_SDOserver_process+0x5f6>
                        } else {
                            SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2212      	movs	r2, #18
 800402a:	751a      	strb	r2, [r3, #20]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                            SDO->finished = true;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	675a      	str	r2, [r3, #116]	; 0x74
#else
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                        SDO->state = CO_SDO_ST_ABORT;
#endif
                    }
                    break;
 8004032:	e0ec      	b.n	800420e <CO_SDOserver_process+0x5f6>
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d028      	beq.n	8004094 <CO_SDOserver_process+0x47c>
                            OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	64bb      	str	r3, [r7, #72]	; 0x48
                            (void)memcpy((void*)(&size), (const void*)(&SDO->CANrxData[4]), sizeof(size));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3344      	adds	r3, #68	; 0x44
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	61fb      	str	r3, [r7, #28]
                            SDO->sizeInd = CO_SWAP_32(size);
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	669a      	str	r2, [r3, #104]	; 0x68
                            if (sizeInOd > 0U) {
 8004056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01e      	beq.n	800409a <CO_SDOserver_process+0x482>
                                if (SDO->sizeInd > sizeInOd) {
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004062:	429a      	cmp	r2, r3
 8004064:	d205      	bcs.n	8004072 <CO_SDOserver_process+0x45a>
                                    abortCode = CO_SDO_AB_DATA_LONG;
 8004066:	4b65      	ldr	r3, [pc, #404]	; (80041fc <CO_SDOserver_process+0x5e4>)
 8004068:	62fb      	str	r3, [r7, #44]	; 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	751a      	strb	r2, [r3, #20]
                                    break;
 8004070:	e0cd      	b.n	800420e <CO_SDOserver_process+0x5f6>
                                else if ((SDO->sizeInd < sizeInOd)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004078:	429a      	cmp	r2, r3
 800407a:	d90e      	bls.n	800409a <CO_SDOserver_process+0x482>
                                         && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)) {
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004082:	b25b      	sxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	db08      	blt.n	800409a <CO_SDOserver_process+0x482>
                                    abortCode = CO_SDO_AB_DATA_SHORT;
 8004088:	4b5d      	ldr	r3, [pc, #372]	; (8004200 <CO_SDOserver_process+0x5e8>)
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	751a      	strb	r2, [r3, #20]
                                    break;
 8004092:	e0bc      	b.n	800420e <CO_SDOserver_process+0x5f6>
                            SDO->sizeInd = 0;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	669a      	str	r2, [r3, #104]	; 0x68
                        SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2212      	movs	r2, #18
 800409e:	751a      	strb	r2, [r3, #20]
                        SDO->finished = false;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	675a      	str	r2, [r3, #116]	; 0x74
                    break;
 80040a6:	e0b2      	b.n	800420e <CO_SDOserver_process+0x5f6>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xE0U) == 0x00U) {
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ae:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d16d      	bne.n	8004192 <CO_SDOserver_process+0x57a>
                        SDO->finished = (SDO->CANrxData[0] & 0x01U) != 0U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf14      	ite	ne
 80040c4:	2301      	movne	r3, #1
 80040c6:	2300      	moveq	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	675a      	str	r2, [r3, #116]	; 0x74

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                        if (toggle != SDO->toggle) {
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80040e4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d005      	beq.n	80040f8 <CO_SDOserver_process+0x4e0>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 80040ec:	4b45      	ldr	r3, [pc, #276]	; (8004204 <CO_SDOserver_process+0x5ec>)
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	751a      	strb	r2, [r3, #20]
                            break;
 80040f6:	e08a      	b.n	800420e <CO_SDOserver_process+0x5f6>
                        }

                        /* get data size and write data to the buffer */
                        OD_size_t count = (OD_size_t)(7U - (((OD_size_t)(SDO->CANrxData[0]) >> 1) & 0x07U));
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	b2db      	uxtb	r3, r3
 8004102:	43db      	mvns	r3, r3
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	64fb      	str	r3, [r7, #76]	; 0x4c
                        (void)memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004116:	18d0      	adds	r0, r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3341      	adds	r3, #65	; 0x41
 800411c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800411e:	4619      	mov	r1, r3
 8004120:	f008 fa30 	bl	800c584 <memcpy>
                        SDO->bufOffsetWr += count;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800412a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412c:	441a      	add	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        SDO->sizeTran += count;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413a:	441a      	add	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	66da      	str	r2, [r3, #108]	; 0x6c

                        /* if data size exceeds variable size, abort */
                        if ((SDO->OD_IO.stream.dataLength > 0U) && (SDO->sizeTran > SDO->OD_IO.stream.dataLength)) {
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00b      	beq.n	8004160 <CO_SDOserver_process+0x548>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	429a      	cmp	r2, r3
 8004152:	d905      	bls.n	8004160 <CO_SDOserver_process+0x548>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8004154:	4b29      	ldr	r3, [pc, #164]	; (80041fc <CO_SDOserver_process+0x5e4>)
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	751a      	strb	r2, [r3, #20]
                            break;
 800415e:	e056      	b.n	800420e <CO_SDOserver_process+0x5f6>
                        }

                        /* if necessary, empty the buffer */
                        if (SDO->finished || ((CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr) < (7U + 2U))) {
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <CO_SDOserver_process+0x55e>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800416e:	f1c3 0320 	rsb	r3, r3, #32
 8004172:	2b08      	cmp	r3, #8
 8004174:	d809      	bhi.n	800418a <CO_SDOserver_process+0x572>
                            if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 8004176:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800417a:	2300      	movs	r3, #0
 800417c:	2200      	movs	r2, #0
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7ff fb74 	bl	800386c <validateAndWriteToOD>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d040      	beq.n	800420c <CO_SDOserver_process+0x5f4>
                                break;
                            }
                        }

                        SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2214      	movs	r2, #20
 800418e:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8004190:	e03d      	b.n	800420e <CO_SDOserver_process+0x5f6>
                        abortCode = CO_SDO_AB_CMD;
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <CO_SDOserver_process+0x5f0>)
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	751a      	strb	r2, [r3, #20]
                    break;
 800419c:	e037      	b.n	800420e <CO_SDOserver_process+0x5f6>
                }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
                    SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2222      	movs	r2, #34	; 0x22
 80041a2:	751a      	strb	r2, [r3, #20]
                    break;
 80041a4:	e033      	b.n	800420e <CO_SDOserver_process+0x5f6>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xEFU) == 0x60U) {
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ac:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80041b0:	2b60      	cmp	r3, #96	; 0x60
 80041b2:	d117      	bne.n	80041e4 <CO_SDOserver_process+0x5cc>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
                        if (toggle != SDO->toggle) {
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80041c8:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d005      	beq.n	80041dc <CO_SDOserver_process+0x5c4>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <CO_SDOserver_process+0x5ec>)
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	751a      	strb	r2, [r3, #20]
                            break;
 80041da:	e018      	b.n	800420e <CO_SDOserver_process+0x5f6>
                        }
                        SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2224      	movs	r2, #36	; 0x24
 80041e0:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 80041e2:	e014      	b.n	800420e <CO_SDOserver_process+0x5f6>
                        abortCode = CO_SDO_AB_CMD;
 80041e4:	4b08      	ldr	r3, [pc, #32]	; (8004208 <CO_SDOserver_process+0x5f0>)
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	751a      	strb	r2, [r3, #20]
                    break;
 80041ee:	e00e      	b.n	800420e <CO_SDOserver_process+0x5f6>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */
                default: {
                    /* unknown message received */
                    abortCode = CO_SDO_AB_CMD;
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <CO_SDOserver_process+0x5f0>)
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	751a      	strb	r2, [r3, #20]
                    break;
 80041fa:	e008      	b.n	800420e <CO_SDOserver_process+0x5f6>
 80041fc:	06070012 	.word	0x06070012
 8004200:	06070013 	.word	0x06070013
 8004204:	05030000 	.word	0x05030000
 8004208:	05040001 	.word	0x05040001
                                break;
 800420c:	bf00      	nop
                }
            } /* switch (SDO->state) */
        }     /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
        SDO->timeoutTimer = 0;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
        timeDifference_us = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	63da      	str	r2, [r3, #60]	; 0x3c
    else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
    if (ret == CO_SDO_RT_waitingResponse) {
 800421e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004222:	2b01      	cmp	r3, #1
 8004224:	d11e      	bne.n	8004264 <CO_SDOserver_process+0x64c>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422e:	429a      	cmp	r2, r3
 8004230:	d205      	bcs.n	800423e <CO_SDOserver_process+0x626>
            SDO->timeoutTimer += timeDifference_us;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	441a      	add	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	67da      	str	r2, [r3, #124]	; 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004246:	429a      	cmp	r2, r3
 8004248:	d304      	bcc.n	8004254 <CO_SDOserver_process+0x63c>
            abortCode = CO_SDO_AB_TIMEOUT;
 800424a:	4b9c      	ldr	r3, [pc, #624]	; (80044bc <CO_SDOserver_process+0x8a4>)
 800424c:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <CO_SDOserver_process+0x64c>
            ret = CO_SDO_RT_transmittBufferFull;
 800425e:	2304      	movs	r3, #4
 8004260:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8004264:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004268:	2b01      	cmp	r3, #1
 800426a:	f040 81ab 	bne.w	80045c4 <CO_SDOserver_process+0x9ac>
        /* clear response buffer */
        (void)memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	3305      	adds	r3, #5
 8004274:	2208      	movs	r2, #8
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f008 f8f9 	bl	800c470 <memset>

        switch (SDO->state) {
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	7d1b      	ldrb	r3, [r3, #20]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	3b12      	subs	r3, #18
 8004286:	2b12      	cmp	r3, #18
 8004288:	f200 8199 	bhi.w	80045be <CO_SDOserver_process+0x9a6>
 800428c:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <CO_SDOserver_process+0x67c>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	080042e1 	.word	0x080042e1
 8004298:	080045bf 	.word	0x080045bf
 800429c:	08004363 	.word	0x08004363
 80042a0:	080045bf 	.word	0x080045bf
 80042a4:	080045bf 	.word	0x080045bf
 80042a8:	080045bf 	.word	0x080045bf
 80042ac:	080045bf 	.word	0x080045bf
 80042b0:	080045bf 	.word	0x080045bf
 80042b4:	080045bf 	.word	0x080045bf
 80042b8:	080045bf 	.word	0x080045bf
 80042bc:	080045bf 	.word	0x080045bf
 80042c0:	080045bf 	.word	0x080045bf
 80042c4:	080045bf 	.word	0x080045bf
 80042c8:	080045bf 	.word	0x080045bf
 80042cc:	080045bf 	.word	0x080045bf
 80042d0:	080045bf 	.word	0x080045bf
 80042d4:	080043bf 	.word	0x080043bf
 80042d8:	080045bf 	.word	0x080045bf
 80042dc:	0800448d 	.word	0x0800448d
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                SDO->CANtxBuff->data[0] = 0x60;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2260      	movs	r2, #96	; 0x60
 80042e6:	715a      	strb	r2, [r3, #5]
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800430e:	721a      	strb	r2, [r3, #8]

                /* reset timeout timer and send message */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                SDO->timeoutTimer = 0;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f002 fec5 	bl	80070b0 <CO_CANsend>
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                if (SDO->finished) {
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432a:	2b00      	cmp	r3, #0
 800432c:	d006      	beq.n	800433c <CO_SDOserver_process+0x724>
                    SDO->state = CO_SDO_ST_IDLE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004334:	2300      	movs	r3, #0
 8004336:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                }
#else
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif
                break;
 800433a:	e143      	b.n	80045c4 <CO_SDOserver_process+0x9ac>
                    SDO->toggle = 0x00;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    SDO->sizeTran = 0;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	66da      	str	r2, [r3, #108]	; 0x6c
                    SDO->bufOffsetWr = 0;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                    SDO->bufOffsetRd = 0;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2213      	movs	r2, #19
 800435e:	751a      	strb	r2, [r3, #20]
                break;
 8004360:	e130      	b.n	80045c4 <CO_SDOserver_process+0x9ac>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                SDO->CANtxBuff->data[0] = 0x20U | SDO->toggle;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f042 0220 	orr.w	r2, r2, #32
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <CO_SDOserver_process+0x76a>
 800437e:	2210      	movs	r2, #16
 8004380:	e000      	b.n	8004384 <CO_SDOserver_process+0x76c>
 8004382:	2200      	movs	r2, #0
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                /* reset timeout timer and send message */
                SDO->timeoutTimer = 0;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	67da      	str	r2, [r3, #124]	; 0x7c
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f002 fe88 	bl	80070b0 <CO_CANsend>
                if (SDO->finished) {
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d006      	beq.n	80043b6 <CO_SDOserver_process+0x79e>
                    SDO->state = CO_SDO_ST_IDLE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 80043ae:	2300      	movs	r3, #0
 80043b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                } else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
                }
                break;
 80043b4:	e106      	b.n	80045c4 <CO_SDOserver_process+0x9ac>
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2213      	movs	r2, #19
 80043ba:	751a      	strb	r2, [r3, #20]
                break;
 80043bc:	e102      	b.n	80045c4 <CO_SDOserver_process+0x9ac>
#endif

            case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                /* data were already loaded from OD variable */
                if ((SDO->sizeInd > 0U) && (SDO->sizeInd <= 4U)) {
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d024      	beq.n	8004410 <CO_SDOserver_process+0x7f8>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d820      	bhi.n	8004410 <CO_SDOserver_process+0x7f8>
                    /* expedited transfer */
                    SDO->CANtxBuff->data[0] = (uint8_t)(0x43U | ((4U - SDO->sizeInd) << 2U));
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f1c3 0304 	rsb	r3, r3, #4
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&SDO->buf[0]), SDO->sizeInd);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f103 0009 	add.w	r0, r3, #9
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043fc:	461a      	mov	r2, r3
 80043fe:	f008 f8c1 	bl	800c584 <memcpy>
                    SDO->state = CO_SDO_ST_IDLE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004408:	2300      	movs	r3, #0
 800440a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800440e:	e020      	b.n	8004452 <CO_SDOserver_process+0x83a>
                } else {
                    /* data will be transferred with segmented transfer */
                    if (SDO->sizeInd > 0U) {
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00e      	beq.n	8004436 <CO_SDOserver_process+0x81e>
                        /* indicate data size, if known */
                        uint32_t sizeInd = SDO->sizeInd;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800441c:	63bb      	str	r3, [r7, #56]	; 0x38
                        uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	61bb      	str	r3, [r7, #24]
                        SDO->CANtxBuff->data[0] = 0x41;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2241      	movs	r2, #65	; 0x41
 8004428:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&sizeIndSw), sizeof(sizeIndSw));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	3309      	adds	r3, #9
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e003      	b.n	800443e <CO_SDOserver_process+0x826>
                    } else {
                        SDO->CANtxBuff->data[0] = 0x40;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2240      	movs	r2, #64	; 0x40
 800443c:	715a      	strb	r2, [r3, #5]
                    }
                    SDO->toggle = 0x00;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    SDO->timeoutTimer = 0;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	67da      	str	r2, [r3, #124]	; 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2223      	movs	r2, #35	; 0x23
 8004450:	751a      	strb	r2, [r3, #20]
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                /* send message */
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004462:	0a1b      	lsrs	r3, r3, #8
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8004478:	721a      	strb	r2, [r3, #8]
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4619      	mov	r1, r3
 8004484:	4610      	mov	r0, r2
 8004486:	f002 fe13 	bl	80070b0 <CO_CANsend>
                break;
 800448a:	e09b      	b.n	80045c4 <CO_SDOserver_process+0x9ac>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
                /* refill the data buffer if necessary */
                if (!readFromOd(SDO, &abortCode, 7, false)) {
 800448c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004490:	2300      	movs	r3, #0
 8004492:	2207      	movs	r2, #7
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff faf9 	bl	8003a8c <readFromOd>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8090 	beq.w	80045c2 <CO_SDOserver_process+0x9aa>
                    break;
                }

                /* SDO command specifier with toggle bit */
                SDO->CANtxBuff->data[0] = SDO->toggle;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 80044ac:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d103      	bne.n	80044c0 <CO_SDOserver_process+0x8a8>
 80044b8:	2210      	movs	r2, #16
 80044ba:	e002      	b.n	80044c2 <CO_SDOserver_process+0x8aa>
 80044bc:	05040000 	.word	0x05040000
 80044c0:	2200      	movs	r2, #0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	65bb      	str	r3, [r7, #88]	; 0x58
                /* verify, if this is the last segment */
                if ((count < 7U) || (SDO->finished && (count == 7U))) {
 80044d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044da:	2b06      	cmp	r3, #6
 80044dc:	d906      	bls.n	80044ec <CO_SDOserver_process+0x8d4>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01b      	beq.n	800451e <CO_SDOserver_process+0x906>
 80044e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044e8:	2b07      	cmp	r3, #7
 80044ea:	d118      	bne.n	800451e <CO_SDOserver_process+0x906>
                    /* indicate last segment and nnn */
                    SDO->CANtxBuff->data[0] |= (uint8_t)(((7U - count) << 1U) | 0x01U);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	795a      	ldrb	r2, [r3, #5]
 80044f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f1c3 0307 	rsb	r3, r3, #7
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	4313      	orrs	r3, r2
 8004502:	b2da      	uxtb	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	715a      	strb	r2, [r3, #5]
                    SDO->state = CO_SDO_ST_IDLE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004516:	2300      	movs	r3, #0
 8004518:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800451c:	e007      	b.n	800452e <CO_SDOserver_process+0x916>
                } else {
                    SDO->timeoutTimer = 0;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	67da      	str	r2, [r3, #124]	; 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2223      	movs	r2, #35	; 0x23
 8004528:	751a      	strb	r2, [r3, #20]
                    count = 7;
 800452a:	2307      	movs	r3, #7
 800452c:	65bb      	str	r3, [r7, #88]	; 0x58
                }

                /* copy data segment to CAN message */
                (void)memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd, count);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	1d98      	adds	r0, r3, #6
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004540:	4413      	add	r3, r2
 8004542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004544:	4619      	mov	r1, r3
 8004546:	f008 f81d 	bl	800c584 <memcpy>
                SDO->bufOffsetRd += count;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8004550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004552:	441a      	add	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->sizeTran += count;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800455e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004560:	441a      	add	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	66da      	str	r2, [r3, #108]	; 0x6c

                /* verify if sizeTran is too large or too short if last segment */
                if (SDO->sizeInd > 0U) {
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800456a:	2b00      	cmp	r3, #0
 800456c:	d01e      	beq.n	80045ac <CO_SDOserver_process+0x994>
                    if (SDO->sizeTran > SDO->sizeInd) {
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004576:	429a      	cmp	r2, r3
 8004578:	d905      	bls.n	8004586 <CO_SDOserver_process+0x96e>
                        abortCode = CO_SDO_AB_DATA_LONG;
 800457a:	4b30      	ldr	r3, [pc, #192]	; (800463c <CO_SDOserver_process+0xa24>)
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	751a      	strb	r2, [r3, #20]
                        break;
 8004584:	e01e      	b.n	80045c4 <CO_SDOserver_process+0x9ac>
                    } else if ((ret == CO_SDO_RT_ok_communicationEnd) && (SDO->sizeTran < SDO->sizeInd)) {
 8004586:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10e      	bne.n	80045ac <CO_SDOserver_process+0x994>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004596:	429a      	cmp	r2, r3
 8004598:	d208      	bcs.n	80045ac <CO_SDOserver_process+0x994>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 800459a:	4b29      	ldr	r3, [pc, #164]	; (8004640 <CO_SDOserver_process+0xa28>)
 800459c:	62fb      	str	r3, [r7, #44]	; 0x2c
                        ret = CO_SDO_RT_waitingResponse;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                        SDO->state = CO_SDO_ST_ABORT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	751a      	strb	r2, [r3, #20]
                        break;
 80045aa:	e00b      	b.n	80045c4 <CO_SDOserver_process+0x9ac>
                    } else { /* MISRA C 2004 14.10 */
                    }
                }

                /* send message */
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f002 fd7a 	bl	80070b0 <CO_CANsend>
                break;
 80045bc:	e002      	b.n	80045c4 <CO_SDOserver_process+0x9ac>
            case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2:
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
            case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
            default: {
                /* none */
                break;
 80045be:	bf00      	nop
 80045c0:	e000      	b.n	80045c4 <CO_SDOserver_process+0x9ac>
                    break;
 80045c2:	bf00      	nop
            }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 80045c4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d131      	bne.n	8004630 <CO_SDOserver_process+0xa18>
        if (SDO->state == CO_SDO_ST_ABORT) {
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	7d1b      	ldrb	r3, [r3, #20]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d12c      	bne.n	8004630 <CO_SDOserver_process+0xa18>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2280      	movs	r2, #128	; 0x80
 80045e0:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80045f2:	0a1b      	lsrs	r3, r3, #8
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8004608:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	3309      	adds	r3, #9
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f002 fd46 	bl	80070b0 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 800462a:	23f6      	movs	r3, #246	; 0xf6
 800462c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8004630:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8004634:	4618      	mov	r0, r3
 8004636:	376c      	adds	r7, #108	; 0x6c
 8004638:	46bd      	mov	sp, r7
 800463a:	bd90      	pop	{r4, r7, pc}
 800463c:	06070012 	.word	0x06070012
 8004640:	06070013 	.word	0x06070013

08004644 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004650:	73fb      	strb	r3, [r7, #15]
    return value;
 8004652:	7bfb      	ldrb	r3, [r7, #15]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr

0800465e <CO_getUint32>:
CO_getUint32(const void* buf) {
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 800466a:	60fb      	str	r3, [r7, #12]
    return value;
 800466c:	68fb      	ldr	r3, [r7, #12]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <OD_getIndex+0x14>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	e000      	b.n	800468e <OD_getIndex+0x16>
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80046a8:	2305      	movs	r3, #5
 80046aa:	e003      	b.n	80046b4 <OD_extension_init+0x1c>
    entry->extension = extension;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 80046be:	b580      	push	{r7, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af02      	add	r7, sp, #8
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	460b      	mov	r3, r1
 80046cc:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80046ce:	7af9      	ldrb	r1, [r7, #11]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	2301      	movs	r3, #1
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7fd f91d 	bl	8001918 <OD_get_value>
 80046de:	4603      	mov	r3, r0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	460b      	mov	r3, r1
 80046f6:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80046f8:	7af9      	ldrb	r1, [r7, #11]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	2304      	movs	r3, #4
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7fd f908 	bl	8001918 <OD_get_value>
 8004708:	4603      	mov	r3, r0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <CO_SYNCsend>:
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t
CO_SYNCsend(CO_SYNC_t* SYNC) {
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) {
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	7c9b      	ldrb	r3, [r3, #18]
 800471e:	3301      	adds	r3, #1
 8004720:	b2da      	uxtb	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	749a      	strb	r2, [r3, #18]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	7c9a      	ldrb	r2, [r3, #18]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	7c5b      	ldrb	r3, [r3, #17]
 800472e:	429a      	cmp	r2, r3
 8004730:	d902      	bls.n	8004738 <CO_SYNCsend+0x26>
        SYNC->counter = 1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	749a      	strb	r2, [r3, #18]
    }
    SYNC->timer = 0;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	7c92      	ldrb	r2, [r2, #18]
 800475a:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f002 fca2 	bl	80070b0 <CO_CANsend>
 800476c:	4603      	mov	r3, r0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SYNC_receive(void* object, void* msg) {
 8004776:	b480      	push	{r7}
 8004778:	b087      	sub	sp, #28
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
    CO_SYNC_t* SYNC = object;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	791b      	ldrb	r3, [r3, #4]
 8004788:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0U) {
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	7c5b      	ldrb	r3, [r3, #17]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10c      	bne.n	80047b0 <CO_SYNC_receive+0x3a>
        if (DLC == 0U) {
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d102      	bne.n	80047a2 <CO_SYNC_receive+0x2c>
            syncReceived = true;
 800479c:	2301      	movs	r3, #1
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	e019      	b.n	80047d6 <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x40U;
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	721a      	strb	r2, [r3, #8]
 80047ae:	e012      	b.n	80047d6 <CO_SYNC_receive+0x60>
        }
    } else {
        if (DLC == 1U) {
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d109      	bne.n	80047ca <CO_SYNC_receive+0x54>
            const uint8_t* data = CO_CANrxMsg_readData(msg);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	3305      	adds	r3, #5
 80047ba:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	781a      	ldrb	r2, [r3, #0]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 80047c4:	2301      	movs	r3, #1
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e005      	b.n	80047d6 <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x80U;
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00c      	beq.n	80047f6 <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2201      	movs	r2, #1
 80047f4:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr

08004800 <OD_write_1005>:
 * Custom function for writing OD object "COB-ID sync message"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1005(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8004800:	b590      	push	{r4, r7, lr}
 8004802:	b08f      	sub	sp, #60	; 0x3c
 8004804:	af04      	add	r7, sp, #16
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00c      	beq.n	800482e <OD_write_1005+0x2e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	7d1b      	ldrb	r3, [r3, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d108      	bne.n	800482e <OD_write_1005+0x2e>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <OD_write_1005+0x2e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d102      	bne.n	800482e <OD_write_1005+0x2e>
        || (countWritten == NULL)) {
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <OD_write_1005+0x32>
        return ODR_DEV_INCOMPAT;
 800482e:	2309      	movs	r3, #9
 8004830:	e0a2      	b.n	8004978 <OD_write_1005+0x178>
    }

    CO_SYNC_t* SYNC = stream->object;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8004838:	68b8      	ldr	r0, [r7, #8]
 800483a:	f7ff ff10 	bl	800465e <CO_getUint32>
 800483e:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004848:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    bool_t isProducer = (cobIdSync & 0x40000000U) != 0U;
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	61bb      	str	r3, [r7, #24]
    if (((cobIdSync & 0xBFFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 800485c:	6a3a      	ldr	r2, [r7, #32]
 800485e:	4b48      	ldr	r3, [pc, #288]	; (8004980 <OD_write_1005+0x180>)
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d133      	bne.n	80048ce <OD_write_1005+0xce>
 8004866:	8bfb      	ldrh	r3, [r7, #30]
 8004868:	2b7f      	cmp	r3, #127	; 0x7f
 800486a:	d930      	bls.n	80048ce <OD_write_1005+0xce>
 800486c:	8bfb      	ldrh	r3, [r7, #30]
 800486e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004872:	d903      	bls.n	800487c <OD_write_1005+0x7c>
 8004874:	8bfb      	ldrh	r3, [r7, #30]
 8004876:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800487a:	d928      	bls.n	80048ce <OD_write_1005+0xce>
 800487c:	8bfb      	ldrh	r3, [r7, #30]
 800487e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8004882:	d903      	bls.n	800488c <OD_write_1005+0x8c>
 8004884:	8bfb      	ldrh	r3, [r7, #30]
 8004886:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800488a:	d320      	bcc.n	80048ce <OD_write_1005+0xce>
 800488c:	8bfb      	ldrh	r3, [r7, #30]
 800488e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004892:	d903      	bls.n	800489c <OD_write_1005+0x9c>
 8004894:	8bfb      	ldrh	r3, [r7, #30]
 8004896:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800489a:	d318      	bcc.n	80048ce <OD_write_1005+0xce>
 800489c:	8bfb      	ldrh	r3, [r7, #30]
 800489e:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80048a2:	d303      	bcc.n	80048ac <OD_write_1005+0xac>
 80048a4:	8bfb      	ldrh	r3, [r7, #30]
 80048a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048aa:	d310      	bcc.n	80048ce <OD_write_1005+0xce>
 80048ac:	8bfb      	ldrh	r3, [r7, #30]
 80048ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048b2:	d80c      	bhi.n	80048ce <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && (CAN_ID != SYNC->CAN_ID))) {
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <OD_write_1005+0xd2>
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <OD_write_1005+0xd2>
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80048c8:	8bfa      	ldrh	r2, [r7, #30]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d001      	beq.n	80048d2 <OD_write_1005+0xd2>
        return ODR_INVALID_VALUE;
 80048ce:	230f      	movs	r3, #15
 80048d0:	e052      	b.n	8004978 <OD_write_1005+0x178>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80048d8:	8bfa      	ldrh	r2, [r7, #30]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d039      	beq.n	8004952 <OD_write_1005+0x152>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(SYNC->CANdevRx, SYNC->CANdevRxIdx, CAN_ID, 0x7FF, false,
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80048e6:	8bfa      	ldrh	r2, [r7, #30]
 80048e8:	4b26      	ldr	r3, [pc, #152]	; (8004984 <OD_write_1005+0x184>)
 80048ea:	9302      	str	r3, [sp, #8]
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	2300      	movs	r3, #0
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80048f8:	f002 fb04 	bl	8006f04 <CO_CANrxBufferInit>
 80048fc:	4603      	mov	r3, r0
 80048fe:	75fb      	strb	r3, [r7, #23]
                                                     (void*)SYNC, CO_SYNC_receive);

        if (CANret != CO_ERROR_NO) {
 8004900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8004908:	2309      	movs	r3, #9
 800490a:	e035      	b.n	8004978 <OD_write_1005+0x178>
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
                                             (SYNC->counterOverflowValue != 0U) ? 1U : 0U, false);
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <OD_write_1005+0x122>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <OD_write_1005+0x124>
 8004922:	2300      	movs	r3, #0
 8004924:	8bfa      	ldrh	r2, [r7, #30]
 8004926:	2400      	movs	r4, #0
 8004928:	9401      	str	r4, [sp, #4]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2300      	movs	r3, #0
 800492e:	f002 fb45 	bl	8006fbc <CO_CANtxBufferInit>
 8004932:	4602      	mov	r2, r0
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	62da      	str	r2, [r3, #44]	; 0x2c

        if (SYNC->CANtxBuff == NULL) {
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d104      	bne.n	800494a <OD_write_1005+0x14a>
            SYNC->isProducer = false;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	2200      	movs	r2, #0
 8004944:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 8004946:	2309      	movs	r3, #9
 8004948:	e016      	b.n	8004978 <OD_write_1005+0x178>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	8bfa      	ldrh	r2, [r7, #30]
 800494e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = isProducer;
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <OD_write_1005+0x16a>
        SYNC->counter = 0;
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	2200      	movs	r2, #0
 8004962:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	2200      	movs	r2, #0
 8004968:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7fc fddc 	bl	800152e <OD_writeOriginal>
 8004976:	4603      	mov	r3, r0
}
 8004978:	4618      	mov	r0, r3
 800497a:	372c      	adds	r7, #44	; 0x2c
 800497c:	46bd      	mov	sp, r7
 800497e:	bd90      	pop	{r4, r7, pc}
 8004980:	bffff800 	.word	0xbffff800
 8004984:	08004777 	.word	0x08004777

08004988 <OD_write_1019>:
 * Custom function for writing OD object "Synchronous counter overflow value"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1019(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b089      	sub	sp, #36	; 0x24
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint8_t))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00c      	beq.n	80049b6 <OD_write_1019+0x2e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	7d1b      	ldrb	r3, [r3, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d108      	bne.n	80049b6 <OD_write_1019+0x2e>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <OD_write_1019+0x2e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d102      	bne.n	80049b6 <OD_write_1019+0x2e>
        || (countWritten == NULL)) {
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <OD_write_1019+0x32>
        return ODR_DEV_INCOMPAT;
 80049b6:	2309      	movs	r3, #9
 80049b8:	e040      	b.n	8004a3c <OD_write_1019+0xb4>
    }

    CO_SYNC_t* SYNC = stream->object;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 80049c0:	68b8      	ldr	r0, [r7, #8]
 80049c2:	f7ff fe3f 	bl	8004644 <CO_getUint8>
 80049c6:	4603      	mov	r3, r0
 80049c8:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if ((syncCounterOvf == 1U) || (syncCounterOvf > 240U)) {
 80049ca:	7cfb      	ldrb	r3, [r7, #19]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d002      	beq.n	80049d6 <OD_write_1019+0x4e>
 80049d0:	7cfb      	ldrb	r3, [r7, #19]
 80049d2:	2bf0      	cmp	r3, #240	; 0xf0
 80049d4:	d901      	bls.n	80049da <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 80049d6:	230f      	movs	r3, #15
 80049d8:	e030      	b.n	8004a3c <OD_write_1019+0xb4>
    }
    if (*SYNC->OD_1006_period != 0U) {
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 80049e4:	2317      	movs	r3, #23
 80049e6:	e029      	b.n	8004a3c <OD_write_1019+0xb4>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, SYNC->CAN_ID, false,
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <OD_write_1019+0x7a>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <OD_write_1019+0x7c>
 8004a02:	2300      	movs	r3, #0
 8004a04:	2400      	movs	r4, #0
 8004a06:	9401      	str	r4, [sp, #4]
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f002 fad6 	bl	8006fbc <CO_CANtxBufferInit>
 8004a10:	4602      	mov	r2, r0
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	62da      	str	r2, [r3, #44]	; 0x2c
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);

    if (SYNC->CANtxBuff == NULL) {
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <OD_write_1019+0xa0>
        SYNC->isProducer = false;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2200      	movs	r2, #0
 8004a22:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 8004a24:	2309      	movs	r3, #9
 8004a26:	e009      	b.n	8004a3c <OD_write_1019+0xb4>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	7cfa      	ldrb	r2, [r7, #19]
 8004a2c:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7fc fd7a 	bl	800152e <OD_writeOriginal>
 8004a3a:	4603      	mov	r3, r0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd90      	pop	{r4, r7, pc}

08004a44 <CO_SYNC_init>:
             OD_entry_t* OD_1007_syncWindowLen, OD_entry_t* OD_1019_syncCounterOvf, CO_CANmodule_t* CANdevRx,
             uint16_t CANdevRxIdx,
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08c      	sub	sp, #48	; 0x30
 8004a48:	af04      	add	r7, sp, #16
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if ((SYNC == NULL) || (em == NULL) || (OD_1005_cobIdSync == NULL)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00e      	beq.n	8004a76 <CO_SYNC_init+0x32>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <CO_SYNC_init+0x32>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <CO_SYNC_init+0x32>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        || (OD_1006_commCyclePeriod == NULL) || (CANdevTx == NULL)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <CO_SYNC_init+0x32>
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <CO_SYNC_init+0x32>
#endif
        || (CANdevRx == NULL)) {
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d102      	bne.n	8004a7c <CO_SYNC_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004a76:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7a:	e0fd      	b.n	8004c78 <CO_SYNC_init+0x234>
    }

    /* clear object */
    (void)memset(SYNC, 0, sizeof(CO_SYNC_t));
 8004a7c:	225c      	movs	r2, #92	; 0x5c
 8004a7e:	2100      	movs	r1, #0
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f007 fcf5 	bl	800c470 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8004a86:	2380      	movs	r3, #128	; 0x80
 8004a88:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8004a8a:	f107 0218 	add.w	r2, r7, #24
 8004a8e:	2301      	movs	r3, #1
 8004a90:	2100      	movs	r1, #0
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fe28 	bl	80046e8 <OD_get_u32>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8004a9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00c      	beq.n	8004abe <CO_SYNC_init+0x7a>
        if (errInfo != NULL) {
 8004aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d006      	beq.n	8004ab8 <CO_SYNC_init+0x74>
            *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff fde4 	bl	8004678 <OD_getIndex>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab6:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004ab8:	f06f 030b 	mvn.w	r3, #11
 8004abc:	e0dc      	b.n	8004c78 <CO_SYNC_init+0x234>
    }
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->OD_1005_extension.object = SYNC;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a6e      	ldr	r2, [pc, #440]	; (8004c80 <CO_SYNC_init+0x23c>)
 8004ac8:	63da      	str	r2, [r3, #60]	; 0x3c
    SYNC->OD_1005_extension.write = OD_write_1005;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a6d      	ldr	r2, [pc, #436]	; (8004c84 <CO_SYNC_init+0x240>)
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40
    (void)OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3338      	adds	r3, #56	; 0x38
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff fdde 	bl	8004698 <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0, sizeof(uint32_t), NULL);
 8004adc:	2300      	movs	r3, #0
 8004ade:	2204      	movs	r2, #4
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	6838      	ldr	r0, [r7, #0]
 8004ae4:	f7fc ff92 	bl	8001a0c <OD_getPtr>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	61da      	str	r2, [r3, #28]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    if (SYNC->OD_1006_period == NULL) {
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10c      	bne.n	8004b10 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) {
 8004af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d006      	beq.n	8004b0a <CO_SYNC_init+0xc6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8004afc:	6838      	ldr	r0, [r7, #0]
 8004afe:	f7ff fdbb 	bl	8004678 <OD_getIndex>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b08:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004b0a:	f06f 030b 	mvn.w	r3, #11
 8004b0e:	e0b3      	b.n	8004c78 <CO_SYNC_init+0x234>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0, sizeof(uint32_t), NULL);
 8004b10:	2300      	movs	r3, #0
 8004b12:	2204      	movs	r2, #4
 8004b14:	2100      	movs	r1, #0
 8004b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b18:	f7fc ff78 	bl	8001a0c <OD_getPtr>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	621a      	str	r2, [r3, #32]
    if ((OD_1007_syncWindowLen != NULL) && (SYNC->OD_1007_window == NULL)) {
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d010      	beq.n	8004b4a <CO_SYNC_init+0x106>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10c      	bne.n	8004b4a <CO_SYNC_init+0x106>
        if (errInfo != NULL) {
 8004b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d006      	beq.n	8004b44 <CO_SYNC_init+0x100>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8004b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b38:	f7ff fd9e 	bl	8004678 <OD_getIndex>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	461a      	mov	r2, r3
 8004b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b42:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004b44:	f06f 030b 	mvn.w	r3, #11
 8004b48:	e096      	b.n	8004c78 <CO_SYNC_init+0x234>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and configure extension */
    uint8_t syncCounterOvf = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d033      	beq.n	8004bbc <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8004b54:	f107 0217 	add.w	r2, r7, #23
 8004b58:	2301      	movs	r3, #1
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b5e:	f7ff fdae 	bl	80046be <OD_get_u8>
 8004b62:	4603      	mov	r3, r0
 8004b64:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8004b66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <CO_SYNC_init+0x144>
            if (errInfo != NULL) {
 8004b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d006      	beq.n	8004b82 <CO_SYNC_init+0x13e>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8004b74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b76:	f7ff fd7f 	bl	8004678 <OD_getIndex>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b80:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8004b82:	f06f 030b 	mvn.w	r3, #11
 8004b86:	e077      	b.n	8004c78 <CO_SYNC_init+0x234>
        }
        if (syncCounterOvf == 1U) {
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d102      	bne.n	8004b94 <CO_SYNC_init+0x150>
            syncCounterOvf = 2;
 8004b8e:	2302      	movs	r3, #2
 8004b90:	75fb      	strb	r3, [r7, #23]
 8004b92:	e004      	b.n	8004b9e <CO_SYNC_init+0x15a>
        } else if (syncCounterOvf > 240U) {
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
 8004b96:	2bf0      	cmp	r3, #240	; 0xf0
 8004b98:	d901      	bls.n	8004b9e <CO_SYNC_init+0x15a>
            syncCounterOvf = 240;
 8004b9a:	23f0      	movs	r3, #240	; 0xf0
 8004b9c:	75fb      	strb	r3, [r7, #23]
        } else { /* MISRA C 2004 14.10 */
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->OD_1019_extension.object = SYNC;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	64da      	str	r2, [r3, #76]	; 0x4c
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4a36      	ldr	r2, [pc, #216]	; (8004c80 <CO_SYNC_init+0x23c>)
 8004ba8:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.write = OD_write_1019;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4a36      	ldr	r2, [pc, #216]	; (8004c88 <CO_SYNC_init+0x244>)
 8004bae:	655a      	str	r2, [r3, #84]	; 0x54
        (void)OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	334c      	adds	r3, #76	; 0x4c
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bb8:	f7ff fd6e 	bl	8004698 <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8004bbc:	7dfa      	ldrb	r2, [r7, #23]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = (cobIdSync & 0x40000000U) != 0U;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bf14      	ite	ne
 8004bd2:	2301      	movne	r3, #1
 8004bd4:	2300      	moveq	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24
    SYNC->CANdevTx = CANdevTx;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SYNC->CANdevRx = CANdevRx;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004bfe:	869a      	strh	r2, [r3, #52]	; 0x34
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004c04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
#endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, (uint16_t)(cobIdSync & 0x7FFU), 0x7FF, false,
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004c14:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <CO_SYNC_init+0x248>)
 8004c16:	9302      	str	r3, [sp, #8]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	9301      	str	r3, [sp, #4]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c26:	f002 f96d 	bl	8006f04 <CO_CANrxBufferInit>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	77bb      	strb	r3, [r7, #30]
                                              (void*)SYNC, CO_SYNC_receive);
    if (ret != CO_ERROR_NO) {
 8004c2e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <CO_SYNC_init+0x1f8>
        return ret;
 8004c36:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004c3a:	e01d      	b.n	8004c78 <CO_SYNC_init+0x234>
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c44:	b29a      	uxth	r2, r3
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <CO_SYNC_init+0x20c>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <CO_SYNC_init+0x20e>
 8004c50:	2300      	movs	r3, #0
 8004c52:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8004c54:	2000      	movs	r0, #0
 8004c56:	9001      	str	r0, [sp, #4]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c5e:	f002 f9ad 	bl	8006fbc <CO_CANtxBufferInit>
 8004c62:	4602      	mov	r2, r0
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	62da      	str	r2, [r3, #44]	; 0x2c

    if (SYNC->CANtxBuff == NULL) {
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d102      	bne.n	8004c76 <CO_SYNC_init+0x232>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004c70:	f04f 33ff 	mov.w	r3, #4294967295
 8004c74:	e000      	b.n	8004c78 <CO_SYNC_init+0x234>
    }
#endif

    return CO_ERROR_NO;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	0800147f 	.word	0x0800147f
 8004c84:	08004801 	.word	0x08004801
 8004c88:	08004989 	.word	0x08004989
 8004c8c:	08004777 	.word	0x08004777

08004c90 <CO_SYNC_process>:
    }
}
#endif

CO_SYNC_status_t
CO_SYNC_process(CO_SYNC_t* SYNC, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8088 	beq.w	8004dba <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) {
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d902      	bls.n	8004cc4 <CO_SYNC_process+0x34>
            SYNC->timer = timerNew;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	619a      	str	r2, [r3, #24]
        }

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = (SYNC->OD_1006_period != NULL) ? *SYNC->OD_1006_period : 0U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <CO_SYNC_process+0x5c>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	e000      	b.n	8004cee <CO_SYNC_process+0x5e>
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0U) {
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d031      	beq.n	8004d5a <CO_SYNC_process+0xca>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
            if (SYNC->isProducer) {
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d828      	bhi.n	8004d5a <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	77fb      	strb	r3, [r7, #31]
                    (void)CO_SYNCsend(SYNC);
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f7ff fd00 	bl	8004712 <CO_SYNCsend>
 8004d12:	e022      	b.n	8004d5a <CO_SYNC_process+0xca>
#endif
            } else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

                /* Verify timeout of SYNC */
                if (SYNC->timeoutError == 1U) {
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	7c1b      	ldrb	r3, [r3, #16]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d11e      	bne.n	8004d5a <CO_SYNC_process+0xca>
                    /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                    uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	085b      	lsrs	r3, r3, #1
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4413      	add	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
                    if (periodTimeout < OD_1006_period) {
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d202      	bcs.n	8004d34 <CO_SYNC_process+0xa4>
                        periodTimeout = 0xFFFFFFFFU;
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d32:	61bb      	str	r3, [r7, #24]
                    }

                    if (SYNC->timer > periodTimeout) {
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d20d      	bcs.n	8004d5a <CO_SYNC_process+0xca>
                        CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8004d4c:	2218      	movs	r2, #24
 8004d4e:	2101      	movs	r1, #1
 8004d50:	f7fb fd67 	bl	8000822 <CO_error>
                        SYNC->timeoutError = 2;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2202      	movs	r2, #2
 8004d58:	741a      	strb	r2, [r3, #16]
                } else { /* MISRA C 2004 14.10 */
                }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if ((SYNC->OD_1007_window != NULL) && (*SYNC->OD_1007_window > 0U) && (SYNC->timer > *SYNC->OD_1007_window)) {
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d015      	beq.n	8004d8e <CO_SYNC_process+0xfe>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d010      	beq.n	8004d8e <CO_SYNC_process+0xfe>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	699a      	ldr	r2, [r3, #24]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d909      	bls.n	8004d8e <CO_SYNC_process+0xfe>
            if (!SYNC->syncIsOutsideWindow) {
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8004d82:	2302      	movs	r3, #2
 8004d84:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	615a      	str	r2, [r3, #20]
 8004d8c:	e002      	b.n	8004d94 <CO_SYNC_process+0x104>
        } else {
            SYNC->syncIsOutsideWindow = false;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0U) {
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	7a1b      	ldrb	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01a      	beq.n	8004dd2 <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	7a1b      	ldrb	r3, [r3, #8]
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	f248 2340 	movw	r3, #33344	; 0x8240
 8004daa:	2219      	movs	r2, #25
 8004dac:	2101      	movs	r1, #1
 8004dae:	f7fb fd38 	bl	8000822 <CO_error>
            SYNC->receiveError = 0;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	721a      	strb	r2, [r3, #8]
 8004db8:	e00b      	b.n	8004dd2 <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 8004dd2:	7ffb      	ldrb	r3, [r7, #31]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d10f      	bne.n	8004df8 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2U) {
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	7c1b      	ldrb	r3, [r3, #16]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d108      	bne.n	8004df2 <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	2300      	movs	r3, #0
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	2300      	movs	r3, #0
 8004dea:	2218      	movs	r2, #24
 8004dec:	2100      	movs	r1, #0
 8004dee:	f7fb fd18 	bl	8000822 <CO_error>
        }
        SYNC->timeoutError = 1;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8004df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <CO_getUint16>:
CO_getUint16(const void* buf) {
 8004e02:	b480      	push	{r7}
 8004e04:	b085      	sub	sp, #20
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 8004e10:	81fb      	strh	r3, [r7, #14]
    return value;
 8004e12:	89fb      	ldrh	r3, [r7, #14]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr

08004e1e <CO_getUint32>:
CO_getUint32(const void* buf) {
 8004e1e:	b480      	push	{r7}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004e2a:	60fb      	str	r3, [r7, #12]
    return value;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr

08004e38 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <OD_getIndex+0x14>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	e000      	b.n	8004e4e <OD_getIndex+0x16>
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8004e68:	2305      	movs	r3, #5
 8004e6a:	e003      	b.n	8004e74 <OD_extension_init+0x1c>
    entry->extension = extension;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b086      	sub	sp, #24
 8004e82:	af02      	add	r7, sp, #8
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004e8e:	7af9      	ldrb	r1, [r7, #11]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	2304      	movs	r3, #4
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7fc fd3d 	bl	8001918 <OD_get_value>
 8004e9e:	4603      	mov	r3, r0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_TIME_receive(void* object, void* msg) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
    CO_TIME_t* TIME = object;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	791b      	ldrb	r3, [r3, #4]
 8004eba:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	3305      	adds	r3, #5
 8004ec0:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8004ec2:	7cfb      	ldrb	r3, [r7, #19]
 8004ec4:	2b06      	cmp	r3, #6
 8004ec6:	d108      	bne.n	8004eda <CO_TIME_receive+0x32>
        (void)memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2206      	movs	r2, #6
 8004ecc:	68f9      	ldr	r1, [r7, #12]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f007 fb58 	bl	800c584 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8004eda:	bf00      	nop
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <OD_write_1012>:
 * Custom function for writing OD object "COB-ID time stamp"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1012(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00c      	beq.n	8004f12 <OD_write_1012+0x2e>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	7d1b      	ldrb	r3, [r3, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d108      	bne.n	8004f12 <OD_write_1012+0x2e>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <OD_write_1012+0x2e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d102      	bne.n	8004f12 <OD_write_1012+0x2e>
        || (countWritten == NULL)) {
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <OD_write_1012+0x32>
        return ODR_DEV_INCOMPAT;
 8004f12:	2309      	movs	r3, #9
 8004f14:	e051      	b.n	8004fba <OD_write_1012+0xd6>
    }

    CO_TIME_t* TIME = stream->object;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8004f1c:	68b8      	ldr	r0, [r7, #8]
 8004f1e:	f7ff ff7e 	bl	8004e1e <CO_getUint32>
 8004f22:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f2c:	82fb      	strh	r3, [r7, #22]
    if (((cobIdTimeStamp & 0x3FFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <OD_write_1012+0xe0>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d126      	bne.n	8004f86 <OD_write_1012+0xa2>
 8004f38:	8afb      	ldrh	r3, [r7, #22]
 8004f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f3c:	d923      	bls.n	8004f86 <OD_write_1012+0xa2>
 8004f3e:	8afb      	ldrh	r3, [r7, #22]
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f44:	d903      	bls.n	8004f4e <OD_write_1012+0x6a>
 8004f46:	8afb      	ldrh	r3, [r7, #22]
 8004f48:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004f4c:	d91b      	bls.n	8004f86 <OD_write_1012+0xa2>
 8004f4e:	8afb      	ldrh	r3, [r7, #22]
 8004f50:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8004f54:	d903      	bls.n	8004f5e <OD_write_1012+0x7a>
 8004f56:	8afb      	ldrh	r3, [r7, #22]
 8004f58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f5c:	d313      	bcc.n	8004f86 <OD_write_1012+0xa2>
 8004f5e:	8afb      	ldrh	r3, [r7, #22]
 8004f60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f64:	d903      	bls.n	8004f6e <OD_write_1012+0x8a>
 8004f66:	8afb      	ldrh	r3, [r7, #22]
 8004f68:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004f6c:	d30b      	bcc.n	8004f86 <OD_write_1012+0xa2>
 8004f6e:	8afb      	ldrh	r3, [r7, #22]
 8004f70:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8004f74:	d303      	bcc.n	8004f7e <OD_write_1012+0x9a>
 8004f76:	8afb      	ldrh	r3, [r7, #22]
 8004f78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f7c:	d303      	bcc.n	8004f86 <OD_write_1012+0xa2>
 8004f7e:	8afb      	ldrh	r3, [r7, #22]
 8004f80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f84:	d901      	bls.n	8004f8a <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8004f86:	230f      	movs	r3, #15
 8004f88:	e017      	b.n	8004fba <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	0fdb      	lsrs	r3, r3, #31
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf14      	ite	ne
 8004fa0:	2301      	movne	r3, #1
 8004fa2:	2300      	moveq	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7fc fabb 	bl	800152e <OD_writeOriginal>
 8004fb8:	4603      	mov	r3, r0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	3ffff800 	.word	0x3ffff800

08004fc8 <CO_TIME_init>:
CO_ReturnError_t
CO_TIME_init(CO_TIME_t* TIME, OD_entry_t* OD_1012_cobIdTimeStamp, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08c      	sub	sp, #48	; 0x30
 8004fcc:	af04      	add	r7, sp, #16
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if ((TIME == NULL) || (OD_1012_cobIdTimeStamp == NULL) || (CANdevRx == NULL)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <CO_TIME_init+0x20>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <CO_TIME_init+0x20>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <CO_TIME_init+0x26>
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fec:	e061      	b.n	80050b2 <CO_TIME_init+0xea>
    }

    (void)memset(TIME, 0, sizeof(CO_TIME_t));
 8004fee:	222c      	movs	r2, #44	; 0x2c
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f007 fa3c 	bl	800c470 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8004ff8:	f107 0214 	add.w	r2, r7, #20
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	2100      	movs	r1, #0
 8005000:	68b8      	ldr	r0, [r7, #8]
 8005002:	f7ff ff3c 	bl	8004e7e <OD_get_u32>
 8005006:	4603      	mov	r3, r0
 8005008:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 800500a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00c      	beq.n	800502c <CO_TIME_init+0x64>
        if (errInfo != NULL) {
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	2b00      	cmp	r3, #0
 8005016:	d006      	beq.n	8005026 <CO_TIME_init+0x5e>
            *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8005018:	68b8      	ldr	r0, [r7, #8]
 800501a:	f7ff ff0d 	bl	8004e38 <OD_getIndex>
 800501e:	4603      	mov	r3, r0
 8005020:	461a      	mov	r2, r3
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8005026:	f06f 030b 	mvn.w	r3, #11
 800502a:	e042      	b.n	80050b2 <CO_TIME_init+0xea>
    }
#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    TIME->OD_1012_extension.object = TIME;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4a21      	ldr	r2, [pc, #132]	; (80050bc <CO_TIME_init+0xf4>)
 8005036:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4a21      	ldr	r2, [pc, #132]	; (80050c0 <CO_TIME_init+0xf8>)
 800503c:	625a      	str	r2, [r3, #36]	; 0x24
    (void)OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	331c      	adds	r3, #28
 8005042:	4619      	mov	r1, r3
 8005044:	68b8      	ldr	r0, [r7, #8]
 8005046:	f7ff ff07 	bl	8004e58 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	b29b      	uxth	r3, r3
 800504e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005052:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	0fdb      	lsrs	r3, r3, #31
 8005058:	b2db      	uxtb	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	bf14      	ite	ne
 800506a:	2301      	movne	r3, #1
 800506c:	2300      	moveq	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
    if (TIME->isConsumer) {
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d015      	beq.n	80050b0 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, cobId, 0x7FF, false, (void*)TIME,
 8005084:	8bba      	ldrh	r2, [r7, #28]
 8005086:	8879      	ldrh	r1, [r7, #2]
 8005088:	4b0e      	ldr	r3, [pc, #56]	; (80050c4 <CO_TIME_init+0xfc>)
 800508a:	9302      	str	r3, [sp, #8]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	2300      	movs	r3, #0
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f001 ff33 	bl	8006f04 <CO_CANrxBufferInit>
 800509e:	4603      	mov	r3, r0
 80050a0:	76fb      	strb	r3, [r7, #27]
                                                  CO_TIME_receive);
        if (ret != CO_ERROR_NO) {
 80050a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <CO_TIME_init+0xe8>
            return ret;
 80050aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80050ae:	e000      	b.n	80050b2 <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3720      	adds	r7, #32
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	0800147f 	.word	0x0800147f
 80050c0:	08004ee5 	.word	0x08004ee5
 80050c4:	08004ea9 	.word	0x08004ea9

080050c8 <CO_TIME_process>:
    }
}
#endif

bool_t
CO_TIME_process(CO_TIME_t* TIME, bool_t NMTisPreOrOperational, uint32_t timeDifference_us) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 80050d4:	2300      	movs	r3, #0
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d024      	beq.n	8005128 <CO_TIME_process+0x60>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d020      	beq.n	8005128 <CO_TIME_process+0x60>
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01f      	beq.n	800512e <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff fe94 	bl	8004e1e <CO_getUint32>
 80050f6:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff fe80 	bl	8004e02 <CO_getUint16>
 8005102:	4603      	mov	r3, r0
 8005104:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFFU;
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8bfa      	ldrh	r2, [r7, #30]
 8005114:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 800511c:	2301      	movs	r3, #1
 800511e:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	619a      	str	r2, [r3, #24]
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8005126:	e002      	b.n	800512e <CO_TIME_process+0x66>
        }
    } else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && (timeDifference_us > 0U)) {
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	d132      	bne.n	800519e <CO_TIME_process+0xd6>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d02f      	beq.n	800519e <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	89db      	ldrh	r3, [r3, #14]
 8005142:	461a      	mov	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4413      	add	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
        ms = us / 1000U;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <CO_TIME_process+0xe0>)
 800514e:	fba2 2303 	umull	r2, r3, r2, r3
 8005152:	099b      	lsrs	r3, r3, #6
 8005154:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = (uint16_t)(us % 1000U);
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <CO_TIME_process+0xe0>)
 800515a:	fba3 1302 	umull	r1, r3, r3, r2
 800515e:	099b      	lsrs	r3, r3, #6
 8005160:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005164:	fb01 f303 	mul.w	r3, r1, r3
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	441a      	add	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000U * 60U * 60U * 24U)) {
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <CO_TIME_process+0xe4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d90b      	bls.n	800519e <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000U * 60U * 60U * 24U);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <CO_TIME_process+0xe8>)
 800518c:	4413      	add	r3, r2
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	6093      	str	r3, [r2, #8]
            TIME->days += 1U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	899b      	ldrh	r3, [r3, #12]
 8005196:	3301      	adds	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	819a      	strh	r2, [r3, #12]
    } else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3728      	adds	r7, #40	; 0x28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	10624dd3 	.word	0x10624dd3
 80051ac:	05265bff 	.word	0x05265bff
 80051b0:	fad9a400 	.word	0xfad9a400

080051b4 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

CO_ReturnError_t
CO_LEDs_init(CO_LEDs_t* LEDs) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80051bc:	2300      	movs	r3, #0
 80051be:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d102      	bne.n	80051cc <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80051c6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ca:	e006      	b.n	80051da <CO_LEDs_init+0x26>
    }

    /* clear the object */
    (void)memset(LEDs, 0, sizeof(CO_LEDs_t));
 80051cc:	220c      	movs	r2, #12
 80051ce:	2100      	movs	r1, #0
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f007 f94d 	bl	800c470 <memset>

    return ret;
 80051d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <CO_LEDs_process>:
		bool_t ErrSync,
		bool_t ErrHbCons,
        bool_t ErrOther,
		bool_t firmwareDownload,
		uint32_t* timerNext_us)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	; 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 80051fc:	2300      	movs	r3, #0
 80051fe:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	441a      	add	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000U) {
 800520c:	e112      	b.n	8005434 <CO_LEDs_process+0x250>
        bool_t rdFlickerNext = (LEDs->LEDred & (uint8_t)CO_LED_flicker) == 0U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	7a5b      	ldrb	r3, [r3, #9]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	613b      	str	r3, [r7, #16]

        tick = true;
 8005222:	2301      	movs	r3, #1
 8005224:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 800522e:	3b50      	subs	r3, #80	; 0x50
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3U) {
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	791b      	ldrb	r3, [r3, #4]
 8005238:	3301      	adds	r3, #1
 800523a:	b2da      	uxtb	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	711a      	strb	r2, [r3, #4]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	791b      	ldrb	r3, [r3, #4]
 8005244:	2b03      	cmp	r3, #3
 8005246:	f240 80dd 	bls.w	8005404 <CO_LEDs_process+0x220>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	711a      	strb	r2, [r3, #4]
            rd = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	77fb      	strb	r3, [r7, #31]
            gr = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	77bb      	strb	r3, [r7, #30]

            if ((LEDs->LEDred & CO_LED_blink) == 0U) {
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	7a5b      	ldrb	r3, [r3, #9]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <CO_LEDs_process+0x8a>
                rd |= CO_LED_blink;
 8005264:	7ffb      	ldrb	r3, [r7, #31]
 8005266:	f043 0302 	orr.w	r3, r3, #2
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e003      	b.n	8005276 <CO_LEDs_process+0x92>
            } else {
                gr |= CO_LED_blink;
 800526e:	7fbb      	ldrb	r3, [r7, #30]
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	77bb      	strb	r3, [r7, #30]
            }


            switch (++LEDs->LEDtmrflash_1)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	795b      	ldrb	r3, [r3, #5]
 800527a:	3301      	adds	r3, #1
 800527c:	b2da      	uxtb	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	715a      	strb	r2, [r3, #5]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	795b      	ldrb	r3, [r3, #5]
 8005286:	2b06      	cmp	r3, #6
 8005288:	d010      	beq.n	80052ac <CO_LEDs_process+0xc8>
 800528a:	2b06      	cmp	r3, #6
 800528c:	dc12      	bgt.n	80052b4 <CO_LEDs_process+0xd0>
 800528e:	2b01      	cmp	r3, #1
 8005290:	d002      	beq.n	8005298 <CO_LEDs_process+0xb4>
 8005292:	2b02      	cmp	r3, #2
 8005294:	d005      	beq.n	80052a2 <CO_LEDs_process+0xbe>
            {
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: /* none */ break;
 8005296:	e00d      	b.n	80052b4 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 8005298:	7ffb      	ldrb	r3, [r7, #31]
 800529a:	f043 0304 	orr.w	r3, r3, #4
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e009      	b.n	80052b6 <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 80052a2:	7fbb      	ldrb	r3, [r7, #30]
 80052a4:	f043 0304 	orr.w	r3, r3, #4
 80052a8:	77bb      	strb	r3, [r7, #30]
 80052aa:	e004      	b.n	80052b6 <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	715a      	strb	r2, [r3, #5]
 80052b2:	e000      	b.n	80052b6 <CO_LEDs_process+0xd2>
                default: /* none */ break;
 80052b4:	bf00      	nop
            }


            switch (++LEDs->LEDtmrflash_2)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	799b      	ldrb	r3, [r3, #6]
 80052ba:	3301      	adds	r3, #1
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	719a      	strb	r2, [r3, #6]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	799b      	ldrb	r3, [r3, #6]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	2b07      	cmp	r3, #7
 80052ca:	d821      	bhi.n	8005310 <CO_LEDs_process+0x12c>
 80052cc:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <CO_LEDs_process+0xf0>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	080052f5 	.word	0x080052f5
 80052d8:	080052ff 	.word	0x080052ff
 80052dc:	080052f5 	.word	0x080052f5
 80052e0:	080052ff 	.word	0x080052ff
 80052e4:	08005311 	.word	0x08005311
 80052e8:	08005311 	.word	0x08005311
 80052ec:	08005311 	.word	0x08005311
 80052f0:	08005309 	.word	0x08005309
            {
                case 1:
                case 3: rd |= CO_LED_flash_2; break;
 80052f4:	7ffb      	ldrb	r3, [r7, #31]
 80052f6:	f043 0308 	orr.w	r3, r3, #8
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e009      	b.n	8005312 <CO_LEDs_process+0x12e>
                case 2:
                case 4: gr |= CO_LED_flash_2; break;
 80052fe:	7fbb      	ldrb	r3, [r7, #30]
 8005300:	f043 0308 	orr.w	r3, r3, #8
 8005304:	77bb      	strb	r3, [r7, #30]
 8005306:	e004      	b.n	8005312 <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	719a      	strb	r2, [r3, #6]
 800530e:	e000      	b.n	8005312 <CO_LEDs_process+0x12e>
                default: /* none */ break;
 8005310:	bf00      	nop
            }


            switch (++LEDs->LEDtmrflash_3)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	79db      	ldrb	r3, [r3, #7]
 8005316:	3301      	adds	r3, #1
 8005318:	b2da      	uxtb	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	71da      	strb	r2, [r3, #7]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	79db      	ldrb	r3, [r3, #7]
 8005322:	2b0a      	cmp	r3, #10
 8005324:	bf8c      	ite	hi
 8005326:	2201      	movhi	r2, #1
 8005328:	2200      	movls	r2, #0
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	2a00      	cmp	r2, #0
 800532e:	d12c      	bne.n	800538a <CO_LEDs_process+0x1a6>
 8005330:	2201      	movs	r2, #1
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	f003 0254 	and.w	r2, r3, #84	; 0x54
 800533a:	2a00      	cmp	r2, #0
 800533c:	bf14      	ite	ne
 800533e:	2201      	movne	r2, #1
 8005340:	2200      	moveq	r2, #0
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	2a00      	cmp	r2, #0
 8005346:	d117      	bne.n	8005378 <CO_LEDs_process+0x194>
 8005348:	f003 022a 	and.w	r2, r3, #42	; 0x2a
 800534c:	2a00      	cmp	r2, #0
 800534e:	bf14      	ite	ne
 8005350:	2201      	movne	r2, #1
 8005352:	2200      	moveq	r2, #0
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	2a00      	cmp	r2, #0
 8005358:	d109      	bne.n	800536e <CO_LEDs_process+0x18a>
 800535a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535e:	2b00      	cmp	r3, #0
 8005360:	bf14      	ite	ne
 8005362:	2301      	movne	r3, #1
 8005364:	2300      	moveq	r3, #0
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <CO_LEDs_process+0x19e>
                case 5: rd |= CO_LED_flash_3; break;
                case 2:
                case 4:
                case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: /* none */ break;
 800536c:	e00d      	b.n	800538a <CO_LEDs_process+0x1a6>
                case 5: rd |= CO_LED_flash_3; break;
 800536e:	7ffb      	ldrb	r3, [r7, #31]
 8005370:	f043 0310 	orr.w	r3, r3, #16
 8005374:	77fb      	strb	r3, [r7, #31]
 8005376:	e009      	b.n	800538c <CO_LEDs_process+0x1a8>
                case 6: gr |= CO_LED_flash_3; break;
 8005378:	7fbb      	ldrb	r3, [r7, #30]
 800537a:	f043 0310 	orr.w	r3, r3, #16
 800537e:	77bb      	strb	r3, [r7, #30]
 8005380:	e004      	b.n	800538c <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	71da      	strb	r2, [r3, #7]
 8005388:	e000      	b.n	800538c <CO_LEDs_process+0x1a8>
                default: /* none */ break;
 800538a:	bf00      	nop
            }


            switch (++LEDs->LEDtmrflash_4)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	7a1b      	ldrb	r3, [r3, #8]
 8005390:	3301      	adds	r3, #1
 8005392:	b2da      	uxtb	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	721a      	strb	r2, [r3, #8]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	7a1b      	ldrb	r3, [r3, #8]
 800539c:	2b0c      	cmp	r3, #12
 800539e:	bf8c      	ite	hi
 80053a0:	2201      	movhi	r2, #1
 80053a2:	2200      	movls	r2, #0
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	d137      	bne.n	800541a <CO_LEDs_process+0x236>
 80053aa:	2201      	movs	r2, #1
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	f403 72aa 	and.w	r2, r3, #340	; 0x154
 80053b4:	2a00      	cmp	r2, #0
 80053b6:	bf14      	ite	ne
 80053b8:	2201      	movne	r2, #1
 80053ba:	2200      	moveq	r2, #0
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	2a00      	cmp	r2, #0
 80053c0:	d117      	bne.n	80053f2 <CO_LEDs_process+0x20e>
 80053c2:	f003 02aa 	and.w	r2, r3, #170	; 0xaa
 80053c6:	2a00      	cmp	r2, #0
 80053c8:	bf14      	ite	ne
 80053ca:	2201      	movne	r2, #1
 80053cc:	2200      	moveq	r2, #0
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	2a00      	cmp	r2, #0
 80053d2:	d109      	bne.n	80053e8 <CO_LEDs_process+0x204>
 80053d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	bf14      	ite	ne
 80053dc:	2301      	movne	r3, #1
 80053de:	2300      	moveq	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10a      	bne.n	80053fc <CO_LEDs_process+0x218>
                case 2:
                case 4:
                case 6:
                case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: /* none */ break;
 80053e6:	e018      	b.n	800541a <CO_LEDs_process+0x236>
                case 7: rd |= CO_LED_flash_4; break;
 80053e8:	7ffb      	ldrb	r3, [r7, #31]
 80053ea:	f043 0320 	orr.w	r3, r3, #32
 80053ee:	77fb      	strb	r3, [r7, #31]
 80053f0:	e014      	b.n	800541c <CO_LEDs_process+0x238>
                case 8: gr |= CO_LED_flash_4; break;
 80053f2:	7fbb      	ldrb	r3, [r7, #30]
 80053f4:	f043 0320 	orr.w	r3, r3, #32
 80053f8:	77bb      	strb	r3, [r7, #30]
 80053fa:	e00f      	b.n	800541c <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	721a      	strb	r2, [r3, #8]
 8005402:	e00b      	b.n	800541c <CO_LEDs_process+0x238>
            }


        } else 	{
            	/* clear flicker and CANopen bits, keep others */
            	rd = LEDs->LEDred   & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	7a5b      	ldrb	r3, [r3, #9]
 8005408:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800540c:	77fb      	strb	r3, [r7, #31]
            	gr = LEDs->LEDgreen & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	7a9b      	ldrb	r3, [r3, #10]
 8005412:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005416:	77bb      	strb	r3, [r7, #30]
 8005418:	e000      	b.n	800541c <CO_LEDs_process+0x238>
                default: /* none */ break;
 800541a:	bf00      	nop
        		}

        /* calculate 10Hz flickering */
        if (rdFlickerNext) 	{
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d004      	beq.n	800542c <CO_LEDs_process+0x248>
            				rd |= CO_LED_flicker;
 8005422:	7ffb      	ldrb	r3, [r7, #31]
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	77fb      	strb	r3, [r7, #31]
 800542a:	e003      	b.n	8005434 <CO_LEDs_process+0x250>
							} else 	{
									gr |= CO_LED_flicker;
 800542c:	7fbb      	ldrb	r3, [r7, #30]
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800543c:	4293      	cmp	r3, r2
 800543e:	f63f aee6 	bhi.w	800520e <CO_LEDs_process+0x2a>
									}

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d077      	beq.n	8005538 <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if (ErrCANbusOff) {
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <CO_LEDs_process+0x270>
            rd_co = 1;
 800544e:	2301      	movs	r3, #1
 8005450:	75fb      	strb	r3, [r7, #23]
 8005452:	e032      	b.n	80054ba <CO_LEDs_process+0x2d6>
        } else if (NMTstate == CO_NMT_INITIALIZING) {
 8005454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d104      	bne.n	8005466 <CO_LEDs_process+0x282>
            rd_co = rd & CO_LED_flicker;
 800545c:	7ffb      	ldrb	r3, [r7, #31]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
 8005464:	e029      	b.n	80054ba <CO_LEDs_process+0x2d6>
        } else if (ErrRpdo) {
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	2b00      	cmp	r3, #0
 800546a:	d004      	beq.n	8005476 <CO_LEDs_process+0x292>
            rd_co = rd & CO_LED_flash_4;
 800546c:	7ffb      	ldrb	r3, [r7, #31]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	75fb      	strb	r3, [r7, #23]
 8005474:	e021      	b.n	80054ba <CO_LEDs_process+0x2d6>
        } else if (ErrSync) {
 8005476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <CO_LEDs_process+0x2a2>
            rd_co = rd & CO_LED_flash_3;
 800547c:	7ffb      	ldrb	r3, [r7, #31]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	75fb      	strb	r3, [r7, #23]
 8005484:	e019      	b.n	80054ba <CO_LEDs_process+0x2d6>
        } else if (ErrHbCons) {
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <CO_LEDs_process+0x2b2>
            rd_co = rd & CO_LED_flash_2;
 800548c:	7ffb      	ldrb	r3, [r7, #31]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	75fb      	strb	r3, [r7, #23]
 8005494:	e011      	b.n	80054ba <CO_LEDs_process+0x2d6>
        } else if (ErrCANbusWarn) {
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <CO_LEDs_process+0x2c2>
            rd_co = rd & CO_LED_flash_1;
 800549c:	7ffb      	ldrb	r3, [r7, #31]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	75fb      	strb	r3, [r7, #23]
 80054a4:	e009      	b.n	80054ba <CO_LEDs_process+0x2d6>
        } else if (ErrOther) {
 80054a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d004      	beq.n	80054b6 <CO_LEDs_process+0x2d2>
            rd_co = rd & CO_LED_blink;
 80054ac:	7ffb      	ldrb	r3, [r7, #31]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	75fb      	strb	r3, [r7, #23]
 80054b4:	e001      	b.n	80054ba <CO_LEDs_process+0x2d6>
        } else {
            rd_co = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	75fb      	strb	r3, [r7, #23]
        }

        /* CANopen green RUN LED */
        if (LSSconfig) {
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <CO_LEDs_process+0x2e6>
            gr_co = gr & CO_LED_flicker;
 80054c0:	7fbb      	ldrb	r3, [r7, #30]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	75bb      	strb	r3, [r7, #22]
 80054c8:	e022      	b.n	8005510 <CO_LEDs_process+0x32c>
        } else if (firmwareDownload) {
 80054ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <CO_LEDs_process+0x2f6>
            gr_co = gr & CO_LED_flash_3;
 80054d0:	7fbb      	ldrb	r3, [r7, #30]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	75bb      	strb	r3, [r7, #22]
 80054d8:	e01a      	b.n	8005510 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_STOPPED) {
 80054da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d104      	bne.n	80054ec <CO_LEDs_process+0x308>
            gr_co = gr & CO_LED_flash_1;
 80054e2:	7fbb      	ldrb	r3, [r7, #30]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	75bb      	strb	r3, [r7, #22]
 80054ea:	e011      	b.n	8005510 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_PRE_OPERATIONAL) {
 80054ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f0:	2b7f      	cmp	r3, #127	; 0x7f
 80054f2:	d104      	bne.n	80054fe <CO_LEDs_process+0x31a>
            gr_co = gr & CO_LED_blink;
 80054f4:	7fbb      	ldrb	r3, [r7, #30]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	75bb      	strb	r3, [r7, #22]
 80054fc:	e008      	b.n	8005510 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_OPERATIONAL) {
 80054fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005502:	2b05      	cmp	r3, #5
 8005504:	d102      	bne.n	800550c <CO_LEDs_process+0x328>
            gr_co = 1;
 8005506:	2301      	movs	r3, #1
 8005508:	75bb      	strb	r3, [r7, #22]
 800550a:	e001      	b.n	8005510 <CO_LEDs_process+0x32c>
        } else {
            gr_co = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	75bb      	strb	r3, [r7, #22]
        }

        if (rd_co != 0U) {
 8005510:	7dfb      	ldrb	r3, [r7, #23]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <CO_LEDs_process+0x33a>
            rd |= CO_LED_CANopen;
 8005516:	7ffb      	ldrb	r3, [r7, #31]
 8005518:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800551c:	77fb      	strb	r3, [r7, #31]
        }
        if (gr_co != 0U) {
 800551e:	7dbb      	ldrb	r3, [r7, #22]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <CO_LEDs_process+0x348>
            gr |= CO_LED_CANopen;
 8005524:	7fbb      	ldrb	r3, [r7, #30]
 8005526:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800552a:	77bb      	strb	r3, [r7, #30]
        }
        LEDs->LEDred = rd;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	7ffa      	ldrb	r2, [r7, #31]
 8005530:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	7fba      	ldrb	r2, [r7, #30]
 8005536:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8005538:	bf00      	nop
 800553a:	3724      	adds	r7, #36	; 0x24
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop

08005544 <CO_LSSslave_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSslave_receive(void* object, void* msg) {
 8005544:	b580      	push	{r7, lr}
 8005546:	b090      	sub	sp, #64	; 0x40
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t* LSSslave = (CO_LSSslave_t*)object;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	791b      	ldrb	r3, [r3, #4]
 8005556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if ((DLC == 8U) && !CO_FLAG_READ(LSSslave->sendResponse)) {
 800555a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800555e:	2b08      	cmp	r3, #8
 8005560:	f040 814f 	bne.w	8005802 <CO_LSSslave_receive+0x2be>
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005568:	2b00      	cmp	r3, #0
 800556a:	f040 814a 	bne.w	8005802 <CO_LSSslave_receive+0x2be>
        bool_t request_LSSslave_process = false;
 800556e:	2300      	movs	r3, #0
 8005570:	63fb      	str	r3, [r7, #60]	; 0x3c
        const uint8_t* data = CO_CANrxMsg_readData(msg);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	3305      	adds	r3, #5
 8005576:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t cs = data[0];
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8005580:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005584:	2b04      	cmp	r3, #4
 8005586:	d12d      	bne.n	80055e4 <CO_LSSslave_receive+0xa0>
            uint8_t mode = data[1];
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	3301      	adds	r3, #1
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8005590:	7ffb      	ldrb	r3, [r7, #31]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <CO_LSSslave_receive+0x58>
 8005596:	2b01      	cmp	r3, #1
 8005598:	d020      	beq.n	80055dc <CO_LSSslave_receive+0x98>
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
                    break;
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
                default:
                    /* none */
                    break;
 800559a:	e12c      	b.n	80057f6 <CO_LSSslave_receive+0x2b2>
                    if ((LSSslave->lssState == CO_LSS_STATE_CONFIGURATION)
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	7c1b      	ldrb	r3, [r3, #16]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d110      	bne.n	80055c6 <CO_LSSslave_receive+0x82>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 80055a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055aa:	2bff      	cmp	r3, #255	; 0xff
 80055ac:	d10b      	bne.n	80055c6 <CO_LSSslave_receive+0x82>
                        && (*LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)) {
 80055ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2bff      	cmp	r3, #255	; 0xff
 80055b6:	d006      	beq.n	80055c6 <CO_LSSslave_receive+0x82>
                        LSSslave->service = cs;
 80055b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ba:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80055be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 80055c2:	2301      	movs	r3, #1
 80055c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 80055c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c8:	2200      	movs	r2, #0
 80055ca:	741a      	strb	r2, [r3, #16]
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
 80055cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ce:	3314      	adds	r3, #20
 80055d0:	2210      	movs	r2, #16
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f006 ff4b 	bl	800c470 <memset>
                    break;
 80055da:	e10c      	b.n	80057f6 <CO_LSSslave_receive+0x2b2>
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
 80055dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055de:	2201      	movs	r2, #1
 80055e0:	741a      	strb	r2, [r3, #16]
 80055e2:	e108      	b.n	80057f6 <CO_LSSslave_receive+0x2b2>
            }
        } else if (LSSslave->lssState == CO_LSS_STATE_WAITING) {
 80055e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e6:	7c1b      	ldrb	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f040 80f0 	bne.w	80057ce <CO_LSSslave_receive+0x28a>
            switch (cs) {
 80055ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055f2:	3b40      	subs	r3, #64	; 0x40
 80055f4:	2b11      	cmp	r3, #17
 80055f6:	f200 80f9 	bhi.w	80057ec <CO_LSSslave_receive+0x2a8>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <CO_LSSslave_receive+0xbc>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005649 	.word	0x08005649
 8005604:	08005659 	.word	0x08005659
 8005608:	08005669 	.word	0x08005669
 800560c:	08005679 	.word	0x08005679
 8005610:	080057ed 	.word	0x080057ed
 8005614:	080057ed 	.word	0x080057ed
 8005618:	080057ed 	.word	0x080057ed
 800561c:	080057ed 	.word	0x080057ed
 8005620:	080057ed 	.word	0x080057ed
 8005624:	080057ed 	.word	0x080057ed
 8005628:	080057ed 	.word	0x080057ed
 800562c:	080057ed 	.word	0x080057ed
 8005630:	080057ed 	.word	0x080057ed
 8005634:	080057ed 	.word	0x080057ed
 8005638:	080057ed 	.word	0x080057ed
 800563c:	080057ed 	.word	0x080057ed
 8005640:	080057ed 	.word	0x080057ed
 8005644:	080056d5 	.word	0x080056d5
                case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564a:	3301      	adds	r3, #1
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	61bb      	str	r3, [r7, #24]
                    LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005654:	615a      	str	r2, [r3, #20]
                    break;
 8005656:	e0ce      	b.n	80057f6 <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565a:	3301      	adds	r3, #1
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	617b      	str	r3, [r7, #20]
                    LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	619a      	str	r2, [r3, #24]
                    break;
 8005666:	e0c6      	b.n	80057f6 <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_REV: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	3301      	adds	r3, #1
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	613b      	str	r3, [r7, #16]
                    LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	61da      	str	r2, [r3, #28]
                    break;
 8005676:	e0be      	b.n	80057f6 <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567a:	3301      	adds	r3, #1
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60fb      	str	r3, [r7, #12]
                    LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	621a      	str	r2, [r3, #32]

                    if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress, LSSslave->lssSelect)) {
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	429a      	cmp	r2, r3
 8005690:	f040 80ae 	bne.w	80057f0 <CO_LSSslave_receive+0x2ac>
 8005694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	429a      	cmp	r2, r3
 800569e:	f040 80a7 	bne.w	80057f0 <CO_LSSslave_receive+0x2ac>
 80056a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	f040 80a0 	bne.w	80057f0 <CO_LSSslave_receive+0x2ac>
 80056b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	f040 8099 	bne.w	80057f0 <CO_LSSslave_receive+0x2ac>
                        LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80056be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c0:	2201      	movs	r2, #1
 80056c2:	741a      	strb	r2, [r3, #16]
                        LSSslave->service = cs;
 80056c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80056ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 80056ce:	2301      	movs	r3, #1
 80056d0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    break;
 80056d2:	e08d      	b.n	80057f0 <CO_LSSslave_receive+0x2ac>
                }
                case CO_LSS_IDENT_FASTSCAN: {
                    /* fastscan is only active on unconfigured nodes */
                    if ((*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 80056d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2bff      	cmp	r3, #255	; 0xff
 80056dc:	f040 808a 	bne.w	80057f4 <CO_LSSslave_receive+0x2b0>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)) {
 80056e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056e6:	2bff      	cmp	r3, #255	; 0xff
 80056e8:	f040 8084 	bne.w	80057f4 <CO_LSSslave_receive+0x2b0>
                        uint8_t bitCheck = data[5];
 80056ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ee:	3305      	adds	r3, #5
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                        uint8_t lssSub = data[6];
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	3306      	adds	r3, #6
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                        uint8_t lssNext = data[7];
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	3307      	adds	r3, #7
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                        uint32_t valSw;
                        uint32_t idNumber;
                        bool_t ack;

                        if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub)
 800570a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800570e:	2b1f      	cmp	r3, #31
 8005710:	d903      	bls.n	800571a <CO_LSSslave_receive+0x1d6>
 8005712:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005716:	2b80      	cmp	r3, #128	; 0x80
 8005718:	d16d      	bne.n	80057f6 <CO_LSSslave_receive+0x2b2>
 800571a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800571e:	2b03      	cmp	r3, #3
 8005720:	d869      	bhi.n	80057f6 <CO_LSSslave_receive+0x2b2>
                            || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
 8005722:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005726:	2b03      	cmp	r3, #3
 8005728:	d865      	bhi.n	80057f6 <CO_LSSslave_receive+0x2b2>
                            /* Invalid request */
                            break;
                        }

                        (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	3301      	adds	r3, #1
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60bb      	str	r3, [r7, #8]
                        idNumber = CO_SWAP_32(valSw);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
                        ack = false;
 8005736:	2300      	movs	r3, #0
 8005738:	63bb      	str	r3, [r7, #56]	; 0x38

                        if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 800573a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800573e:	2b80      	cmp	r3, #128	; 0x80
 8005740:	d10d      	bne.n	800575e <CO_LSSslave_receive+0x21a>
                            /* Confirm, Reset */
                            ack = true;
 8005742:	2301      	movs	r3, #1
 8005744:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                            (void)memset(&LSSslave->lssFastscan, 0, sizeof(LSSslave->lssFastscan));
 800574e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005750:	3324      	adds	r3, #36	; 0x24
 8005752:	2210      	movs	r2, #16
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f006 fe8a 	bl	800c470 <memset>
 800575c:	e02c      	b.n	80057b8 <CO_LSSslave_receive+0x274>
                        } else if (LSSslave->fastscanPos == lssSub) {
 800575e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005760:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005764:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005768:	429a      	cmp	r2, r3
 800576a:	d125      	bne.n	80057b8 <CO_LSSslave_receive+0x274>
                            uint32_t mask = 0xFFFFFFFFU << bitCheck;
 800576c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005770:	f04f 32ff 	mov.w	r2, #4294967295
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	623b      	str	r3, [r7, #32]

                            if ((LSSslave->lssAddress.addr[lssSub] & mask) == (idNumber & mask)) {
 800577a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	405a      	eors	r2, r3
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	4013      	ands	r3, r2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d113      	bne.n	80057b8 <CO_LSSslave_receive+0x274>
                                /* all requested bits match */
                                ack = true;
 8005790:	2301      	movs	r3, #1
 8005792:	63bb      	str	r3, [r7, #56]	; 0x38
                                LSSslave->fastscanPos = lssNext;
 8005794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005796:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800579a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                                if ((bitCheck == 0U) && (lssNext < lssSub)) {
 800579e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d108      	bne.n	80057b8 <CO_LSSslave_receive+0x274>
 80057a6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80057aa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d202      	bcs.n	80057b8 <CO_LSSslave_receive+0x274>
                                    /* complete match, enter configuration state */
                                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	2201      	movs	r2, #1
 80057b6:	741a      	strb	r2, [r3, #16]
                                }
                            }
                        } else { /* MISRA C 2004 14.10 */
                        }
                        if (ack) {
 80057b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d01a      	beq.n	80057f4 <CO_LSSslave_receive+0x2b0>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE_FASTSCAN_DIRECT_RESPOND) != 0
                            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                            (void)memset(&LSSslave->TXbuff->data[1], 0, sizeof(LSSslave->TXbuff->data) - 1U);
                            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                            LSSslave->service = cs;
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80057c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                            request_LSSslave_process = true;
 80057c8:	2301      	movs	r3, #1
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                        }
                    }
                    break;
 80057cc:	e012      	b.n	80057f4 <CO_LSSslave_receive+0x2b0>
                    /* none */
                    break;
                }
            }
        } else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            (void)memcpy((void*)(&LSSslave->CANdata[0]), (const void*)(&data[0]), sizeof(LSSslave->CANdata));
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	3349      	adds	r3, #73	; 0x49
 80057d2:	2208      	movs	r2, #8
 80057d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057d6:	4618      	mov	r0, r3
 80057d8:	f006 fed4 	bl	800c584 <memcpy>
            LSSslave->service = cs;
 80057dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057de:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80057e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 80057e6:	2301      	movs	r3, #1
 80057e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ea:	e004      	b.n	80057f6 <CO_LSSslave_receive+0x2b2>
                    break;
 80057ec:	bf00      	nop
 80057ee:	e002      	b.n	80057f6 <CO_LSSslave_receive+0x2b2>
                    break;
 80057f0:	bf00      	nop
 80057f2:	e000      	b.n	80057f6 <CO_LSSslave_receive+0x2b2>
                    break;
 80057f4:	bf00      	nop
        }

        if (request_LSSslave_process) {
 80057f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <CO_LSSslave_receive+0x2be>
            CO_FLAG_SET(LSSslave->sendResponse);
 80057fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fe:	2201      	movs	r2, #1
 8005800:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8005802:	bf00      	nop
 8005804:	3740      	adds	r7, #64	; 0x40
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop

0800580c <CO_LSSslave_init>:

CO_ReturnError_t
CO_LSSslave_init(CO_LSSslave_t* LSSslave, CO_LSS_address_t* lssAddress, uint16_t* pendingBitRate,
                 uint8_t* pendingNodeID, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANidLssMaster,
                 CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssSlave) {
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af04      	add	r7, sp, #16
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800581a:	2300      	movs	r3, #0
 800581c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((LSSslave == NULL) || (pendingBitRate == NULL) || (pendingNodeID == NULL) || (CANdevRx == NULL)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d018      	beq.n	8005856 <CO_LSSslave_init+0x4a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d015      	beq.n	8005856 <CO_LSSslave_init+0x4a>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d012      	beq.n	8005856 <CO_LSSslave_init+0x4a>
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00f      	beq.n	8005856 <CO_LSSslave_init+0x4a>
        || (CANdevTx == NULL) || !CO_LSS_NODE_ID_VALID(*pendingNodeID)) {
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00c      	beq.n	8005856 <CO_LSSslave_init+0x4a>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <CO_LSSslave_init+0x42>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	b25b      	sxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	da06      	bge.n	800585c <CO_LSSslave_init+0x50>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2bff      	cmp	r3, #255	; 0xff
 8005854:	d002      	beq.n	800585c <CO_LSSslave_init+0x50>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005856:	f04f 33ff 	mov.w	r3, #4294967295
 800585a:	e046      	b.n	80058ea <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    (void)memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 800585c:	2274      	movs	r2, #116	; 0x74
 800585e:	2100      	movs	r1, #0
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f006 fe05 	bl	800c470 <memset>

    /* Configure object variables */
    (void)memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2210      	movs	r2, #16
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	4618      	mov	r0, r3
 800586e:	f006 fe89 	bl	800c584 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781a      	ldrb	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssMaster, 0x7FF, false, (void*)LSSslave, CO_LSSslave_receive);
 800589c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800589e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80058a0:	4b14      	ldr	r3, [pc, #80]	; (80058f4 <CO_LSSslave_init+0xe8>)
 80058a2:	9302      	str	r3, [sp, #8]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	2300      	movs	r3, #0
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80058b0:	6a38      	ldr	r0, [r7, #32]
 80058b2:	f001 fb27 	bl	8006f04 <CO_CANrxBufferInit>
 80058b6:	4603      	mov	r3, r0
 80058b8:	75fb      	strb	r3, [r7, #23]

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058be:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssSlave, false, 8, false);
 80058c0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80058c2:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80058c4:	2300      	movs	r3, #0
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	2308      	movs	r3, #8
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	2300      	movs	r3, #0
 80058ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058d0:	f001 fb74 	bl	8006fbc <CO_CANtxBufferInit>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	671a      	str	r2, [r3, #112]	; 0x70

    if (LSSslave->TXbuff == NULL) {
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80058e2:	23ff      	movs	r3, #255	; 0xff
 80058e4:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 80058e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	08005545 	.word	0x08005545

080058f8 <CO_LSSslave_process>:
        LSSslave->pFunctLSScfgStore = pFunctLSScfgStore;
    }
}

bool_t
CO_LSSslave_process(CO_LSSslave_t* LSSslave) {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08c      	sub	sp, #48	; 0x30
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8005900:	2300      	movs	r3, #0
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 8203 	beq.w	8005d14 <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 800590e:	2300      	movs	r3, #0
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        (void)memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	3305      	adds	r3, #5
 8005918:	2208      	movs	r2, #8
 800591a:	2100      	movs	r1, #0
 800591c:	4618      	mov	r0, r3
 800591e:	f006 fda7 	bl	800c470 <memset>

        switch (LSSslave->service) {
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005928:	3b04      	subs	r3, #4
 800592a:	2b5a      	cmp	r3, #90	; 0x5a
 800592c:	f200 81dd 	bhi.w	8005cea <CO_LSSslave_process+0x3f2>
 8005930:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <CO_LSSslave_process+0x40>)
 8005932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005936:	bf00      	nop
 8005938:	08005aa5 	.word	0x08005aa5
 800593c:	08005ceb 	.word	0x08005ceb
 8005940:	08005ceb 	.word	0x08005ceb
 8005944:	08005ceb 	.word	0x08005ceb
 8005948:	08005ceb 	.word	0x08005ceb
 800594c:	08005ceb 	.word	0x08005ceb
 8005950:	08005ceb 	.word	0x08005ceb
 8005954:	08005ceb 	.word	0x08005ceb
 8005958:	08005ceb 	.word	0x08005ceb
 800595c:	08005ceb 	.word	0x08005ceb
 8005960:	08005ceb 	.word	0x08005ceb
 8005964:	08005ceb 	.word	0x08005ceb
 8005968:	08005ceb 	.word	0x08005ceb
 800596c:	08005ab9 	.word	0x08005ab9
 8005970:	08005ceb 	.word	0x08005ceb
 8005974:	08005b07 	.word	0x08005b07
 8005978:	08005ceb 	.word	0x08005ceb
 800597c:	08005ba3 	.word	0x08005ba3
 8005980:	08005ceb 	.word	0x08005ceb
 8005984:	08005be1 	.word	0x08005be1
 8005988:	08005ceb 	.word	0x08005ceb
 800598c:	08005ceb 	.word	0x08005ceb
 8005990:	08005ceb 	.word	0x08005ceb
 8005994:	08005ceb 	.word	0x08005ceb
 8005998:	08005ceb 	.word	0x08005ceb
 800599c:	08005ceb 	.word	0x08005ceb
 80059a0:	08005ceb 	.word	0x08005ceb
 80059a4:	08005ceb 	.word	0x08005ceb
 80059a8:	08005ceb 	.word	0x08005ceb
 80059ac:	08005ceb 	.word	0x08005ceb
 80059b0:	08005ceb 	.word	0x08005ceb
 80059b4:	08005ceb 	.word	0x08005ceb
 80059b8:	08005ceb 	.word	0x08005ceb
 80059bc:	08005ceb 	.word	0x08005ceb
 80059c0:	08005ceb 	.word	0x08005ceb
 80059c4:	08005ceb 	.word	0x08005ceb
 80059c8:	08005ceb 	.word	0x08005ceb
 80059cc:	08005ceb 	.word	0x08005ceb
 80059d0:	08005ceb 	.word	0x08005ceb
 80059d4:	08005ceb 	.word	0x08005ceb
 80059d8:	08005ceb 	.word	0x08005ceb
 80059dc:	08005ceb 	.word	0x08005ceb
 80059e0:	08005ceb 	.word	0x08005ceb
 80059e4:	08005ceb 	.word	0x08005ceb
 80059e8:	08005ceb 	.word	0x08005ceb
 80059ec:	08005ceb 	.word	0x08005ceb
 80059f0:	08005ceb 	.word	0x08005ceb
 80059f4:	08005ceb 	.word	0x08005ceb
 80059f8:	08005ceb 	.word	0x08005ceb
 80059fc:	08005ceb 	.word	0x08005ceb
 8005a00:	08005ceb 	.word	0x08005ceb
 8005a04:	08005ceb 	.word	0x08005ceb
 8005a08:	08005ceb 	.word	0x08005ceb
 8005a0c:	08005ceb 	.word	0x08005ceb
 8005a10:	08005ceb 	.word	0x08005ceb
 8005a14:	08005ceb 	.word	0x08005ceb
 8005a18:	08005ceb 	.word	0x08005ceb
 8005a1c:	08005ceb 	.word	0x08005ceb
 8005a20:	08005ceb 	.word	0x08005ceb
 8005a24:	08005ceb 	.word	0x08005ceb
 8005a28:	08005ceb 	.word	0x08005ceb
 8005a2c:	08005ceb 	.word	0x08005ceb
 8005a30:	08005ceb 	.word	0x08005ceb
 8005a34:	08005aab 	.word	0x08005aab
 8005a38:	08005ceb 	.word	0x08005ceb
 8005a3c:	08005ceb 	.word	0x08005ceb
 8005a40:	08005ceb 	.word	0x08005ceb
 8005a44:	08005ceb 	.word	0x08005ceb
 8005a48:	08005ceb 	.word	0x08005ceb
 8005a4c:	08005ceb 	.word	0x08005ceb
 8005a50:	08005ceb 	.word	0x08005ceb
 8005a54:	08005ceb 	.word	0x08005ceb
 8005a58:	08005ceb 	.word	0x08005ceb
 8005a5c:	08005ceb 	.word	0x08005ceb
 8005a60:	08005ceb 	.word	0x08005ceb
 8005a64:	08005ceb 	.word	0x08005ceb
 8005a68:	08005ceb 	.word	0x08005ceb
 8005a6c:	08005cdd 	.word	0x08005cdd
 8005a70:	08005ceb 	.word	0x08005ceb
 8005a74:	08005ceb 	.word	0x08005ceb
 8005a78:	08005ceb 	.word	0x08005ceb
 8005a7c:	08005ceb 	.word	0x08005ceb
 8005a80:	08005ceb 	.word	0x08005ceb
 8005a84:	08005ceb 	.word	0x08005ceb
 8005a88:	08005ceb 	.word	0x08005ceb
 8005a8c:	08005ceb 	.word	0x08005ceb
 8005a90:	08005c37 	.word	0x08005c37
 8005a94:	08005c59 	.word	0x08005c59
 8005a98:	08005c7b 	.word	0x08005c7b
 8005a9c:	08005c9d 	.word	0x08005c9d
 8005aa0:	08005cbf 	.word	0x08005cbf
            case CO_LSS_SWITCH_STATE_GLOBAL: {
                /* Node-Id was unconfigured before, now it is configured,
                 * enter the NMT Reset communication autonomously. */
                resetCommunication = true;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8005aa8:	e126      	b.n	8005cf8 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aae:	2244      	movs	r2, #68	; 0x44
 8005ab0:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005ab6:	e11f      	b.n	8005cf8 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_NODE_ID: {
                nid = LSSslave->CANdata[1];
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005abe:	74fb      	strb	r3, [r7, #19]
                errorCode = CO_LSS_CFG_NODE_ID_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                if (CO_LSS_NODE_ID_VALID(nid)) {
 8005ac6:	7cfb      	ldrb	r3, [r7, #19]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <CO_LSSslave_process+0x1dc>
 8005acc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	da02      	bge.n	8005ada <CO_LSSslave_process+0x1e2>
 8005ad4:	7cfb      	ldrb	r3, [r7, #19]
 8005ad6:	2bff      	cmp	r3, #255	; 0xff
 8005ad8:	d104      	bne.n	8005ae4 <CO_LSSslave_process+0x1ec>
                    *LSSslave->pendingNodeID = nid;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	7cfa      	ldrb	r2, [r7, #19]
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e002      	b.n	8005aea <CO_LSSslave_process+0x1f2>
                } else {
                    errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005af4:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005afe:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 8005b00:	2301      	movs	r3, #1
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005b04:	e0f8      	b.n	8005cf8 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80ef 	beq.w	8005cee <CO_LSSslave_process+0x3f6>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                tableSelector = LSSslave->CANdata[1];
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005b16:	777b      	strb	r3, [r7, #29]
                tableIndex = LSSslave->CANdata[2];
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005b1e:	773b      	strb	r3, [r7, #28]
                errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005b2c:	7f7b      	ldrb	r3, [r7, #29]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d121      	bne.n	8005b76 <CO_LSSslave_process+0x27e>
 8005b32:	7f3b      	ldrb	r3, [r7, #28]
 8005b34:	2b05      	cmp	r3, #5
 8005b36:	d01e      	beq.n	8005b76 <CO_LSSslave_process+0x27e>
 8005b38:	7f3b      	ldrb	r3, [r7, #28]
 8005b3a:	2b09      	cmp	r3, #9
 8005b3c:	d81b      	bhi.n	8005b76 <CO_LSSslave_process+0x27e>
                    uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8005b3e:	7f3b      	ldrb	r3, [r7, #28]
 8005b40:	4a77      	ldr	r2, [pc, #476]	; (8005d20 <CO_LSSslave_process+0x428>)
 8005b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b46:	837b      	strh	r3, [r7, #26]
                    bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(LSSslave->functLSScheckBitRateObject,
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005b50:	8b79      	ldrh	r1, [r7, #26]
 8005b52:	4610      	mov	r0, r2
 8005b54:	4798      	blx	r3
 8005b56:	6178      	str	r0, [r7, #20]
                                                                                bit);

                    if (bit_rate_supported) {
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <CO_LSSslave_process+0x270>
                        *LSSslave->pendingBitRate = bit;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	8b7a      	ldrh	r2, [r7, #26]
 8005b64:	801a      	strh	r2, [r3, #0]
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005b66:	e009      	b.n	8005b7c <CO_LSSslave_process+0x284>
                    } else {
                        errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8005b68:	23ff      	movs	r3, #255	; 0xff
 8005b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                        errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005b74:	e002      	b.n	8005b7c <CO_LSSslave_process+0x284>
                    }
                } else {
                    /* we currently only support CiA301 bit timing table */
                    errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005b86:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005b90:	719a      	strb	r2, [r3, #6]
                LSSslave->TXbuff->data[2] = errorCodeManuf;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b96:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8005b9a:	71da      	strb	r2, [r3, #7]
                CANsend = true;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005ba0:	e0aa      	b.n	8005cf8 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 80a3 	beq.w	8005cf2 <CO_LSSslave_process+0x3fa>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                /* notify application */
                if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80a0 	beq.w	8005cf6 <CO_LSSslave_process+0x3fe>
                    uint16_t delay = ((uint16_t)LSSslave->CANdata[2]) << 8;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	83fb      	strh	r3, [r7, #30]
                    delay |= LSSslave->CANdata[1];
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	8bfb      	ldrh	r3, [r7, #30]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	83fb      	strh	r3, [r7, #30]
                    LSSslave->pFunctLSSactivateBitRate(LSSslave->functLSSactivateBitRateObject, delay);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8005bd8:	8bf9      	ldrh	r1, [r7, #30]
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4798      	blx	r3
                }
                break;
 8005bde:	e08a      	b.n	8005cf6 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_STORE: {
                errorCode = CO_LSS_CFG_STORE_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                if (LSSslave->pFunctLSScfgStore == NULL) {
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d103      	bne.n	8005bf6 <CO_LSSslave_process+0x2fe>
                    /* storing is not supported. Reply error */
                    errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bf4:	e011      	b.n	8005c1a <CO_LSSslave_process+0x322>
                } else {
                    bool_t result;
                    /* Store "pending" to "persistent" */
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c02:	7811      	ldrb	r1, [r2, #0]
                                                         *LSSslave->pendingBitRate);
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6b92      	ldr	r2, [r2, #56]	; 0x38
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8005c08:	8812      	ldrh	r2, [r2, #0]
 8005c0a:	4798      	blx	r3
 8005c0c:	6238      	str	r0, [r7, #32]
                    if (!result) {
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d102      	bne.n	8005c1a <CO_LSSslave_process+0x322>
                        errorCode = CO_LSS_CFG_STORE_FAILED;
 8005c14:	2302      	movs	r3, #2
 8005c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    }
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005c24:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005c2e:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 8005c30:	2301      	movs	r3, #1
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005c34:	e060      	b.n	8005cf8 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_VENDOR: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005c40:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4c:	3306      	adds	r3, #6
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8005c52:	2301      	movs	r3, #1
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005c56:	e04f      	b.n	8005cf8 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_PRODUCT: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005c62:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	3306      	adds	r3, #6
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8005c74:	2301      	movs	r3, #1
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005c78:	e03e      	b.n	8005cf8 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_REV: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005c84:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c90:	3306      	adds	r3, #6
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8005c96:	2301      	movs	r3, #1
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005c9a:	e02d      	b.n	8005cf8 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_SERIAL: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005ca6:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb2:	3306      	adds	r3, #6
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005cbc:	e01c      	b.n	8005cf8 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_NODE_ID: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005cc8:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8005cd4:	719a      	strb	r2, [r3, #6]
                CANsend = true;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005cda:	e00d      	b.n	8005cf8 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce0:	224f      	movs	r2, #79	; 0x4f
 8005ce2:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005ce8:	e006      	b.n	8005cf8 <CO_LSSslave_process+0x400>
            }
            default: {
                /* none */
                break;
 8005cea:	bf00      	nop
 8005cec:	e004      	b.n	8005cf8 <CO_LSSslave_process+0x400>
                    break;
 8005cee:	bf00      	nop
 8005cf0:	e002      	b.n	8005cf8 <CO_LSSslave_process+0x400>
                    break;
 8005cf2:	bf00      	nop
 8005cf4:	e000      	b.n	8005cf8 <CO_LSSslave_process+0x400>
                break;
 8005cf6:	bf00      	nop
            }
        }

        if (CANsend) {
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d007      	beq.n	8005d0e <CO_LSSslave_process+0x416>
            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f001 f9d1 	bl	80070b0 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3730      	adds	r7, #48	; 0x30
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	0800cf58 	.word	0x0800cf58

08005d24 <CO_isError>:
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	08db      	lsrs	r3, r3, #3
 8005d34:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8005d36:	78fb      	ldrb	r3, [r7, #3]
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	73bb      	strb	r3, [r7, #14]
               : false;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	2b09      	cmp	r3, #9
 8005d4e:	d807      	bhi.n	8005d60 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	5cd2      	ldrb	r2, [r2, r3]
 8005d56:	7bbb      	ldrb	r3, [r7, #14]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	b2db      	uxtb	r3, r3
               : false;
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <CO_isError+0x40>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <CO_isError+0x42>
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <CO_getErrorRegister>:
CO_getErrorRegister(CO_EM_t* em) {
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d007      	beq.n	8005d8e <CO_getErrorRegister+0x1e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <CO_getErrorRegister+0x1e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	e000      	b.n	8005d90 <CO_getErrorRegister+0x20>
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr

08005d9a <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <CO_NMT_getInternalState+0x16>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f993 3000 	ldrsb.w	r3, [r3]
 8005dae:	e000      	b.n	8005db2 <CO_NMT_getInternalState+0x18>
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc80      	pop	{r7}
 8005dba:	4770      	bx	lr

08005dbc <CO_LSSslave_getState>:
 *
 * @param LSSslave This object.
 * @return @ref CO_LSS_STATE_state
 */
static inline uint8_t
CO_LSSslave_getState(CO_LSSslave_t* LSSslave) {
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <CO_LSSslave_getState+0x14>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	7c1b      	ldrb	r3, [r3, #16]
 8005dce:	e000      	b.n	8005dd2 <CO_LSSslave_getState+0x16>
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr

08005ddc <CO_new>:
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t*
CO_new(CO_config_t* config, uint32_t* heapMemoryUsed) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
    CO_t* co = NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t* coFinal = NULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	613b      	str	r3, [r7, #16]
#else
        (void)config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1U, sizeof(*co));
 8005df2:	2140      	movs	r1, #64	; 0x40
 8005df4:	2001      	movs	r0, #1
 8005df6:	f005 ff9d 	bl	800bd34 <calloc>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 8101 	beq.w	8006008 <CO_new+0x22c>
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	3340      	adds	r3, #64	; 0x40
 8005e0a:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1U) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8005e0c:	212c      	movs	r1, #44	; 0x2c
 8005e0e:	2001      	movs	r0, #1
 8005e10:	f005 ff90 	bl	800bd34 <calloc>
 8005e14:	4603      	mov	r3, r0
 8005e16:	461a      	mov	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	611a      	str	r2, [r3, #16]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80f1 	beq.w	8006008 <CO_new+0x22c>
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	332c      	adds	r3, #44	; 0x2c
 8005e2a:	613b      	str	r3, [r7, #16]
        }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1U) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8005e2c:	2308      	movs	r3, #8
 8005e2e:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8005e30:	2130      	movs	r1, #48	; 0x30
 8005e32:	2001      	movs	r0, #1
 8005e34:	f005 ff7e 	bl	800bd34 <calloc>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	615a      	str	r2, [r3, #20]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 80df 	beq.w	8006008 <CO_new+0x22c>
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	3330      	adds	r3, #48	; 0x30
 8005e4e:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8005e50:	7afb      	ldrb	r3, [r7, #11]
 8005e52:	2110      	movs	r1, #16
 8005e54:	4618      	mov	r0, r3
 8005e56:	f005 ff6d 	bl	800bd34 <calloc>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	619a      	str	r2, [r3, #24]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80ce 	beq.w	8006008 <CO_new+0x22c>
 8005e6c:	7afb      	ldrb	r3, [r7, #11]
 8005e6e:	011b      	lsls	r3, r3, #4
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4413      	add	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1U) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8005e76:	2150      	movs	r1, #80	; 0x50
 8005e78:	2001      	movs	r0, #1
 8005e7a:	f005 ff5b 	bl	800bd34 <calloc>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	461a      	mov	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	61da      	str	r2, [r3, #28]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 80bc 	beq.w	8006008 <CO_new+0x22c>
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	3350      	adds	r3, #80	; 0x50
 8005e94:	613b      	str	r3, [r7, #16]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
#endif
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1U;
 8005e96:	2311      	movs	r3, #17
 8005e98:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2U) {
 8005e9a:	7abb      	ldrb	r3, [r7, #10]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d912      	bls.n	8005ec6 <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8005ea0:	7abb      	ldrb	r3, [r7, #10]
 8005ea2:	2108      	movs	r1, #8
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f005 ff45 	bl	800bd34 <calloc>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	461a      	mov	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	621a      	str	r2, [r3, #32]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80a6 	beq.w	8006008 <CO_new+0x22c>
 8005ebc:	7abb      	ldrb	r3, [r7, #10]
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0U) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8005ec6:	21ac      	movs	r1, #172	; 0xac
 8005ec8:	2001      	movs	r0, #1
 8005eca:	f005 ff33 	bl	800bd34 <calloc>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 8094 	beq.w	8006008 <CO_new+0x22c>
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	33ac      	adds	r3, #172	; 0xac
 8005ee4:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1U) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8005ee6:	212c      	movs	r1, #44	; 0x2c
 8005ee8:	2001      	movs	r0, #1
 8005eea:	f005 ff23 	bl	800bd34 <calloc>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	629a      	str	r2, [r3, #40]	; 0x28
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 8084 	beq.w	8006008 <CO_new+0x22c>
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	332c      	adds	r3, #44	; 0x2c
 8005f04:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1U) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8005f06:	215c      	movs	r1, #92	; 0x5c
 8005f08:	2001      	movs	r0, #1
 8005f0a:	f005 ff13 	bl	800bd34 <calloc>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	461a      	mov	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d074      	beq.n	8006008 <CO_new+0x22c>
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	335c      	adds	r3, #92	; 0x5c
 8005f22:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0U) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8005f24:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8005f28:	2002      	movs	r0, #2
 8005f2a:	f005 ff03 	bl	800bd34 <calloc>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	461a      	mov	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	631a      	str	r2, [r3, #48]	; 0x30
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d064      	beq.n	8006008 <CO_new+0x22c>
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8005f44:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0U) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8005f46:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8005f4a:	2002      	movs	r0, #2
 8005f4c:	f005 fef2 	bl	800bd34 <calloc>
 8005f50:	4603      	mov	r3, r0
 8005f52:	461a      	mov	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	635a      	str	r2, [r3, #52]	; 0x34
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d053      	beq.n	8006008 <CO_new+0x22c>
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8005f66:	613b      	str	r3, [r7, #16]
        }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
        if (CO_GET_CNT(LEDS) == 1U) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8005f68:	210c      	movs	r1, #12
 8005f6a:	2001      	movs	r0, #1
 8005f6c:	f005 fee2 	bl	800bd34 <calloc>
 8005f70:	4603      	mov	r3, r0
 8005f72:	461a      	mov	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d043      	beq.n	8006008 <CO_new+0x22c>
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	330c      	adds	r3, #12
 8005f84:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1U) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8005f86:	2174      	movs	r1, #116	; 0x74
 8005f88:	2001      	movs	r0, #1
 8005f8a:	f005 fed3 	bl	800bd34 <calloc>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	461a      	mov	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d034      	beq.n	8006008 <CO_new+0x22c>
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	3374      	adds	r3, #116	; 0x74
 8005fa2:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1U, sizeof(*co->CANmodule));
 8005fa4:	2138      	movs	r1, #56	; 0x38
 8005fa6:	2001      	movs	r0, #1
 8005fa8:	f005 fec4 	bl	800bd34 <calloc>
 8005fac:	4603      	mov	r3, r0
 8005fae:	461a      	mov	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	605a      	str	r2, [r3, #4]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d025      	beq.n	8006008 <CO_new+0x22c>
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	3338      	adds	r3, #56	; 0x38
 8005fc0:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8005fc2:	210c      	movs	r1, #12
 8005fc4:	200f      	movs	r0, #15
 8005fc6:	f005 feb5 	bl	800bd34 <calloc>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	461a      	mov	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	609a      	str	r2, [r3, #8]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d016      	beq.n	8006008 <CO_new+0x22c>
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	33b4      	adds	r3, #180	; 0xb4
 8005fde:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8005fe0:	2118      	movs	r1, #24
 8005fe2:	2007      	movs	r0, #7
 8005fe4:	f005 fea6 	bl	800bd34 <calloc>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	60da      	str	r2, [r3, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <CO_new+0x22c>
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	33a8      	adds	r3, #168	; 0xa8
 8005ffc:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <CO_new+0x238>
        CO_delete(co);
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f80b 	bl	800602a <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <CO_new+0x244>
        *heapMemoryUsed = mem;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8006020:	697b      	ldr	r3, [r7, #20]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <CO_delete>:

void
CO_delete(CO_t* co) {
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d053      	beq.n	80060e0 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	4618      	mov	r0, r3
 800603e:	f000 ff4b 	bl	8006ed8 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	4618      	mov	r0, r3
 8006048:	f005 fe90 	bl	800bd6c <free>
    CO_free(co->CANrx);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	4618      	mov	r0, r3
 8006052:	f005 fe8b 	bl	800bd6c <free>
    CO_free(co->CANmodule);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	4618      	mov	r0, r3
 800605c:	f005 fe86 	bl	800bd6c <free>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    CO_free(co->LSSmaster);
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    CO_free(co->LSSslave);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006064:	4618      	mov	r0, r3
 8006066:	f005 fe81 	bl	800bd6c <free>
#if ((CO_CONFIG_GFC)&CO_CONFIG_GFC_ENABLE) != 0
    CO_free(co->GFC);
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    CO_free(co->LEDs);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	4618      	mov	r0, r3
 8006070:	f005 fe7c 	bl	800bd6c <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    CO_free(co->TPDO);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006078:	4618      	mov	r0, r3
 800607a:	f005 fe77 	bl	800bd6c <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    CO_free(co->RPDO);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	4618      	mov	r0, r3
 8006084:	f005 fe72 	bl	800bd6c <free>
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    CO_free(co->SYNC);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	4618      	mov	r0, r3
 800608e:	f005 fe6d 	bl	800bd6c <free>
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    CO_free(co->TIME);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	4618      	mov	r0, r3
 8006098:	f005 fe68 	bl	800bd6c <free>
#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	4618      	mov	r0, r3
 80060a2:	f005 fe63 	bl	800bd6c <free>

    /* Emergency */
    CO_free(co->em);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f005 fe5e 	bl	800bd6c <free>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    CO_free(co->em_fifo);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f005 fe59 	bl	800bd6c <free>
#if ((CO_CONFIG_NODE_GUARDING)&CO_CONFIG_NODE_GUARDING_MASTER_ENABLE) != 0
    CO_free(co->NGmaster);
#endif

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    CO_free(co->HBconsMonitoredNodes);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	4618      	mov	r0, r3
 80060c0:	f005 fe54 	bl	800bd6c <free>
    CO_free(co->HBcons);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f005 fe4f 	bl	800bd6c <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f005 fe4a 	bl	800bd6c <free>

    /* CANopen object */
    CO_free(co);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f005 fe47 	bl	800bd6c <free>
 80060de:	e000      	b.n	80060e2 <CO_delete+0xb8>
        return;
 80060e0:	bf00      	nop
}
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <CO_CANinit>:
#endif
    return en;
}

CO_ReturnError_t
CO_CANinit(CO_t* co, void* CANptr, uint16_t bitRate) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	; 0x28
 80060ec:	af04      	add	r7, sp, #16
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	4613      	mov	r3, r2
 80060f4:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) {
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d102      	bne.n	8006102 <CO_CANinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80060fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006100:	e01a      	b.n	8006138 <CO_CANinit+0x50>
    }

    co->CANmodule->CANnormal = false;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 800610a:	68b8      	ldr	r0, [r7, #8]
 800610c:	f000 fdf4 	bl	8006cf8 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule, CANptr, co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), co->CANtx,
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6858      	ldr	r0, [r3, #4]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6899      	ldr	r1, [r3, #8]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	88fa      	ldrh	r2, [r7, #6]
 800611e:	9202      	str	r2, [sp, #8]
 8006120:	2207      	movs	r2, #7
 8006122:	9201      	str	r2, [sp, #4]
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	230f      	movs	r3, #15
 8006128:	460a      	mov	r2, r1
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	f000 fe0c 	bl	8006d48 <CO_CANmodule_init>
 8006130:	4603      	mov	r3, r0
 8006132:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_TX_MSGS), bitRate);

    return err;
 8006134:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <CO_LSSinit>:

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
CO_ReturnError_t
CO_LSSinit(CO_t* co, CO_LSS_address_t* lssAddress, uint8_t* pendingNodeID, uint16_t* pendingBitRate) {
 8006140:	b580      	push	{r7, lr}
 8006142:	b08c      	sub	sp, #48	; 0x30
 8006144:	af06      	add	r7, sp, #24
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if ((co == NULL) || (CO_GET_CNT(LSS_SLV) != 1U)) {
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d102      	bne.n	800615a <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006154:	f04f 33ff 	mov.w	r3, #4294967295
 8006158:	e01a      	b.n	8006190 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave, lssAddress, pendingBitRate, pendingNodeID, co->CANmodule,
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	6852      	ldr	r2, [r2, #4]
 8006166:	f240 71e4 	movw	r1, #2020	; 0x7e4
 800616a:	9105      	str	r1, [sp, #20]
 800616c:	2106      	movs	r1, #6
 800616e:	9104      	str	r1, [sp, #16]
 8006170:	9203      	str	r2, [sp, #12]
 8006172:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8006176:	9202      	str	r2, [sp, #8]
 8006178:	220e      	movs	r2, #14
 800617a:	9201      	str	r2, [sp, #4]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	f7ff fb42 	bl	800580c <CO_LSSslave_init>
 8006188:	4603      	mov	r3, r0
 800618a:	75fb      	strb	r3, [r7, #23]
                           CO_GET_CO(RX_IDX_LSS_SLV), CO_CAN_ID_LSS_MST, co->CANmodule, CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 800618c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <CO_CANopenInit>:
#endif /* (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE */

CO_ReturnError_t
CO_CANopenInit(CO_t* co, CO_NMT_t* NMT, CO_EM_t* em, OD_t* od, OD_entry_t* OD_statusBits, uint16_t NMTcontrol,
               uint16_t firstHBTime_ms, uint16_t SDOserverTimeoutTime_ms, uint16_t SDOclientTimeoutTime_ms,
               bool_t SDOclientBlockTransfer, uint8_t nodeId, uint32_t* errInfo) {
 8006198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800619a:	b091      	sub	sp, #68	; 0x44
 800619c:	af0a      	add	r7, sp, #40	; 0x28
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_STATUS_BITS) == 0
    (void)OD_statusBits; /* may be unused */
#endif

    if ((co == NULL) || ((CO_GET_CNT(NMT) == 0U) && (NMT == NULL)) || ((CO_GET_CNT(EM) == 0U) && (em == NULL))) {
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d102      	bne.n	80061b2 <CO_CANopenInit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80061ac:	f04f 33ff 	mov.w	r3, #4294967295
 80061b0:	e12f      	b.n	8006412 <CO_CANopenInit+0x27a>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0U) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <CO_CANopenInit+0x26>
        em = co->em;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if ((CO_GET_CNT(LSS_SLV) == 1U) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)) {
 80061c4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80061c8:	2bff      	cmp	r3, #255	; 0xff
 80061ca:	d103      	bne.n	80061d4 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	e00a      	b.n	80061ea <CO_CANopenInit+0x52>
    } else
#endif
        if ((nodeId < 1U) || (nodeId > 127U)) {
 80061d4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <CO_CANopenInit+0x4c>
 80061dc:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	da02      	bge.n	80061ea <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80061e4:	f04f 33ff 	mov.w	r3, #4294967295
 80061e8:	e113      	b.n	8006412 <CO_CANopenInit+0x27a>
    } else { /* MISRA C 2004 14.10 */
    }

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    if (CO_GET_CNT(LEDS) == 1U) {
        err = CO_LEDs_init(co->LEDs);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe ffe0 	bl	80051b4 <CO_LEDs_init>
 80061f4:	4603      	mov	r3, r0
 80061f6:	747b      	strb	r3, [r7, #17]
        if (err != CO_ERROR_NO) {
 80061f8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <CO_CANopenInit+0x6e>
            return err;
 8006200:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006204:	e105      	b.n	8006412 <CO_CANopenInit+0x27a>
        }
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 800620e:	f06f 0312 	mvn.w	r3, #18
 8006212:	e0fe      	b.n	8006412 <CO_CANopenInit+0x27a>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	69d8      	ldr	r0, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685c      	ldr	r4, [r3, #4]
 800621c:	4b7f      	ldr	r3, [pc, #508]	; (800641c <CO_CANopenInit+0x284>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f103 050c 	add.w	r5, r3, #12
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a1e      	ldr	r6, [r3, #32]
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
                         co->em_fifo, (CO_GET_CNT(ARR_1003) + 1U),
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY), CO_GET_CO(TX_IDX_EM_PROD),
 800622a:	4b7c      	ldr	r3, [pc, #496]	; (800641c <CO_CANopenInit+0x284>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006230:	336c      	adds	r3, #108	; 0x6c
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) != 0
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
#endif
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8006232:	4a7a      	ldr	r2, [pc, #488]	; (800641c <CO_CANopenInit+0x284>)
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006238:	3218      	adds	r2, #24
 800623a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800623c:	9105      	str	r1, [sp, #20]
 800623e:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8006242:	9104      	str	r1, [sp, #16]
 8006244:	9203      	str	r2, [sp, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	9202      	str	r2, [sp, #8]
 800624a:	9301      	str	r3, [sp, #4]
 800624c:	2311      	movs	r3, #17
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	4633      	mov	r3, r6
 8006252:	462a      	mov	r2, r5
 8006254:	4621      	mov	r1, r4
 8006256:	f7fa f8b9 	bl	80003cc <CO_EM_init>
 800625a:	4603      	mov	r3, r0
 800625c:	747b      	strb	r3, [r7, #17]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
                         co->CANmodule, CO_GET_CO(RX_IDX_EM_CONS),
#endif
                         nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 800625e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <CO_CANopenInit+0xd4>
            return err;
 8006266:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800626a:	e0d2      	b.n	8006412 <CO_CANopenInit+0x27a>
        }
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        err = CO_NMT_init(co->NMT, OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME), em, nodeId, NMTcontrol, firstHBTime_ms,
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	691c      	ldr	r4, [r3, #16]
 8006270:	4b6a      	ldr	r3, [pc, #424]	; (800641c <CO_CANopenInit+0x284>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f103 0590 	add.w	r5, r3, #144	; 0x90
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	6852      	ldr	r2, [r2, #4]
 8006282:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8006286:	b289      	uxth	r1, r1
 8006288:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 800628c:	b289      	uxth	r1, r1
 800628e:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 8006292:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006294:	9008      	str	r0, [sp, #32]
 8006296:	9107      	str	r1, [sp, #28]
 8006298:	2105      	movs	r1, #5
 800629a:	9106      	str	r1, [sp, #24]
 800629c:	9205      	str	r2, [sp, #20]
 800629e:	2200      	movs	r2, #0
 80062a0:	9204      	str	r2, [sp, #16]
 80062a2:	2200      	movs	r2, #0
 80062a4:	9203      	str	r2, [sp, #12]
 80062a6:	9302      	str	r3, [sp, #8]
 80062a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	4633      	mov	r3, r6
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	4629      	mov	r1, r5
 80062b6:	4620      	mov	r0, r4
 80062b8:	f7fa ff0c 	bl	80010d4 <CO_NMT_init>
 80062bc:	4603      	mov	r3, r0
 80062be:	747b      	strb	r3, [r7, #17]
                          co->CANmodule, CO_GET_CO(RX_IDX_NMT_SLV), CO_CAN_ID_NMT_SERVICE,
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
                          co->CANmodule, CO_GET_CO(TX_IDX_NMT_MST), CO_CAN_ID_NMT_SERVICE,
#endif
                          co->CANmodule, CO_GET_CO(TX_IDX_HB_PROD), CO_CAN_ID_HEARTBEAT + nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 80062c0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <CO_CANopenInit+0x136>
            return err;
 80062c8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80062cc:	e0a1      	b.n	8006412 <CO_CANopenInit+0x27a>
        }
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6958      	ldr	r0, [r3, #20]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	699c      	ldr	r4, [r3, #24]
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME), co->CANmodule, CO_GET_CO(RX_IDX_HB_CONS),
 80062d6:	4b51      	ldr	r3, [pc, #324]	; (800641c <CO_CANopenInit+0x284>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 80062dc:	3384      	adds	r3, #132	; 0x84
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	6852      	ldr	r2, [r2, #4]
 80062e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80062e4:	9103      	str	r1, [sp, #12]
 80062e6:	2106      	movs	r1, #6
 80062e8:	9102      	str	r1, [sp, #8]
 80062ea:	9201      	str	r2, [sp, #4]
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	2308      	movs	r3, #8
 80062f0:	4622      	mov	r2, r4
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	f7fa fbfa 	bl	8000aec <CO_HBconsumer_init>
 80062f8:	4603      	mov	r3, r0
 80062fa:	747b      	strb	r3, [r7, #17]
                                 errInfo);
        if (err != CO_ERROR_NO) {
 80062fc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <CO_CANopenInit+0x172>
            return err;
 8006304:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006308:	e083      	b.n	8006412 <CO_CANopenInit+0x27a>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0U) {
        OD_entry_t* SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 800630a:	4b44      	ldr	r3, [pc, #272]	; (800641c <CO_CANopenInit+0x284>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	33b4      	adds	r3, #180	; 0xb4
 8006312:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006314:	2300      	movs	r3, #0
 8006316:	827b      	strh	r3, [r7, #18]
 8006318:	e02f      	b.n	800637a <CO_CANopenInit+0x1e2>
            err = CO_SDOserver_init(&co->SDOserver[i], od, SDOsrvPar, nodeId, SDOserverTimeoutTime_ms, co->CANmodule,
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800631e:	8a7b      	ldrh	r3, [r7, #18]
 8006320:	21ac      	movs	r1, #172	; 0xac
 8006322:	fb01 f303 	mul.w	r3, r1, r3
 8006326:	18d5      	adds	r5, r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	8a7a      	ldrh	r2, [r7, #18]
 800632e:	3205      	adds	r2, #5
 8006330:	b292      	uxth	r2, r2
 8006332:	68f9      	ldr	r1, [r7, #12]
 8006334:	6849      	ldr	r1, [r1, #4]
 8006336:	8a78      	ldrh	r0, [r7, #18]
 8006338:	3004      	adds	r0, #4
 800633a:	b280      	uxth	r0, r0
 800633c:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 8006340:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8006342:	9405      	str	r4, [sp, #20]
 8006344:	9004      	str	r0, [sp, #16]
 8006346:	9103      	str	r1, [sp, #12]
 8006348:	9202      	str	r2, [sp, #8]
 800634a:	9301      	str	r3, [sp, #4]
 800634c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	4633      	mov	r3, r6
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	4628      	mov	r0, r5
 8006358:	f7fd f974 	bl	8003644 <CO_SDOserver_init>
 800635c:	4603      	mov	r3, r0
 800635e:	747b      	strb	r3, [r7, #17]
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err != CO_ERROR_NO) {
 8006360:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <CO_CANopenInit+0x1d6>
                return err;
 8006368:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800636c:	e051      	b.n	8006412 <CO_CANopenInit+0x27a>
            }
            SDOsrvPar++;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	330c      	adds	r3, #12
 8006372:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006374:	8a7b      	ldrh	r3, [r7, #18]
 8006376:	3301      	adds	r3, #1
 8006378:	827b      	strh	r3, [r7, #18]
 800637a:	8a7b      	ldrh	r3, [r7, #18]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0cc      	beq.n	800631a <CO_CANopenInit+0x182>
    }
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        err = CO_TIME_init(co->TIME, OD_GET(H1012, OD_H1012_COBID_TIME), co->CANmodule, CO_GET_CO(RX_IDX_TIME),
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006384:	4b25      	ldr	r3, [pc, #148]	; (800641c <CO_CANopenInit+0x284>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	2302      	movs	r3, #2
 8006398:	f7fe fe16 	bl	8004fc8 <CO_TIME_init>
 800639c:	4603      	mov	r3, r0
 800639e:	747b      	strb	r3, [r7, #17]
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 80063a0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <CO_CANopenInit+0x216>
            return err;
 80063a8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80063ac:	e031      	b.n	8006412 <CO_CANopenInit+0x27a>
    }
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    if (CO_GET_CNT(SYNC) == 1U) {
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80063b2:	4b1a      	ldr	r3, [pc, #104]	; (800641c <CO_CANopenInit+0x284>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f103 0624 	add.w	r6, r3, #36	; 0x24
 80063bc:	4b17      	ldr	r3, [pc, #92]	; (800641c <CO_CANopenInit+0x284>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 80063c6:	4b15      	ldr	r3, [pc, #84]	; (800641c <CO_CANopenInit+0x284>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 80063cc:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 80063ce:	4a13      	ldr	r2, [pc, #76]	; (800641c <CO_CANopenInit+0x284>)
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 80063d4:	32a8      	adds	r2, #168	; 0xa8
 80063d6:	68f9      	ldr	r1, [r7, #12]
 80063d8:	6849      	ldr	r1, [r1, #4]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	6840      	ldr	r0, [r0, #4]
 80063de:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80063e0:	9406      	str	r4, [sp, #24]
 80063e2:	2400      	movs	r4, #0
 80063e4:	9405      	str	r4, [sp, #20]
 80063e6:	9004      	str	r0, [sp, #16]
 80063e8:	2001      	movs	r0, #1
 80063ea:	9003      	str	r0, [sp, #12]
 80063ec:	9102      	str	r1, [sp, #8]
 80063ee:	9201      	str	r2, [sp, #4]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	4663      	mov	r3, ip
 80063f4:	4632      	mov	r2, r6
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	4628      	mov	r0, r5
 80063fa:	f7fe fb23 	bl	8004a44 <CO_SYNC_init>
 80063fe:	4603      	mov	r3, r0
 8006400:	747b      	strb	r3, [r7, #17]
                           co->CANmodule, CO_GET_CO(RX_IDX_SYNC),
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8006402:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <CO_CANopenInit+0x278>
            return err;
 800640a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800640e:	e000      	b.n	8006412 <CO_CANopenInit+0x27a>
            }
        }
    }
#endif

    return CO_ERROR_NO;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800641a:	bf00      	nop
 800641c:	20000314 	.word	0x20000314

08006420 <CO_CANopenInitPDO>:

CO_ReturnError_t
CO_CANopenInitPDO(CO_t* co, CO_EM_t* em, OD_t* od, uint8_t nodeId, uint32_t* errInfo) {
 8006420:	b590      	push	{r4, r7, lr}
 8006422:	b093      	sub	sp, #76	; 0x4c
 8006424:	af06      	add	r7, sp, #24
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006434:	f04f 33ff 	mov.w	r3, #4294967295
 8006438:	e0b3      	b.n	80065a2 <CO_CANopenInitPDO+0x182>
    }
    if ((nodeId < 1U) || (nodeId > 127U) || co->nodeIdUnconfigured) {
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <CO_CANopenInitPDO+0x30>
 8006440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006444:	2b00      	cmp	r3, #0
 8006446:	db03      	blt.n	8006450 <CO_CANopenInitPDO+0x30>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d009      	beq.n	8006464 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured) ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <CO_CANopenInitPDO+0x3e>
 8006458:	f06f 0312 	mvn.w	r3, #18
 800645c:	e0a1      	b.n	80065a2 <CO_CANopenInitPDO+0x182>
 800645e:	f04f 33ff 	mov.w	r3, #4294967295
 8006462:	e09e      	b.n	80065a2 <CO_CANopenInitPDO+0x182>
    }

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    if (CO_GET_CNT(RPDO) > 0U) {
        OD_entry_t* RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 8006464:	4b51      	ldr	r3, [pc, #324]	; (80065ac <CO_CANopenInitPDO+0x18c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	33cc      	adds	r3, #204	; 0xcc
 800646c:	62fb      	str	r3, [r7, #44]	; 0x2c
        OD_entry_t* RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 800646e:	4b4f      	ldr	r3, [pc, #316]	; (80065ac <CO_CANopenInitPDO+0x18c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	33e4      	adds	r3, #228	; 0xe4
 8006476:	62bb      	str	r3, [r7, #40]	; 0x28
        for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006478:	2300      	movs	r3, #0
 800647a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800647c:	e03d      	b.n	80064fa <CO_CANopenInitPDO+0xda>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 8006482:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006484:	2b03      	cmp	r3, #3
 8006486:	d808      	bhi.n	800649a <CO_CANopenInitPDO+0x7a>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_RPDO_1 + (i * 0x100U)) + nodeId);
 8006488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800648a:	3302      	adds	r3, #2
 800648c:	b29b      	uxth	r3, r3
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	b29a      	uxth	r2, r3
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	b29b      	uxth	r3, r3
 8006496:	4413      	add	r3, r2
 8006498:	84bb      	strh	r3, [r7, #36]	; 0x24
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i], od, em,
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064a0:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80064a4:	fb01 f303 	mul.w	r3, r1, r3
 80064a8:	18d0      	adds	r0, r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80064b4:	3203      	adds	r2, #3
 80064b6:	b292      	uxth	r2, r2
 80064b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064ba:	9105      	str	r1, [sp, #20]
 80064bc:	9204      	str	r2, [sp, #16]
 80064be:	9303      	str	r3, [sp, #12]
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	9302      	str	r3, [sp, #8]
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	4623      	mov	r3, r4
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	f7fb ff7f 	bl	80023d4 <CO_RPDO_init>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75bb      	strb	r3, [r7, #22]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, RPDOcomm, RPDOmap, co->CANmodule, CO_GET_CO(RX_IDX_RPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 80064da:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <CO_CANopenInitPDO+0xc8>
                return err;
 80064e2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80064e6:	e05c      	b.n	80065a2 <CO_CANopenInitPDO+0x182>
            }
            RPDOcomm++;
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	330c      	adds	r3, #12
 80064ec:	62fb      	str	r3, [r7, #44]	; 0x2c
            RPDOmap++;
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	330c      	adds	r3, #12
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
        for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80064f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064f6:	3301      	adds	r3, #1
 80064f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80064fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d9be      	bls.n	800647e <CO_CANopenInitPDO+0x5e>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    if (CO_GET_CNT(TPDO) > 0U)
    {
        OD_entry_t* TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM  );
 8006500:	4b2a      	ldr	r3, [pc, #168]	; (80065ac <CO_CANopenInitPDO+0x18c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	33fc      	adds	r3, #252	; 0xfc
 8006508:	623b      	str	r3, [r7, #32]
        OD_entry_t* TPDOmap  = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 800650a:	4b28      	ldr	r3, [pc, #160]	; (80065ac <CO_CANopenInitPDO+0x18c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8006514:	61fb      	str	r3, [r7, #28]

        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++)
 8006516:	2300      	movs	r3, #0
 8006518:	837b      	strh	r3, [r7, #26]
 800651a:	e03e      	b.n	800659a <CO_CANopenInitPDO+0x17a>
        {
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT)
 8006520:	8b7b      	ldrh	r3, [r7, #26]
 8006522:	2b03      	cmp	r3, #3
 8006524:	d809      	bhi.n	800653a <CO_CANopenInitPDO+0x11a>
            {
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_TPDO_1 + (i * 0x100U)) + nodeId);
 8006526:	8b7b      	ldrh	r3, [r7, #26]
 8006528:	021b      	lsls	r3, r3, #8
 800652a:	b29a      	uxth	r2, r3
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	b29b      	uxth	r3, r3
 8006530:	4413      	add	r3, r2
 8006532:	b29b      	uxth	r3, r3
 8006534:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006538:	833b      	strh	r3, [r7, #24]
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800653e:	8b7b      	ldrh	r3, [r7, #26]
 8006540:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8006544:	fb01 f303 	mul.w	r3, r1, r3
 8006548:	18d0      	adds	r0, r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	8b7a      	ldrh	r2, [r7, #26]
 8006554:	3202      	adds	r2, #2
 8006556:	b292      	uxth	r2, r2
 8006558:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800655a:	9105      	str	r1, [sp, #20]
 800655c:	9204      	str	r2, [sp, #16]
 800655e:	9303      	str	r3, [sp, #12]
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	9302      	str	r3, [sp, #8]
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	8b3b      	ldrh	r3, [r7, #24]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	4623      	mov	r3, r4
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	f7fc fb0f 	bl	8002b94 <CO_TPDO_init>
 8006576:	4603      	mov	r3, r0
 8006578:	75fb      	strb	r3, [r7, #23]
							   co->CANmodule,
							   CO_GET_CO(TX_IDX_TPDO) + i,
							   errInfo
							   );

            if (err != CO_ERROR_NO) { return err; }
 800657a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <CO_CANopenInitPDO+0x168>
 8006582:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006586:	e00c      	b.n	80065a2 <CO_CANopenInitPDO+0x182>


            TPDOcomm++;
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	330c      	adds	r3, #12
 800658c:	623b      	str	r3, [r7, #32]
            TPDOmap++;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	330c      	adds	r3, #12
 8006592:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++)
 8006594:	8b7b      	ldrh	r3, [r7, #26]
 8006596:	3301      	adds	r3, #1
 8006598:	837b      	strh	r3, [r7, #26]
 800659a:	8b7b      	ldrh	r3, [r7, #26]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d9bd      	bls.n	800651c <CO_CANopenInitPDO+0xfc>


    }
#endif

    return CO_ERROR_NO;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3734      	adds	r7, #52	; 0x34
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd90      	pop	{r4, r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000314 	.word	0x20000314

080065b0 <CO_process>:
CO_NMT_reset_cmd_t
CO_process(CO_t* co,
		bool_t enableGateway,
		uint32_t timeDifference_us,
		uint32_t* timerNext_us)
{
 80065b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b2:	b09b      	sub	sp, #108	; 0x6c
 80065b4:	af08      	add	r7, sp, #32
 80065b6:	61f8      	str	r0, [r7, #28]
 80065b8:	61b9      	str	r1, [r7, #24]
 80065ba:	617a      	str	r2, [r7, #20]
 80065bc:	613b      	str	r3, [r7, #16]
    (void)enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 80065be:	2300      	movs	r3, #0
 80065c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff fbe6 	bl	8005d9a <CO_NMT_getInternalState>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 80065d4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80065d8:	2b7f      	cmp	r3, #127	; 0x7f
 80065da:	d003      	beq.n	80065e4 <CO_process+0x34>
 80065dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80065e0:	2b05      	cmp	r3, #5
 80065e2:	d101      	bne.n	80065e8 <CO_process+0x38>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <CO_process+0x3a>
 80065e8:	2300      	movs	r3, #0
 80065ea:	63bb      	str	r3, [r7, #56]	; 0x38

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fe05 	bl	8007200 <CO_CANmodule_process>

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE)
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_process(co->LSSslave)) {
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff f97c 	bl	80058f8 <CO_LSSslave_process>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    bool_t unc = co->nodeIdUnconfigured;
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	637b      	str	r3, [r7, #52]	; 0x34
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	8a5b      	ldrh	r3, [r3, #18]
 8006618:	867b      	strh	r3, [r7, #50]	; 0x32
    bool_t LSSslave_configuration = false;
 800661a:	2300      	movs	r3, #0
 800661c:	643b      	str	r3, [r7, #64]	; 0x40
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION) {
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fbca 	bl	8005dbc <CO_LSSslave_getState>
 8006628:	4603      	mov	r3, r0
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <CO_process+0x82>
            LSSslave_configuration = true;
 800662e:	2301      	movs	r3, #1
 8006630:	643b      	str	r3, [r7, #64]	; 0x40
#define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS false
#endif

    if (CO_GET_CNT(LEDS) == 1U)
    	{
        bool_t ErrSync         = CO_isError(co->em, CO_EM_SYNC_TIME_OUT     );
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	2118      	movs	r1, #24
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fb73 	bl	8005d24 <CO_isError>
 800663e:	62f8      	str	r0, [r7, #44]	; 0x2c
        bool_t ErrHbCons       = CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER);
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	211b      	movs	r1, #27
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff fb6c 	bl	8005d24 <CO_isError>
 800664c:	62b8      	str	r0, [r7, #40]	; 0x28
        bool_t ErrHbConsRemote = CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	211c      	movs	r1, #28
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fb65 	bl	8005d24 <CO_isError>
 800665a:	6278      	str	r0, [r7, #36]	; 0x24
        CO_LEDs_process(co->LEDs,
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <CO_process+0xbc>
 8006666:	f997 5023 	ldrsb.w	r5, [r7, #35]	; 0x23
 800666a:	e000      	b.n	800666e <CO_process+0xbe>
 800666c:	2500      	movs	r5, #0
        				timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U,
 800666e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006670:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 8006674:	2b00      	cmp	r3, #0
 8006676:	bf14      	ite	ne
 8006678:	2301      	movne	r3, #1
 800667a:	2300      	moveq	r3, #0
 800667c:	b2db      	uxtb	r3, r3
 800667e:	60fb      	str	r3, [r7, #12]
						(CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 8006680:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006682:	f240 3303 	movw	r3, #771	; 0x303
 8006686:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 8006688:	2b00      	cmp	r3, #0
 800668a:	bf14      	ite	ne
 800668c:	2301      	movne	r3, #1
 800668e:	2300      	moveq	r3, #0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	60bb      	str	r3, [r7, #8]
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <CO_process+0xee>
 800669a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800669c:	e000      	b.n	80066a0 <CO_process+0xf0>
 800669e:	2400      	movs	r4, #0
                        false, /* RPDO event timer timeout */
                        unc ? false : ErrSync, unc ? false : (ErrHbCons || ErrHbConsRemote),
 80066a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d107      	bne.n	80066b6 <CO_process+0x106>
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d102      	bne.n	80066b2 <CO_process+0x102>
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <CO_process+0x106>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e000      	b.n	80066b8 <CO_process+0x108>
 80066b6:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 80066b8:	607b      	str	r3, [r7, #4]
                        CO_getErrorRegister(co->em) != 0U,
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	4618      	mov	r0, r3
 80066c0:	f7ff fb56 	bl	8005d70 <CO_getErrorRegister>
 80066c4:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	bf14      	ite	ne
 80066ca:	2301      	movne	r3, #1
 80066cc:	2300      	moveq	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	9307      	str	r3, [sp, #28]
 80066d6:	2300      	movs	r3, #0
 80066d8:	9306      	str	r3, [sp, #24]
 80066da:	9205      	str	r2, [sp, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	9304      	str	r3, [sp, #16]
 80066e0:	9403      	str	r4, [sp, #12]
 80066e2:	2300      	movs	r3, #0
 80066e4:	9302      	str	r3, [sp, #8]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	9301      	str	r3, [sp, #4]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f0:	462a      	mov	r2, r5
 80066f2:	6979      	ldr	r1, [r7, #20]
 80066f4:	4630      	mov	r0, r6
 80066f6:	f7fe fd75 	bl	80051e4 <CO_LEDs_process>
						timerNext_us);
    	}
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {return reset; }
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <CO_process+0x158>
 8006702:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006706:	e047      	b.n	8006798 <CO_process+0x1e8>

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U)
		{
		CO_EM_process(co->em, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	69d8      	ldr	r0, [r3, #28]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006712:	f7f9 ff3b 	bl	800058c <CO_EM_process>
		}

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U)
		{
		  reset = CO_NMT_process(co->NMT, &NMTstate, timeDifference_us, timerNext_us);
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	6918      	ldr	r0, [r3, #16]
 800671a:	f107 0123 	add.w	r1, r7, #35	; 0x23
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	f7fa fd95 	bl	8001250 <CO_NMT_process>
 8006726:	4603      	mov	r3, r0
 8006728:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}

    NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 800672c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006730:	2b7f      	cmp	r3, #127	; 0x7f
 8006732:	d003      	beq.n	800673c <CO_process+0x18c>
 8006734:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006738:	2b05      	cmp	r3, #5
 800673a:	d101      	bne.n	8006740 <CO_process+0x190>
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <CO_process+0x192>
 8006740:	2300      	movs	r3, #0
 8006742:	63bb      	str	r3, [r7, #56]	; 0x38

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++)
 8006744:	2300      	movs	r3, #0
 8006746:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800674a:	e011      	b.n	8006770 <CO_process+0x1c0>
			{
			  (void)CO_SDOserver_process(&co->SDOserver[i], NMTisPreOrOperational, timeDifference_us, timerNext_us);
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006750:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006754:	21ac      	movs	r1, #172	; 0xac
 8006756:	fb01 f303 	mul.w	r3, r1, r3
 800675a:	18d0      	adds	r0, r2, r3
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006762:	f7fd fa59 	bl	8003c18 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++)
 8006766:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800676a:	3301      	adds	r3, #1
 800676c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006770:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0e9      	beq.n	800674c <CO_process+0x19c>

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0

    if (CO_GET_CNT(HB_CONS) == 1U)
		{
		  CO_HBconsumer_process(co->HBcons, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	6958      	ldr	r0, [r3, #20]
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006782:	f7fa faf5 	bl	8000d70 <CO_HBconsumer_process>


#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U)
		{
		 (void)CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe fc9a 	bl	80050c8 <CO_TIME_process>
    if (CO_GET_CNT(GTWA) == 1U) {
        CO_GTWA_process(co->gtwa, enableGateway, timeDifference_us, timerNext_us);
    }
#endif

    return reset;
 8006794:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006798:	4618      	mov	r0, r3
 800679a:	374c      	adds	r7, #76	; 0x4c
 800679c:	46bd      	mov	sp, r7
 800679e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067a0 <CO_process_SYNC>:

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
bool_t
CO_process_SYNC(CO_t* co, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 80067ac:	2300      	movs	r3, #0
 80067ae:	61fb      	str	r3, [r7, #28]

    if ((!co->nodeIdUnconfigured) && (CO_GET_CNT(SYNC) == 1U)) {
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d131      	bne.n	800681c <CO_process_SYNC+0x7c>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	4618      	mov	r0, r3
 80067be:	f7ff faec 	bl	8005d9a <CO_NMT_getInternalState>
 80067c2:	4603      	mov	r3, r0
 80067c4:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 80067c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80067ca:	2b7f      	cmp	r3, #127	; 0x7f
 80067cc:	d003      	beq.n	80067d6 <CO_process_SYNC+0x36>
 80067ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80067d2:	2b05      	cmp	r3, #5
 80067d4:	d101      	bne.n	80067da <CO_process_SYNC+0x3a>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <CO_process_SYNC+0x3c>
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC, NMTisPreOrOperational, timeDifference_us,
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	6979      	ldr	r1, [r7, #20]
 80067e8:	f7fe fa52 	bl	8004c90 <CO_SYNC_process>
 80067ec:	4603      	mov	r3, r0
 80067ee:	74fb      	strb	r3, [r7, #19]
                                                        timerNext_us);

        switch (sync_process) {
 80067f0:	7cfb      	ldrb	r3, [r7, #19]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d009      	beq.n	800680a <CO_process_SYNC+0x6a>
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	dc0d      	bgt.n	8006816 <CO_process_SYNC+0x76>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00d      	beq.n	800681a <CO_process_SYNC+0x7a>
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d000      	beq.n	8006804 <CO_process_SYNC+0x64>
            case CO_SYNC_NONE: break;
            case CO_SYNC_RX_TX: syncWas = true; break;
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 8006802:	e008      	b.n	8006816 <CO_process_SYNC+0x76>
            case CO_SYNC_RX_TX: syncWas = true; break;
 8006804:	2301      	movs	r3, #1
 8006806:	61fb      	str	r3, [r7, #28]
 8006808:	e008      	b.n	800681c <CO_process_SYNC+0x7c>
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fc91 	bl	8007136 <CO_CANclearPendingSyncPDOs>
 8006814:	e002      	b.n	800681c <CO_process_SYNC+0x7c>
                break;
 8006816:	bf00      	nop
 8006818:	e000      	b.n	800681c <CO_process_SYNC+0x7c>
            case CO_SYNC_NONE: break;
 800681a:	bf00      	nop
        }
    }

    return syncWas;
 800681c:	69fb      	ldr	r3, [r7, #28]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3720      	adds	r7, #32
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <CO_process_RPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
void
CO_process_RPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006826:	b580      	push	{r7, lr}
 8006828:	b088      	sub	sp, #32
 800682a:	af02      	add	r7, sp, #8
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	607a      	str	r2, [r7, #4]
 8006832:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d124      	bne.n	8006886 <CO_process_RPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff faaa 	bl	8005d9a <CO_NMT_getInternalState>
 8006846:	4603      	mov	r3, r0
 8006848:	2b05      	cmp	r3, #5
 800684a:	bf0c      	ite	eq
 800684c:	2301      	moveq	r3, #1
 800684e:	2300      	movne	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006854:	2300      	movs	r3, #0
 8006856:	82fb      	strh	r3, [r7, #22]
 8006858:	e011      	b.n	800687e <CO_process_RPDO+0x58>
        CO_RPDO_process(&co->RPDO[i],
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800685e:	8afb      	ldrh	r3, [r7, #22]
 8006860:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	18d0      	adds	r0, r2, r3
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	f7fb fef0 	bl	8002658 <CO_RPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006878:	8afb      	ldrh	r3, [r7, #22]
 800687a:	3301      	adds	r3, #1
 800687c:	82fb      	strh	r3, [r7, #22]
 800687e:	8afb      	ldrh	r3, [r7, #22]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d9ea      	bls.n	800685a <CO_process_RPDO+0x34>
 8006884:	e000      	b.n	8006888 <CO_process_RPDO+0x62>
        return;
 8006886:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <CO_process_TPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
void
CO_process_TPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 800688e:	b580      	push	{r7, lr}
 8006890:	b088      	sub	sp, #32
 8006892:	af02      	add	r7, sp, #8
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	607a      	str	r2, [r7, #4]
 800689a:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d124      	bne.n	80068ee <CO_process_TPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fa76 	bl	8005d9a <CO_NMT_getInternalState>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b05      	cmp	r3, #5
 80068b2:	bf0c      	ite	eq
 80068b4:	2301      	moveq	r3, #1
 80068b6:	2300      	movne	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80068bc:	2300      	movs	r3, #0
 80068be:	82fb      	strh	r3, [r7, #22]
 80068c0:	e011      	b.n	80068e6 <CO_process_TPDO+0x58>
        CO_TPDO_process(&co->TPDO[i],
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c6:	8afb      	ldrh	r3, [r7, #22]
 80068c8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80068cc:	fb01 f303 	mul.w	r3, r1, r3
 80068d0:	18d0      	adds	r0, r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	f7fc fb8e 	bl	8002ffc <CO_TPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80068e0:	8afb      	ldrh	r3, [r7, #22]
 80068e2:	3301      	adds	r3, #1
 80068e4:	82fb      	strh	r3, [r7, #22]
 80068e6:	8afb      	ldrh	r3, [r7, #22]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d9ea      	bls.n	80068c2 <CO_process_TPDO+0x34>
 80068ec:	e000      	b.n	80068f0 <CO_process_TPDO+0x62>
        return;
 80068ee:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8006900:	4a13      	ldr	r2, [pc, #76]	; (8006950 <canopen_app_init+0x58>)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 800690a:	f107 0308 	add.w	r3, r7, #8
 800690e:	4619      	mov	r1, r3
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7ff fa63 	bl	8005ddc <CO_new>
 8006916:	4603      	mov	r3, r0
 8006918:	4a0e      	ldr	r2, [pc, #56]	; (8006954 <canopen_app_init+0x5c>)
 800691a:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 800691c:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <canopen_app_init+0x5c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d104      	bne.n	800692e <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8006924:	480c      	ldr	r0, [pc, #48]	; (8006958 <canopen_app_init+0x60>)
 8006926:	f005 fca9 	bl	800c27c <puts>
        return 1;
 800692a:	2301      	movs	r3, #1
 800692c:	e00c      	b.n	8006948 <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	4619      	mov	r1, r3
 8006932:	480a      	ldr	r0, [pc, #40]	; (800695c <canopen_app_init+0x64>)
 8006934:	f005 fc3c 	bl	800c1b0 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8006938:	4b05      	ldr	r3, [pc, #20]	; (8006950 <canopen_app_init+0x58>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a05      	ldr	r2, [pc, #20]	; (8006954 <canopen_app_init+0x5c>)
 800693e:	6812      	ldr	r2, [r2, #0]
 8006940:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8006942:	f000 f80d 	bl	8006960 <canopen_app_resetCommunication>
    return 0;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	200003a0 	.word	0x200003a0
 8006954:	200003a4 	.word	0x200003a4
 8006958:	0800cd18 	.word	0x0800cd18
 800695c:	0800cd38 	.word	0x0800cd38

08006960 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8006960:	b590      	push	{r4, r7, lr}
 8006962:	b08f      	sub	sp, #60	; 0x3c
 8006964:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 8006966:	487d      	ldr	r0, [pc, #500]	; (8006b5c <canopen_app_resetCommunication+0x1fc>)
 8006968:	f005 fc88 	bl	800c27c <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 800696c:	4b7c      	ldr	r3, [pc, #496]	; (8006b60 <canopen_app_resetCommunication+0x200>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8006976:	4b7b      	ldr	r3, [pc, #492]	; (8006b64 <canopen_app_resetCommunication+0x204>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f000 f9bc 	bl	8006cf8 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8006980:	4b77      	ldr	r3, [pc, #476]	; (8006b60 <canopen_app_resetCommunication+0x200>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4618      	mov	r0, r3
 8006988:	f000 faa6 	bl	8006ed8 <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 800698c:	4b74      	ldr	r3, [pc, #464]	; (8006b60 <canopen_app_resetCommunication+0x200>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a74      	ldr	r2, [pc, #464]	; (8006b64 <canopen_app_resetCommunication+0x204>)
 8006992:	6811      	ldr	r1, [r2, #0]
 8006994:	2200      	movs	r2, #0
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fba6 	bl	80060e8 <CO_CANinit>
 800699c:	4603      	mov	r3, r0
 800699e:	461a      	mov	r2, r3
 80069a0:	4b71      	ldr	r3, [pc, #452]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 80069a2:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80069a4:	4b70      	ldr	r3, [pc, #448]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 80069a6:	f993 3000 	ldrsb.w	r3, [r3]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d008      	beq.n	80069c0 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 80069ae:	4b6e      	ldr	r3, [pc, #440]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 80069b0:	f993 3000 	ldrsb.w	r3, [r3]
 80069b4:	4619      	mov	r1, r3
 80069b6:	486d      	ldr	r0, [pc, #436]	; (8006b6c <canopen_app_resetCommunication+0x20c>)
 80069b8:	f005 fbfa 	bl	800c1b0 <iprintf>
        return 1;
 80069bc:	2301      	movs	r3, #1
 80069be:	e0c8      	b.n	8006b52 <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80069c0:	4b6b      	ldr	r3, [pc, #428]	; (8006b70 <canopen_app_resetCommunication+0x210>)
 80069c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c4:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 80069c6:	4b6a      	ldr	r3, [pc, #424]	; (8006b70 <canopen_app_resetCommunication+0x210>)
 80069c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80069ca:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 80069cc:	4b68      	ldr	r3, [pc, #416]	; (8006b70 <canopen_app_resetCommunication+0x210>)
 80069ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80069d0:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 80069d2:	4b67      	ldr	r3, [pc, #412]	; (8006b70 <canopen_app_resetCommunication+0x210>)
 80069d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80069d6:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 80069d8:	4b61      	ldr	r3, [pc, #388]	; (8006b60 <canopen_app_resetCommunication+0x200>)
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	4b61      	ldr	r3, [pc, #388]	; (8006b64 <canopen_app_resetCommunication+0x204>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	4b60      	ldr	r3, [pc, #384]	; (8006b64 <canopen_app_resetCommunication+0x204>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3302      	adds	r3, #2
 80069e8:	f107 0108 	add.w	r1, r7, #8
 80069ec:	f7ff fba8 	bl	8006140 <CO_LSSinit>
 80069f0:	4603      	mov	r3, r0
 80069f2:	461a      	mov	r2, r3
 80069f4:	4b5c      	ldr	r3, [pc, #368]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 80069f6:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80069f8:	4b5b      	ldr	r3, [pc, #364]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 80069fa:	f993 3000 	ldrsb.w	r3, [r3]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d008      	beq.n	8006a14 <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8006a02:	4b59      	ldr	r3, [pc, #356]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 8006a04:	f993 3000 	ldrsb.w	r3, [r3]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	485a      	ldr	r0, [pc, #360]	; (8006b74 <canopen_app_resetCommunication+0x214>)
 8006a0c:	f005 fbd0 	bl	800c1b0 <iprintf>
        return 2;
 8006a10:	2302      	movs	r3, #2
 8006a12:	e09e      	b.n	8006b52 <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8006a14:	4b53      	ldr	r3, [pc, #332]	; (8006b64 <canopen_app_resetCommunication+0x204>)
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	4b52      	ldr	r3, [pc, #328]	; (8006b64 <canopen_app_resetCommunication+0x204>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	7812      	ldrb	r2, [r2, #0]
 8006a1e:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006a24:	4b4e      	ldr	r3, [pc, #312]	; (8006b60 <canopen_app_resetCommunication+0x200>)
 8006a26:	6818      	ldr	r0, [r3, #0]
 8006a28:	4b53      	ldr	r3, [pc, #332]	; (8006b78 <canopen_app_resetCommunication+0x218>)
 8006a2a:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8006a2c:	4b4d      	ldr	r3, [pc, #308]	; (8006b64 <canopen_app_resetCommunication+0x204>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	1d3a      	adds	r2, r7, #4
 8006a34:	9207      	str	r2, [sp, #28]
 8006a36:	9306      	str	r3, [sp, #24]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9305      	str	r3, [sp, #20]
 8006a3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006a40:	9304      	str	r3, [sp, #16]
 8006a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a46:	9303      	str	r3, [sp, #12]
 8006a48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006a4c:	9302      	str	r3, [sp, #8]
 8006a4e:	f242 1311 	movw	r3, #8465	; 0x2111
 8006a52:	9301      	str	r3, [sp, #4]
 8006a54:	2300      	movs	r3, #0
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	f7ff fb9b 	bl	8006198 <CO_CANopenInit>
 8006a62:	4603      	mov	r3, r0
 8006a64:	461a      	mov	r2, r3
 8006a66:	4b40      	ldr	r3, [pc, #256]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 8006a68:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8006a6a:	4b3f      	ldr	r3, [pc, #252]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 8006a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01a      	beq.n	8006aaa <canopen_app_resetCommunication+0x14a>
 8006a74:	4b3c      	ldr	r3, [pc, #240]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 8006a76:	f993 3000 	ldrsb.w	r3, [r3]
 8006a7a:	f113 0f13 	cmn.w	r3, #19
 8006a7e:	d014      	beq.n	8006aaa <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006a80:	4b39      	ldr	r3, [pc, #228]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 8006a82:	f993 3000 	ldrsb.w	r3, [r3]
 8006a86:	f113 0f0c 	cmn.w	r3, #12
 8006a8a:	d105      	bne.n	8006a98 <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	483a      	ldr	r0, [pc, #232]	; (8006b7c <canopen_app_resetCommunication+0x21c>)
 8006a92:	f005 fb8d 	bl	800c1b0 <iprintf>
 8006a96:	e006      	b.n	8006aa6 <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8006a98:	4b33      	ldr	r3, [pc, #204]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 8006a9a:	f993 3000 	ldrsb.w	r3, [r3]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4837      	ldr	r0, [pc, #220]	; (8006b80 <canopen_app_resetCommunication+0x220>)
 8006aa2:	f005 fb85 	bl	800c1b0 <iprintf>
        }
        return 3;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e053      	b.n	8006b52 <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8006aaa:	4b2d      	ldr	r3, [pc, #180]	; (8006b60 <canopen_app_resetCommunication+0x200>)
 8006aac:	6818      	ldr	r0, [r3, #0]
 8006aae:	4b2c      	ldr	r3, [pc, #176]	; (8006b60 <canopen_app_resetCommunication+0x200>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69d9      	ldr	r1, [r3, #28]
 8006ab4:	4b30      	ldr	r3, [pc, #192]	; (8006b78 <canopen_app_resetCommunication+0x218>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4b2a      	ldr	r3, [pc, #168]	; (8006b64 <canopen_app_resetCommunication+0x204>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	785c      	ldrb	r4, [r3, #1]
 8006abe:	1d3b      	adds	r3, r7, #4
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	4623      	mov	r3, r4
 8006ac4:	f7ff fcac 	bl	8006420 <CO_CANopenInitPDO>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	461a      	mov	r2, r3
 8006acc:	4b26      	ldr	r3, [pc, #152]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 8006ace:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006ad0:	4b25      	ldr	r3, [pc, #148]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 8006ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d014      	beq.n	8006b04 <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006ada:	4b23      	ldr	r3, [pc, #140]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 8006adc:	f993 3000 	ldrsb.w	r3, [r3]
 8006ae0:	f113 0f0c 	cmn.w	r3, #12
 8006ae4:	d105      	bne.n	8006af2 <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4824      	ldr	r0, [pc, #144]	; (8006b7c <canopen_app_resetCommunication+0x21c>)
 8006aec:	f005 fb60 	bl	800c1b0 <iprintf>
 8006af0:	e006      	b.n	8006b00 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8006af2:	4b1d      	ldr	r3, [pc, #116]	; (8006b68 <canopen_app_resetCommunication+0x208>)
 8006af4:	f993 3000 	ldrsb.w	r3, [r3]
 8006af8:	4619      	mov	r1, r3
 8006afa:	4822      	ldr	r0, [pc, #136]	; (8006b84 <canopen_app_resetCommunication+0x224>)
 8006afc:	f005 fb58 	bl	800c1b0 <iprintf>
        }
        return 4;
 8006b00:	2304      	movs	r3, #4
 8006b02:	e026      	b.n	8006b52 <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8006b04:	4b17      	ldr	r3, [pc, #92]	; (8006b64 <canopen_app_resetCommunication+0x204>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f003 ff0e 	bl	800a92c <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8006b10:	4b13      	ldr	r3, [pc, #76]	; (8006b60 <canopen_app_resetCommunication+0x200>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8006b1a:	481b      	ldr	r0, [pc, #108]	; (8006b88 <canopen_app_resetCommunication+0x228>)
 8006b1c:	f005 fbae 	bl	800c27c <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8006b20:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <canopen_app_resetCommunication+0x200>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 f8f6 	bl	8006d18 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8006b2c:	4817      	ldr	r0, [pc, #92]	; (8006b8c <canopen_app_resetCommunication+0x22c>)
 8006b2e:	f005 fba5 	bl	800c27c <puts>
    fflush(stdout);
 8006b32:	4b17      	ldr	r3, [pc, #92]	; (8006b90 <canopen_app_resetCommunication+0x230>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f005 fa75 	bl	800c028 <fflush>
    time_old = time_current = HAL_GetTick();
 8006b3e:	f001 fc09 	bl	8008354 <HAL_GetTick>
 8006b42:	4603      	mov	r3, r0
 8006b44:	4a13      	ldr	r2, [pc, #76]	; (8006b94 <canopen_app_resetCommunication+0x234>)
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	4b12      	ldr	r3, [pc, #72]	; (8006b94 <canopen_app_resetCommunication+0x234>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a12      	ldr	r2, [pc, #72]	; (8006b98 <canopen_app_resetCommunication+0x238>)
 8006b4e:	6013      	str	r3, [r2, #0]
    return 0;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd90      	pop	{r4, r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	0800cd60 	.word	0x0800cd60
 8006b60:	200003a4 	.word	0x200003a4
 8006b64:	200003a0 	.word	0x200003a0
 8006b68:	200003b0 	.word	0x200003b0
 8006b6c:	0800cd88 	.word	0x0800cd88
 8006b70:	20000000 	.word	0x20000000
 8006b74:	0800cdb0 	.word	0x0800cdb0
 8006b78:	20000314 	.word	0x20000314
 8006b7c:	0800cddc 	.word	0x0800cddc
 8006b80:	0800ce04 	.word	0x0800ce04
 8006b84:	0800ce30 	.word	0x0800ce30
 8006b88:	0800ce58 	.word	0x0800ce58
 8006b8c:	0800ce80 	.word	0x0800ce80
 8006b90:	20000380 	.word	0x20000380
 8006b94:	200003ac 	.word	0x200003ac
 8006b98:	200003a8 	.word	0x200003a8

08006b9c <canopen_app_process>:

void
canopen_app_process() {
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 8006ba2:	f001 fbd7 	bl	8008354 <HAL_GetTick>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	4a2c      	ldr	r2, [pc, #176]	; (8006c5c <canopen_app_process+0xc0>)
 8006baa:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8006bac:	4b2b      	ldr	r3, [pc, #172]	; (8006c5c <canopen_app_process+0xc0>)
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	4b2b      	ldr	r3, [pc, #172]	; (8006c60 <canopen_app_process+0xc4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d04c      	beq.n	8006c52 <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8006bb8:	4b28      	ldr	r3, [pc, #160]	; (8006c5c <canopen_app_process+0xc0>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4b28      	ldr	r3, [pc, #160]	; (8006c60 <canopen_app_process+0xc4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bc6:	fb02 f303 	mul.w	r3, r2, r3
 8006bca:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8006bcc:	4b23      	ldr	r3, [pc, #140]	; (8006c5c <canopen_app_process+0xc0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a23      	ldr	r2, [pc, #140]	; (8006c60 <canopen_app_process+0xc4>)
 8006bd2:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8006bd4:	4b23      	ldr	r3, [pc, #140]	; (8006c64 <canopen_app_process+0xc8>)
 8006bd6:	6818      	ldr	r0, [r3, #0]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	2100      	movs	r1, #0
 8006bde:	f7ff fce7 	bl	80065b0 <CO_process>
 8006be2:	4603      	mov	r3, r0
 8006be4:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8006be6:	4b1f      	ldr	r3, [pc, #124]	; (8006c64 <canopen_app_process+0xc8>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	7a5a      	ldrb	r2, [r3, #9]
 8006bee:	4b1e      	ldr	r3, [pc, #120]	; (8006c68 <canopen_app_process+0xcc>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	09d2      	lsrs	r2, r2, #7
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8006bf8:	4b1a      	ldr	r3, [pc, #104]	; (8006c64 <canopen_app_process+0xc8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	7a9a      	ldrb	r2, [r3, #10]
 8006c00:	4b19      	ldr	r3, [pc, #100]	; (8006c68 <canopen_app_process+0xcc>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	09d2      	lsrs	r2, r2, #7
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 8006c0a:	78fb      	ldrb	r3, [r7, #3]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d118      	bne.n	8006c42 <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8006c10:	4b15      	ldr	r3, [pc, #84]	; (8006c68 <canopen_app_process+0xcc>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f003 feda 	bl	800a9d0 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <canopen_app_process+0xcc>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 f869 	bl	8006cf8 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 8006c26:	4b0f      	ldr	r3, [pc, #60]	; (8006c64 <canopen_app_process+0xc8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff f9fd 	bl	800602a <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8006c30:	480e      	ldr	r0, [pc, #56]	; (8006c6c <canopen_app_process+0xd0>)
 8006c32:	f005 fb23 	bl	800c27c <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <canopen_app_process+0xcc>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fe5c 	bl	80068f8 <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8006c40:	e007      	b.n	8006c52 <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d104      	bne.n	8006c52 <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 8006c48:	4809      	ldr	r0, [pc, #36]	; (8006c70 <canopen_app_process+0xd4>)
 8006c4a:	f005 fb17 	bl	800c27c <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8006c4e:	f002 fbb4 	bl	80093ba <HAL_NVIC_SystemReset>
}
 8006c52:	bf00      	nop
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	200003ac 	.word	0x200003ac
 8006c60:	200003a8 	.word	0x200003a8
 8006c64:	200003a4 	.word	0x200003a4
 8006c68:	200003a0 	.word	0x200003a0
 8006c6c:	0800ce9c 	.word	0x0800ce9c
 8006c70:	0800cec4 	.word	0x0800cec4

08006c74 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8006c7a:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <canopen_app_interrupt+0x80>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c80:	f3ef 8210 	mrs	r2, PRIMASK
 8006c84:	607a      	str	r2, [r7, #4]
  return(result);
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8006c8a:	b672      	cpsid	i
}
 8006c8c:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8006c8e:	4b19      	ldr	r3, [pc, #100]	; (8006cf4 <canopen_app_interrupt+0x80>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d120      	bne.n	8006cda <canopen_app_interrupt+0x66>
 8006c98:	4b16      	ldr	r3, [pc, #88]	; (8006cf4 <canopen_app_interrupt+0x80>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01a      	beq.n	8006cda <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8006ca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cac:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8006cae:	4b11      	ldr	r3, [pc, #68]	; (8006cf4 <canopen_app_interrupt+0x80>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff fd72 	bl	80067a0 <CO_process_SYNC>
 8006cbc:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <canopen_app_interrupt+0x80>)
 8006cc0:	6818      	ldr	r0, [r3, #0]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	68f9      	ldr	r1, [r7, #12]
 8006cc8:	f7ff fdad 	bl	8006826 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8006ccc:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <canopen_app_interrupt+0x80>)
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	68f9      	ldr	r1, [r7, #12]
 8006cd6:	f7ff fdda 	bl	800688e <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8006cda:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <canopen_app_interrupt+0x80>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	f383 8810 	msr	PRIMASK, r3
}
 8006cea:	bf00      	nop
}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	200003a4 	.word	0x200003a4

08006cf8 <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d004      	beq.n	8006d10 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f001 fda3 	bl	8008856 <HAL_CAN_Stop>
#endif
    }
}
 8006d10:	bf00      	nop
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00b      	beq.n	8006d40 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 fd4d 	bl	80087ce <HAL_CAN_Start>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d102      	bne.n	8006d40 <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	615a      	str	r2, [r3, #20]
        }
    }
}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b090      	sub	sp, #64	; 0x40
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <CO_CANmodule_init+0x20>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <CO_CANmodule_init+0x20>
 8006d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006d68:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6c:	e0ab      	b.n	8006ec6 <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8006d74:	4a56      	ldr	r2, [pc, #344]	; (8006ed0 <CO_CANmodule_init+0x188>)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	887a      	ldrh	r2, [r7, #2]
 8006d84:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d8a:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006d92:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006dc2:	e02b      	b.n	8006e1c <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 8006dc4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	461a      	mov	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8006dd8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006dda:	4613      	mov	r3, r2
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4413      	add	r3, r2
 8006de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dec:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8006dee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006df0:	4613      	mov	r3, r2
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	461a      	mov	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	2200      	movs	r2, #0
 8006e00:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8006e02:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006e04:	4613      	mov	r3, r2
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4413      	add	r3, r2
 8006e12:	2200      	movs	r2, #0
 8006e14:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8006e16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006e18:	3301      	adds	r3, #1
 8006e1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006e1c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006e1e:	887b      	ldrh	r3, [r7, #2]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d3cf      	bcc.n	8006dc4 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8006e24:	2300      	movs	r3, #0
 8006e26:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006e28:	e00c      	b.n	8006e44 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 8006e2a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	4413      	add	r3, r2
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	461a      	mov	r2, r3
 8006e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e38:	4413      	add	r3, r2
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8006e3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006e40:	3301      	adds	r3, #1
 8006e42:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006e44:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8006e46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d3ed      	bcc.n	8006e2a <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ed4 <CO_CANmodule_init+0x18c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d102      	bne.n	8006e68 <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e66:	e001      	b.n	8006e6c <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 8006e68:	230e      	movs	r3, #14
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006e70:	2301      	movs	r3, #1
 8006e72:	633b      	str	r3, [r7, #48]	; 0x30
    FilterConfig.FilterIdHigh = 0x0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24

    FilterConfig.FilterActivation = ENABLE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	637b      	str	r3, [r7, #52]	; 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8006e8c:	230e      	movs	r3, #14
 8006e8e:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f107 0214 	add.w	r2, r7, #20
 8006e98:	4611      	mov	r1, r2
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f001 fbce 	bl	800863c <HAL_CAN_ConfigFilter>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eaa:	e00c      	b.n	8006ec6 <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	2113      	movs	r1, #19
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 ff37 	bl	8008d26 <HAL_CAN_ActivateNotification>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec2:	e000      	b.n	8006ec6 <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3740      	adds	r7, #64	; 0x40
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	200003b4 	.word	0x200003b4
 8006ed4:	40006400 	.word	0x40006400

08006ed8 <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <CO_CANmodule_disable+0x22>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 fcae 	bl	8008856 <HAL_CAN_Stop>
#endif
    }
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	4611      	mov	r1, r2
 8006f10:	461a      	mov	r2, r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	817b      	strh	r3, [r7, #10]
 8006f16:	460b      	mov	r3, r1
 8006f18:	813b      	strh	r3, [r7, #8]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d03c      	beq.n	8006fa2 <CO_CANrxBufferInit+0x9e>
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d039      	beq.n	8006fa2 <CO_CANrxBufferInit+0x9e>
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d036      	beq.n	8006fa2 <CO_CANrxBufferInit+0x9e>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	891b      	ldrh	r3, [r3, #8]
 8006f38:	897a      	ldrh	r2, [r7, #10]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d231      	bcs.n	8006fa2 <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6859      	ldr	r1, [r3, #4]
 8006f42:	897a      	ldrh	r2, [r7, #10]
 8006f44:	4613      	mov	r3, r2
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f54:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f5a:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8006f5c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006f60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f64:	b21b      	sxth	r3, r3
 8006f66:	6a3a      	ldr	r2, [r7, #32]
 8006f68:	2a00      	cmp	r2, #0
 8006f6a:	d001      	beq.n	8006f70 <CO_CANrxBufferInit+0x6c>
 8006f6c:	4a12      	ldr	r2, [pc, #72]	; (8006fb8 <CO_CANrxBufferInit+0xb4>)
 8006f6e:	e000      	b.n	8006f72 <CO_CANrxBufferInit+0x6e>
 8006f70:	2200      	movs	r2, #0
 8006f72:	4313      	orrs	r3, r2
 8006f74:	b21b      	sxth	r3, r3
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8006f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f84:	b21b      	sxth	r3, r3
 8006f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f8e:	b21b      	sxth	r3, r3
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <CO_CANrxBufferInit+0xa4>
            __NOP();
 8006f9e:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8006fa0:	e002      	b.n	8006fa8 <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8006fa2:	23ff      	movs	r3, #255	; 0xff
 8006fa4:	75fb      	strb	r3, [r7, #23]
 8006fa6:	e000      	b.n	8006faa <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8006fa8:	bf00      	nop
    }

    return ret;
 8006faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr
 8006fb8:	ffff8000 	.word	0xffff8000

08006fbc <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	607b      	str	r3, [r7, #4]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	817b      	strh	r3, [r7, #10]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d024      	beq.n	8007022 <CO_CANtxBufferInit+0x66>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8a1b      	ldrh	r3, [r3, #16]
 8006fdc:	897a      	ldrh	r2, [r7, #10]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d21f      	bcs.n	8007022 <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68d9      	ldr	r1, [r3, #12]
 8006fe6:	897a      	ldrh	r2, [r7, #10]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	4413      	add	r3, r2
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	440b      	add	r3, r1
 8006ff2:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8006ff4:	893b      	ldrh	r3, [r7, #8]
 8006ff6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	2a00      	cmp	r2, #0
 8006ffe:	d002      	beq.n	8007006 <CO_CANtxBufferInit+0x4a>
 8007000:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007004:	e000      	b.n	8007008 <CO_CANtxBufferInit+0x4c>
 8007006:	2200      	movs	r2, #0
 8007008:	431a      	orrs	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007014:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2200      	movs	r2, #0
 800701a:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007020:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8007022:	697b      	ldr	r3, [r7, #20]
}
 8007024:	4618      	mov	r0, r3
 8007026:	371c      	adds	r7, #28
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr
	...

08007030 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	4618      	mov	r0, r3
 8007046:	f001 fd29 	bl	8008a9c <HAL_CAN_GetTxMailboxesFreeLevel>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d028      	beq.n	80070a2 <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8007050:	4b16      	ldr	r3, [pc, #88]	; (80070ac <prv_send_can_message+0x7c>)
 8007052:	2200      	movs	r2, #0
 8007054:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 8007056:	4b15      	ldr	r3, [pc, #84]	; (80070ac <prv_send_can_message+0x7c>)
 8007058:	2200      	movs	r2, #0
 800705a:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	791b      	ldrb	r3, [r3, #4]
 8007060:	461a      	mov	r2, r3
 8007062:	4b12      	ldr	r3, [pc, #72]	; (80070ac <prv_send_can_message+0x7c>)
 8007064:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800706e:	4a0f      	ldr	r2, [pc, #60]	; (80070ac <prv_send_can_message+0x7c>)
 8007070:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	0b9b      	lsrs	r3, r3, #14
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	4a0b      	ldr	r2, [pc, #44]	; (80070ac <prv_send_can_message+0x7c>)
 800707e:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6898      	ldr	r0, [r3, #8]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	1d5a      	adds	r2, r3, #5
 800708a:	f107 0308 	add.w	r3, r7, #8
 800708e:	4907      	ldr	r1, [pc, #28]	; (80070ac <prv_send_can_message+0x7c>)
 8007090:	f001 fc2a 	bl	80088e8 <HAL_CAN_AddTxMessage>
 8007094:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 8007096:	2b00      	cmp	r3, #0
 8007098:	bf0c      	ite	eq
 800709a:	2301      	moveq	r3, #1
 800709c:	2300      	movne	r3, #0
 800709e:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 80070a0:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	200003b8 	.word	0x200003b8

080070b0 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 80070ba:	2300      	movs	r3, #0
 80070bc:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00c      	beq.n	80070e0 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	8a5b      	ldrh	r3, [r3, #18]
 80070d2:	f043 0308 	orr.w	r3, r3, #8
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 80070dc:	23f7      	movs	r3, #247	; 0xf7
 80070de:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070e0:	f3ef 8310 	mrs	r3, PRIMASK
 80070e4:	613b      	str	r3, [r7, #16]
  return(result);
 80070e6:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80070ec:	b672      	cpsid	i
}
 80070ee:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff ff9c 	bl	8007030 <prv_send_can_message>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d004      	beq.n	8007108 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	695a      	ldr	r2, [r3, #20]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	61da      	str	r2, [r3, #28]
 8007106:	e009      	b.n	800711c <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2201      	movs	r2, #1
 800710c:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007112:	b29b      	uxth	r3, r3
 8007114:	3301      	adds	r3, #1
 8007116:	b29a      	uxth	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f383 8810 	msr	PRIMASK, r3
}
 8007128:	bf00      	nop

    return err;
 800712a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8007136:	b480      	push	{r7}
 8007138:	b087      	sub	sp, #28
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007142:	f3ef 8310 	mrs	r3, PRIMASK
 8007146:	60fb      	str	r3, [r7, #12]
  return(result);
 8007148:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800714e:	b672      	cpsid	i
}
 8007150:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8007160:	2301      	movs	r3, #1
 8007162:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d032      	beq.n	80071d4 <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	8a1b      	ldrh	r3, [r3, #16]
 8007172:	827b      	strh	r3, [r7, #18]
 8007174:	e02b      	b.n	80071ce <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68d9      	ldr	r1, [r3, #12]
 800717a:	8a7a      	ldrh	r2, [r7, #18]
 800717c:	4613      	mov	r3, r2
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	4413      	add	r3, r2
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	440b      	add	r3, r1
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01d      	beq.n	80071c8 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68d9      	ldr	r1, [r3, #12]
 8007190:	8a7a      	ldrh	r2, [r7, #18]
 8007192:	4613      	mov	r3, r2
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	4413      	add	r3, r2
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	440b      	add	r3, r1
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d012      	beq.n	80071c8 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68d9      	ldr	r1, [r3, #12]
 80071a6:	8a7a      	ldrh	r2, [r7, #18]
 80071a8:	4613      	mov	r3, r2
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	4413      	add	r3, r2
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	440b      	add	r3, r1
 80071b2:	2200      	movs	r2, #0
 80071b4:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	3b01      	subs	r3, #1
 80071be:	b29a      	uxth	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 80071c4:	2302      	movs	r3, #2
 80071c6:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 80071c8:	8a7b      	ldrh	r3, [r7, #18]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	827b      	strh	r3, [r7, #18]
 80071ce:	8a7b      	ldrh	r3, [r7, #18]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1d0      	bne.n	8007176 <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f383 8810 	msr	PRIMASK, r3
}
 80071e0:	bf00      	nop
    if (tpdoDeleted) {
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d006      	beq.n	80071f6 <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8a5b      	ldrh	r3, [r3, #18]
 80071ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	825a      	strh	r2, [r3, #18]
    }
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr

08007200 <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	429a      	cmp	r2, r3
 8007224:	d02e      	beq.n	8007284 <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	8a5b      	ldrh	r3, [r3, #18]
 800722a:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & CAN_ESR_BOFF) {
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	d004      	beq.n	8007246 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 800723c:	89fb      	ldrh	r3, [r7, #14]
 800723e:	f043 0304 	orr.w	r3, r3, #4
 8007242:	81fb      	strh	r3, [r7, #14]
 8007244:	e01b      	b.n	800727e <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 8007246:	89fb      	ldrh	r3, [r7, #14]
 8007248:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 800724c:	f023 0303 	bic.w	r3, r3, #3
 8007250:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 800725c:	89fb      	ldrh	r3, [r7, #14]
 800725e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007262:	f043 0301 	orr.w	r3, r3, #1
 8007266:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 8007272:	89fb      	ldrh	r3, [r7, #14]
 8007274:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007278:	f043 0302 	orr.w	r3, r3, #2
 800727c:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	89fa      	ldrh	r2, [r7, #14]
 8007282:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr
	...

08007290 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08c      	sub	sp, #48	; 0x30
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 800729c:	2300      	movs	r3, #0
 800729e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 80072a6:	f107 0314 	add.w	r3, r7, #20
 80072aa:	3305      	adds	r3, #5
 80072ac:	4a2c      	ldr	r2, [pc, #176]	; (8007360 <prv_read_can_received_msg+0xd0>)
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f001 fc27 	bl	8008b04 <HAL_CAN_GetRxMessage>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d14c      	bne.n	8007356 <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 80072bc:	4b28      	ldr	r3, [pc, #160]	; (8007360 <prv_read_can_received_msg+0xd0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a27      	ldr	r2, [pc, #156]	; (8007360 <prv_read_can_received_msg+0xd0>)
 80072c2:	68d2      	ldr	r2, [r2, #12]
 80072c4:	2a02      	cmp	r2, #2
 80072c6:	d102      	bne.n	80072ce <prv_read_can_received_msg+0x3e>
 80072c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80072cc:	e000      	b.n	80072d0 <prv_read_can_received_msg+0x40>
 80072ce:	2200      	movs	r2, #0
 80072d0:	4313      	orrs	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 80072d4:	4b22      	ldr	r3, [pc, #136]	; (8007360 <prv_read_can_received_msg+0xd0>)
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 80072e0:	4b20      	ldr	r3, [pc, #128]	; (8007364 <prv_read_can_received_msg+0xd4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 80072ea:	be00      	bkpt	0x0000
 80072ec:	e01f      	b.n	800732e <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 80072ee:	4b1d      	ldr	r3, [pc, #116]	; (8007364 <prv_read_can_received_msg+0xd4>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 80072f6:	4b1b      	ldr	r3, [pc, #108]	; (8007364 <prv_read_can_received_msg+0xd4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	891b      	ldrh	r3, [r3, #8]
 80072fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80072fe:	e013      	b.n	8007328 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	4053      	eors	r3, r2
 800730a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800730c:	8852      	ldrh	r2, [r2, #2]
 800730e:	4013      	ands	r3, r2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d103      	bne.n	800731c <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 8007314:	2301      	movs	r3, #1
 8007316:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 800731a:	e008      	b.n	800732e <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 800731c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800731e:	3b01      	subs	r3, #1
 8007320:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007324:	330c      	adds	r3, #12
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007328:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e8      	bne.n	8007300 <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 800732e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007332:	2b00      	cmp	r3, #0
 8007334:	d010      	beq.n	8007358 <prv_read_can_received_msg+0xc8>
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00d      	beq.n	8007358 <prv_read_can_received_msg+0xc8>
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d009      	beq.n	8007358 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800734a:	6852      	ldr	r2, [r2, #4]
 800734c:	f107 0114 	add.w	r1, r7, #20
 8007350:	4610      	mov	r0, r2
 8007352:	4798      	blx	r3
 8007354:	e000      	b.n	8007358 <prv_read_can_received_msg+0xc8>
        return;
 8007356:	bf00      	nop
    }
}
 8007358:	3730      	adds	r7, #48	; 0x30
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	200003d0 	.word	0x200003d0
 8007364:	200003b4 	.word	0x200003b4

08007368 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 8007370:	2200      	movs	r2, #0
 8007372:	2100      	movs	r1, #0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff ff8b 	bl	8007290 <prv_read_can_received_msg>
}
 800737a:	bf00      	nop
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 800738a:	2200      	movs	r2, #0
 800738c:	2101      	movs	r1, #1
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff ff7e 	bl	8007290 <prv_read_can_received_msg>
}
 8007394:	bf00      	nop
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d03d      	beq.n	8007438 <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c2:	f3ef 8310 	mrs	r3, PRIMASK
 80073c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80073c8:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80073ce:	b672      	cpsid	i
}
 80073d0:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	8a1b      	ldrh	r3, [r3, #16]
 80073d6:	827b      	strh	r3, [r7, #18]
 80073d8:	e01e      	b.n	8007418 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d014      	beq.n	800740c <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 80073e2:	6979      	ldr	r1, [r7, #20]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7ff fe23 	bl	8007030 <prv_send_can_message>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00d      	beq.n	800740c <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2200      	movs	r2, #0
 80073f4:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	695a      	ldr	r2, [r3, #20]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 800740c:	8a7b      	ldrh	r3, [r7, #18]
 800740e:	3b01      	subs	r3, #1
 8007410:	827b      	strh	r3, [r7, #18]
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	3318      	adds	r3, #24
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	8a7b      	ldrh	r3, [r7, #18]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1dd      	bne.n	80073da <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 800741e:	8a7b      	ldrh	r3, [r7, #18]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d102      	bne.n	800742a <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f383 8810 	msr	PRIMASK, r3
}
 8007436:	bf00      	nop
    }
}
 8007438:	bf00      	nop
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007448:	4b04      	ldr	r3, [pc, #16]	; (800745c <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2101      	movs	r1, #1
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff ffa4 	bl	800739c <CO_CANinterrupt_TX>
}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	200003b4 	.word	0x200003b4

08007460 <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007468:	4b04      	ldr	r3, [pc, #16]	; (800747c <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2101      	movs	r1, #1
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff ff94 	bl	800739c <CO_CANinterrupt_TX>
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	200003b4 	.word	0x200003b4

08007480 <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007488:	4b04      	ldr	r3, [pc, #16]	; (800749c <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2101      	movs	r1, #1
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff ff84 	bl	800739c <CO_CANinterrupt_TX>
}
 8007494:	bf00      	nop
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	200003b4 	.word	0x200003b4

080074a0 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Timer interrupt function executes every 1 ms */
void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
//static uint8_t cvb=0;
//  cvb++;
//  cvb%=128*4;
//  if(cvb==0){HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);}
  if (htim == canopenNodeSTM32->timerHandle) {canopen_app_interrupt();}
 80074a8:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d101      	bne.n	80074b8 <HAL_TIM_PeriodElapsedCallback+0x18>
 80074b4:	f7ff fbde 	bl	8006c74 <canopen_app_interrupt>

}
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	200003a0 	.word	0x200003a0

080074c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b088      	sub	sp, #32
 80074c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80074ca:	f000 feeb 	bl	80082a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80074ce:	f000 f899 	bl	8007604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80074d2:	f000 faf3 	bl	8007abc <MX_GPIO_Init>
  MX_DMA_Init();
 80074d6:	f000 facb 	bl	8007a70 <MX_DMA_Init>
  MX_CAN_Init();
 80074da:	f000 f8d9 	bl	8007690 <MX_CAN_Init>
  MX_TIM1_Init();
 80074de:	f000 f93b 	bl	8007758 <MX_TIM1_Init>
  MX_TIM2_Init();
 80074e2:	f000 f989 	bl	80077f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80074e6:	f000 f9d3 	bl	8007890 <MX_TIM3_Init>
  MX_TIM4_Init();
 80074ea:	f000 fa1f 	bl	800792c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80074ee:	f000 fa6b 	bl	80079c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80074f2:	f000 fa93 	bl	8007a1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80074f6:	f000 f901 	bl	80076fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

    HAL_Delay(500);
 80074fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80074fe:	f000 ff33 	bl	8008368 <HAL_Delay>
		   HAL_Delay(64);
		  }
	  }
#endif

for(uint8_t cnt=0;cnt<50;cnt++)
 8007502:	2300      	movs	r3, #0
 8007504:	77fb      	strb	r3, [r7, #31]
 8007506:	e00e      	b.n	8007526 <main+0x62>
{
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5 );
 8007508:	2120      	movs	r1, #32
 800750a:	4835      	ldr	r0, [pc, #212]	; (80075e0 <main+0x11c>)
 800750c:	f002 fba0 	bl	8009c50 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13 );
 8007510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007514:	4833      	ldr	r0, [pc, #204]	; (80075e4 <main+0x120>)
 8007516:	f002 fb9b 	bl	8009c50 <HAL_GPIO_TogglePin>
    HAL_Delay(20);
 800751a:	2014      	movs	r0, #20
 800751c:	f000 ff24 	bl	8008368 <HAL_Delay>
for(uint8_t cnt=0;cnt<50;cnt++)
 8007520:	7ffb      	ldrb	r3, [r7, #31]
 8007522:	3301      	adds	r3, #1
 8007524:	77fb      	strb	r3, [r7, #31]
 8007526:	7ffb      	ldrb	r3, [r7, #31]
 8007528:	2b31      	cmp	r3, #49	; 0x31
 800752a:	d9ed      	bls.n	8007508 <main+0x44>
}
//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);//off
//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);  HAL_Delay(2200);//off

  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hcan;
 800752c:	4b2e      	ldr	r3, [pc, #184]	; (80075e8 <main+0x124>)
 800752e:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.HWInitFunction = MX_CAN_Init;
 8007530:	4b2e      	ldr	r3, [pc, #184]	; (80075ec <main+0x128>)
 8007532:	613b      	str	r3, [r7, #16]
  canOpenNodeSTM32.timerHandle = &htim4;
 8007534:	4b2e      	ldr	r3, [pc, #184]	; (80075f0 <main+0x12c>)
 8007536:	60bb      	str	r3, [r7, #8]
  canOpenNodeSTM32.desiredNodeID = 103;
 8007538:	2367      	movs	r3, #103	; 0x67
 800753a:	713b      	strb	r3, [r7, #4]
  canOpenNodeSTM32.baudrate = 125*4;
 800753c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007540:	80fb      	strh	r3, [r7, #6]
  canopen_app_init(&canOpenNodeSTM32);
 8007542:	1d3b      	adds	r3, r7, #4
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff f9d7 	bl	80068f8 <canopen_app_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, !canOpenNodeSTM32.outStatusLEDGreen);
 800754a:	7d3b      	ldrb	r3, [r7, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	bf0c      	ite	eq
 8007550:	2301      	moveq	r3, #1
 8007552:	2300      	movne	r3, #0
 8007554:	b2db      	uxtb	r3, r3
 8007556:	461a      	mov	r2, r3
 8007558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800755c:	4821      	ldr	r0, [pc, #132]	; (80075e4 <main+0x120>)
 800755e:	f002 fb5f 	bl	8009c20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 ,  canOpenNodeSTM32.outStatusLEDRed  );
 8007562:	7d7b      	ldrb	r3, [r7, #21]
 8007564:	461a      	mov	r2, r3
 8007566:	2120      	movs	r1, #32
 8007568:	481d      	ldr	r0, [pc, #116]	; (80075e0 <main+0x11c>)
 800756a:	f002 fb59 	bl	8009c20 <HAL_GPIO_WritePin>


  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, !canOpenNodeSTM32.outStatusLEDGreen);
 800756e:	7d3b      	ldrb	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	bf0c      	ite	eq
 8007574:	2301      	moveq	r3, #1
 8007576:	2300      	movne	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007580:	4818      	ldr	r0, [pc, #96]	; (80075e4 <main+0x120>)
 8007582:	f002 fb4d 	bl	8009c20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 ,  canOpenNodeSTM32.outStatusLEDRed  );
 8007586:	7d7b      	ldrb	r3, [r7, #21]
 8007588:	461a      	mov	r2, r3
 800758a:	2120      	movs	r1, #32
 800758c:	4814      	ldr	r0, [pc, #80]	; (80075e0 <main+0x11c>)
 800758e:	f002 fb47 	bl	8009c20 <HAL_GPIO_WritePin>

	  canopen_app_process();
 8007592:	f7ff fb03 	bl	8006b9c <canopen_app_process>


	  		  if(HAL_GetTick() - Ticks>499)
 8007596:	f000 fedd 	bl	8008354 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	4b15      	ldr	r3, [pc, #84]	; (80075f4 <main+0x130>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80075a6:	d304      	bcc.n	80075b2 <main+0xee>
	  		  {Ticks = HAL_GetTick();}
 80075a8:	f000 fed4 	bl	8008354 <HAL_GetTick>
 80075ac:	4603      	mov	r3, r0
 80075ae:	4a11      	ldr	r2, [pc, #68]	; (80075f4 <main+0x130>)
 80075b0:	6013      	str	r3, [r2, #0]

	  			if(tmp32u_0 != OD_PERSIST_COMM.x6001_F103_VAR32_6001R)
 80075b2:	4b11      	ldr	r3, [pc, #68]	; (80075f8 <main+0x134>)
 80075b4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80075b8:	4b10      	ldr	r3, [pc, #64]	; (80075fc <main+0x138>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d0d6      	beq.n	800756e <main+0xaa>
	  			{
	  			tmp32u_0 = OD_PERSIST_COMM.x6001_F103_VAR32_6001R;
 80075c0:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <main+0x134>)
 80075c2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80075c6:	4a0d      	ldr	r2, [pc, #52]	; (80075fc <main+0x138>)
 80075c8:	6013      	str	r3, [r2, #0]
	  			huart1.gState = HAL_UART_STATE_READY;
 80075ca:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <main+0x13c>)
 80075cc:	2220      	movs	r2, #32
 80075ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	  			HAL_UART_Transmit_DMA( &huart1, (uint8_t*)(&tmp32u_0), 4);
 80075d2:	2204      	movs	r2, #4
 80075d4:	4909      	ldr	r1, [pc, #36]	; (80075fc <main+0x138>)
 80075d6:	480a      	ldr	r0, [pc, #40]	; (8007600 <main+0x13c>)
 80075d8:	f003 fe8a 	bl	800b2f0 <HAL_UART_Transmit_DMA>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, !canOpenNodeSTM32.outStatusLEDGreen);
 80075dc:	e7c7      	b.n	800756e <main+0xaa>
 80075de:	bf00      	nop
 80075e0:	40010800 	.word	0x40010800
 80075e4:	40011000 	.word	0x40011000
 80075e8:	200003ec 	.word	0x200003ec
 80075ec:	08007691 	.word	0x08007691
 80075f0:	200006f0 	.word	0x200006f0
 80075f4:	20000914 	.word	0x20000914
 80075f8:	20000000 	.word	0x20000000
 80075fc:	20000318 	.word	0x20000318
 8007600:	200007a4 	.word	0x200007a4

08007604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b090      	sub	sp, #64	; 0x40
 8007608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800760a:	f107 0318 	add.w	r3, r7, #24
 800760e:	2228      	movs	r2, #40	; 0x28
 8007610:	2100      	movs	r1, #0
 8007612:	4618      	mov	r0, r3
 8007614:	f004 ff2c 	bl	800c470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007618:	1d3b      	adds	r3, r7, #4
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	605a      	str	r2, [r3, #4]
 8007620:	609a      	str	r2, [r3, #8]
 8007622:	60da      	str	r2, [r3, #12]
 8007624:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007626:	2301      	movs	r3, #1
 8007628:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800762a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800762e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007630:	2300      	movs	r3, #0
 8007632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007634:	2301      	movs	r3, #1
 8007636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007638:	2302      	movs	r3, #2
 800763a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800763c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007642:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007646:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007648:	f107 0318 	add.w	r3, r7, #24
 800764c:	4618      	mov	r0, r3
 800764e:	f002 fcf7 	bl	800a040 <HAL_RCC_OscConfig>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007658:	f000 faa8 	bl	8007bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800765c:	230f      	movs	r3, #15
 800765e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007660:	2302      	movs	r3, #2
 8007662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800766c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007672:	1d3b      	adds	r3, r7, #4
 8007674:	2102      	movs	r1, #2
 8007676:	4618      	mov	r0, r3
 8007678:	f002 ff64 	bl	800a544 <HAL_RCC_ClockConfig>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007682:	f000 fa93 	bl	8007bac <Error_Handler>
  }
}
 8007686:	bf00      	nop
 8007688:	3740      	adds	r7, #64	; 0x40
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007694:	4b17      	ldr	r3, [pc, #92]	; (80076f4 <MX_CAN_Init+0x64>)
 8007696:	4a18      	ldr	r2, [pc, #96]	; (80076f8 <MX_CAN_Init+0x68>)
 8007698:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800769a:	4b16      	ldr	r3, [pc, #88]	; (80076f4 <MX_CAN_Init+0x64>)
 800769c:	2208      	movs	r2, #8
 800769e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80076a0:	4b14      	ldr	r3, [pc, #80]	; (80076f4 <MX_CAN_Init+0x64>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80076a6:	4b13      	ldr	r3, [pc, #76]	; (80076f4 <MX_CAN_Init+0x64>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80076ac:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <MX_CAN_Init+0x64>)
 80076ae:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80076b2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80076b4:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <MX_CAN_Init+0x64>)
 80076b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80076ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80076bc:	4b0d      	ldr	r3, [pc, #52]	; (80076f4 <MX_CAN_Init+0x64>)
 80076be:	2200      	movs	r2, #0
 80076c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80076c2:	4b0c      	ldr	r3, [pc, #48]	; (80076f4 <MX_CAN_Init+0x64>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80076c8:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <MX_CAN_Init+0x64>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80076ce:	4b09      	ldr	r3, [pc, #36]	; (80076f4 <MX_CAN_Init+0x64>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80076d4:	4b07      	ldr	r3, [pc, #28]	; (80076f4 <MX_CAN_Init+0x64>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80076da:	4b06      	ldr	r3, [pc, #24]	; (80076f4 <MX_CAN_Init+0x64>)
 80076dc:	2200      	movs	r2, #0
 80076de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80076e0:	4804      	ldr	r0, [pc, #16]	; (80076f4 <MX_CAN_Init+0x64>)
 80076e2:	f000 fe65 	bl	80083b0 <HAL_CAN_Init>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80076ec:	f000 fa5e 	bl	8007bac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80076f0:	bf00      	nop
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	200003ec 	.word	0x200003ec
 80076f8:	40006400 	.word	0x40006400

080076fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007700:	4b12      	ldr	r3, [pc, #72]	; (800774c <MX_I2C1_Init+0x50>)
 8007702:	4a13      	ldr	r2, [pc, #76]	; (8007750 <MX_I2C1_Init+0x54>)
 8007704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007706:	4b11      	ldr	r3, [pc, #68]	; (800774c <MX_I2C1_Init+0x50>)
 8007708:	4a12      	ldr	r2, [pc, #72]	; (8007754 <MX_I2C1_Init+0x58>)
 800770a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800770c:	4b0f      	ldr	r3, [pc, #60]	; (800774c <MX_I2C1_Init+0x50>)
 800770e:	2200      	movs	r2, #0
 8007710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007712:	4b0e      	ldr	r3, [pc, #56]	; (800774c <MX_I2C1_Init+0x50>)
 8007714:	2200      	movs	r2, #0
 8007716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007718:	4b0c      	ldr	r3, [pc, #48]	; (800774c <MX_I2C1_Init+0x50>)
 800771a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800771e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007720:	4b0a      	ldr	r3, [pc, #40]	; (800774c <MX_I2C1_Init+0x50>)
 8007722:	2200      	movs	r2, #0
 8007724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007726:	4b09      	ldr	r3, [pc, #36]	; (800774c <MX_I2C1_Init+0x50>)
 8007728:	2200      	movs	r2, #0
 800772a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800772c:	4b07      	ldr	r3, [pc, #28]	; (800774c <MX_I2C1_Init+0x50>)
 800772e:	2200      	movs	r2, #0
 8007730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007732:	4b06      	ldr	r3, [pc, #24]	; (800774c <MX_I2C1_Init+0x50>)
 8007734:	2200      	movs	r2, #0
 8007736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007738:	4804      	ldr	r0, [pc, #16]	; (800774c <MX_I2C1_Init+0x50>)
 800773a:	f002 faa3 	bl	8009c84 <HAL_I2C_Init>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007744:	f000 fa32 	bl	8007bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007748:	bf00      	nop
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20000450 	.word	0x20000450
 8007750:	40005400 	.word	0x40005400
 8007754:	000186a0 	.word	0x000186a0

08007758 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800775e:	f107 0308 	add.w	r3, r7, #8
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	605a      	str	r2, [r3, #4]
 8007768:	609a      	str	r2, [r3, #8]
 800776a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800776c:	463b      	mov	r3, r7
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007774:	4b1e      	ldr	r3, [pc, #120]	; (80077f0 <MX_TIM1_Init+0x98>)
 8007776:	4a1f      	ldr	r2, [pc, #124]	; (80077f4 <MX_TIM1_Init+0x9c>)
 8007778:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800777a:	4b1d      	ldr	r3, [pc, #116]	; (80077f0 <MX_TIM1_Init+0x98>)
 800777c:	2200      	movs	r2, #0
 800777e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007780:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <MX_TIM1_Init+0x98>)
 8007782:	2200      	movs	r2, #0
 8007784:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8007786:	4b1a      	ldr	r3, [pc, #104]	; (80077f0 <MX_TIM1_Init+0x98>)
 8007788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800778c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800778e:	4b18      	ldr	r3, [pc, #96]	; (80077f0 <MX_TIM1_Init+0x98>)
 8007790:	2200      	movs	r2, #0
 8007792:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007794:	4b16      	ldr	r3, [pc, #88]	; (80077f0 <MX_TIM1_Init+0x98>)
 8007796:	2200      	movs	r2, #0
 8007798:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800779a:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <MX_TIM1_Init+0x98>)
 800779c:	2200      	movs	r2, #0
 800779e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80077a0:	4813      	ldr	r0, [pc, #76]	; (80077f0 <MX_TIM1_Init+0x98>)
 80077a2:	f003 f867 	bl	800a874 <HAL_TIM_Base_Init>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80077ac:	f000 f9fe 	bl	8007bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80077b6:	f107 0308 	add.w	r3, r7, #8
 80077ba:	4619      	mov	r1, r3
 80077bc:	480c      	ldr	r0, [pc, #48]	; (80077f0 <MX_TIM1_Init+0x98>)
 80077be:	f003 fa5d 	bl	800ac7c <HAL_TIM_ConfigClockSource>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80077c8:	f000 f9f0 	bl	8007bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80077cc:	2300      	movs	r3, #0
 80077ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80077d4:	463b      	mov	r3, r7
 80077d6:	4619      	mov	r1, r3
 80077d8:	4805      	ldr	r0, [pc, #20]	; (80077f0 <MX_TIM1_Init+0x98>)
 80077da:	f003 fcb5 	bl	800b148 <HAL_TIMEx_MasterConfigSynchronization>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80077e4:	f000 f9e2 	bl	8007bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80077e8:	bf00      	nop
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	200004d4 	.word	0x200004d4
 80077f4:	40012c00 	.word	0x40012c00

080077f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077fe:	f107 0308 	add.w	r3, r7, #8
 8007802:	2200      	movs	r2, #0
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	605a      	str	r2, [r3, #4]
 8007808:	609a      	str	r2, [r3, #8]
 800780a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800780c:	463b      	mov	r3, r7
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007814:	4b1d      	ldr	r3, [pc, #116]	; (800788c <MX_TIM2_Init+0x94>)
 8007816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800781a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800781c:	4b1b      	ldr	r3, [pc, #108]	; (800788c <MX_TIM2_Init+0x94>)
 800781e:	2200      	movs	r2, #0
 8007820:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007822:	4b1a      	ldr	r3, [pc, #104]	; (800788c <MX_TIM2_Init+0x94>)
 8007824:	2200      	movs	r2, #0
 8007826:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8007828:	4b18      	ldr	r3, [pc, #96]	; (800788c <MX_TIM2_Init+0x94>)
 800782a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800782e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007830:	4b16      	ldr	r3, [pc, #88]	; (800788c <MX_TIM2_Init+0x94>)
 8007832:	2200      	movs	r2, #0
 8007834:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007836:	4b15      	ldr	r3, [pc, #84]	; (800788c <MX_TIM2_Init+0x94>)
 8007838:	2200      	movs	r2, #0
 800783a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800783c:	4813      	ldr	r0, [pc, #76]	; (800788c <MX_TIM2_Init+0x94>)
 800783e:	f003 f819 	bl	800a874 <HAL_TIM_Base_Init>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007848:	f000 f9b0 	bl	8007bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800784c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007852:	f107 0308 	add.w	r3, r7, #8
 8007856:	4619      	mov	r1, r3
 8007858:	480c      	ldr	r0, [pc, #48]	; (800788c <MX_TIM2_Init+0x94>)
 800785a:	f003 fa0f 	bl	800ac7c <HAL_TIM_ConfigClockSource>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007864:	f000 f9a2 	bl	8007bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007868:	2300      	movs	r3, #0
 800786a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800786c:	2300      	movs	r3, #0
 800786e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007870:	463b      	mov	r3, r7
 8007872:	4619      	mov	r1, r3
 8007874:	4805      	ldr	r0, [pc, #20]	; (800788c <MX_TIM2_Init+0x94>)
 8007876:	f003 fc67 	bl	800b148 <HAL_TIMEx_MasterConfigSynchronization>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007880:	f000 f994 	bl	8007bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007884:	bf00      	nop
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000588 	.word	0x20000588

08007890 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007896:	f107 0308 	add.w	r3, r7, #8
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	605a      	str	r2, [r3, #4]
 80078a0:	609a      	str	r2, [r3, #8]
 80078a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078a4:	463b      	mov	r3, r7
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80078ac:	4b1d      	ldr	r3, [pc, #116]	; (8007924 <MX_TIM3_Init+0x94>)
 80078ae:	4a1e      	ldr	r2, [pc, #120]	; (8007928 <MX_TIM3_Init+0x98>)
 80078b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80078b2:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <MX_TIM3_Init+0x94>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078b8:	4b1a      	ldr	r3, [pc, #104]	; (8007924 <MX_TIM3_Init+0x94>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80078be:	4b19      	ldr	r3, [pc, #100]	; (8007924 <MX_TIM3_Init+0x94>)
 80078c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078c6:	4b17      	ldr	r3, [pc, #92]	; (8007924 <MX_TIM3_Init+0x94>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078cc:	4b15      	ldr	r3, [pc, #84]	; (8007924 <MX_TIM3_Init+0x94>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80078d2:	4814      	ldr	r0, [pc, #80]	; (8007924 <MX_TIM3_Init+0x94>)
 80078d4:	f002 ffce 	bl	800a874 <HAL_TIM_Base_Init>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80078de:	f000 f965 	bl	8007bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80078e8:	f107 0308 	add.w	r3, r7, #8
 80078ec:	4619      	mov	r1, r3
 80078ee:	480d      	ldr	r0, [pc, #52]	; (8007924 <MX_TIM3_Init+0x94>)
 80078f0:	f003 f9c4 	bl	800ac7c <HAL_TIM_ConfigClockSource>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80078fa:	f000 f957 	bl	8007bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80078fe:	2300      	movs	r3, #0
 8007900:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007902:	2300      	movs	r3, #0
 8007904:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007906:	463b      	mov	r3, r7
 8007908:	4619      	mov	r1, r3
 800790a:	4806      	ldr	r0, [pc, #24]	; (8007924 <MX_TIM3_Init+0x94>)
 800790c:	f003 fc1c 	bl	800b148 <HAL_TIMEx_MasterConfigSynchronization>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8007916:	f000 f949 	bl	8007bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800791a:	bf00      	nop
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	2000063c 	.word	0x2000063c
 8007928:	40000400 	.word	0x40000400

0800792c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007932:	f107 0308 	add.w	r3, r7, #8
 8007936:	2200      	movs	r2, #0
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	605a      	str	r2, [r3, #4]
 800793c:	609a      	str	r2, [r3, #8]
 800793e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007940:	463b      	mov	r3, r7
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007948:	4b1d      	ldr	r3, [pc, #116]	; (80079c0 <MX_TIM4_Init+0x94>)
 800794a:	4a1e      	ldr	r2, [pc, #120]	; (80079c4 <MX_TIM4_Init+0x98>)
 800794c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800794e:	4b1c      	ldr	r3, [pc, #112]	; (80079c0 <MX_TIM4_Init+0x94>)
 8007950:	2247      	movs	r2, #71	; 0x47
 8007952:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007954:	4b1a      	ldr	r3, [pc, #104]	; (80079c0 <MX_TIM4_Init+0x94>)
 8007956:	2200      	movs	r2, #0
 8007958:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800795a:	4b19      	ldr	r3, [pc, #100]	; (80079c0 <MX_TIM4_Init+0x94>)
 800795c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007960:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007962:	4b17      	ldr	r3, [pc, #92]	; (80079c0 <MX_TIM4_Init+0x94>)
 8007964:	2200      	movs	r2, #0
 8007966:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007968:	4b15      	ldr	r3, [pc, #84]	; (80079c0 <MX_TIM4_Init+0x94>)
 800796a:	2200      	movs	r2, #0
 800796c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800796e:	4814      	ldr	r0, [pc, #80]	; (80079c0 <MX_TIM4_Init+0x94>)
 8007970:	f002 ff80 	bl	800a874 <HAL_TIM_Base_Init>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800797a:	f000 f917 	bl	8007bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800797e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007982:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007984:	f107 0308 	add.w	r3, r7, #8
 8007988:	4619      	mov	r1, r3
 800798a:	480d      	ldr	r0, [pc, #52]	; (80079c0 <MX_TIM4_Init+0x94>)
 800798c:	f003 f976 	bl	800ac7c <HAL_TIM_ConfigClockSource>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8007996:	f000 f909 	bl	8007bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800799a:	2320      	movs	r3, #32
 800799c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800799e:	2300      	movs	r3, #0
 80079a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80079a2:	463b      	mov	r3, r7
 80079a4:	4619      	mov	r1, r3
 80079a6:	4806      	ldr	r0, [pc, #24]	; (80079c0 <MX_TIM4_Init+0x94>)
 80079a8:	f003 fbce 	bl	800b148 <HAL_TIMEx_MasterConfigSynchronization>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80079b2:	f000 f8fb 	bl	8007bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80079b6:	bf00      	nop
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	200006f0 	.word	0x200006f0
 80079c4:	40000800 	.word	0x40000800

080079c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80079cc:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <MX_USART1_UART_Init+0x4c>)
 80079ce:	4a12      	ldr	r2, [pc, #72]	; (8007a18 <MX_USART1_UART_Init+0x50>)
 80079d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80079d2:	4b10      	ldr	r3, [pc, #64]	; (8007a14 <MX_USART1_UART_Init+0x4c>)
 80079d4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80079d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80079da:	4b0e      	ldr	r3, [pc, #56]	; (8007a14 <MX_USART1_UART_Init+0x4c>)
 80079dc:	2200      	movs	r2, #0
 80079de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80079e0:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <MX_USART1_UART_Init+0x4c>)
 80079e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80079e6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80079e8:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <MX_USART1_UART_Init+0x4c>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80079ee:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <MX_USART1_UART_Init+0x4c>)
 80079f0:	220c      	movs	r2, #12
 80079f2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80079f4:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <MX_USART1_UART_Init+0x4c>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80079fa:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <MX_USART1_UART_Init+0x4c>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007a00:	4804      	ldr	r0, [pc, #16]	; (8007a14 <MX_USART1_UART_Init+0x4c>)
 8007a02:	f003 fc1b 	bl	800b23c <HAL_UART_Init>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8007a0c:	f000 f8ce 	bl	8007bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007a10:	bf00      	nop
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	200007a4 	.word	0x200007a4
 8007a18:	40013800 	.word	0x40013800

08007a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007a20:	4b11      	ldr	r3, [pc, #68]	; (8007a68 <MX_USART2_UART_Init+0x4c>)
 8007a22:	4a12      	ldr	r2, [pc, #72]	; (8007a6c <MX_USART2_UART_Init+0x50>)
 8007a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007a26:	4b10      	ldr	r3, [pc, #64]	; (8007a68 <MX_USART2_UART_Init+0x4c>)
 8007a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007a2e:	4b0e      	ldr	r3, [pc, #56]	; (8007a68 <MX_USART2_UART_Init+0x4c>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8007a34:	4b0c      	ldr	r3, [pc, #48]	; (8007a68 <MX_USART2_UART_Init+0x4c>)
 8007a36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a3a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <MX_USART2_UART_Init+0x4c>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007a42:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <MX_USART2_UART_Init+0x4c>)
 8007a44:	220c      	movs	r2, #12
 8007a46:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a48:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <MX_USART2_UART_Init+0x4c>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a4e:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <MX_USART2_UART_Init+0x4c>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007a54:	4804      	ldr	r0, [pc, #16]	; (8007a68 <MX_USART2_UART_Init+0x4c>)
 8007a56:	f003 fbf1 	bl	800b23c <HAL_UART_Init>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8007a60:	f000 f8a4 	bl	8007bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007a64:	bf00      	nop
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	20000818 	.word	0x20000818
 8007a6c:	40004400 	.word	0x40004400

08007a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007a76:	4b10      	ldr	r3, [pc, #64]	; (8007ab8 <MX_DMA_Init+0x48>)
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	4a0f      	ldr	r2, [pc, #60]	; (8007ab8 <MX_DMA_Init+0x48>)
 8007a7c:	f043 0301 	orr.w	r3, r3, #1
 8007a80:	6153      	str	r3, [r2, #20]
 8007a82:	4b0d      	ldr	r3, [pc, #52]	; (8007ab8 <MX_DMA_Init+0x48>)
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	607b      	str	r3, [r7, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2100      	movs	r1, #0
 8007a92:	200e      	movs	r0, #14
 8007a94:	f001 fc67 	bl	8009366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8007a98:	200e      	movs	r0, #14
 8007a9a:	f001 fc80 	bl	800939e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	200f      	movs	r0, #15
 8007aa4:	f001 fc5f 	bl	8009366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8007aa8:	200f      	movs	r0, #15
 8007aaa:	f001 fc78 	bl	800939e <HAL_NVIC_EnableIRQ>

}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	40021000 	.word	0x40021000

08007abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac2:	f107 0310 	add.w	r3, r7, #16
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	605a      	str	r2, [r3, #4]
 8007acc:	609a      	str	r2, [r3, #8]
 8007ace:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ad0:	4b33      	ldr	r3, [pc, #204]	; (8007ba0 <MX_GPIO_Init+0xe4>)
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	4a32      	ldr	r2, [pc, #200]	; (8007ba0 <MX_GPIO_Init+0xe4>)
 8007ad6:	f043 0310 	orr.w	r3, r3, #16
 8007ada:	6193      	str	r3, [r2, #24]
 8007adc:	4b30      	ldr	r3, [pc, #192]	; (8007ba0 <MX_GPIO_Init+0xe4>)
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	f003 0310 	and.w	r3, r3, #16
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ae8:	4b2d      	ldr	r3, [pc, #180]	; (8007ba0 <MX_GPIO_Init+0xe4>)
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	4a2c      	ldr	r2, [pc, #176]	; (8007ba0 <MX_GPIO_Init+0xe4>)
 8007aee:	f043 0320 	orr.w	r3, r3, #32
 8007af2:	6193      	str	r3, [r2, #24]
 8007af4:	4b2a      	ldr	r3, [pc, #168]	; (8007ba0 <MX_GPIO_Init+0xe4>)
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	f003 0320 	and.w	r3, r3, #32
 8007afc:	60bb      	str	r3, [r7, #8]
 8007afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b00:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <MX_GPIO_Init+0xe4>)
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	4a26      	ldr	r2, [pc, #152]	; (8007ba0 <MX_GPIO_Init+0xe4>)
 8007b06:	f043 0304 	orr.w	r3, r3, #4
 8007b0a:	6193      	str	r3, [r2, #24]
 8007b0c:	4b24      	ldr	r3, [pc, #144]	; (8007ba0 <MX_GPIO_Init+0xe4>)
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	607b      	str	r3, [r7, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b18:	4b21      	ldr	r3, [pc, #132]	; (8007ba0 <MX_GPIO_Init+0xe4>)
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	4a20      	ldr	r2, [pc, #128]	; (8007ba0 <MX_GPIO_Init+0xe4>)
 8007b1e:	f043 0308 	orr.w	r3, r3, #8
 8007b22:	6193      	str	r3, [r2, #24]
 8007b24:	4b1e      	ldr	r3, [pc, #120]	; (8007ba0 <MX_GPIO_Init+0xe4>)
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	603b      	str	r3, [r7, #0]
 8007b2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8007b30:	2200      	movs	r2, #0
 8007b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007b36:	481b      	ldr	r0, [pc, #108]	; (8007ba4 <MX_GPIO_Init+0xe8>)
 8007b38:	f002 f872 	bl	8009c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2120      	movs	r1, #32
 8007b40:	4819      	ldr	r0, [pc, #100]	; (8007ba8 <MX_GPIO_Init+0xec>)
 8007b42:	f002 f86d 	bl	8009c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007b46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007b4c:	2311      	movs	r3, #17
 8007b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b50:	2300      	movs	r3, #0
 8007b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b54:	2302      	movs	r3, #2
 8007b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b58:	f107 0310 	add.w	r3, r7, #16
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4811      	ldr	r0, [pc, #68]	; (8007ba4 <MX_GPIO_Init+0xe8>)
 8007b60:	f001 feda 	bl	8009918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007b64:	2301      	movs	r3, #1
 8007b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b70:	f107 0310 	add.w	r3, r7, #16
 8007b74:	4619      	mov	r1, r3
 8007b76:	480c      	ldr	r0, [pc, #48]	; (8007ba8 <MX_GPIO_Init+0xec>)
 8007b78:	f001 fece 	bl	8009918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007b7c:	2320      	movs	r3, #32
 8007b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b80:	2301      	movs	r3, #1
 8007b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b84:	2301      	movs	r3, #1
 8007b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b88:	2302      	movs	r3, #2
 8007b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b8c:	f107 0310 	add.w	r3, r7, #16
 8007b90:	4619      	mov	r1, r3
 8007b92:	4805      	ldr	r0, [pc, #20]	; (8007ba8 <MX_GPIO_Init+0xec>)
 8007b94:	f001 fec0 	bl	8009918 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007b98:	bf00      	nop
 8007b9a:	3720      	adds	r7, #32
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	40021000 	.word	0x40021000
 8007ba4:	40011000 	.word	0x40011000
 8007ba8:	40010800 	.word	0x40010800

08007bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007bac:	b480      	push	{r7}
 8007bae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007bb0:	b672      	cpsid	i
}
 8007bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007bb4:	e7fe      	b.n	8007bb4 <Error_Handler+0x8>
	...

08007bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007bbe:	4b15      	ldr	r3, [pc, #84]	; (8007c14 <HAL_MspInit+0x5c>)
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	4a14      	ldr	r2, [pc, #80]	; (8007c14 <HAL_MspInit+0x5c>)
 8007bc4:	f043 0301 	orr.w	r3, r3, #1
 8007bc8:	6193      	str	r3, [r2, #24]
 8007bca:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <HAL_MspInit+0x5c>)
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	60bb      	str	r3, [r7, #8]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007bd6:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <HAL_MspInit+0x5c>)
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	4a0e      	ldr	r2, [pc, #56]	; (8007c14 <HAL_MspInit+0x5c>)
 8007bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be0:	61d3      	str	r3, [r2, #28]
 8007be2:	4b0c      	ldr	r3, [pc, #48]	; (8007c14 <HAL_MspInit+0x5c>)
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bea:	607b      	str	r3, [r7, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007bee:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <HAL_MspInit+0x60>)
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	4a04      	ldr	r2, [pc, #16]	; (8007c18 <HAL_MspInit+0x60>)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c0a:	bf00      	nop
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bc80      	pop	{r7}
 8007c12:	4770      	bx	lr
 8007c14:	40021000 	.word	0x40021000
 8007c18:	40010000 	.word	0x40010000

08007c1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08a      	sub	sp, #40	; 0x28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c24:	f107 0314 	add.w	r3, r7, #20
 8007c28:	2200      	movs	r2, #0
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	605a      	str	r2, [r3, #4]
 8007c2e:	609a      	str	r2, [r3, #8]
 8007c30:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a35      	ldr	r2, [pc, #212]	; (8007d0c <HAL_CAN_MspInit+0xf0>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d163      	bne.n	8007d04 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007c3c:	4b34      	ldr	r3, [pc, #208]	; (8007d10 <HAL_CAN_MspInit+0xf4>)
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	4a33      	ldr	r2, [pc, #204]	; (8007d10 <HAL_CAN_MspInit+0xf4>)
 8007c42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007c46:	61d3      	str	r3, [r2, #28]
 8007c48:	4b31      	ldr	r3, [pc, #196]	; (8007d10 <HAL_CAN_MspInit+0xf4>)
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c50:	613b      	str	r3, [r7, #16]
 8007c52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c54:	4b2e      	ldr	r3, [pc, #184]	; (8007d10 <HAL_CAN_MspInit+0xf4>)
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	4a2d      	ldr	r2, [pc, #180]	; (8007d10 <HAL_CAN_MspInit+0xf4>)
 8007c5a:	f043 0308 	orr.w	r3, r3, #8
 8007c5e:	6193      	str	r3, [r2, #24]
 8007c60:	4b2b      	ldr	r3, [pc, #172]	; (8007d10 <HAL_CAN_MspInit+0xf4>)
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	f003 0308 	and.w	r3, r3, #8
 8007c68:	60fb      	str	r3, [r7, #12]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c72:	2300      	movs	r3, #0
 8007c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c7a:	f107 0314 	add.w	r3, r7, #20
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4824      	ldr	r0, [pc, #144]	; (8007d14 <HAL_CAN_MspInit+0xf8>)
 8007c82:	f001 fe49 	bl	8009918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007c90:	2303      	movs	r3, #3
 8007c92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c94:	f107 0314 	add.w	r3, r7, #20
 8007c98:	4619      	mov	r1, r3
 8007c9a:	481e      	ldr	r0, [pc, #120]	; (8007d14 <HAL_CAN_MspInit+0xf8>)
 8007c9c:	f001 fe3c 	bl	8009918 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8007ca0:	4b1d      	ldr	r3, [pc, #116]	; (8007d18 <HAL_CAN_MspInit+0xfc>)
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cbe:	4a16      	ldr	r2, [pc, #88]	; (8007d18 <HAL_CAN_MspInit+0xfc>)
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	2013      	movs	r0, #19
 8007cca:	f001 fb4c 	bl	8009366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8007cce:	2013      	movs	r0, #19
 8007cd0:	f001 fb65 	bl	800939e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	2014      	movs	r0, #20
 8007cda:	f001 fb44 	bl	8009366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007cde:	2014      	movs	r0, #20
 8007ce0:	f001 fb5d 	bl	800939e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	2015      	movs	r0, #21
 8007cea:	f001 fb3c 	bl	8009366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8007cee:	2015      	movs	r0, #21
 8007cf0:	f001 fb55 	bl	800939e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	2016      	movs	r0, #22
 8007cfa:	f001 fb34 	bl	8009366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8007cfe:	2016      	movs	r0, #22
 8007d00:	f001 fb4d 	bl	800939e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007d04:	bf00      	nop
 8007d06:	3728      	adds	r7, #40	; 0x28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	40006400 	.word	0x40006400
 8007d10:	40021000 	.word	0x40021000
 8007d14:	40010c00 	.word	0x40010c00
 8007d18:	40010000 	.word	0x40010000

08007d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d24:	f107 0310 	add.w	r3, r7, #16
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	605a      	str	r2, [r3, #4]
 8007d2e:	609a      	str	r2, [r3, #8]
 8007d30:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a15      	ldr	r2, [pc, #84]	; (8007d8c <HAL_I2C_MspInit+0x70>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d123      	bne.n	8007d84 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d3c:	4b14      	ldr	r3, [pc, #80]	; (8007d90 <HAL_I2C_MspInit+0x74>)
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	4a13      	ldr	r2, [pc, #76]	; (8007d90 <HAL_I2C_MspInit+0x74>)
 8007d42:	f043 0308 	orr.w	r3, r3, #8
 8007d46:	6193      	str	r3, [r2, #24]
 8007d48:	4b11      	ldr	r3, [pc, #68]	; (8007d90 <HAL_I2C_MspInit+0x74>)
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007d54:	23c0      	movs	r3, #192	; 0xc0
 8007d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d58:	2312      	movs	r3, #18
 8007d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d60:	f107 0310 	add.w	r3, r7, #16
 8007d64:	4619      	mov	r1, r3
 8007d66:	480b      	ldr	r0, [pc, #44]	; (8007d94 <HAL_I2C_MspInit+0x78>)
 8007d68:	f001 fdd6 	bl	8009918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007d6c:	4b08      	ldr	r3, [pc, #32]	; (8007d90 <HAL_I2C_MspInit+0x74>)
 8007d6e:	69db      	ldr	r3, [r3, #28]
 8007d70:	4a07      	ldr	r2, [pc, #28]	; (8007d90 <HAL_I2C_MspInit+0x74>)
 8007d72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d76:	61d3      	str	r3, [r2, #28]
 8007d78:	4b05      	ldr	r3, [pc, #20]	; (8007d90 <HAL_I2C_MspInit+0x74>)
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d80:	60bb      	str	r3, [r7, #8]
 8007d82:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007d84:	bf00      	nop
 8007d86:	3720      	adds	r7, #32
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	40005400 	.word	0x40005400
 8007d90:	40021000 	.word	0x40021000
 8007d94:	40010c00 	.word	0x40010c00

08007d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a28      	ldr	r2, [pc, #160]	; (8007e48 <HAL_TIM_Base_MspInit+0xb0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d10c      	bne.n	8007dc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007daa:	4b28      	ldr	r3, [pc, #160]	; (8007e4c <HAL_TIM_Base_MspInit+0xb4>)
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	4a27      	ldr	r2, [pc, #156]	; (8007e4c <HAL_TIM_Base_MspInit+0xb4>)
 8007db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007db4:	6193      	str	r3, [r2, #24]
 8007db6:	4b25      	ldr	r3, [pc, #148]	; (8007e4c <HAL_TIM_Base_MspInit+0xb4>)
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007dc2:	e03c      	b.n	8007e3e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dcc:	d10c      	bne.n	8007de8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007dce:	4b1f      	ldr	r3, [pc, #124]	; (8007e4c <HAL_TIM_Base_MspInit+0xb4>)
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	4a1e      	ldr	r2, [pc, #120]	; (8007e4c <HAL_TIM_Base_MspInit+0xb4>)
 8007dd4:	f043 0301 	orr.w	r3, r3, #1
 8007dd8:	61d3      	str	r3, [r2, #28]
 8007dda:	4b1c      	ldr	r3, [pc, #112]	; (8007e4c <HAL_TIM_Base_MspInit+0xb4>)
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	613b      	str	r3, [r7, #16]
 8007de4:	693b      	ldr	r3, [r7, #16]
}
 8007de6:	e02a      	b.n	8007e3e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a18      	ldr	r2, [pc, #96]	; (8007e50 <HAL_TIM_Base_MspInit+0xb8>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d10c      	bne.n	8007e0c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007df2:	4b16      	ldr	r3, [pc, #88]	; (8007e4c <HAL_TIM_Base_MspInit+0xb4>)
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	4a15      	ldr	r2, [pc, #84]	; (8007e4c <HAL_TIM_Base_MspInit+0xb4>)
 8007df8:	f043 0302 	orr.w	r3, r3, #2
 8007dfc:	61d3      	str	r3, [r2, #28]
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <HAL_TIM_Base_MspInit+0xb4>)
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
}
 8007e0a:	e018      	b.n	8007e3e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a10      	ldr	r2, [pc, #64]	; (8007e54 <HAL_TIM_Base_MspInit+0xbc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d113      	bne.n	8007e3e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007e16:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <HAL_TIM_Base_MspInit+0xb4>)
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	4a0c      	ldr	r2, [pc, #48]	; (8007e4c <HAL_TIM_Base_MspInit+0xb4>)
 8007e1c:	f043 0304 	orr.w	r3, r3, #4
 8007e20:	61d3      	str	r3, [r2, #28]
 8007e22:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <HAL_TIM_Base_MspInit+0xb4>)
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	60bb      	str	r3, [r7, #8]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2100      	movs	r1, #0
 8007e32:	201e      	movs	r0, #30
 8007e34:	f001 fa97 	bl	8009366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007e38:	201e      	movs	r0, #30
 8007e3a:	f001 fab0 	bl	800939e <HAL_NVIC_EnableIRQ>
}
 8007e3e:	bf00      	nop
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	40012c00 	.word	0x40012c00
 8007e4c:	40021000 	.word	0x40021000
 8007e50:	40000400 	.word	0x40000400
 8007e54:	40000800 	.word	0x40000800

08007e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	; 0x28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e60:	f107 0318 	add.w	r3, r7, #24
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	605a      	str	r2, [r3, #4]
 8007e6a:	609a      	str	r2, [r3, #8]
 8007e6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a62      	ldr	r2, [pc, #392]	; (8007ffc <HAL_UART_MspInit+0x1a4>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	f040 8087 	bne.w	8007f88 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007e7a:	4b61      	ldr	r3, [pc, #388]	; (8008000 <HAL_UART_MspInit+0x1a8>)
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	4a60      	ldr	r2, [pc, #384]	; (8008000 <HAL_UART_MspInit+0x1a8>)
 8007e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e84:	6193      	str	r3, [r2, #24]
 8007e86:	4b5e      	ldr	r3, [pc, #376]	; (8008000 <HAL_UART_MspInit+0x1a8>)
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e8e:	617b      	str	r3, [r7, #20]
 8007e90:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e92:	4b5b      	ldr	r3, [pc, #364]	; (8008000 <HAL_UART_MspInit+0x1a8>)
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	4a5a      	ldr	r2, [pc, #360]	; (8008000 <HAL_UART_MspInit+0x1a8>)
 8007e98:	f043 0304 	orr.w	r3, r3, #4
 8007e9c:	6193      	str	r3, [r2, #24]
 8007e9e:	4b58      	ldr	r3, [pc, #352]	; (8008000 <HAL_UART_MspInit+0x1a8>)
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	f003 0304 	and.w	r3, r3, #4
 8007ea6:	613b      	str	r3, [r7, #16]
 8007ea8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eb8:	f107 0318 	add.w	r3, r7, #24
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4851      	ldr	r0, [pc, #324]	; (8008004 <HAL_UART_MspInit+0x1ac>)
 8007ec0:	f001 fd2a 	bl	8009918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ed2:	f107 0318 	add.w	r3, r7, #24
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	484a      	ldr	r0, [pc, #296]	; (8008004 <HAL_UART_MspInit+0x1ac>)
 8007eda:	f001 fd1d 	bl	8009918 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007ede:	4b4a      	ldr	r3, [pc, #296]	; (8008008 <HAL_UART_MspInit+0x1b0>)
 8007ee0:	4a4a      	ldr	r2, [pc, #296]	; (800800c <HAL_UART_MspInit+0x1b4>)
 8007ee2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ee4:	4b48      	ldr	r3, [pc, #288]	; (8008008 <HAL_UART_MspInit+0x1b0>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007eea:	4b47      	ldr	r3, [pc, #284]	; (8008008 <HAL_UART_MspInit+0x1b0>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007ef0:	4b45      	ldr	r3, [pc, #276]	; (8008008 <HAL_UART_MspInit+0x1b0>)
 8007ef2:	2280      	movs	r2, #128	; 0x80
 8007ef4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ef6:	4b44      	ldr	r3, [pc, #272]	; (8008008 <HAL_UART_MspInit+0x1b0>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007efc:	4b42      	ldr	r3, [pc, #264]	; (8008008 <HAL_UART_MspInit+0x1b0>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007f02:	4b41      	ldr	r3, [pc, #260]	; (8008008 <HAL_UART_MspInit+0x1b0>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007f08:	4b3f      	ldr	r3, [pc, #252]	; (8008008 <HAL_UART_MspInit+0x1b0>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007f0e:	483e      	ldr	r0, [pc, #248]	; (8008008 <HAL_UART_MspInit+0x1b0>)
 8007f10:	f001 fa64 	bl	80093dc <HAL_DMA_Init>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8007f1a:	f7ff fe47 	bl	8007bac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a39      	ldr	r2, [pc, #228]	; (8008008 <HAL_UART_MspInit+0x1b0>)
 8007f22:	639a      	str	r2, [r3, #56]	; 0x38
 8007f24:	4a38      	ldr	r2, [pc, #224]	; (8008008 <HAL_UART_MspInit+0x1b0>)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007f2a:	4b39      	ldr	r3, [pc, #228]	; (8008010 <HAL_UART_MspInit+0x1b8>)
 8007f2c:	4a39      	ldr	r2, [pc, #228]	; (8008014 <HAL_UART_MspInit+0x1bc>)
 8007f2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007f30:	4b37      	ldr	r3, [pc, #220]	; (8008010 <HAL_UART_MspInit+0x1b8>)
 8007f32:	2210      	movs	r2, #16
 8007f34:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f36:	4b36      	ldr	r3, [pc, #216]	; (8008010 <HAL_UART_MspInit+0x1b8>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007f3c:	4b34      	ldr	r3, [pc, #208]	; (8008010 <HAL_UART_MspInit+0x1b8>)
 8007f3e:	2280      	movs	r2, #128	; 0x80
 8007f40:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007f42:	4b33      	ldr	r3, [pc, #204]	; (8008010 <HAL_UART_MspInit+0x1b8>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007f48:	4b31      	ldr	r3, [pc, #196]	; (8008010 <HAL_UART_MspInit+0x1b8>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007f4e:	4b30      	ldr	r3, [pc, #192]	; (8008010 <HAL_UART_MspInit+0x1b8>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007f54:	4b2e      	ldr	r3, [pc, #184]	; (8008010 <HAL_UART_MspInit+0x1b8>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007f5a:	482d      	ldr	r0, [pc, #180]	; (8008010 <HAL_UART_MspInit+0x1b8>)
 8007f5c:	f001 fa3e 	bl	80093dc <HAL_DMA_Init>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8007f66:	f7ff fe21 	bl	8007bac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a28      	ldr	r2, [pc, #160]	; (8008010 <HAL_UART_MspInit+0x1b8>)
 8007f6e:	635a      	str	r2, [r3, #52]	; 0x34
 8007f70:	4a27      	ldr	r2, [pc, #156]	; (8008010 <HAL_UART_MspInit+0x1b8>)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007f76:	2200      	movs	r2, #0
 8007f78:	2100      	movs	r1, #0
 8007f7a:	2025      	movs	r0, #37	; 0x25
 8007f7c:	f001 f9f3 	bl	8009366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007f80:	2025      	movs	r0, #37	; 0x25
 8007f82:	f001 fa0c 	bl	800939e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007f86:	e034      	b.n	8007ff2 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a22      	ldr	r2, [pc, #136]	; (8008018 <HAL_UART_MspInit+0x1c0>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d12f      	bne.n	8007ff2 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007f92:	4b1b      	ldr	r3, [pc, #108]	; (8008000 <HAL_UART_MspInit+0x1a8>)
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	4a1a      	ldr	r2, [pc, #104]	; (8008000 <HAL_UART_MspInit+0x1a8>)
 8007f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f9c:	61d3      	str	r3, [r2, #28]
 8007f9e:	4b18      	ldr	r3, [pc, #96]	; (8008000 <HAL_UART_MspInit+0x1a8>)
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007faa:	4b15      	ldr	r3, [pc, #84]	; (8008000 <HAL_UART_MspInit+0x1a8>)
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	4a14      	ldr	r2, [pc, #80]	; (8008000 <HAL_UART_MspInit+0x1a8>)
 8007fb0:	f043 0304 	orr.w	r3, r3, #4
 8007fb4:	6193      	str	r3, [r2, #24]
 8007fb6:	4b12      	ldr	r3, [pc, #72]	; (8008000 <HAL_UART_MspInit+0x1a8>)
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	60bb      	str	r3, [r7, #8]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007fc2:	2304      	movs	r3, #4
 8007fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fce:	f107 0318 	add.w	r3, r7, #24
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	480b      	ldr	r0, [pc, #44]	; (8008004 <HAL_UART_MspInit+0x1ac>)
 8007fd6:	f001 fc9f 	bl	8009918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007fda:	2308      	movs	r3, #8
 8007fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fe6:	f107 0318 	add.w	r3, r7, #24
 8007fea:	4619      	mov	r1, r3
 8007fec:	4805      	ldr	r0, [pc, #20]	; (8008004 <HAL_UART_MspInit+0x1ac>)
 8007fee:	f001 fc93 	bl	8009918 <HAL_GPIO_Init>
}
 8007ff2:	bf00      	nop
 8007ff4:	3728      	adds	r7, #40	; 0x28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	40013800 	.word	0x40013800
 8008000:	40021000 	.word	0x40021000
 8008004:	40010800 	.word	0x40010800
 8008008:	2000088c 	.word	0x2000088c
 800800c:	40020058 	.word	0x40020058
 8008010:	200008d0 	.word	0x200008d0
 8008014:	40020044 	.word	0x40020044
 8008018:	40004400 	.word	0x40004400

0800801c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008020:	e7fe      	b.n	8008020 <NMI_Handler+0x4>

08008022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008022:	b480      	push	{r7}
 8008024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008026:	e7fe      	b.n	8008026 <HardFault_Handler+0x4>

08008028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008028:	b480      	push	{r7}
 800802a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800802c:	e7fe      	b.n	800802c <MemManage_Handler+0x4>

0800802e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800802e:	b480      	push	{r7}
 8008030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008032:	e7fe      	b.n	8008032 <BusFault_Handler+0x4>

08008034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008038:	e7fe      	b.n	8008038 <UsageFault_Handler+0x4>

0800803a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800803a:	b480      	push	{r7}
 800803c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800803e:	bf00      	nop
 8008040:	46bd      	mov	sp, r7
 8008042:	bc80      	pop	{r7}
 8008044:	4770      	bx	lr

08008046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008046:	b480      	push	{r7}
 8008048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800804a:	bf00      	nop
 800804c:	46bd      	mov	sp, r7
 800804e:	bc80      	pop	{r7}
 8008050:	4770      	bx	lr

08008052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008052:	b480      	push	{r7}
 8008054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008056:	bf00      	nop
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr

0800805e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008062:	f000 f965 	bl	8008330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008066:	bf00      	nop
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008070:	4802      	ldr	r0, [pc, #8]	; (800807c <DMA1_Channel4_IRQHandler+0x10>)
 8008072:	f001 fb1d 	bl	80096b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8008076:	bf00      	nop
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	200008d0 	.word	0x200008d0

08008080 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008084:	4802      	ldr	r0, [pc, #8]	; (8008090 <DMA1_Channel5_IRQHandler+0x10>)
 8008086:	f001 fb13 	bl	80096b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800808a:	bf00      	nop
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	2000088c 	.word	0x2000088c

08008094 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8008098:	4802      	ldr	r0, [pc, #8]	; (80080a4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800809a:	f000 fe69 	bl	8008d70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800809e:	bf00      	nop
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	200003ec 	.word	0x200003ec

080080a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80080ac:	4802      	ldr	r0, [pc, #8]	; (80080b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80080ae:	f000 fe5f 	bl	8008d70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80080b2:	bf00      	nop
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	200003ec 	.word	0x200003ec

080080bc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80080c0:	4802      	ldr	r0, [pc, #8]	; (80080cc <CAN1_RX1_IRQHandler+0x10>)
 80080c2:	f000 fe55 	bl	8008d70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80080c6:	bf00      	nop
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	200003ec 	.word	0x200003ec

080080d0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80080d4:	4802      	ldr	r0, [pc, #8]	; (80080e0 <CAN1_SCE_IRQHandler+0x10>)
 80080d6:	f000 fe4b 	bl	8008d70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80080da:	bf00      	nop
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	200003ec 	.word	0x200003ec

080080e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80080e8:	4802      	ldr	r0, [pc, #8]	; (80080f4 <TIM4_IRQHandler+0x10>)
 80080ea:	f002 fc9f 	bl	800aa2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80080ee:	bf00      	nop
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	200006f0 	.word	0x200006f0

080080f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80080fc:	4802      	ldr	r0, [pc, #8]	; (8008108 <USART1_IRQHandler+0x10>)
 80080fe:	f003 f963 	bl	800b3c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008102:	bf00      	nop
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	200007a4 	.word	0x200007a4

0800810c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008118:	2300      	movs	r3, #0
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	e00a      	b.n	8008134 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800811e:	f3af 8000 	nop.w
 8008122:	4601      	mov	r1, r0
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	60ba      	str	r2, [r7, #8]
 800812a:	b2ca      	uxtb	r2, r1
 800812c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	3301      	adds	r3, #1
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	429a      	cmp	r2, r3
 800813a:	dbf0      	blt.n	800811e <_read+0x12>
  }

  return len;
 800813c:	687b      	ldr	r3, [r7, #4]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b086      	sub	sp, #24
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008152:	2300      	movs	r3, #0
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	e009      	b.n	800816c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	60ba      	str	r2, [r7, #8]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	4618      	mov	r0, r3
 8008162:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	3301      	adds	r3, #1
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	429a      	cmp	r2, r3
 8008172:	dbf1      	blt.n	8008158 <_write+0x12>
  }
  return len;
 8008174:	687b      	ldr	r3, [r7, #4]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <_close>:

int _close(int file)
{
 800817e:	b480      	push	{r7}
 8008180:	b083      	sub	sp, #12
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr

08008194 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80081a4:	605a      	str	r2, [r3, #4]
  return 0;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bc80      	pop	{r7}
 80081b0:	4770      	bx	lr

080081b2 <_isatty>:

int _isatty(int file)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80081ba:	2301      	movs	r3, #1
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bc80      	pop	{r7}
 80081c4:	4770      	bx	lr

080081c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b085      	sub	sp, #20
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	60f8      	str	r0, [r7, #12]
 80081ce:	60b9      	str	r1, [r7, #8]
 80081d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr
	...

080081e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80081e8:	4a14      	ldr	r2, [pc, #80]	; (800823c <_sbrk+0x5c>)
 80081ea:	4b15      	ldr	r3, [pc, #84]	; (8008240 <_sbrk+0x60>)
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80081f4:	4b13      	ldr	r3, [pc, #76]	; (8008244 <_sbrk+0x64>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d102      	bne.n	8008202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <_sbrk+0x64>)
 80081fe:	4a12      	ldr	r2, [pc, #72]	; (8008248 <_sbrk+0x68>)
 8008200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008202:	4b10      	ldr	r3, [pc, #64]	; (8008244 <_sbrk+0x64>)
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4413      	add	r3, r2
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	429a      	cmp	r2, r3
 800820e:	d207      	bcs.n	8008220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008210:	f004 f98c 	bl	800c52c <__errno>
 8008214:	4603      	mov	r3, r0
 8008216:	220c      	movs	r2, #12
 8008218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800821a:	f04f 33ff 	mov.w	r3, #4294967295
 800821e:	e009      	b.n	8008234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008220:	4b08      	ldr	r3, [pc, #32]	; (8008244 <_sbrk+0x64>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008226:	4b07      	ldr	r3, [pc, #28]	; (8008244 <_sbrk+0x64>)
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4413      	add	r3, r2
 800822e:	4a05      	ldr	r2, [pc, #20]	; (8008244 <_sbrk+0x64>)
 8008230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008232:	68fb      	ldr	r3, [r7, #12]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	20005000 	.word	0x20005000
 8008240:	00000600 	.word	0x00000600
 8008244:	20000918 	.word	0x20000918
 8008248:	20000a70 	.word	0x20000a70

0800824c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008250:	bf00      	nop
 8008252:	46bd      	mov	sp, r7
 8008254:	bc80      	pop	{r7}
 8008256:	4770      	bx	lr

08008258 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008258:	480c      	ldr	r0, [pc, #48]	; (800828c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800825a:	490d      	ldr	r1, [pc, #52]	; (8008290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800825c:	4a0d      	ldr	r2, [pc, #52]	; (8008294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800825e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008260:	e002      	b.n	8008268 <LoopCopyDataInit>

08008262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008266:	3304      	adds	r3, #4

08008268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800826a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800826c:	d3f9      	bcc.n	8008262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800826e:	4a0a      	ldr	r2, [pc, #40]	; (8008298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008270:	4c0a      	ldr	r4, [pc, #40]	; (800829c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008274:	e001      	b.n	800827a <LoopFillZerobss>

08008276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008278:	3204      	adds	r2, #4

0800827a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800827a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800827c:	d3fb      	bcc.n	8008276 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800827e:	f7ff ffe5 	bl	800824c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008282:	f004 f959 	bl	800c538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008286:	f7ff f91d 	bl	80074c4 <main>
  bx lr
 800828a:	4770      	bx	lr
  ldr r0, =_sdata
 800828c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008290:	20000384 	.word	0x20000384
  ldr r2, =_sidata
 8008294:	0800d400 	.word	0x0800d400
  ldr r2, =_sbss
 8008298:	20000384 	.word	0x20000384
  ldr r4, =_ebss
 800829c:	20000a6c 	.word	0x20000a6c

080082a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80082a0:	e7fe      	b.n	80082a0 <ADC1_2_IRQHandler>
	...

080082a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80082a8:	4b08      	ldr	r3, [pc, #32]	; (80082cc <HAL_Init+0x28>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a07      	ldr	r2, [pc, #28]	; (80082cc <HAL_Init+0x28>)
 80082ae:	f043 0310 	orr.w	r3, r3, #16
 80082b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082b4:	2003      	movs	r0, #3
 80082b6:	f001 f84b 	bl	8009350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80082ba:	200f      	movs	r0, #15
 80082bc:	f000 f808 	bl	80082d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80082c0:	f7ff fc7a 	bl	8007bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	40022000 	.word	0x40022000

080082d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80082d8:	4b12      	ldr	r3, [pc, #72]	; (8008324 <HAL_InitTick+0x54>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	4b12      	ldr	r3, [pc, #72]	; (8008328 <HAL_InitTick+0x58>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	4619      	mov	r1, r3
 80082e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80082ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 f867 	bl	80093c2 <HAL_SYSTICK_Config>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e00e      	b.n	800831c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b0f      	cmp	r3, #15
 8008302:	d80a      	bhi.n	800831a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008304:	2200      	movs	r2, #0
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	f001 f82b 	bl	8009366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008310:	4a06      	ldr	r2, [pc, #24]	; (800832c <HAL_InitTick+0x5c>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	e000      	b.n	800831c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	2000031c 	.word	0x2000031c
 8008328:	20000324 	.word	0x20000324
 800832c:	20000320 	.word	0x20000320

08008330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008330:	b480      	push	{r7}
 8008332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <HAL_IncTick+0x1c>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	4b05      	ldr	r3, [pc, #20]	; (8008350 <HAL_IncTick+0x20>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4413      	add	r3, r2
 8008340:	4a03      	ldr	r2, [pc, #12]	; (8008350 <HAL_IncTick+0x20>)
 8008342:	6013      	str	r3, [r2, #0]
}
 8008344:	bf00      	nop
 8008346:	46bd      	mov	sp, r7
 8008348:	bc80      	pop	{r7}
 800834a:	4770      	bx	lr
 800834c:	20000324 	.word	0x20000324
 8008350:	2000091c 	.word	0x2000091c

08008354 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  return uwTick;
 8008358:	4b02      	ldr	r3, [pc, #8]	; (8008364 <HAL_GetTick+0x10>)
 800835a:	681b      	ldr	r3, [r3, #0]
}
 800835c:	4618      	mov	r0, r3
 800835e:	46bd      	mov	sp, r7
 8008360:	bc80      	pop	{r7}
 8008362:	4770      	bx	lr
 8008364:	2000091c 	.word	0x2000091c

08008368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008370:	f7ff fff0 	bl	8008354 <HAL_GetTick>
 8008374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008380:	d005      	beq.n	800838e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008382:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <HAL_Delay+0x44>)
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4413      	add	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800838e:	bf00      	nop
 8008390:	f7ff ffe0 	bl	8008354 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	429a      	cmp	r2, r3
 800839e:	d8f7      	bhi.n	8008390 <HAL_Delay+0x28>
  {
  }
}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000324 	.word	0x20000324

080083b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e11c      	b.n	80085fc <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d131      	bne.n	8008432 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a8c      	ldr	r2, [pc, #560]	; (8008604 <HAL_CAN_Init+0x254>)
 80083d2:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a8c      	ldr	r2, [pc, #560]	; (8008608 <HAL_CAN_Init+0x258>)
 80083d8:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a8b      	ldr	r2, [pc, #556]	; (800860c <HAL_CAN_Init+0x25c>)
 80083de:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a8b      	ldr	r2, [pc, #556]	; (8008610 <HAL_CAN_Init+0x260>)
 80083e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a8a      	ldr	r2, [pc, #552]	; (8008614 <HAL_CAN_Init+0x264>)
 80083ea:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a8a      	ldr	r2, [pc, #552]	; (8008618 <HAL_CAN_Init+0x268>)
 80083f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a89      	ldr	r2, [pc, #548]	; (800861c <HAL_CAN_Init+0x26c>)
 80083f6:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a89      	ldr	r2, [pc, #548]	; (8008620 <HAL_CAN_Init+0x270>)
 80083fc:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a88      	ldr	r2, [pc, #544]	; (8008624 <HAL_CAN_Init+0x274>)
 8008402:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a88      	ldr	r2, [pc, #544]	; (8008628 <HAL_CAN_Init+0x278>)
 8008408:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a87      	ldr	r2, [pc, #540]	; (800862c <HAL_CAN_Init+0x27c>)
 800840e:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a87      	ldr	r2, [pc, #540]	; (8008630 <HAL_CAN_Init+0x280>)
 8008414:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a86      	ldr	r2, [pc, #536]	; (8008634 <HAL_CAN_Init+0x284>)
 800841a:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a84      	ldr	r2, [pc, #528]	; (8008638 <HAL_CAN_Init+0x288>)
 8008428:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f042 0201 	orr.w	r2, r2, #1
 8008440:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008442:	f7ff ff87 	bl	8008354 <HAL_GetTick>
 8008446:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008448:	e012      	b.n	8008470 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800844a:	f7ff ff83 	bl	8008354 <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	2b0a      	cmp	r3, #10
 8008456:	d90b      	bls.n	8008470 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2205      	movs	r2, #5
 8008468:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e0c5      	b.n	80085fc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0e5      	beq.n	800844a <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0202 	bic.w	r2, r2, #2
 800848c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800848e:	f7ff ff61 	bl	8008354 <HAL_GetTick>
 8008492:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008494:	e012      	b.n	80084bc <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008496:	f7ff ff5d 	bl	8008354 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	2b0a      	cmp	r3, #10
 80084a2:	d90b      	bls.n	80084bc <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2205      	movs	r2, #5
 80084b4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e09f      	b.n	80085fc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e5      	bne.n	8008496 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7e1b      	ldrb	r3, [r3, #24]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d108      	bne.n	80084e4 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	e007      	b.n	80084f4 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	7e5b      	ldrb	r3, [r3, #25]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d108      	bne.n	800850e <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	e007      	b.n	800851e <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800851c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	7e9b      	ldrb	r3, [r3, #26]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d108      	bne.n	8008538 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f042 0220 	orr.w	r2, r2, #32
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	e007      	b.n	8008548 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0220 	bic.w	r2, r2, #32
 8008546:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	7edb      	ldrb	r3, [r3, #27]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d108      	bne.n	8008562 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 0210 	bic.w	r2, r2, #16
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	e007      	b.n	8008572 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f042 0210 	orr.w	r2, r2, #16
 8008570:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	7f1b      	ldrb	r3, [r3, #28]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d108      	bne.n	800858c <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f042 0208 	orr.w	r2, r2, #8
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	e007      	b.n	800859c <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0208 	bic.w	r2, r2, #8
 800859a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	7f5b      	ldrb	r3, [r3, #29]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d108      	bne.n	80085b6 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f042 0204 	orr.w	r2, r2, #4
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	e007      	b.n	80085c6 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f022 0204 	bic.w	r2, r2, #4
 80085c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689a      	ldr	r2, [r3, #8]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	431a      	orrs	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	431a      	orrs	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	ea42 0103 	orr.w	r1, r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	1e5a      	subs	r2, r3, #1
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	430a      	orrs	r2, r1
 80085ea:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	08007369 	.word	0x08007369
 8008608:	08009131 	.word	0x08009131
 800860c:	08007383 	.word	0x08007383
 8008610:	08009143 	.word	0x08009143
 8008614:	08007441 	.word	0x08007441
 8008618:	08007461 	.word	0x08007461
 800861c:	08007481 	.word	0x08007481
 8008620:	080090fb 	.word	0x080090fb
 8008624:	0800910d 	.word	0x0800910d
 8008628:	0800911f 	.word	0x0800911f
 800862c:	08009155 	.word	0x08009155
 8008630:	08009167 	.word	0x08009167
 8008634:	08009179 	.word	0x08009179
 8008638:	08007c1d 	.word	0x08007c1d

0800863c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008652:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008654:	7cfb      	ldrb	r3, [r7, #19]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d003      	beq.n	8008662 <HAL_CAN_ConfigFilter+0x26>
 800865a:	7cfb      	ldrb	r3, [r7, #19]
 800865c:	2b02      	cmp	r3, #2
 800865e:	f040 80aa 	bne.w	80087b6 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008668:	f043 0201 	orr.w	r2, r3, #1
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	f003 031f 	and.w	r3, r3, #31
 800867a:	2201      	movs	r2, #1
 800867c:	fa02 f303 	lsl.w	r3, r2, r3
 8008680:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	43db      	mvns	r3, r3
 800868c:	401a      	ands	r2, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d123      	bne.n	80086e4 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	43db      	mvns	r3, r3
 80086a6:	401a      	ands	r2, r3
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80086be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	3248      	adds	r2, #72	; 0x48
 80086c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80086d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80086da:	6979      	ldr	r1, [r7, #20]
 80086dc:	3348      	adds	r3, #72	; 0x48
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	440b      	add	r3, r1
 80086e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d122      	bne.n	8008732 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	431a      	orrs	r2, r3
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800870c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	3248      	adds	r2, #72	; 0x48
 8008712:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008726:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008728:	6979      	ldr	r1, [r7, #20]
 800872a:	3348      	adds	r3, #72	; 0x48
 800872c:	00db      	lsls	r3, r3, #3
 800872e:	440b      	add	r3, r1
 8008730:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d109      	bne.n	800874e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	43db      	mvns	r3, r3
 8008744:	401a      	ands	r2, r3
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800874c:	e007      	b.n	800875e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	431a      	orrs	r2, r3
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d109      	bne.n	800877a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	43db      	mvns	r3, r3
 8008770:	401a      	ands	r2, r3
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008778:	e007      	b.n	800878a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	431a      	orrs	r2, r3
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d107      	bne.n	80087a2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	431a      	orrs	r2, r3
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80087a8:	f023 0201 	bic.w	r2, r3, #1
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	e006      	b.n	80087c4 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
  }
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	371c      	adds	r7, #28
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bc80      	pop	{r7}
 80087cc:	4770      	bx	lr

080087ce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d12e      	bne.n	8008840 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2202      	movs	r2, #2
 80087e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f022 0201 	bic.w	r2, r2, #1
 80087f8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087fa:	f7ff fdab 	bl	8008354 <HAL_GetTick>
 80087fe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008800:	e012      	b.n	8008828 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008802:	f7ff fda7 	bl	8008354 <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b0a      	cmp	r3, #10
 800880e:	d90b      	bls.n	8008828 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2205      	movs	r2, #5
 8008820:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e012      	b.n	800884e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e5      	bne.n	8008802 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	e006      	b.n	800884e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
  }
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d133      	bne.n	80088d2 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0201 	orr.w	r2, r2, #1
 8008878:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800887a:	f7ff fd6b 	bl	8008354 <HAL_GetTick>
 800887e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008880:	e012      	b.n	80088a8 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008882:	f7ff fd67 	bl	8008354 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	2b0a      	cmp	r3, #10
 800888e:	d90b      	bls.n	80088a8 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2205      	movs	r2, #5
 80088a0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e01b      	b.n	80088e0 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0e5      	beq.n	8008882 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 0202 	bic.w	r2, r2, #2
 80088c4:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	e006      	b.n	80088e0 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
  }
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b089      	sub	sp, #36	; 0x24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
 80088f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8008906:	7ffb      	ldrb	r3, [r7, #31]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d003      	beq.n	8008914 <HAL_CAN_AddTxMessage+0x2c>
 800890c:	7ffb      	ldrb	r3, [r7, #31]
 800890e:	2b02      	cmp	r3, #2
 8008910:	f040 80b8 	bne.w	8008a84 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10a      	bne.n	8008934 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008924:	2b00      	cmp	r3, #0
 8008926:	d105      	bne.n	8008934 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 80a0 	beq.w	8008a74 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	0e1b      	lsrs	r3, r3, #24
 8008938:	f003 0303 	and.w	r3, r3, #3
 800893c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2b02      	cmp	r3, #2
 8008942:	d907      	bls.n	8008954 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e09e      	b.n	8008a92 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8008954:	2201      	movs	r2, #1
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	409a      	lsls	r2, r3
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10d      	bne.n	8008982 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008970:	68f9      	ldr	r1, [r7, #12]
 8008972:	6809      	ldr	r1, [r1, #0]
 8008974:	431a      	orrs	r2, r3
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	3318      	adds	r3, #24
 800897a:	011b      	lsls	r3, r3, #4
 800897c:	440b      	add	r3, r1
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	e00f      	b.n	80089a2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800898c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008992:	68f9      	ldr	r1, [r7, #12]
 8008994:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8008996:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	3318      	adds	r3, #24
 800899c:	011b      	lsls	r3, r3, #4
 800899e:	440b      	add	r3, r1
 80089a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6819      	ldr	r1, [r3, #0]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	691a      	ldr	r2, [r3, #16]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	3318      	adds	r3, #24
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	440b      	add	r3, r1
 80089b2:	3304      	adds	r3, #4
 80089b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	7d1b      	ldrb	r3, [r3, #20]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d111      	bne.n	80089e2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	3318      	adds	r3, #24
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	4413      	add	r3, r2
 80089ca:	3304      	adds	r3, #4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	6811      	ldr	r1, [r2, #0]
 80089d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	3318      	adds	r3, #24
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	440b      	add	r3, r1
 80089de:	3304      	adds	r3, #4
 80089e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3307      	adds	r3, #7
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	061a      	lsls	r2, r3, #24
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	3306      	adds	r3, #6
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	041b      	lsls	r3, r3, #16
 80089f2:	431a      	orrs	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	3305      	adds	r3, #5
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	021b      	lsls	r3, r3, #8
 80089fc:	4313      	orrs	r3, r2
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	3204      	adds	r2, #4
 8008a02:	7812      	ldrb	r2, [r2, #0]
 8008a04:	4610      	mov	r0, r2
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	6811      	ldr	r1, [r2, #0]
 8008a0a:	ea43 0200 	orr.w	r2, r3, r0
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	011b      	lsls	r3, r3, #4
 8008a12:	440b      	add	r3, r1
 8008a14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008a18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	3303      	adds	r3, #3
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	061a      	lsls	r2, r3, #24
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	3302      	adds	r3, #2
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	041b      	lsls	r3, r3, #16
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	021b      	lsls	r3, r3, #8
 8008a34:	4313      	orrs	r3, r2
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	7812      	ldrb	r2, [r2, #0]
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	6811      	ldr	r1, [r2, #0]
 8008a40:	ea43 0200 	orr.w	r2, r3, r0
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	011b      	lsls	r3, r3, #4
 8008a48:	440b      	add	r3, r1
 8008a4a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8008a4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	3318      	adds	r3, #24
 8008a58:	011b      	lsls	r3, r3, #4
 8008a5a:	4413      	add	r3, r2
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	6811      	ldr	r1, [r2, #0]
 8008a62:	f043 0201 	orr.w	r2, r3, #1
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	3318      	adds	r3, #24
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	440b      	add	r3, r1
 8008a6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	e00e      	b.n	8008a92 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e006      	b.n	8008a92 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
  }
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3724      	adds	r7, #36	; 0x24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bc80      	pop	{r7}
 8008a9a:	4770      	bx	lr

08008a9c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008aae:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8008ab0:	7afb      	ldrb	r3, [r7, #11]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d002      	beq.n	8008abc <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8008ab6:	7afb      	ldrb	r3, [r7, #11]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d11d      	bne.n	8008af8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3301      	adds	r3, #1
 8008ace:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3301      	adds	r3, #1
 8008af6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8008af8:	68fb      	ldr	r3, [r7, #12]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bc80      	pop	{r7}
 8008b02:	4770      	bx	lr

08008b04 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b18:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d003      	beq.n	8008b28 <HAL_CAN_GetRxMessage+0x24>
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	f040 80f3 	bne.w	8008d0e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10e      	bne.n	8008b4c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	f003 0303 	and.w	r3, r3, #3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d116      	bne.n	8008b6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e0e7      	b.n	8008d1c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	f003 0303 	and.w	r3, r3, #3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d107      	bne.n	8008b6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e0d8      	b.n	8008d1c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	331b      	adds	r3, #27
 8008b72:	011b      	lsls	r3, r3, #4
 8008b74:	4413      	add	r3, r2
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0204 	and.w	r2, r3, #4
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10c      	bne.n	8008ba2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	331b      	adds	r3, #27
 8008b90:	011b      	lsls	r3, r3, #4
 8008b92:	4413      	add	r3, r2
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	0d5b      	lsrs	r3, r3, #21
 8008b98:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	e00b      	b.n	8008bba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	331b      	adds	r3, #27
 8008baa:	011b      	lsls	r3, r3, #4
 8008bac:	4413      	add	r3, r2
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	08db      	lsrs	r3, r3, #3
 8008bb2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	331b      	adds	r3, #27
 8008bc2:	011b      	lsls	r3, r3, #4
 8008bc4:	4413      	add	r3, r2
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0202 	and.w	r2, r3, #2
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	331b      	adds	r3, #27
 8008bd8:	011b      	lsls	r3, r3, #4
 8008bda:	4413      	add	r3, r2
 8008bdc:	3304      	adds	r3, #4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 020f 	and.w	r2, r3, #15
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	331b      	adds	r3, #27
 8008bf0:	011b      	lsls	r3, r3, #4
 8008bf2:	4413      	add	r3, r2
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	0a1b      	lsrs	r3, r3, #8
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	331b      	adds	r3, #27
 8008c08:	011b      	lsls	r3, r3, #4
 8008c0a:	4413      	add	r3, r2
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	0c1b      	lsrs	r3, r3, #16
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	4413      	add	r3, r2
 8008c22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	011b      	lsls	r3, r3, #4
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	0a1a      	lsrs	r2, r3, #8
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	3301      	adds	r3, #1
 8008c44:	b2d2      	uxtb	r2, r2
 8008c46:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	0c1a      	lsrs	r2, r3, #16
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	3302      	adds	r3, #2
 8008c5e:	b2d2      	uxtb	r2, r2
 8008c60:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	011b      	lsls	r3, r3, #4
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	0e1a      	lsrs	r2, r3, #24
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	3303      	adds	r3, #3
 8008c78:	b2d2      	uxtb	r2, r2
 8008c7a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	011b      	lsls	r3, r3, #4
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	3304      	adds	r3, #4
 8008c90:	b2d2      	uxtb	r2, r2
 8008c92:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	0a1a      	lsrs	r2, r3, #8
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	3305      	adds	r3, #5
 8008caa:	b2d2      	uxtb	r2, r2
 8008cac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	0c1a      	lsrs	r2, r3, #16
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	3306      	adds	r3, #6
 8008cc4:	b2d2      	uxtb	r2, r2
 8008cc6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	011b      	lsls	r3, r3, #4
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	0e1a      	lsrs	r2, r3, #24
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	3307      	adds	r3, #7
 8008cde:	b2d2      	uxtb	r2, r2
 8008ce0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d108      	bne.n	8008cfa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68da      	ldr	r2, [r3, #12]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0220 	orr.w	r2, r2, #32
 8008cf6:	60da      	str	r2, [r3, #12]
 8008cf8:	e007      	b.n	8008d0a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	691a      	ldr	r2, [r3, #16]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f042 0220 	orr.w	r2, r2, #32
 8008d08:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	e006      	b.n	8008d1c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
  }
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	371c      	adds	r7, #28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bc80      	pop	{r7}
 8008d24:	4770      	bx	lr

08008d26 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b085      	sub	sp, #20
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d36:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d002      	beq.n	8008d44 <HAL_CAN_ActivateNotification+0x1e>
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d109      	bne.n	8008d58 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6959      	ldr	r1, [r3, #20]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	e006      	b.n	8008d66 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
  }
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bc80      	pop	{r7}
 8008d6e:	4770      	bx	lr

08008d70 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08a      	sub	sp, #40	; 0x28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 8083 	beq.w	8008ebe <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d025      	beq.n	8008e0e <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	f003 0302 	and.w	r3, r3, #2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d004      	beq.n	8008dde <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	4798      	blx	r3
 8008ddc:	e017      	b.n	8008e0e <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d004      	beq.n	8008df2 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008dee:	627b      	str	r3, [r7, #36]	; 0x24
 8008df0:	e00d      	b.n	8008e0e <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	f003 0308 	and.w	r3, r3, #8
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d004      	beq.n	8008e06 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e02:	627b      	str	r3, [r7, #36]	; 0x24
 8008e04:	e003      	b.n	8008e0e <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d026      	beq.n	8008e66 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	4798      	blx	r3
 8008e34:	e017      	b.n	8008e66 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d004      	beq.n	8008e4a <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
 8008e48:	e00d      	b.n	8008e66 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d004      	beq.n	8008e5e <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e5c:	e003      	b.n	8008e66 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d026      	beq.n	8008ebe <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008e78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d004      	beq.n	8008e8e <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	4798      	blx	r3
 8008e8c:	e017      	b.n	8008ebe <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d004      	beq.n	8008ea2 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008ea0:	e00d      	b.n	8008ebe <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d004      	beq.n	8008eb6 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb4:	e003      	b.n	8008ebe <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	f003 0308 	and.w	r3, r3, #8
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00c      	beq.n	8008ee2 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f003 0310 	and.w	r3, r3, #16
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d007      	beq.n	8008ee2 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ed8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2210      	movs	r2, #16
 8008ee0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	f003 0304 	and.w	r3, r3, #4
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00c      	beq.n	8008f06 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f003 0308 	and.w	r3, r3, #8
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d007      	beq.n	8008f06 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2208      	movs	r2, #8
 8008efc:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00c      	beq.n	8008f4a <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f003 0310 	and.w	r3, r3, #16
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d007      	beq.n	8008f4a <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2210      	movs	r2, #16
 8008f48:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	f003 0320 	and.w	r3, r3, #32
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00c      	beq.n	8008f6e <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f003 0308 	and.w	r3, r3, #8
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d007      	beq.n	8008f6e <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2208      	movs	r2, #8
 8008f64:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	f003 0310 	and.w	r3, r3, #16
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00a      	beq.n	8008f8e <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008f8e:	6a3b      	ldr	r3, [r7, #32]
 8008f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00c      	beq.n	8008fb2 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	f003 0310 	and.w	r3, r3, #16
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d007      	beq.n	8008fb2 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2210      	movs	r2, #16
 8008fa8:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00c      	beq.n	8008fd6 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	f003 0308 	and.w	r3, r3, #8
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d007      	beq.n	8008fd6 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2208      	movs	r2, #8
 8008fcc:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d07b      	beq.n	80090d8 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d072      	beq.n	80090d0 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d008      	beq.n	8009006 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	f043 0301 	orr.w	r3, r3, #1
 8009004:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800900c:	2b00      	cmp	r3, #0
 800900e:	d008      	beq.n	8009022 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	f043 0302 	orr.w	r3, r3, #2
 8009020:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009028:	2b00      	cmp	r3, #0
 800902a:	d008      	beq.n	800903e <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	f043 0304 	orr.w	r3, r3, #4
 800903c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009044:	2b00      	cmp	r3, #0
 8009046:	d043      	beq.n	80090d0 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800904e:	2b00      	cmp	r3, #0
 8009050:	d03e      	beq.n	80090d0 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009058:	2b60      	cmp	r3, #96	; 0x60
 800905a:	d02b      	beq.n	80090b4 <HAL_CAN_IRQHandler+0x344>
 800905c:	2b60      	cmp	r3, #96	; 0x60
 800905e:	d82e      	bhi.n	80090be <HAL_CAN_IRQHandler+0x34e>
 8009060:	2b50      	cmp	r3, #80	; 0x50
 8009062:	d022      	beq.n	80090aa <HAL_CAN_IRQHandler+0x33a>
 8009064:	2b50      	cmp	r3, #80	; 0x50
 8009066:	d82a      	bhi.n	80090be <HAL_CAN_IRQHandler+0x34e>
 8009068:	2b40      	cmp	r3, #64	; 0x40
 800906a:	d019      	beq.n	80090a0 <HAL_CAN_IRQHandler+0x330>
 800906c:	2b40      	cmp	r3, #64	; 0x40
 800906e:	d826      	bhi.n	80090be <HAL_CAN_IRQHandler+0x34e>
 8009070:	2b30      	cmp	r3, #48	; 0x30
 8009072:	d010      	beq.n	8009096 <HAL_CAN_IRQHandler+0x326>
 8009074:	2b30      	cmp	r3, #48	; 0x30
 8009076:	d822      	bhi.n	80090be <HAL_CAN_IRQHandler+0x34e>
 8009078:	2b10      	cmp	r3, #16
 800907a:	d002      	beq.n	8009082 <HAL_CAN_IRQHandler+0x312>
 800907c:	2b20      	cmp	r3, #32
 800907e:	d005      	beq.n	800908c <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009080:	e01d      	b.n	80090be <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	f043 0308 	orr.w	r3, r3, #8
 8009088:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800908a:	e019      	b.n	80090c0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	f043 0310 	orr.w	r3, r3, #16
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009094:	e014      	b.n	80090c0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009098:	f043 0320 	orr.w	r3, r3, #32
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800909e:	e00f      	b.n	80090c0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80090a8:	e00a      	b.n	80090c0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80090b2:	e005      	b.n	80090c0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80090bc:	e000      	b.n	80090c0 <HAL_CAN_IRQHandler+0x350>
            break;
 80090be:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80090ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2204      	movs	r2, #4
 80090d6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d009      	beq.n	80090f2 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	431a      	orrs	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80090f2:	bf00      	nop
 80090f4:	3728      	adds	r7, #40	; 0x28
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009102:	bf00      	nop
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	bc80      	pop	{r7}
 800910a:	4770      	bx	lr

0800910c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	bc80      	pop	{r7}
 800911c:	4770      	bx	lr

0800911e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800911e:	b480      	push	{r7}
 8009120:	b083      	sub	sp, #12
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009126:	bf00      	nop
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	bc80      	pop	{r7}
 800912e:	4770      	bx	lr

08009130 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	bc80      	pop	{r7}
 8009140:	4770      	bx	lr

08009142 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800914a:	bf00      	nop
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	bc80      	pop	{r7}
 8009152:	4770      	bx	lr

08009154 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	bc80      	pop	{r7}
 8009164:	4770      	bx	lr

08009166 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009166:	b480      	push	{r7}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800916e:	bf00      	nop
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	bc80      	pop	{r7}
 8009176:	4770      	bx	lr

08009178 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	bc80      	pop	{r7}
 8009188:	4770      	bx	lr
	...

0800918c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800919c:	4b0c      	ldr	r3, [pc, #48]	; (80091d0 <__NVIC_SetPriorityGrouping+0x44>)
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80091a8:	4013      	ands	r3, r2
 80091aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80091b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80091b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80091be:	4a04      	ldr	r2, [pc, #16]	; (80091d0 <__NVIC_SetPriorityGrouping+0x44>)
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	60d3      	str	r3, [r2, #12]
}
 80091c4:	bf00      	nop
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bc80      	pop	{r7}
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	e000ed00 	.word	0xe000ed00

080091d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80091d8:	4b04      	ldr	r3, [pc, #16]	; (80091ec <__NVIC_GetPriorityGrouping+0x18>)
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	0a1b      	lsrs	r3, r3, #8
 80091de:	f003 0307 	and.w	r3, r3, #7
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bc80      	pop	{r7}
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	e000ed00 	.word	0xe000ed00

080091f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	4603      	mov	r3, r0
 80091f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	db0b      	blt.n	800921a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	f003 021f 	and.w	r2, r3, #31
 8009208:	4906      	ldr	r1, [pc, #24]	; (8009224 <__NVIC_EnableIRQ+0x34>)
 800920a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800920e:	095b      	lsrs	r3, r3, #5
 8009210:	2001      	movs	r0, #1
 8009212:	fa00 f202 	lsl.w	r2, r0, r2
 8009216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800921a:	bf00      	nop
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	bc80      	pop	{r7}
 8009222:	4770      	bx	lr
 8009224:	e000e100 	.word	0xe000e100

08009228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	4603      	mov	r3, r0
 8009230:	6039      	str	r1, [r7, #0]
 8009232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009238:	2b00      	cmp	r3, #0
 800923a:	db0a      	blt.n	8009252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	b2da      	uxtb	r2, r3
 8009240:	490c      	ldr	r1, [pc, #48]	; (8009274 <__NVIC_SetPriority+0x4c>)
 8009242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009246:	0112      	lsls	r2, r2, #4
 8009248:	b2d2      	uxtb	r2, r2
 800924a:	440b      	add	r3, r1
 800924c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009250:	e00a      	b.n	8009268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	b2da      	uxtb	r2, r3
 8009256:	4908      	ldr	r1, [pc, #32]	; (8009278 <__NVIC_SetPriority+0x50>)
 8009258:	79fb      	ldrb	r3, [r7, #7]
 800925a:	f003 030f 	and.w	r3, r3, #15
 800925e:	3b04      	subs	r3, #4
 8009260:	0112      	lsls	r2, r2, #4
 8009262:	b2d2      	uxtb	r2, r2
 8009264:	440b      	add	r3, r1
 8009266:	761a      	strb	r2, [r3, #24]
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	bc80      	pop	{r7}
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	e000e100 	.word	0xe000e100
 8009278:	e000ed00 	.word	0xe000ed00

0800927c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800927c:	b480      	push	{r7}
 800927e:	b089      	sub	sp, #36	; 0x24
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f003 0307 	and.w	r3, r3, #7
 800928e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f1c3 0307 	rsb	r3, r3, #7
 8009296:	2b04      	cmp	r3, #4
 8009298:	bf28      	it	cs
 800929a:	2304      	movcs	r3, #4
 800929c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	3304      	adds	r3, #4
 80092a2:	2b06      	cmp	r3, #6
 80092a4:	d902      	bls.n	80092ac <NVIC_EncodePriority+0x30>
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	3b03      	subs	r3, #3
 80092aa:	e000      	b.n	80092ae <NVIC_EncodePriority+0x32>
 80092ac:	2300      	movs	r3, #0
 80092ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092b0:	f04f 32ff 	mov.w	r2, #4294967295
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ba:	43da      	mvns	r2, r3
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	401a      	ands	r2, r3
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80092c4:	f04f 31ff 	mov.w	r1, #4294967295
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	fa01 f303 	lsl.w	r3, r1, r3
 80092ce:	43d9      	mvns	r1, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092d4:	4313      	orrs	r3, r2
         );
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3724      	adds	r7, #36	; 0x24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bc80      	pop	{r7}
 80092de:	4770      	bx	lr

080092e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80092e0:	b480      	push	{r7}
 80092e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80092e4:	f3bf 8f4f 	dsb	sy
}
 80092e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80092ea:	4b06      	ldr	r3, [pc, #24]	; (8009304 <__NVIC_SystemReset+0x24>)
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80092f2:	4904      	ldr	r1, [pc, #16]	; (8009304 <__NVIC_SystemReset+0x24>)
 80092f4:	4b04      	ldr	r3, [pc, #16]	; (8009308 <__NVIC_SystemReset+0x28>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80092fa:	f3bf 8f4f 	dsb	sy
}
 80092fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009300:	bf00      	nop
 8009302:	e7fd      	b.n	8009300 <__NVIC_SystemReset+0x20>
 8009304:	e000ed00 	.word	0xe000ed00
 8009308:	05fa0004 	.word	0x05fa0004

0800930c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	3b01      	subs	r3, #1
 8009318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800931c:	d301      	bcc.n	8009322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800931e:	2301      	movs	r3, #1
 8009320:	e00f      	b.n	8009342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009322:	4a0a      	ldr	r2, [pc, #40]	; (800934c <SysTick_Config+0x40>)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3b01      	subs	r3, #1
 8009328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800932a:	210f      	movs	r1, #15
 800932c:	f04f 30ff 	mov.w	r0, #4294967295
 8009330:	f7ff ff7a 	bl	8009228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009334:	4b05      	ldr	r3, [pc, #20]	; (800934c <SysTick_Config+0x40>)
 8009336:	2200      	movs	r2, #0
 8009338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800933a:	4b04      	ldr	r3, [pc, #16]	; (800934c <SysTick_Config+0x40>)
 800933c:	2207      	movs	r2, #7
 800933e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	e000e010 	.word	0xe000e010

08009350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7ff ff17 	bl	800918c <__NVIC_SetPriorityGrouping>
}
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009366:	b580      	push	{r7, lr}
 8009368:	b086      	sub	sp, #24
 800936a:	af00      	add	r7, sp, #0
 800936c:	4603      	mov	r3, r0
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	607a      	str	r2, [r7, #4]
 8009372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009374:	2300      	movs	r3, #0
 8009376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009378:	f7ff ff2c 	bl	80091d4 <__NVIC_GetPriorityGrouping>
 800937c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	6978      	ldr	r0, [r7, #20]
 8009384:	f7ff ff7a 	bl	800927c <NVIC_EncodePriority>
 8009388:	4602      	mov	r2, r0
 800938a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800938e:	4611      	mov	r1, r2
 8009390:	4618      	mov	r0, r3
 8009392:	f7ff ff49 	bl	8009228 <__NVIC_SetPriority>
}
 8009396:	bf00      	nop
 8009398:	3718      	adds	r7, #24
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b082      	sub	sp, #8
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	4603      	mov	r3, r0
 80093a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80093a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7ff ff1f 	bl	80091f0 <__NVIC_EnableIRQ>
}
 80093b2:	bf00      	nop
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80093be:	f7ff ff8f 	bl	80092e0 <__NVIC_SystemReset>

080093c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b082      	sub	sp, #8
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7ff ff9e 	bl	800930c <SysTick_Config>
 80093d0:	4603      	mov	r3, r0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
	...

080093dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e043      	b.n	800947a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	461a      	mov	r2, r3
 80093f8:	4b22      	ldr	r3, [pc, #136]	; (8009484 <HAL_DMA_Init+0xa8>)
 80093fa:	4413      	add	r3, r2
 80093fc:	4a22      	ldr	r2, [pc, #136]	; (8009488 <HAL_DMA_Init+0xac>)
 80093fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009402:	091b      	lsrs	r3, r3, #4
 8009404:	009a      	lsls	r2, r3, #2
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a1f      	ldr	r2, [pc, #124]	; (800948c <HAL_DMA_Init+0xb0>)
 800940e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2202      	movs	r2, #2
 8009414:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009426:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800942a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8009434:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009440:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	695b      	ldr	r3, [r3, #20]
 8009446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800944c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4313      	orrs	r3, r2
 8009458:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	bc80      	pop	{r7}
 8009482:	4770      	bx	lr
 8009484:	bffdfff8 	.word	0xbffdfff8
 8009488:	cccccccd 	.word	0xcccccccd
 800948c:	40020000 	.word	0x40020000

08009490 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_DMA_Start_IT+0x20>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e04a      	b.n	8009546 <HAL_DMA_Start_IT+0xb6>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d13a      	bne.n	8009538 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2202      	movs	r2, #2
 80094c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f022 0201 	bic.w	r2, r2, #1
 80094de:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	68b9      	ldr	r1, [r7, #8]
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 f9e8 	bl	80098bc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d008      	beq.n	8009506 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f042 020e 	orr.w	r2, r2, #14
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	e00f      	b.n	8009526 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 0204 	bic.w	r2, r2, #4
 8009514:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f042 020a 	orr.w	r2, r2, #10
 8009524:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f042 0201 	orr.w	r2, r2, #1
 8009534:	601a      	str	r2, [r3, #0]
 8009536:	e005      	b.n	8009544 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8009540:	2302      	movs	r3, #2
 8009542:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8009544:	7dfb      	ldrb	r3, [r7, #23]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800954e:	b480      	push	{r7}
 8009550:	b085      	sub	sp, #20
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009560:	2b02      	cmp	r3, #2
 8009562:	d008      	beq.n	8009576 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2204      	movs	r2, #4
 8009568:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e020      	b.n	80095b8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f022 020e 	bic.w	r2, r2, #14
 8009584:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f022 0201 	bic.w	r2, r2, #1
 8009594:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800959e:	2101      	movs	r1, #1
 80095a0:	fa01 f202 	lsl.w	r2, r1, r2
 80095a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3714      	adds	r7, #20
 80095bc:	46bd      	mov	sp, r7
 80095be:	bc80      	pop	{r7}
 80095c0:	4770      	bx	lr
	...

080095c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d005      	beq.n	80095e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2204      	movs	r2, #4
 80095de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	73fb      	strb	r3, [r7, #15]
 80095e4:	e051      	b.n	800968a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 020e 	bic.w	r2, r2, #14
 80095f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 0201 	bic.w	r2, r2, #1
 8009604:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a22      	ldr	r2, [pc, #136]	; (8009694 <HAL_DMA_Abort_IT+0xd0>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d029      	beq.n	8009664 <HAL_DMA_Abort_IT+0xa0>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a20      	ldr	r2, [pc, #128]	; (8009698 <HAL_DMA_Abort_IT+0xd4>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d022      	beq.n	8009660 <HAL_DMA_Abort_IT+0x9c>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a1f      	ldr	r2, [pc, #124]	; (800969c <HAL_DMA_Abort_IT+0xd8>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d01a      	beq.n	800965a <HAL_DMA_Abort_IT+0x96>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a1d      	ldr	r2, [pc, #116]	; (80096a0 <HAL_DMA_Abort_IT+0xdc>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d012      	beq.n	8009654 <HAL_DMA_Abort_IT+0x90>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a1c      	ldr	r2, [pc, #112]	; (80096a4 <HAL_DMA_Abort_IT+0xe0>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d00a      	beq.n	800964e <HAL_DMA_Abort_IT+0x8a>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a1a      	ldr	r2, [pc, #104]	; (80096a8 <HAL_DMA_Abort_IT+0xe4>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d102      	bne.n	8009648 <HAL_DMA_Abort_IT+0x84>
 8009642:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009646:	e00e      	b.n	8009666 <HAL_DMA_Abort_IT+0xa2>
 8009648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800964c:	e00b      	b.n	8009666 <HAL_DMA_Abort_IT+0xa2>
 800964e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009652:	e008      	b.n	8009666 <HAL_DMA_Abort_IT+0xa2>
 8009654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009658:	e005      	b.n	8009666 <HAL_DMA_Abort_IT+0xa2>
 800965a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800965e:	e002      	b.n	8009666 <HAL_DMA_Abort_IT+0xa2>
 8009660:	2310      	movs	r3, #16
 8009662:	e000      	b.n	8009666 <HAL_DMA_Abort_IT+0xa2>
 8009664:	2301      	movs	r3, #1
 8009666:	4a11      	ldr	r2, [pc, #68]	; (80096ac <HAL_DMA_Abort_IT+0xe8>)
 8009668:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	4798      	blx	r3
    } 
  }
  return status;
 800968a:	7bfb      	ldrb	r3, [r7, #15]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	40020008 	.word	0x40020008
 8009698:	4002001c 	.word	0x4002001c
 800969c:	40020030 	.word	0x40020030
 80096a0:	40020044 	.word	0x40020044
 80096a4:	40020058 	.word	0x40020058
 80096a8:	4002006c 	.word	0x4002006c
 80096ac:	40020000 	.word	0x40020000

080096b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096cc:	2204      	movs	r2, #4
 80096ce:	409a      	lsls	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4013      	ands	r3, r2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d04f      	beq.n	8009778 <HAL_DMA_IRQHandler+0xc8>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f003 0304 	and.w	r3, r3, #4
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d04a      	beq.n	8009778 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d107      	bne.n	8009700 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0204 	bic.w	r2, r2, #4
 80096fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a66      	ldr	r2, [pc, #408]	; (80098a0 <HAL_DMA_IRQHandler+0x1f0>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d029      	beq.n	800975e <HAL_DMA_IRQHandler+0xae>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a65      	ldr	r2, [pc, #404]	; (80098a4 <HAL_DMA_IRQHandler+0x1f4>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d022      	beq.n	800975a <HAL_DMA_IRQHandler+0xaa>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a63      	ldr	r2, [pc, #396]	; (80098a8 <HAL_DMA_IRQHandler+0x1f8>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d01a      	beq.n	8009754 <HAL_DMA_IRQHandler+0xa4>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a62      	ldr	r2, [pc, #392]	; (80098ac <HAL_DMA_IRQHandler+0x1fc>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d012      	beq.n	800974e <HAL_DMA_IRQHandler+0x9e>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a60      	ldr	r2, [pc, #384]	; (80098b0 <HAL_DMA_IRQHandler+0x200>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d00a      	beq.n	8009748 <HAL_DMA_IRQHandler+0x98>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a5f      	ldr	r2, [pc, #380]	; (80098b4 <HAL_DMA_IRQHandler+0x204>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d102      	bne.n	8009742 <HAL_DMA_IRQHandler+0x92>
 800973c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009740:	e00e      	b.n	8009760 <HAL_DMA_IRQHandler+0xb0>
 8009742:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009746:	e00b      	b.n	8009760 <HAL_DMA_IRQHandler+0xb0>
 8009748:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800974c:	e008      	b.n	8009760 <HAL_DMA_IRQHandler+0xb0>
 800974e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009752:	e005      	b.n	8009760 <HAL_DMA_IRQHandler+0xb0>
 8009754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009758:	e002      	b.n	8009760 <HAL_DMA_IRQHandler+0xb0>
 800975a:	2340      	movs	r3, #64	; 0x40
 800975c:	e000      	b.n	8009760 <HAL_DMA_IRQHandler+0xb0>
 800975e:	2304      	movs	r3, #4
 8009760:	4a55      	ldr	r2, [pc, #340]	; (80098b8 <HAL_DMA_IRQHandler+0x208>)
 8009762:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 8094 	beq.w	8009896 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8009776:	e08e      	b.n	8009896 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977c:	2202      	movs	r2, #2
 800977e:	409a      	lsls	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4013      	ands	r3, r2
 8009784:	2b00      	cmp	r3, #0
 8009786:	d056      	beq.n	8009836 <HAL_DMA_IRQHandler+0x186>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f003 0302 	and.w	r3, r3, #2
 800978e:	2b00      	cmp	r3, #0
 8009790:	d051      	beq.n	8009836 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0320 	and.w	r3, r3, #32
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10b      	bne.n	80097b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 020a 	bic.w	r2, r2, #10
 80097ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a38      	ldr	r2, [pc, #224]	; (80098a0 <HAL_DMA_IRQHandler+0x1f0>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d029      	beq.n	8009816 <HAL_DMA_IRQHandler+0x166>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a37      	ldr	r2, [pc, #220]	; (80098a4 <HAL_DMA_IRQHandler+0x1f4>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d022      	beq.n	8009812 <HAL_DMA_IRQHandler+0x162>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a35      	ldr	r2, [pc, #212]	; (80098a8 <HAL_DMA_IRQHandler+0x1f8>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d01a      	beq.n	800980c <HAL_DMA_IRQHandler+0x15c>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a34      	ldr	r2, [pc, #208]	; (80098ac <HAL_DMA_IRQHandler+0x1fc>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d012      	beq.n	8009806 <HAL_DMA_IRQHandler+0x156>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a32      	ldr	r2, [pc, #200]	; (80098b0 <HAL_DMA_IRQHandler+0x200>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d00a      	beq.n	8009800 <HAL_DMA_IRQHandler+0x150>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a31      	ldr	r2, [pc, #196]	; (80098b4 <HAL_DMA_IRQHandler+0x204>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d102      	bne.n	80097fa <HAL_DMA_IRQHandler+0x14a>
 80097f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80097f8:	e00e      	b.n	8009818 <HAL_DMA_IRQHandler+0x168>
 80097fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097fe:	e00b      	b.n	8009818 <HAL_DMA_IRQHandler+0x168>
 8009800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009804:	e008      	b.n	8009818 <HAL_DMA_IRQHandler+0x168>
 8009806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800980a:	e005      	b.n	8009818 <HAL_DMA_IRQHandler+0x168>
 800980c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009810:	e002      	b.n	8009818 <HAL_DMA_IRQHandler+0x168>
 8009812:	2320      	movs	r3, #32
 8009814:	e000      	b.n	8009818 <HAL_DMA_IRQHandler+0x168>
 8009816:	2302      	movs	r3, #2
 8009818:	4a27      	ldr	r2, [pc, #156]	; (80098b8 <HAL_DMA_IRQHandler+0x208>)
 800981a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009828:	2b00      	cmp	r3, #0
 800982a:	d034      	beq.n	8009896 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009834:	e02f      	b.n	8009896 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983a:	2208      	movs	r2, #8
 800983c:	409a      	lsls	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	4013      	ands	r3, r2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d028      	beq.n	8009898 <HAL_DMA_IRQHandler+0x1e8>
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	f003 0308 	and.w	r3, r3, #8
 800984c:	2b00      	cmp	r3, #0
 800984e:	d023      	beq.n	8009898 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f022 020e 	bic.w	r2, r2, #14
 800985e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009868:	2101      	movs	r1, #1
 800986a:	fa01 f202 	lsl.w	r2, r1, r2
 800986e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988a:	2b00      	cmp	r3, #0
 800988c:	d004      	beq.n	8009898 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	4798      	blx	r3
    }
  }
  return;
 8009896:	bf00      	nop
 8009898:	bf00      	nop
}
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	40020008 	.word	0x40020008
 80098a4:	4002001c 	.word	0x4002001c
 80098a8:	40020030 	.word	0x40020030
 80098ac:	40020044 	.word	0x40020044
 80098b0:	40020058 	.word	0x40020058
 80098b4:	4002006c 	.word	0x4002006c
 80098b8:	40020000 	.word	0x40020000

080098bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d2:	2101      	movs	r1, #1
 80098d4:	fa01 f202 	lsl.w	r2, r1, r2
 80098d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	2b10      	cmp	r3, #16
 80098e8:	d108      	bne.n	80098fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80098fa:	e007      	b.n	800990c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	60da      	str	r2, [r3, #12]
}
 800990c:	bf00      	nop
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	bc80      	pop	{r7}
 8009914:	4770      	bx	lr
	...

08009918 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009918:	b480      	push	{r7}
 800991a:	b08b      	sub	sp, #44	; 0x2c
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009922:	2300      	movs	r3, #0
 8009924:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009926:	2300      	movs	r3, #0
 8009928:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800992a:	e169      	b.n	8009c00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800992c:	2201      	movs	r2, #1
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	fa02 f303 	lsl.w	r3, r2, r3
 8009934:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	69fa      	ldr	r2, [r7, #28]
 800993c:	4013      	ands	r3, r2
 800993e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	429a      	cmp	r2, r3
 8009946:	f040 8158 	bne.w	8009bfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	4a9a      	ldr	r2, [pc, #616]	; (8009bb8 <HAL_GPIO_Init+0x2a0>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d05e      	beq.n	8009a12 <HAL_GPIO_Init+0xfa>
 8009954:	4a98      	ldr	r2, [pc, #608]	; (8009bb8 <HAL_GPIO_Init+0x2a0>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d875      	bhi.n	8009a46 <HAL_GPIO_Init+0x12e>
 800995a:	4a98      	ldr	r2, [pc, #608]	; (8009bbc <HAL_GPIO_Init+0x2a4>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d058      	beq.n	8009a12 <HAL_GPIO_Init+0xfa>
 8009960:	4a96      	ldr	r2, [pc, #600]	; (8009bbc <HAL_GPIO_Init+0x2a4>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d86f      	bhi.n	8009a46 <HAL_GPIO_Init+0x12e>
 8009966:	4a96      	ldr	r2, [pc, #600]	; (8009bc0 <HAL_GPIO_Init+0x2a8>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d052      	beq.n	8009a12 <HAL_GPIO_Init+0xfa>
 800996c:	4a94      	ldr	r2, [pc, #592]	; (8009bc0 <HAL_GPIO_Init+0x2a8>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d869      	bhi.n	8009a46 <HAL_GPIO_Init+0x12e>
 8009972:	4a94      	ldr	r2, [pc, #592]	; (8009bc4 <HAL_GPIO_Init+0x2ac>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d04c      	beq.n	8009a12 <HAL_GPIO_Init+0xfa>
 8009978:	4a92      	ldr	r2, [pc, #584]	; (8009bc4 <HAL_GPIO_Init+0x2ac>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d863      	bhi.n	8009a46 <HAL_GPIO_Init+0x12e>
 800997e:	4a92      	ldr	r2, [pc, #584]	; (8009bc8 <HAL_GPIO_Init+0x2b0>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d046      	beq.n	8009a12 <HAL_GPIO_Init+0xfa>
 8009984:	4a90      	ldr	r2, [pc, #576]	; (8009bc8 <HAL_GPIO_Init+0x2b0>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d85d      	bhi.n	8009a46 <HAL_GPIO_Init+0x12e>
 800998a:	2b12      	cmp	r3, #18
 800998c:	d82a      	bhi.n	80099e4 <HAL_GPIO_Init+0xcc>
 800998e:	2b12      	cmp	r3, #18
 8009990:	d859      	bhi.n	8009a46 <HAL_GPIO_Init+0x12e>
 8009992:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <HAL_GPIO_Init+0x80>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	08009a13 	.word	0x08009a13
 800999c:	080099ed 	.word	0x080099ed
 80099a0:	080099ff 	.word	0x080099ff
 80099a4:	08009a41 	.word	0x08009a41
 80099a8:	08009a47 	.word	0x08009a47
 80099ac:	08009a47 	.word	0x08009a47
 80099b0:	08009a47 	.word	0x08009a47
 80099b4:	08009a47 	.word	0x08009a47
 80099b8:	08009a47 	.word	0x08009a47
 80099bc:	08009a47 	.word	0x08009a47
 80099c0:	08009a47 	.word	0x08009a47
 80099c4:	08009a47 	.word	0x08009a47
 80099c8:	08009a47 	.word	0x08009a47
 80099cc:	08009a47 	.word	0x08009a47
 80099d0:	08009a47 	.word	0x08009a47
 80099d4:	08009a47 	.word	0x08009a47
 80099d8:	08009a47 	.word	0x08009a47
 80099dc:	080099f5 	.word	0x080099f5
 80099e0:	08009a09 	.word	0x08009a09
 80099e4:	4a79      	ldr	r2, [pc, #484]	; (8009bcc <HAL_GPIO_Init+0x2b4>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d013      	beq.n	8009a12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80099ea:	e02c      	b.n	8009a46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	623b      	str	r3, [r7, #32]
          break;
 80099f2:	e029      	b.n	8009a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	3304      	adds	r3, #4
 80099fa:	623b      	str	r3, [r7, #32]
          break;
 80099fc:	e024      	b.n	8009a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	3308      	adds	r3, #8
 8009a04:	623b      	str	r3, [r7, #32]
          break;
 8009a06:	e01f      	b.n	8009a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	330c      	adds	r3, #12
 8009a0e:	623b      	str	r3, [r7, #32]
          break;
 8009a10:	e01a      	b.n	8009a48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d102      	bne.n	8009a20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009a1a:	2304      	movs	r3, #4
 8009a1c:	623b      	str	r3, [r7, #32]
          break;
 8009a1e:	e013      	b.n	8009a48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d105      	bne.n	8009a34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009a28:	2308      	movs	r3, #8
 8009a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	69fa      	ldr	r2, [r7, #28]
 8009a30:	611a      	str	r2, [r3, #16]
          break;
 8009a32:	e009      	b.n	8009a48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009a34:	2308      	movs	r3, #8
 8009a36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	69fa      	ldr	r2, [r7, #28]
 8009a3c:	615a      	str	r2, [r3, #20]
          break;
 8009a3e:	e003      	b.n	8009a48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009a40:	2300      	movs	r3, #0
 8009a42:	623b      	str	r3, [r7, #32]
          break;
 8009a44:	e000      	b.n	8009a48 <HAL_GPIO_Init+0x130>
          break;
 8009a46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	2bff      	cmp	r3, #255	; 0xff
 8009a4c:	d801      	bhi.n	8009a52 <HAL_GPIO_Init+0x13a>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	e001      	b.n	8009a56 <HAL_GPIO_Init+0x13e>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3304      	adds	r3, #4
 8009a56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	2bff      	cmp	r3, #255	; 0xff
 8009a5c:	d802      	bhi.n	8009a64 <HAL_GPIO_Init+0x14c>
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	e002      	b.n	8009a6a <HAL_GPIO_Init+0x152>
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	3b08      	subs	r3, #8
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	210f      	movs	r1, #15
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	fa01 f303 	lsl.w	r3, r1, r3
 8009a78:	43db      	mvns	r3, r3
 8009a7a:	401a      	ands	r2, r3
 8009a7c:	6a39      	ldr	r1, [r7, #32]
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	fa01 f303 	lsl.w	r3, r1, r3
 8009a84:	431a      	orrs	r2, r3
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f000 80b1 	beq.w	8009bfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009a98:	4b4d      	ldr	r3, [pc, #308]	; (8009bd0 <HAL_GPIO_Init+0x2b8>)
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	4a4c      	ldr	r2, [pc, #304]	; (8009bd0 <HAL_GPIO_Init+0x2b8>)
 8009a9e:	f043 0301 	orr.w	r3, r3, #1
 8009aa2:	6193      	str	r3, [r2, #24]
 8009aa4:	4b4a      	ldr	r3, [pc, #296]	; (8009bd0 <HAL_GPIO_Init+0x2b8>)
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	f003 0301 	and.w	r3, r3, #1
 8009aac:	60bb      	str	r3, [r7, #8]
 8009aae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009ab0:	4a48      	ldr	r2, [pc, #288]	; (8009bd4 <HAL_GPIO_Init+0x2bc>)
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	089b      	lsrs	r3, r3, #2
 8009ab6:	3302      	adds	r3, #2
 8009ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009abc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	f003 0303 	and.w	r3, r3, #3
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	220f      	movs	r2, #15
 8009ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8009acc:	43db      	mvns	r3, r3
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a40      	ldr	r2, [pc, #256]	; (8009bd8 <HAL_GPIO_Init+0x2c0>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d013      	beq.n	8009b04 <HAL_GPIO_Init+0x1ec>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a3f      	ldr	r2, [pc, #252]	; (8009bdc <HAL_GPIO_Init+0x2c4>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d00d      	beq.n	8009b00 <HAL_GPIO_Init+0x1e8>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a3e      	ldr	r2, [pc, #248]	; (8009be0 <HAL_GPIO_Init+0x2c8>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d007      	beq.n	8009afc <HAL_GPIO_Init+0x1e4>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a3d      	ldr	r2, [pc, #244]	; (8009be4 <HAL_GPIO_Init+0x2cc>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d101      	bne.n	8009af8 <HAL_GPIO_Init+0x1e0>
 8009af4:	2303      	movs	r3, #3
 8009af6:	e006      	b.n	8009b06 <HAL_GPIO_Init+0x1ee>
 8009af8:	2304      	movs	r3, #4
 8009afa:	e004      	b.n	8009b06 <HAL_GPIO_Init+0x1ee>
 8009afc:	2302      	movs	r3, #2
 8009afe:	e002      	b.n	8009b06 <HAL_GPIO_Init+0x1ee>
 8009b00:	2301      	movs	r3, #1
 8009b02:	e000      	b.n	8009b06 <HAL_GPIO_Init+0x1ee>
 8009b04:	2300      	movs	r3, #0
 8009b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b08:	f002 0203 	and.w	r2, r2, #3
 8009b0c:	0092      	lsls	r2, r2, #2
 8009b0e:	4093      	lsls	r3, r2
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009b16:	492f      	ldr	r1, [pc, #188]	; (8009bd4 <HAL_GPIO_Init+0x2bc>)
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	089b      	lsrs	r3, r3, #2
 8009b1c:	3302      	adds	r3, #2
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d006      	beq.n	8009b3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009b30:	4b2d      	ldr	r3, [pc, #180]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	492c      	ldr	r1, [pc, #176]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	600b      	str	r3, [r1, #0]
 8009b3c:	e006      	b.n	8009b4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009b3e:	4b2a      	ldr	r3, [pc, #168]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	43db      	mvns	r3, r3
 8009b46:	4928      	ldr	r1, [pc, #160]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009b48:	4013      	ands	r3, r2
 8009b4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d006      	beq.n	8009b66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009b58:	4b23      	ldr	r3, [pc, #140]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	4922      	ldr	r1, [pc, #136]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	604b      	str	r3, [r1, #4]
 8009b64:	e006      	b.n	8009b74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009b66:	4b20      	ldr	r3, [pc, #128]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	43db      	mvns	r3, r3
 8009b6e:	491e      	ldr	r1, [pc, #120]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009b70:	4013      	ands	r3, r2
 8009b72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d006      	beq.n	8009b8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009b80:	4b19      	ldr	r3, [pc, #100]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009b82:	689a      	ldr	r2, [r3, #8]
 8009b84:	4918      	ldr	r1, [pc, #96]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	608b      	str	r3, [r1, #8]
 8009b8c:	e006      	b.n	8009b9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009b8e:	4b16      	ldr	r3, [pc, #88]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	43db      	mvns	r3, r3
 8009b96:	4914      	ldr	r1, [pc, #80]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009b98:	4013      	ands	r3, r2
 8009b9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d021      	beq.n	8009bec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009ba8:	4b0f      	ldr	r3, [pc, #60]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009baa:	68da      	ldr	r2, [r3, #12]
 8009bac:	490e      	ldr	r1, [pc, #56]	; (8009be8 <HAL_GPIO_Init+0x2d0>)
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	60cb      	str	r3, [r1, #12]
 8009bb4:	e021      	b.n	8009bfa <HAL_GPIO_Init+0x2e2>
 8009bb6:	bf00      	nop
 8009bb8:	10320000 	.word	0x10320000
 8009bbc:	10310000 	.word	0x10310000
 8009bc0:	10220000 	.word	0x10220000
 8009bc4:	10210000 	.word	0x10210000
 8009bc8:	10120000 	.word	0x10120000
 8009bcc:	10110000 	.word	0x10110000
 8009bd0:	40021000 	.word	0x40021000
 8009bd4:	40010000 	.word	0x40010000
 8009bd8:	40010800 	.word	0x40010800
 8009bdc:	40010c00 	.word	0x40010c00
 8009be0:	40011000 	.word	0x40011000
 8009be4:	40011400 	.word	0x40011400
 8009be8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009bec:	4b0b      	ldr	r3, [pc, #44]	; (8009c1c <HAL_GPIO_Init+0x304>)
 8009bee:	68da      	ldr	r2, [r3, #12]
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	43db      	mvns	r3, r3
 8009bf4:	4909      	ldr	r1, [pc, #36]	; (8009c1c <HAL_GPIO_Init+0x304>)
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	fa22 f303 	lsr.w	r3, r2, r3
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f47f ae8e 	bne.w	800992c <HAL_GPIO_Init+0x14>
  }
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	372c      	adds	r7, #44	; 0x2c
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bc80      	pop	{r7}
 8009c1a:	4770      	bx	lr
 8009c1c:	40010400 	.word	0x40010400

08009c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	807b      	strh	r3, [r7, #2]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009c30:	787b      	ldrb	r3, [r7, #1]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009c36:	887a      	ldrh	r2, [r7, #2]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009c3c:	e003      	b.n	8009c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009c3e:	887b      	ldrh	r3, [r7, #2]
 8009c40:	041a      	lsls	r2, r3, #16
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	611a      	str	r2, [r3, #16]
}
 8009c46:	bf00      	nop
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bc80      	pop	{r7}
 8009c4e:	4770      	bx	lr

08009c50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009c62:	887a      	ldrh	r2, [r7, #2]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4013      	ands	r3, r2
 8009c68:	041a      	lsls	r2, r3, #16
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	43d9      	mvns	r1, r3
 8009c6e:	887b      	ldrh	r3, [r7, #2]
 8009c70:	400b      	ands	r3, r1
 8009c72:	431a      	orrs	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	611a      	str	r2, [r3, #16]
}
 8009c78:	bf00      	nop
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bc80      	pop	{r7}
 8009c80:	4770      	bx	lr
	...

08009c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d101      	bne.n	8009c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e171      	b.n	8009f7a <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d12c      	bne.n	8009cfc <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a77      	ldr	r2, [pc, #476]	; (8009e8c <HAL_I2C_Init+0x208>)
 8009cae:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a77      	ldr	r2, [pc, #476]	; (8009e90 <HAL_I2C_Init+0x20c>)
 8009cb4:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a76      	ldr	r2, [pc, #472]	; (8009e94 <HAL_I2C_Init+0x210>)
 8009cba:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a76      	ldr	r2, [pc, #472]	; (8009e98 <HAL_I2C_Init+0x214>)
 8009cc0:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a75      	ldr	r2, [pc, #468]	; (8009e9c <HAL_I2C_Init+0x218>)
 8009cc6:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a75      	ldr	r2, [pc, #468]	; (8009ea0 <HAL_I2C_Init+0x21c>)
 8009ccc:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a74      	ldr	r2, [pc, #464]	; (8009ea4 <HAL_I2C_Init+0x220>)
 8009cd2:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a74      	ldr	r2, [pc, #464]	; (8009ea8 <HAL_I2C_Init+0x224>)
 8009cd8:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a73      	ldr	r2, [pc, #460]	; (8009eac <HAL_I2C_Init+0x228>)
 8009cde:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a73      	ldr	r2, [pc, #460]	; (8009eb0 <HAL_I2C_Init+0x22c>)
 8009ce4:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d102      	bne.n	8009cf4 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a70      	ldr	r2, [pc, #448]	; (8009eb4 <HAL_I2C_Init+0x230>)
 8009cf2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2224      	movs	r2, #36	; 0x24
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f022 0201 	bic.w	r2, r2, #1
 8009d12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d34:	f000 fd58 	bl	800a7e8 <HAL_RCC_GetPCLK1Freq>
 8009d38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	4a5e      	ldr	r2, [pc, #376]	; (8009eb8 <HAL_I2C_Init+0x234>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d807      	bhi.n	8009d54 <HAL_I2C_Init+0xd0>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	4a5d      	ldr	r2, [pc, #372]	; (8009ebc <HAL_I2C_Init+0x238>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	bf94      	ite	ls
 8009d4c:	2301      	movls	r3, #1
 8009d4e:	2300      	movhi	r3, #0
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	e006      	b.n	8009d62 <HAL_I2C_Init+0xde>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4a5a      	ldr	r2, [pc, #360]	; (8009ec0 <HAL_I2C_Init+0x23c>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	bf94      	ite	ls
 8009d5c:	2301      	movls	r3, #1
 8009d5e:	2300      	movhi	r3, #0
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e107      	b.n	8009f7a <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4a55      	ldr	r2, [pc, #340]	; (8009ec4 <HAL_I2C_Init+0x240>)
 8009d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d72:	0c9b      	lsrs	r3, r3, #18
 8009d74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	4a47      	ldr	r2, [pc, #284]	; (8009eb8 <HAL_I2C_Init+0x234>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d802      	bhi.n	8009da4 <HAL_I2C_Init+0x120>
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	3301      	adds	r3, #1
 8009da2:	e009      	b.n	8009db8 <HAL_I2C_Init+0x134>
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009daa:	fb02 f303 	mul.w	r3, r2, r3
 8009dae:	4a46      	ldr	r2, [pc, #280]	; (8009ec8 <HAL_I2C_Init+0x244>)
 8009db0:	fba2 2303 	umull	r2, r3, r2, r3
 8009db4:	099b      	lsrs	r3, r3, #6
 8009db6:	3301      	adds	r3, #1
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	6812      	ldr	r2, [r2, #0]
 8009dbc:	430b      	orrs	r3, r1
 8009dbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009dca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	4939      	ldr	r1, [pc, #228]	; (8009eb8 <HAL_I2C_Init+0x234>)
 8009dd4:	428b      	cmp	r3, r1
 8009dd6:	d819      	bhi.n	8009e0c <HAL_I2C_Init+0x188>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	1e59      	subs	r1, r3, #1
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009de6:	1c59      	adds	r1, r3, #1
 8009de8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009dec:	400b      	ands	r3, r1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00a      	beq.n	8009e08 <HAL_I2C_Init+0x184>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	1e59      	subs	r1, r3, #1
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e00:	3301      	adds	r3, #1
 8009e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e06:	e071      	b.n	8009eec <HAL_I2C_Init+0x268>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	e06f      	b.n	8009eec <HAL_I2C_Init+0x268>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d111      	bne.n	8009e38 <HAL_I2C_Init+0x1b4>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	1e58      	subs	r0, r3, #1
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6859      	ldr	r1, [r3, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	440b      	add	r3, r1
 8009e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e26:	3301      	adds	r3, #1
 8009e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	bf0c      	ite	eq
 8009e30:	2301      	moveq	r3, #1
 8009e32:	2300      	movne	r3, #0
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	e012      	b.n	8009e5e <HAL_I2C_Init+0x1da>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	1e58      	subs	r0, r3, #1
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6859      	ldr	r1, [r3, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	440b      	add	r3, r1
 8009e46:	0099      	lsls	r1, r3, #2
 8009e48:	440b      	add	r3, r1
 8009e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e4e:	3301      	adds	r3, #1
 8009e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	bf0c      	ite	eq
 8009e58:	2301      	moveq	r3, #1
 8009e5a:	2300      	movne	r3, #0
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <HAL_I2C_Init+0x1e2>
 8009e62:	2301      	movs	r3, #1
 8009e64:	e042      	b.n	8009eec <HAL_I2C_Init+0x268>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d12e      	bne.n	8009ecc <HAL_I2C_Init+0x248>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	1e58      	subs	r0, r3, #1
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6859      	ldr	r1, [r3, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	440b      	add	r3, r1
 8009e7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e80:	3301      	adds	r3, #1
 8009e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e8a:	e02f      	b.n	8009eec <HAL_I2C_Init+0x268>
 8009e8c:	08009f85 	.word	0x08009f85
 8009e90:	08009f97 	.word	0x08009f97
 8009e94:	08009fa9 	.word	0x08009fa9
 8009e98:	08009fbb 	.word	0x08009fbb
 8009e9c:	08009fe7 	.word	0x08009fe7
 8009ea0:	08009ff9 	.word	0x08009ff9
 8009ea4:	0800a00b 	.word	0x0800a00b
 8009ea8:	0800a01d 	.word	0x0800a01d
 8009eac:	0800a02f 	.word	0x0800a02f
 8009eb0:	08009fcd 	.word	0x08009fcd
 8009eb4:	08007d1d 	.word	0x08007d1d
 8009eb8:	000186a0 	.word	0x000186a0
 8009ebc:	001e847f 	.word	0x001e847f
 8009ec0:	003d08ff 	.word	0x003d08ff
 8009ec4:	431bde83 	.word	0x431bde83
 8009ec8:	10624dd3 	.word	0x10624dd3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	1e58      	subs	r0, r3, #1
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6859      	ldr	r1, [r3, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	440b      	add	r3, r1
 8009eda:	0099      	lsls	r1, r3, #2
 8009edc:	440b      	add	r3, r1
 8009ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eec:	6879      	ldr	r1, [r7, #4]
 8009eee:	6809      	ldr	r1, [r1, #0]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	69da      	ldr	r2, [r3, #28]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	431a      	orrs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	430a      	orrs	r2, r1
 8009f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009f1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	6911      	ldr	r1, [r2, #16]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	68d2      	ldr	r2, [r2, #12]
 8009f26:	4311      	orrs	r1, r2
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6812      	ldr	r2, [r2, #0]
 8009f2c:	430b      	orrs	r3, r1
 8009f2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	695a      	ldr	r2, [r3, #20]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	431a      	orrs	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f042 0201 	orr.w	r2, r2, #1
 8009f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2220      	movs	r2, #32
 8009f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop

08009f84 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bc80      	pop	{r7}
 8009f94:	4770      	bx	lr

08009f96 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b083      	sub	sp, #12
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009f9e:	bf00      	nop
 8009fa0:	370c      	adds	r7, #12
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bc80      	pop	{r7}
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bc80      	pop	{r7}
 8009fb8:	4770      	bx	lr

08009fba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b083      	sub	sp, #12
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009fc2:	bf00      	nop
 8009fc4:	370c      	adds	r7, #12
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bc80      	pop	{r7}
 8009fca:	4770      	bx	lr

08009fcc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	70fb      	strb	r3, [r7, #3]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bc80      	pop	{r7}
 8009fe4:	4770      	bx	lr

08009fe6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b083      	sub	sp, #12
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8009fee:	bf00      	nop
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bc80      	pop	{r7}
 8009ff6:	4770      	bx	lr

08009ff8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	bc80      	pop	{r7}
 800a008:	4770      	bx	lr

0800a00a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b083      	sub	sp, #12
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a012:	bf00      	nop
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	bc80      	pop	{r7}
 800a01a:	4770      	bx	lr

0800a01c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	bc80      	pop	{r7}
 800a02c:	4770      	bx	lr

0800a02e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a036:	bf00      	nop
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bc80      	pop	{r7}
 800a03e:	4770      	bx	lr

0800a040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e272      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 8087 	beq.w	800a16e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a060:	4b92      	ldr	r3, [pc, #584]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	f003 030c 	and.w	r3, r3, #12
 800a068:	2b04      	cmp	r3, #4
 800a06a:	d00c      	beq.n	800a086 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a06c:	4b8f      	ldr	r3, [pc, #572]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f003 030c 	and.w	r3, r3, #12
 800a074:	2b08      	cmp	r3, #8
 800a076:	d112      	bne.n	800a09e <HAL_RCC_OscConfig+0x5e>
 800a078:	4b8c      	ldr	r3, [pc, #560]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a084:	d10b      	bne.n	800a09e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a086:	4b89      	ldr	r3, [pc, #548]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d06c      	beq.n	800a16c <HAL_RCC_OscConfig+0x12c>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d168      	bne.n	800a16c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e24c      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0a6:	d106      	bne.n	800a0b6 <HAL_RCC_OscConfig+0x76>
 800a0a8:	4b80      	ldr	r3, [pc, #512]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a7f      	ldr	r2, [pc, #508]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a0ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0b2:	6013      	str	r3, [r2, #0]
 800a0b4:	e02e      	b.n	800a114 <HAL_RCC_OscConfig+0xd4>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d10c      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x98>
 800a0be:	4b7b      	ldr	r3, [pc, #492]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a7a      	ldr	r2, [pc, #488]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a0c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	4b78      	ldr	r3, [pc, #480]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a77      	ldr	r2, [pc, #476]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a0d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0d4:	6013      	str	r3, [r2, #0]
 800a0d6:	e01d      	b.n	800a114 <HAL_RCC_OscConfig+0xd4>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0e0:	d10c      	bne.n	800a0fc <HAL_RCC_OscConfig+0xbc>
 800a0e2:	4b72      	ldr	r3, [pc, #456]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a71      	ldr	r2, [pc, #452]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a0e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	4b6f      	ldr	r3, [pc, #444]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a6e      	ldr	r2, [pc, #440]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a0f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0f8:	6013      	str	r3, [r2, #0]
 800a0fa:	e00b      	b.n	800a114 <HAL_RCC_OscConfig+0xd4>
 800a0fc:	4b6b      	ldr	r3, [pc, #428]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a6a      	ldr	r2, [pc, #424]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a106:	6013      	str	r3, [r2, #0]
 800a108:	4b68      	ldr	r3, [pc, #416]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a67      	ldr	r2, [pc, #412]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a10e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a112:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d013      	beq.n	800a144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a11c:	f7fe f91a 	bl	8008354 <HAL_GetTick>
 800a120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a122:	e008      	b.n	800a136 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a124:	f7fe f916 	bl	8008354 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	2b64      	cmp	r3, #100	; 0x64
 800a130:	d901      	bls.n	800a136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e200      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a136:	4b5d      	ldr	r3, [pc, #372]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0f0      	beq.n	800a124 <HAL_RCC_OscConfig+0xe4>
 800a142:	e014      	b.n	800a16e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a144:	f7fe f906 	bl	8008354 <HAL_GetTick>
 800a148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a14a:	e008      	b.n	800a15e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a14c:	f7fe f902 	bl	8008354 <HAL_GetTick>
 800a150:	4602      	mov	r2, r0
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	2b64      	cmp	r3, #100	; 0x64
 800a158:	d901      	bls.n	800a15e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e1ec      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a15e:	4b53      	ldr	r3, [pc, #332]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1f0      	bne.n	800a14c <HAL_RCC_OscConfig+0x10c>
 800a16a:	e000      	b.n	800a16e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a16c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0302 	and.w	r3, r3, #2
 800a176:	2b00      	cmp	r3, #0
 800a178:	d063      	beq.n	800a242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a17a:	4b4c      	ldr	r3, [pc, #304]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f003 030c 	and.w	r3, r3, #12
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00b      	beq.n	800a19e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a186:	4b49      	ldr	r3, [pc, #292]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f003 030c 	and.w	r3, r3, #12
 800a18e:	2b08      	cmp	r3, #8
 800a190:	d11c      	bne.n	800a1cc <HAL_RCC_OscConfig+0x18c>
 800a192:	4b46      	ldr	r3, [pc, #280]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d116      	bne.n	800a1cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a19e:	4b43      	ldr	r3, [pc, #268]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 0302 	and.w	r3, r3, #2
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d005      	beq.n	800a1b6 <HAL_RCC_OscConfig+0x176>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d001      	beq.n	800a1b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e1c0      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1b6:	4b3d      	ldr	r3, [pc, #244]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	00db      	lsls	r3, r3, #3
 800a1c4:	4939      	ldr	r1, [pc, #228]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1ca:	e03a      	b.n	800a242 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d020      	beq.n	800a216 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a1d4:	4b36      	ldr	r3, [pc, #216]	; (800a2b0 <HAL_RCC_OscConfig+0x270>)
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1da:	f7fe f8bb 	bl	8008354 <HAL_GetTick>
 800a1de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1e0:	e008      	b.n	800a1f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1e2:	f7fe f8b7 	bl	8008354 <HAL_GetTick>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d901      	bls.n	800a1f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e1a1      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1f4:	4b2d      	ldr	r3, [pc, #180]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0302 	and.w	r3, r3, #2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d0f0      	beq.n	800a1e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a200:	4b2a      	ldr	r3, [pc, #168]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	00db      	lsls	r3, r3, #3
 800a20e:	4927      	ldr	r1, [pc, #156]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a210:	4313      	orrs	r3, r2
 800a212:	600b      	str	r3, [r1, #0]
 800a214:	e015      	b.n	800a242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a216:	4b26      	ldr	r3, [pc, #152]	; (800a2b0 <HAL_RCC_OscConfig+0x270>)
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a21c:	f7fe f89a 	bl	8008354 <HAL_GetTick>
 800a220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a222:	e008      	b.n	800a236 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a224:	f7fe f896 	bl	8008354 <HAL_GetTick>
 800a228:	4602      	mov	r2, r0
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d901      	bls.n	800a236 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a232:	2303      	movs	r3, #3
 800a234:	e180      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a236:	4b1d      	ldr	r3, [pc, #116]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1f0      	bne.n	800a224 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 0308 	and.w	r3, r3, #8
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d03a      	beq.n	800a2c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d019      	beq.n	800a28a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a256:	4b17      	ldr	r3, [pc, #92]	; (800a2b4 <HAL_RCC_OscConfig+0x274>)
 800a258:	2201      	movs	r2, #1
 800a25a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a25c:	f7fe f87a 	bl	8008354 <HAL_GetTick>
 800a260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a262:	e008      	b.n	800a276 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a264:	f7fe f876 	bl	8008354 <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d901      	bls.n	800a276 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e160      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a276:	4b0d      	ldr	r3, [pc, #52]	; (800a2ac <HAL_RCC_OscConfig+0x26c>)
 800a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27a:	f003 0302 	and.w	r3, r3, #2
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0f0      	beq.n	800a264 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a282:	2001      	movs	r0, #1
 800a284:	f000 fad8 	bl	800a838 <RCC_Delay>
 800a288:	e01c      	b.n	800a2c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a28a:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <HAL_RCC_OscConfig+0x274>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a290:	f7fe f860 	bl	8008354 <HAL_GetTick>
 800a294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a296:	e00f      	b.n	800a2b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a298:	f7fe f85c 	bl	8008354 <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d908      	bls.n	800a2b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e146      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
 800a2aa:	bf00      	nop
 800a2ac:	40021000 	.word	0x40021000
 800a2b0:	42420000 	.word	0x42420000
 800a2b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2b8:	4b92      	ldr	r3, [pc, #584]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2bc:	f003 0302 	and.w	r3, r3, #2
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1e9      	bne.n	800a298 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0304 	and.w	r3, r3, #4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 80a6 	beq.w	800a41e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2d6:	4b8b      	ldr	r3, [pc, #556]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a2d8:	69db      	ldr	r3, [r3, #28]
 800a2da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10d      	bne.n	800a2fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2e2:	4b88      	ldr	r3, [pc, #544]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	4a87      	ldr	r2, [pc, #540]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a2e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ec:	61d3      	str	r3, [r2, #28]
 800a2ee:	4b85      	ldr	r3, [pc, #532]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a2f0:	69db      	ldr	r3, [r3, #28]
 800a2f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2f6:	60bb      	str	r3, [r7, #8]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2fe:	4b82      	ldr	r3, [pc, #520]	; (800a508 <HAL_RCC_OscConfig+0x4c8>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a306:	2b00      	cmp	r3, #0
 800a308:	d118      	bne.n	800a33c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a30a:	4b7f      	ldr	r3, [pc, #508]	; (800a508 <HAL_RCC_OscConfig+0x4c8>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a7e      	ldr	r2, [pc, #504]	; (800a508 <HAL_RCC_OscConfig+0x4c8>)
 800a310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a316:	f7fe f81d 	bl	8008354 <HAL_GetTick>
 800a31a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a31c:	e008      	b.n	800a330 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a31e:	f7fe f819 	bl	8008354 <HAL_GetTick>
 800a322:	4602      	mov	r2, r0
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	2b64      	cmp	r3, #100	; 0x64
 800a32a:	d901      	bls.n	800a330 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e103      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a330:	4b75      	ldr	r3, [pc, #468]	; (800a508 <HAL_RCC_OscConfig+0x4c8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d0f0      	beq.n	800a31e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d106      	bne.n	800a352 <HAL_RCC_OscConfig+0x312>
 800a344:	4b6f      	ldr	r3, [pc, #444]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a346:	6a1b      	ldr	r3, [r3, #32]
 800a348:	4a6e      	ldr	r2, [pc, #440]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a34a:	f043 0301 	orr.w	r3, r3, #1
 800a34e:	6213      	str	r3, [r2, #32]
 800a350:	e02d      	b.n	800a3ae <HAL_RCC_OscConfig+0x36e>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10c      	bne.n	800a374 <HAL_RCC_OscConfig+0x334>
 800a35a:	4b6a      	ldr	r3, [pc, #424]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	4a69      	ldr	r2, [pc, #420]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a360:	f023 0301 	bic.w	r3, r3, #1
 800a364:	6213      	str	r3, [r2, #32]
 800a366:	4b67      	ldr	r3, [pc, #412]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	4a66      	ldr	r2, [pc, #408]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a36c:	f023 0304 	bic.w	r3, r3, #4
 800a370:	6213      	str	r3, [r2, #32]
 800a372:	e01c      	b.n	800a3ae <HAL_RCC_OscConfig+0x36e>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	2b05      	cmp	r3, #5
 800a37a:	d10c      	bne.n	800a396 <HAL_RCC_OscConfig+0x356>
 800a37c:	4b61      	ldr	r3, [pc, #388]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a37e:	6a1b      	ldr	r3, [r3, #32]
 800a380:	4a60      	ldr	r2, [pc, #384]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a382:	f043 0304 	orr.w	r3, r3, #4
 800a386:	6213      	str	r3, [r2, #32]
 800a388:	4b5e      	ldr	r3, [pc, #376]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a38a:	6a1b      	ldr	r3, [r3, #32]
 800a38c:	4a5d      	ldr	r2, [pc, #372]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a38e:	f043 0301 	orr.w	r3, r3, #1
 800a392:	6213      	str	r3, [r2, #32]
 800a394:	e00b      	b.n	800a3ae <HAL_RCC_OscConfig+0x36e>
 800a396:	4b5b      	ldr	r3, [pc, #364]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	4a5a      	ldr	r2, [pc, #360]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a39c:	f023 0301 	bic.w	r3, r3, #1
 800a3a0:	6213      	str	r3, [r2, #32]
 800a3a2:	4b58      	ldr	r3, [pc, #352]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	4a57      	ldr	r2, [pc, #348]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a3a8:	f023 0304 	bic.w	r3, r3, #4
 800a3ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d015      	beq.n	800a3e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3b6:	f7fd ffcd 	bl	8008354 <HAL_GetTick>
 800a3ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3bc:	e00a      	b.n	800a3d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3be:	f7fd ffc9 	bl	8008354 <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d901      	bls.n	800a3d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e0b1      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3d4:	4b4b      	ldr	r3, [pc, #300]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a3d6:	6a1b      	ldr	r3, [r3, #32]
 800a3d8:	f003 0302 	and.w	r3, r3, #2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d0ee      	beq.n	800a3be <HAL_RCC_OscConfig+0x37e>
 800a3e0:	e014      	b.n	800a40c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3e2:	f7fd ffb7 	bl	8008354 <HAL_GetTick>
 800a3e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3e8:	e00a      	b.n	800a400 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3ea:	f7fd ffb3 	bl	8008354 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d901      	bls.n	800a400 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e09b      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a400:	4b40      	ldr	r3, [pc, #256]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a402:	6a1b      	ldr	r3, [r3, #32]
 800a404:	f003 0302 	and.w	r3, r3, #2
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1ee      	bne.n	800a3ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a40c:	7dfb      	ldrb	r3, [r7, #23]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d105      	bne.n	800a41e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a412:	4b3c      	ldr	r3, [pc, #240]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a414:	69db      	ldr	r3, [r3, #28]
 800a416:	4a3b      	ldr	r2, [pc, #236]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a41c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	2b00      	cmp	r3, #0
 800a424:	f000 8087 	beq.w	800a536 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a428:	4b36      	ldr	r3, [pc, #216]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f003 030c 	and.w	r3, r3, #12
 800a430:	2b08      	cmp	r3, #8
 800a432:	d061      	beq.n	800a4f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	69db      	ldr	r3, [r3, #28]
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d146      	bne.n	800a4ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a43c:	4b33      	ldr	r3, [pc, #204]	; (800a50c <HAL_RCC_OscConfig+0x4cc>)
 800a43e:	2200      	movs	r2, #0
 800a440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a442:	f7fd ff87 	bl	8008354 <HAL_GetTick>
 800a446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a448:	e008      	b.n	800a45c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a44a:	f7fd ff83 	bl	8008354 <HAL_GetTick>
 800a44e:	4602      	mov	r2, r0
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	2b02      	cmp	r3, #2
 800a456:	d901      	bls.n	800a45c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	e06d      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a45c:	4b29      	ldr	r3, [pc, #164]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1f0      	bne.n	800a44a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a1b      	ldr	r3, [r3, #32]
 800a46c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a470:	d108      	bne.n	800a484 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a472:	4b24      	ldr	r3, [pc, #144]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	4921      	ldr	r1, [pc, #132]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a480:	4313      	orrs	r3, r2
 800a482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a484:	4b1f      	ldr	r3, [pc, #124]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a19      	ldr	r1, [r3, #32]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a494:	430b      	orrs	r3, r1
 800a496:	491b      	ldr	r1, [pc, #108]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a498:	4313      	orrs	r3, r2
 800a49a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a49c:	4b1b      	ldr	r3, [pc, #108]	; (800a50c <HAL_RCC_OscConfig+0x4cc>)
 800a49e:	2201      	movs	r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4a2:	f7fd ff57 	bl	8008354 <HAL_GetTick>
 800a4a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a4a8:	e008      	b.n	800a4bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4aa:	f7fd ff53 	bl	8008354 <HAL_GetTick>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d901      	bls.n	800a4bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e03d      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a4bc:	4b11      	ldr	r3, [pc, #68]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d0f0      	beq.n	800a4aa <HAL_RCC_OscConfig+0x46a>
 800a4c8:	e035      	b.n	800a536 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4ca:	4b10      	ldr	r3, [pc, #64]	; (800a50c <HAL_RCC_OscConfig+0x4cc>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4d0:	f7fd ff40 	bl	8008354 <HAL_GetTick>
 800a4d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4d6:	e008      	b.n	800a4ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4d8:	f7fd ff3c 	bl	8008354 <HAL_GetTick>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d901      	bls.n	800a4ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	e026      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4ea:	4b06      	ldr	r3, [pc, #24]	; (800a504 <HAL_RCC_OscConfig+0x4c4>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1f0      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x498>
 800a4f6:	e01e      	b.n	800a536 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d107      	bne.n	800a510 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	e019      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
 800a504:	40021000 	.word	0x40021000
 800a508:	40007000 	.word	0x40007000
 800a50c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a510:	4b0b      	ldr	r3, [pc, #44]	; (800a540 <HAL_RCC_OscConfig+0x500>)
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	429a      	cmp	r2, r3
 800a522:	d106      	bne.n	800a532 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a52e:	429a      	cmp	r2, r3
 800a530:	d001      	beq.n	800a536 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e000      	b.n	800a538 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	40021000 	.word	0x40021000

0800a544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d101      	bne.n	800a558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e0d0      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a558:	4b6a      	ldr	r3, [pc, #424]	; (800a704 <HAL_RCC_ClockConfig+0x1c0>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 0307 	and.w	r3, r3, #7
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	429a      	cmp	r2, r3
 800a564:	d910      	bls.n	800a588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a566:	4b67      	ldr	r3, [pc, #412]	; (800a704 <HAL_RCC_ClockConfig+0x1c0>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f023 0207 	bic.w	r2, r3, #7
 800a56e:	4965      	ldr	r1, [pc, #404]	; (800a704 <HAL_RCC_ClockConfig+0x1c0>)
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	4313      	orrs	r3, r2
 800a574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a576:	4b63      	ldr	r3, [pc, #396]	; (800a704 <HAL_RCC_ClockConfig+0x1c0>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0307 	and.w	r3, r3, #7
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	429a      	cmp	r2, r3
 800a582:	d001      	beq.n	800a588 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e0b8      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 0302 	and.w	r3, r3, #2
 800a590:	2b00      	cmp	r3, #0
 800a592:	d020      	beq.n	800a5d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 0304 	and.w	r3, r3, #4
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d005      	beq.n	800a5ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a5a0:	4b59      	ldr	r3, [pc, #356]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	4a58      	ldr	r2, [pc, #352]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a5a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a5aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0308 	and.w	r3, r3, #8
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d005      	beq.n	800a5c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a5b8:	4b53      	ldr	r3, [pc, #332]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	4a52      	ldr	r2, [pc, #328]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a5be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a5c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5c4:	4b50      	ldr	r3, [pc, #320]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	494d      	ldr	r1, [pc, #308]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0301 	and.w	r3, r3, #1
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d040      	beq.n	800a664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d107      	bne.n	800a5fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5ea:	4b47      	ldr	r3, [pc, #284]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d115      	bne.n	800a622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e07f      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d107      	bne.n	800a612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a602:	4b41      	ldr	r3, [pc, #260]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d109      	bne.n	800a622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e073      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a612:	4b3d      	ldr	r3, [pc, #244]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0302 	and.w	r3, r3, #2
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e06b      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a622:	4b39      	ldr	r3, [pc, #228]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f023 0203 	bic.w	r2, r3, #3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	4936      	ldr	r1, [pc, #216]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a630:	4313      	orrs	r3, r2
 800a632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a634:	f7fd fe8e 	bl	8008354 <HAL_GetTick>
 800a638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a63a:	e00a      	b.n	800a652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a63c:	f7fd fe8a 	bl	8008354 <HAL_GetTick>
 800a640:	4602      	mov	r2, r0
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	f241 3288 	movw	r2, #5000	; 0x1388
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d901      	bls.n	800a652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a64e:	2303      	movs	r3, #3
 800a650:	e053      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a652:	4b2d      	ldr	r3, [pc, #180]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f003 020c 	and.w	r2, r3, #12
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	429a      	cmp	r2, r3
 800a662:	d1eb      	bne.n	800a63c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a664:	4b27      	ldr	r3, [pc, #156]	; (800a704 <HAL_RCC_ClockConfig+0x1c0>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 0307 	and.w	r3, r3, #7
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d210      	bcs.n	800a694 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a672:	4b24      	ldr	r3, [pc, #144]	; (800a704 <HAL_RCC_ClockConfig+0x1c0>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f023 0207 	bic.w	r2, r3, #7
 800a67a:	4922      	ldr	r1, [pc, #136]	; (800a704 <HAL_RCC_ClockConfig+0x1c0>)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	4313      	orrs	r3, r2
 800a680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a682:	4b20      	ldr	r3, [pc, #128]	; (800a704 <HAL_RCC_ClockConfig+0x1c0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0307 	and.w	r3, r3, #7
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d001      	beq.n	800a694 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e032      	b.n	800a6fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0304 	and.w	r3, r3, #4
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d008      	beq.n	800a6b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a6a0:	4b19      	ldr	r3, [pc, #100]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	4916      	ldr	r1, [pc, #88]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 0308 	and.w	r3, r3, #8
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d009      	beq.n	800a6d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a6be:	4b12      	ldr	r3, [pc, #72]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	490e      	ldr	r1, [pc, #56]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a6d2:	f000 f821 	bl	800a718 <HAL_RCC_GetSysClockFreq>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	4b0b      	ldr	r3, [pc, #44]	; (800a708 <HAL_RCC_ClockConfig+0x1c4>)
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	091b      	lsrs	r3, r3, #4
 800a6de:	f003 030f 	and.w	r3, r3, #15
 800a6e2:	490a      	ldr	r1, [pc, #40]	; (800a70c <HAL_RCC_ClockConfig+0x1c8>)
 800a6e4:	5ccb      	ldrb	r3, [r1, r3]
 800a6e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ea:	4a09      	ldr	r2, [pc, #36]	; (800a710 <HAL_RCC_ClockConfig+0x1cc>)
 800a6ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a6ee:	4b09      	ldr	r3, [pc, #36]	; (800a714 <HAL_RCC_ClockConfig+0x1d0>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fd fdec 	bl	80082d0 <HAL_InitTick>

  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	40022000 	.word	0x40022000
 800a708:	40021000 	.word	0x40021000
 800a70c:	0800d3ac 	.word	0x0800d3ac
 800a710:	2000031c 	.word	0x2000031c
 800a714:	20000320 	.word	0x20000320

0800a718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a718:	b490      	push	{r4, r7}
 800a71a:	b08a      	sub	sp, #40	; 0x28
 800a71c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a71e:	4b29      	ldr	r3, [pc, #164]	; (800a7c4 <HAL_RCC_GetSysClockFreq+0xac>)
 800a720:	1d3c      	adds	r4, r7, #4
 800a722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a728:	f240 2301 	movw	r3, #513	; 0x201
 800a72c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a72e:	2300      	movs	r3, #0
 800a730:	61fb      	str	r3, [r7, #28]
 800a732:	2300      	movs	r3, #0
 800a734:	61bb      	str	r3, [r7, #24]
 800a736:	2300      	movs	r3, #0
 800a738:	627b      	str	r3, [r7, #36]	; 0x24
 800a73a:	2300      	movs	r3, #0
 800a73c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a73e:	2300      	movs	r3, #0
 800a740:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a742:	4b21      	ldr	r3, [pc, #132]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	f003 030c 	and.w	r3, r3, #12
 800a74e:	2b04      	cmp	r3, #4
 800a750:	d002      	beq.n	800a758 <HAL_RCC_GetSysClockFreq+0x40>
 800a752:	2b08      	cmp	r3, #8
 800a754:	d003      	beq.n	800a75e <HAL_RCC_GetSysClockFreq+0x46>
 800a756:	e02b      	b.n	800a7b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a758:	4b1c      	ldr	r3, [pc, #112]	; (800a7cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800a75a:	623b      	str	r3, [r7, #32]
      break;
 800a75c:	e02b      	b.n	800a7b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	0c9b      	lsrs	r3, r3, #18
 800a762:	f003 030f 	and.w	r3, r3, #15
 800a766:	3328      	adds	r3, #40	; 0x28
 800a768:	443b      	add	r3, r7
 800a76a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800a76e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a776:	2b00      	cmp	r3, #0
 800a778:	d012      	beq.n	800a7a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a77a:	4b13      	ldr	r3, [pc, #76]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	0c5b      	lsrs	r3, r3, #17
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	3328      	adds	r3, #40	; 0x28
 800a786:	443b      	add	r3, r7
 800a788:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a78c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	4a0e      	ldr	r2, [pc, #56]	; (800a7cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800a792:	fb03 f202 	mul.w	r2, r3, r2
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	fbb2 f3f3 	udiv	r3, r2, r3
 800a79c:	627b      	str	r3, [r7, #36]	; 0x24
 800a79e:	e004      	b.n	800a7aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	4a0b      	ldr	r2, [pc, #44]	; (800a7d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7a4:	fb02 f303 	mul.w	r3, r2, r3
 800a7a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	623b      	str	r3, [r7, #32]
      break;
 800a7ae:	e002      	b.n	800a7b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a7b0:	4b06      	ldr	r3, [pc, #24]	; (800a7cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800a7b2:	623b      	str	r3, [r7, #32]
      break;
 800a7b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3728      	adds	r7, #40	; 0x28
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bc90      	pop	{r4, r7}
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	0800cee0 	.word	0x0800cee0
 800a7c8:	40021000 	.word	0x40021000
 800a7cc:	007a1200 	.word	0x007a1200
 800a7d0:	003d0900 	.word	0x003d0900

0800a7d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7d8:	4b02      	ldr	r3, [pc, #8]	; (800a7e4 <HAL_RCC_GetHCLKFreq+0x10>)
 800a7da:	681b      	ldr	r3, [r3, #0]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bc80      	pop	{r7}
 800a7e2:	4770      	bx	lr
 800a7e4:	2000031c 	.word	0x2000031c

0800a7e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a7ec:	f7ff fff2 	bl	800a7d4 <HAL_RCC_GetHCLKFreq>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	4b05      	ldr	r3, [pc, #20]	; (800a808 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	0a1b      	lsrs	r3, r3, #8
 800a7f8:	f003 0307 	and.w	r3, r3, #7
 800a7fc:	4903      	ldr	r1, [pc, #12]	; (800a80c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7fe:	5ccb      	ldrb	r3, [r1, r3]
 800a800:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a804:	4618      	mov	r0, r3
 800a806:	bd80      	pop	{r7, pc}
 800a808:	40021000 	.word	0x40021000
 800a80c:	0800d3bc 	.word	0x0800d3bc

0800a810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a814:	f7ff ffde 	bl	800a7d4 <HAL_RCC_GetHCLKFreq>
 800a818:	4602      	mov	r2, r0
 800a81a:	4b05      	ldr	r3, [pc, #20]	; (800a830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	0adb      	lsrs	r3, r3, #11
 800a820:	f003 0307 	and.w	r3, r3, #7
 800a824:	4903      	ldr	r1, [pc, #12]	; (800a834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a826:	5ccb      	ldrb	r3, [r1, r3]
 800a828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	40021000 	.word	0x40021000
 800a834:	0800d3bc 	.word	0x0800d3bc

0800a838 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a840:	4b0a      	ldr	r3, [pc, #40]	; (800a86c <RCC_Delay+0x34>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a0a      	ldr	r2, [pc, #40]	; (800a870 <RCC_Delay+0x38>)
 800a846:	fba2 2303 	umull	r2, r3, r2, r3
 800a84a:	0a5b      	lsrs	r3, r3, #9
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	fb02 f303 	mul.w	r3, r2, r3
 800a852:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a854:	bf00      	nop
  }
  while (Delay --);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	1e5a      	subs	r2, r3, #1
 800a85a:	60fa      	str	r2, [r7, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1f9      	bne.n	800a854 <RCC_Delay+0x1c>
}
 800a860:	bf00      	nop
 800a862:	bf00      	nop
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	bc80      	pop	{r7}
 800a86a:	4770      	bx	lr
 800a86c:	2000031c 	.word	0x2000031c
 800a870:	10624dd3 	.word	0x10624dd3

0800a874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e04c      	b.n	800a920 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d111      	bne.n	800a8b6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fbfc 	bl	800b098 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d102      	bne.n	800a8ae <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a1f      	ldr	r2, [pc, #124]	; (800a928 <HAL_TIM_Base_Init+0xb4>)
 800a8ac:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2202      	movs	r2, #2
 800a8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	f000 faed 	bl	800aea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	08007d99 	.word	0x08007d99

0800a92c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d001      	beq.n	800a944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	e03a      	b.n	800a9ba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2202      	movs	r2, #2
 800a948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68da      	ldr	r2, [r3, #12]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f042 0201 	orr.w	r2, r2, #1
 800a95a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a18      	ldr	r2, [pc, #96]	; (800a9c4 <HAL_TIM_Base_Start_IT+0x98>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d00e      	beq.n	800a984 <HAL_TIM_Base_Start_IT+0x58>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a96e:	d009      	beq.n	800a984 <HAL_TIM_Base_Start_IT+0x58>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a14      	ldr	r2, [pc, #80]	; (800a9c8 <HAL_TIM_Base_Start_IT+0x9c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d004      	beq.n	800a984 <HAL_TIM_Base_Start_IT+0x58>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a13      	ldr	r2, [pc, #76]	; (800a9cc <HAL_TIM_Base_Start_IT+0xa0>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d111      	bne.n	800a9a8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	f003 0307 	and.w	r3, r3, #7
 800a98e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b06      	cmp	r3, #6
 800a994:	d010      	beq.n	800a9b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f042 0201 	orr.w	r2, r2, #1
 800a9a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9a6:	e007      	b.n	800a9b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f042 0201 	orr.w	r2, r2, #1
 800a9b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bc80      	pop	{r7}
 800a9c2:	4770      	bx	lr
 800a9c4:	40012c00 	.word	0x40012c00
 800a9c8:	40000400 	.word	0x40000400
 800a9cc:	40000800 	.word	0x40000800

0800a9d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68da      	ldr	r2, [r3, #12]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f022 0201 	bic.w	r2, r2, #1
 800a9e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6a1a      	ldr	r2, [r3, #32]
 800a9ee:	f241 1311 	movw	r3, #4369	; 0x1111
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10f      	bne.n	800aa18 <HAL_TIM_Base_Stop_IT+0x48>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6a1a      	ldr	r2, [r3, #32]
 800a9fe:	f240 4344 	movw	r3, #1092	; 0x444
 800aa02:	4013      	ands	r3, r2
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d107      	bne.n	800aa18 <HAL_TIM_Base_Stop_IT+0x48>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f022 0201 	bic.w	r2, r2, #1
 800aa16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bc80      	pop	{r7}
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	f003 0302 	and.w	r3, r3, #2
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d128      	bne.n	800aa94 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f003 0302 	and.w	r3, r3, #2
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d121      	bne.n	800aa94 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f06f 0202 	mvn.w	r2, #2
 800aa58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	f003 0303 	and.w	r3, r3, #3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d005      	beq.n	800aa7a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	4798      	blx	r3
 800aa78:	e009      	b.n	800aa8e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	f003 0304 	and.w	r3, r3, #4
 800aa9e:	2b04      	cmp	r3, #4
 800aaa0:	d128      	bne.n	800aaf4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	f003 0304 	and.w	r3, r3, #4
 800aaac:	2b04      	cmp	r3, #4
 800aaae:	d121      	bne.n	800aaf4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f06f 0204 	mvn.w	r2, #4
 800aab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2202      	movs	r2, #2
 800aabe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d005      	beq.n	800aada <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	4798      	blx	r3
 800aad8:	e009      	b.n	800aaee <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	f003 0308 	and.w	r3, r3, #8
 800aafe:	2b08      	cmp	r3, #8
 800ab00:	d128      	bne.n	800ab54 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	f003 0308 	and.w	r3, r3, #8
 800ab0c:	2b08      	cmp	r3, #8
 800ab0e:	d121      	bne.n	800ab54 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f06f 0208 	mvn.w	r2, #8
 800ab18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2204      	movs	r2, #4
 800ab1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	69db      	ldr	r3, [r3, #28]
 800ab26:	f003 0303 	and.w	r3, r3, #3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d005      	beq.n	800ab3a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	4798      	blx	r3
 800ab38:	e009      	b.n	800ab4e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	f003 0310 	and.w	r3, r3, #16
 800ab5e:	2b10      	cmp	r3, #16
 800ab60:	d128      	bne.n	800abb4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	f003 0310 	and.w	r3, r3, #16
 800ab6c:	2b10      	cmp	r3, #16
 800ab6e:	d121      	bne.n	800abb4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f06f 0210 	mvn.w	r2, #16
 800ab78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2208      	movs	r2, #8
 800ab7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	69db      	ldr	r3, [r3, #28]
 800ab86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d005      	beq.n	800ab9a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	4798      	blx	r3
 800ab98:	e009      	b.n	800abae <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d110      	bne.n	800abe4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	f003 0301 	and.w	r3, r3, #1
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d109      	bne.n	800abe4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f06f 0201 	mvn.w	r2, #1
 800abd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abee:	2b80      	cmp	r3, #128	; 0x80
 800abf0:	d110      	bne.n	800ac14 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abfc:	2b80      	cmp	r3, #128	; 0x80
 800abfe:	d109      	bne.n	800ac14 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1e:	2b40      	cmp	r3, #64	; 0x40
 800ac20:	d110      	bne.n	800ac44 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac2c:	2b40      	cmp	r3, #64	; 0x40
 800ac2e:	d109      	bne.n	800ac44 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	f003 0320 	and.w	r3, r3, #32
 800ac4e:	2b20      	cmp	r3, #32
 800ac50:	d110      	bne.n	800ac74 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	f003 0320 	and.w	r3, r3, #32
 800ac5c:	2b20      	cmp	r3, #32
 800ac5e:	d109      	bne.n	800ac74 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f06f 0220 	mvn.w	r2, #32
 800ac68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac74:	bf00      	nop
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d101      	bne.n	800ac94 <HAL_TIM_ConfigClockSource+0x18>
 800ac90:	2302      	movs	r3, #2
 800ac92:	e0b3      	b.n	800adfc <HAL_TIM_ConfigClockSource+0x180>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2202      	movs	r2, #2
 800aca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800acb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800accc:	d03e      	beq.n	800ad4c <HAL_TIM_ConfigClockSource+0xd0>
 800acce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acd2:	f200 8087 	bhi.w	800ade4 <HAL_TIM_ConfigClockSource+0x168>
 800acd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acda:	f000 8085 	beq.w	800ade8 <HAL_TIM_ConfigClockSource+0x16c>
 800acde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ace2:	d87f      	bhi.n	800ade4 <HAL_TIM_ConfigClockSource+0x168>
 800ace4:	2b70      	cmp	r3, #112	; 0x70
 800ace6:	d01a      	beq.n	800ad1e <HAL_TIM_ConfigClockSource+0xa2>
 800ace8:	2b70      	cmp	r3, #112	; 0x70
 800acea:	d87b      	bhi.n	800ade4 <HAL_TIM_ConfigClockSource+0x168>
 800acec:	2b60      	cmp	r3, #96	; 0x60
 800acee:	d050      	beq.n	800ad92 <HAL_TIM_ConfigClockSource+0x116>
 800acf0:	2b60      	cmp	r3, #96	; 0x60
 800acf2:	d877      	bhi.n	800ade4 <HAL_TIM_ConfigClockSource+0x168>
 800acf4:	2b50      	cmp	r3, #80	; 0x50
 800acf6:	d03c      	beq.n	800ad72 <HAL_TIM_ConfigClockSource+0xf6>
 800acf8:	2b50      	cmp	r3, #80	; 0x50
 800acfa:	d873      	bhi.n	800ade4 <HAL_TIM_ConfigClockSource+0x168>
 800acfc:	2b40      	cmp	r3, #64	; 0x40
 800acfe:	d058      	beq.n	800adb2 <HAL_TIM_ConfigClockSource+0x136>
 800ad00:	2b40      	cmp	r3, #64	; 0x40
 800ad02:	d86f      	bhi.n	800ade4 <HAL_TIM_ConfigClockSource+0x168>
 800ad04:	2b30      	cmp	r3, #48	; 0x30
 800ad06:	d064      	beq.n	800add2 <HAL_TIM_ConfigClockSource+0x156>
 800ad08:	2b30      	cmp	r3, #48	; 0x30
 800ad0a:	d86b      	bhi.n	800ade4 <HAL_TIM_ConfigClockSource+0x168>
 800ad0c:	2b20      	cmp	r3, #32
 800ad0e:	d060      	beq.n	800add2 <HAL_TIM_ConfigClockSource+0x156>
 800ad10:	2b20      	cmp	r3, #32
 800ad12:	d867      	bhi.n	800ade4 <HAL_TIM_ConfigClockSource+0x168>
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d05c      	beq.n	800add2 <HAL_TIM_ConfigClockSource+0x156>
 800ad18:	2b10      	cmp	r3, #16
 800ad1a:	d05a      	beq.n	800add2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ad1c:	e062      	b.n	800ade4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6818      	ldr	r0, [r3, #0]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	6899      	ldr	r1, [r3, #8]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	f000 f994 	bl	800b05a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	609a      	str	r2, [r3, #8]
      break;
 800ad4a:	e04e      	b.n	800adea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6818      	ldr	r0, [r3, #0]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	6899      	ldr	r1, [r3, #8]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	685a      	ldr	r2, [r3, #4]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	f000 f97d 	bl	800b05a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	689a      	ldr	r2, [r3, #8]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad6e:	609a      	str	r2, [r3, #8]
      break;
 800ad70:	e03b      	b.n	800adea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6818      	ldr	r0, [r3, #0]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	6859      	ldr	r1, [r3, #4]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	f000 f8f4 	bl	800af6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2150      	movs	r1, #80	; 0x50
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 f94b 	bl	800b026 <TIM_ITRx_SetConfig>
      break;
 800ad90:	e02b      	b.n	800adea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6818      	ldr	r0, [r3, #0]
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	6859      	ldr	r1, [r3, #4]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f000 f912 	bl	800afc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2160      	movs	r1, #96	; 0x60
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 f93b 	bl	800b026 <TIM_ITRx_SetConfig>
      break;
 800adb0:	e01b      	b.n	800adea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6818      	ldr	r0, [r3, #0]
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	6859      	ldr	r1, [r3, #4]
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	461a      	mov	r2, r3
 800adc0:	f000 f8d4 	bl	800af6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2140      	movs	r1, #64	; 0x40
 800adca:	4618      	mov	r0, r3
 800adcc:	f000 f92b 	bl	800b026 <TIM_ITRx_SetConfig>
      break;
 800add0:	e00b      	b.n	800adea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4619      	mov	r1, r3
 800addc:	4610      	mov	r0, r2
 800adde:	f000 f922 	bl	800b026 <TIM_ITRx_SetConfig>
        break;
 800ade2:	e002      	b.n	800adea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ade4:	bf00      	nop
 800ade6:	e000      	b.n	800adea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ade8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ae0c:	bf00      	nop
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bc80      	pop	{r7}
 800ae14:	4770      	bx	lr

0800ae16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b083      	sub	sp, #12
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae1e:	bf00      	nop
 800ae20:	370c      	adds	r7, #12
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bc80      	pop	{r7}
 800ae26:	4770      	bx	lr

0800ae28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bc80      	pop	{r7}
 800ae38:	4770      	bx	lr

0800ae3a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	b083      	sub	sp, #12
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ae42:	bf00      	nop
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bc80      	pop	{r7}
 800ae4a:	4770      	bx	lr

0800ae4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae54:	bf00      	nop
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bc80      	pop	{r7}
 800ae5c:	4770      	bx	lr

0800ae5e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ae5e:	b480      	push	{r7}
 800ae60:	b083      	sub	sp, #12
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ae66:	bf00      	nop
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bc80      	pop	{r7}
 800ae6e:	4770      	bx	lr

0800ae70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bc80      	pop	{r7}
 800ae80:	4770      	bx	lr

0800ae82 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800ae8a:	bf00      	nop
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bc80      	pop	{r7}
 800ae92:	4770      	bx	lr

0800ae94 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ae9c:	bf00      	nop
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bc80      	pop	{r7}
 800aea4:	4770      	bx	lr
	...

0800aea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a29      	ldr	r2, [pc, #164]	; (800af60 <TIM_Base_SetConfig+0xb8>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d00b      	beq.n	800aed8 <TIM_Base_SetConfig+0x30>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aec6:	d007      	beq.n	800aed8 <TIM_Base_SetConfig+0x30>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a26      	ldr	r2, [pc, #152]	; (800af64 <TIM_Base_SetConfig+0xbc>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d003      	beq.n	800aed8 <TIM_Base_SetConfig+0x30>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a25      	ldr	r2, [pc, #148]	; (800af68 <TIM_Base_SetConfig+0xc0>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d108      	bne.n	800aeea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a1c      	ldr	r2, [pc, #112]	; (800af60 <TIM_Base_SetConfig+0xb8>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d00b      	beq.n	800af0a <TIM_Base_SetConfig+0x62>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef8:	d007      	beq.n	800af0a <TIM_Base_SetConfig+0x62>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a19      	ldr	r2, [pc, #100]	; (800af64 <TIM_Base_SetConfig+0xbc>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d003      	beq.n	800af0a <TIM_Base_SetConfig+0x62>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a18      	ldr	r2, [pc, #96]	; (800af68 <TIM_Base_SetConfig+0xc0>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d108      	bne.n	800af1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	4313      	orrs	r3, r2
 800af1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	4313      	orrs	r3, r2
 800af28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	689a      	ldr	r2, [r3, #8]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a07      	ldr	r2, [pc, #28]	; (800af60 <TIM_Base_SetConfig+0xb8>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d103      	bne.n	800af50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	691a      	ldr	r2, [r3, #16]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	615a      	str	r2, [r3, #20]
}
 800af56:	bf00      	nop
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bc80      	pop	{r7}
 800af5e:	4770      	bx	lr
 800af60:	40012c00 	.word	0x40012c00
 800af64:	40000400 	.word	0x40000400
 800af68:	40000800 	.word	0x40000800

0800af6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b087      	sub	sp, #28
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6a1b      	ldr	r3, [r3, #32]
 800af7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	f023 0201 	bic.w	r2, r3, #1
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	699b      	ldr	r3, [r3, #24]
 800af8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	011b      	lsls	r3, r3, #4
 800af9c:	693a      	ldr	r2, [r7, #16]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f023 030a 	bic.w	r3, r3, #10
 800afa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afaa:	697a      	ldr	r2, [r7, #20]
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	4313      	orrs	r3, r2
 800afb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	621a      	str	r2, [r3, #32]
}
 800afbe:	bf00      	nop
 800afc0:	371c      	adds	r7, #28
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bc80      	pop	{r7}
 800afc6:	4770      	bx	lr

0800afc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afc8:	b480      	push	{r7}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	f023 0210 	bic.w	r2, r3, #16
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	699b      	ldr	r3, [r3, #24]
 800afe4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aff2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	031b      	lsls	r3, r3, #12
 800aff8:	697a      	ldr	r2, [r7, #20]
 800affa:	4313      	orrs	r3, r2
 800affc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b004:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	011b      	lsls	r3, r3, #4
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	621a      	str	r2, [r3, #32]
}
 800b01c:	bf00      	nop
 800b01e:	371c      	adds	r7, #28
 800b020:	46bd      	mov	sp, r7
 800b022:	bc80      	pop	{r7}
 800b024:	4770      	bx	lr

0800b026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b026:	b480      	push	{r7}
 800b028:	b085      	sub	sp, #20
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b03c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	4313      	orrs	r3, r2
 800b044:	f043 0307 	orr.w	r3, r3, #7
 800b048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	609a      	str	r2, [r3, #8]
}
 800b050:	bf00      	nop
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	bc80      	pop	{r7}
 800b058:	4770      	bx	lr

0800b05a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b05a:	b480      	push	{r7}
 800b05c:	b087      	sub	sp, #28
 800b05e:	af00      	add	r7, sp, #0
 800b060:	60f8      	str	r0, [r7, #12]
 800b062:	60b9      	str	r1, [r7, #8]
 800b064:	607a      	str	r2, [r7, #4]
 800b066:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b074:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	021a      	lsls	r2, r3, #8
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	431a      	orrs	r2, r3
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	4313      	orrs	r3, r2
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	4313      	orrs	r3, r2
 800b086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	609a      	str	r2, [r3, #8]
}
 800b08e:	bf00      	nop
 800b090:	371c      	adds	r7, #28
 800b092:	46bd      	mov	sp, r7
 800b094:	bc80      	pop	{r7}
 800b096:	4770      	bx	lr

0800b098 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a1c      	ldr	r2, [pc, #112]	; (800b114 <TIM_ResetCallback+0x7c>)
 800b0a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a1b      	ldr	r2, [pc, #108]	; (800b118 <TIM_ResetCallback+0x80>)
 800b0ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a1a      	ldr	r2, [pc, #104]	; (800b11c <TIM_ResetCallback+0x84>)
 800b0b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a19      	ldr	r2, [pc, #100]	; (800b120 <TIM_ResetCallback+0x88>)
 800b0bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a18      	ldr	r2, [pc, #96]	; (800b124 <TIM_ResetCallback+0x8c>)
 800b0c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a17      	ldr	r2, [pc, #92]	; (800b128 <TIM_ResetCallback+0x90>)
 800b0cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4a16      	ldr	r2, [pc, #88]	; (800b12c <TIM_ResetCallback+0x94>)
 800b0d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4a15      	ldr	r2, [pc, #84]	; (800b130 <TIM_ResetCallback+0x98>)
 800b0dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a14      	ldr	r2, [pc, #80]	; (800b134 <TIM_ResetCallback+0x9c>)
 800b0e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a13      	ldr	r2, [pc, #76]	; (800b138 <TIM_ResetCallback+0xa0>)
 800b0ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a12      	ldr	r2, [pc, #72]	; (800b13c <TIM_ResetCallback+0xa4>)
 800b0f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a11      	ldr	r2, [pc, #68]	; (800b140 <TIM_ResetCallback+0xa8>)
 800b0fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a10      	ldr	r2, [pc, #64]	; (800b144 <TIM_ResetCallback+0xac>)
 800b104:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800b108:	bf00      	nop
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bc80      	pop	{r7}
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	080074a1 	.word	0x080074a1
 800b118:	0800ae05 	.word	0x0800ae05
 800b11c:	0800ae71 	.word	0x0800ae71
 800b120:	0800ae83 	.word	0x0800ae83
 800b124:	0800ae29 	.word	0x0800ae29
 800b128:	0800ae3b 	.word	0x0800ae3b
 800b12c:	0800ae17 	.word	0x0800ae17
 800b130:	0800ae4d 	.word	0x0800ae4d
 800b134:	0800ae5f 	.word	0x0800ae5f
 800b138:	0800ae95 	.word	0x0800ae95
 800b13c:	0800b205 	.word	0x0800b205
 800b140:	0800b217 	.word	0x0800b217
 800b144:	0800b229 	.word	0x0800b229

0800b148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d101      	bne.n	800b160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b15c:	2302      	movs	r3, #2
 800b15e:	e046      	b.n	800b1ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2202      	movs	r2, #2
 800b16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a16      	ldr	r2, [pc, #88]	; (800b1f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d00e      	beq.n	800b1c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ac:	d009      	beq.n	800b1c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a12      	ldr	r2, [pc, #72]	; (800b1fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d004      	beq.n	800b1c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a10      	ldr	r2, [pc, #64]	; (800b200 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d10c      	bne.n	800b1dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3714      	adds	r7, #20
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bc80      	pop	{r7}
 800b1f6:	4770      	bx	lr
 800b1f8:	40012c00 	.word	0x40012c00
 800b1fc:	40000400 	.word	0x40000400
 800b200:	40000800 	.word	0x40000800

0800b204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	bc80      	pop	{r7}
 800b214:	4770      	bx	lr

0800b216 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b216:	b480      	push	{r7}
 800b218:	b083      	sub	sp, #12
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b21e:	bf00      	nop
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	bc80      	pop	{r7}
 800b226:	4770      	bx	lr

0800b228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	bc80      	pop	{r7}
 800b238:	4770      	bx	lr
	...

0800b23c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d101      	bne.n	800b24e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e04a      	b.n	800b2e4 <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b254:	b2db      	uxtb	r3, r3
 800b256:	2b00      	cmp	r3, #0
 800b258:	d111      	bne.n	800b27e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fab4 	bl	800b7d0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d102      	bne.n	800b276 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a1e      	ldr	r2, [pc, #120]	; (800b2ec <HAL_UART_Init+0xb0>)
 800b274:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2224      	movs	r2, #36	; 0x24
 800b282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68da      	ldr	r2, [r3, #12]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b294:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fcbe 	bl	800bc18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	691a      	ldr	r2, [r3, #16]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	695a      	ldr	r2, [r3, #20]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68da      	ldr	r2, [r3, #12]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2220      	movs	r2, #32
 800b2d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2220      	movs	r2, #32
 800b2de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	08007e59 	.word	0x08007e59

0800b2f0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b20      	cmp	r3, #32
 800b308:	d153      	bne.n	800b3b2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <HAL_UART_Transmit_DMA+0x26>
 800b310:	88fb      	ldrh	r3, [r7, #6]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d101      	bne.n	800b31a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	e04c      	b.n	800b3b4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b320:	2b01      	cmp	r3, #1
 800b322:	d101      	bne.n	800b328 <HAL_UART_Transmit_DMA+0x38>
 800b324:	2302      	movs	r3, #2
 800b326:	e045      	b.n	800b3b4 <HAL_UART_Transmit_DMA+0xc4>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b330:	68ba      	ldr	r2, [r7, #8]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	88fa      	ldrh	r2, [r7, #6]
 800b33a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	88fa      	ldrh	r2, [r7, #6]
 800b340:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2221      	movs	r2, #33	; 0x21
 800b34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b354:	4a19      	ldr	r2, [pc, #100]	; (800b3bc <HAL_UART_Transmit_DMA+0xcc>)
 800b356:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b35c:	4a18      	ldr	r2, [pc, #96]	; (800b3c0 <HAL_UART_Transmit_DMA+0xd0>)
 800b35e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b364:	4a17      	ldr	r2, [pc, #92]	; (800b3c4 <HAL_UART_Transmit_DMA+0xd4>)
 800b366:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b36c:	2200      	movs	r2, #0
 800b36e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800b370:	f107 0308 	add.w	r3, r7, #8
 800b374:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	6819      	ldr	r1, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	3304      	adds	r3, #4
 800b384:	461a      	mov	r2, r3
 800b386:	88fb      	ldrh	r3, [r7, #6]
 800b388:	f7fe f882 	bl	8009490 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b394:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	695a      	ldr	r2, [r3, #20]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b3ac:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	e000      	b.n	800b3b4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800b3b2:	2302      	movs	r3, #2
  }
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3718      	adds	r7, #24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	0800b83d 	.word	0x0800b83d
 800b3c0:	0800b891 	.word	0x0800b891
 800b3c4:	0800b8af 	.word	0x0800b8af

0800b3c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b08a      	sub	sp, #40	; 0x28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	695b      	ldr	r3, [r3, #20]
 800b3e6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f2:	f003 030f 	and.w	r3, r3, #15
 800b3f6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10d      	bne.n	800b41a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b400:	f003 0320 	and.w	r3, r3, #32
 800b404:	2b00      	cmp	r3, #0
 800b406:	d008      	beq.n	800b41a <HAL_UART_IRQHandler+0x52>
 800b408:	6a3b      	ldr	r3, [r7, #32]
 800b40a:	f003 0320 	and.w	r3, r3, #32
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d003      	beq.n	800b41a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fb54 	bl	800bac0 <UART_Receive_IT>
      return;
 800b418:	e180      	b.n	800b71c <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f000 80b4 	beq.w	800b58a <HAL_UART_IRQHandler+0x1c2>
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d105      	bne.n	800b438 <HAL_UART_IRQHandler+0x70>
 800b42c:	6a3b      	ldr	r3, [r7, #32]
 800b42e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 80a9 	beq.w	800b58a <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43a:	f003 0301 	and.w	r3, r3, #1
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00a      	beq.n	800b458 <HAL_UART_IRQHandler+0x90>
 800b442:	6a3b      	ldr	r3, [r7, #32]
 800b444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d005      	beq.n	800b458 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b450:	f043 0201 	orr.w	r2, r3, #1
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45a:	f003 0304 	and.w	r3, r3, #4
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00a      	beq.n	800b478 <HAL_UART_IRQHandler+0xb0>
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	f003 0301 	and.w	r3, r3, #1
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d005      	beq.n	800b478 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b470:	f043 0202 	orr.w	r2, r3, #2
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47a:	f003 0302 	and.w	r3, r3, #2
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00a      	beq.n	800b498 <HAL_UART_IRQHandler+0xd0>
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d005      	beq.n	800b498 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b490:	f043 0204 	orr.w	r2, r3, #4
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49a:	f003 0308 	and.w	r3, r3, #8
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00f      	beq.n	800b4c2 <HAL_UART_IRQHandler+0xfa>
 800b4a2:	6a3b      	ldr	r3, [r7, #32]
 800b4a4:	f003 0320 	and.w	r3, r3, #32
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d104      	bne.n	800b4b6 <HAL_UART_IRQHandler+0xee>
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	f003 0301 	and.w	r3, r3, #1
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d005      	beq.n	800b4c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ba:	f043 0208 	orr.w	r2, r3, #8
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f000 8123 	beq.w	800b712 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ce:	f003 0320 	and.w	r3, r3, #32
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d007      	beq.n	800b4e6 <HAL_UART_IRQHandler+0x11e>
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	f003 0320 	and.w	r3, r3, #32
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 faed 	bl	800bac0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	695b      	ldr	r3, [r3, #20]
 800b4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	bf14      	ite	ne
 800b4f4:	2301      	movne	r3, #1
 800b4f6:	2300      	moveq	r3, #0
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b500:	f003 0308 	and.w	r3, r3, #8
 800b504:	2b00      	cmp	r3, #0
 800b506:	d102      	bne.n	800b50e <HAL_UART_IRQHandler+0x146>
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d033      	beq.n	800b576 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fa2d 	bl	800b96e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d024      	beq.n	800b56c <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	695a      	ldr	r2, [r3, #20]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b530:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b536:	2b00      	cmp	r3, #0
 800b538:	d013      	beq.n	800b562 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53e:	4a79      	ldr	r2, [pc, #484]	; (800b724 <HAL_UART_IRQHandler+0x35c>)
 800b540:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b546:	4618      	mov	r0, r3
 800b548:	f7fe f83c 	bl	80095c4 <HAL_DMA_Abort_IT>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d019      	beq.n	800b586 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b55c:	4610      	mov	r0, r2
 800b55e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b560:	e011      	b.n	800b586 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b56a:	e00c      	b.n	800b586 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b574:	e007      	b.n	800b586 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b584:	e0c5      	b.n	800b712 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b586:	bf00      	nop
    return;
 800b588:	e0c3      	b.n	800b712 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58e:	2b01      	cmp	r3, #1
 800b590:	f040 80a3 	bne.w	800b6da <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b596:	f003 0310 	and.w	r3, r3, #16
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f000 809d 	beq.w	800b6da <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b5a0:	6a3b      	ldr	r3, [r7, #32]
 800b5a2:	f003 0310 	and.w	r3, r3, #16
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f000 8097 	beq.w	800b6da <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	60fb      	str	r3, [r7, #12]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	60fb      	str	r3, [r7, #12]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	60fb      	str	r3, [r7, #12]
 800b5c0:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	695b      	ldr	r3, [r3, #20]
 800b5c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d04f      	beq.n	800b670 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800b5da:	8a3b      	ldrh	r3, [r7, #16]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f000 809a 	beq.w	800b716 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5e6:	8a3a      	ldrh	r2, [r7, #16]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	f080 8094 	bcs.w	800b716 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	8a3a      	ldrh	r2, [r7, #16]
 800b5f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f8:	699b      	ldr	r3, [r3, #24]
 800b5fa:	2b20      	cmp	r3, #32
 800b5fc:	d02b      	beq.n	800b656 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68da      	ldr	r2, [r3, #12]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b60c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	695a      	ldr	r2, [r3, #20]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f022 0201 	bic.w	r2, r2, #1
 800b61c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	695a      	ldr	r2, [r3, #20]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b62c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2220      	movs	r2, #32
 800b632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68da      	ldr	r2, [r3, #12]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f022 0210 	bic.w	r2, r2, #16
 800b64a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b650:	4618      	mov	r0, r3
 800b652:	f7fd ff7c 	bl	800954e <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b662:	b292      	uxth	r2, r2
 800b664:	1a8a      	subs	r2, r1, r2
 800b666:	b292      	uxth	r2, r2
 800b668:	4611      	mov	r1, r2
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 800b66e:	e052      	b.n	800b716 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b678:	b29b      	uxth	r3, r3
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b682:	b29b      	uxth	r3, r3
 800b684:	2b00      	cmp	r3, #0
 800b686:	d048      	beq.n	800b71a <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 800b688:	8a7b      	ldrh	r3, [r7, #18]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d045      	beq.n	800b71a <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68da      	ldr	r2, [r3, #12]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b69c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	695a      	ldr	r2, [r3, #20]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f022 0201 	bic.w	r2, r2, #1
 800b6ac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68da      	ldr	r2, [r3, #12]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f022 0210 	bic.w	r2, r2, #16
 800b6ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6d0:	8a7a      	ldrh	r2, [r7, #18]
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 800b6d8:	e01f      	b.n	800b71a <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d008      	beq.n	800b6f6 <HAL_UART_IRQHandler+0x32e>
 800b6e4:	6a3b      	ldr	r3, [r7, #32]
 800b6e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d003      	beq.n	800b6f6 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f97e 	bl	800b9f0 <UART_Transmit_IT>
    return;
 800b6f4:	e012      	b.n	800b71c <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00d      	beq.n	800b71c <HAL_UART_IRQHandler+0x354>
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b706:	2b00      	cmp	r3, #0
 800b708:	d008      	beq.n	800b71c <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f9bf 	bl	800ba8e <UART_EndTransmit_IT>
    return;
 800b710:	e004      	b.n	800b71c <HAL_UART_IRQHandler+0x354>
    return;
 800b712:	bf00      	nop
 800b714:	e002      	b.n	800b71c <HAL_UART_IRQHandler+0x354>
      return;
 800b716:	bf00      	nop
 800b718:	e000      	b.n	800b71c <HAL_UART_IRQHandler+0x354>
      return;
 800b71a:	bf00      	nop
  }
}
 800b71c:	3728      	adds	r7, #40	; 0x28
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	0800b9c7 	.word	0x0800b9c7

0800b728 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	bc80      	pop	{r7}
 800b738:	4770      	bx	lr

0800b73a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b083      	sub	sp, #12
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b742:	bf00      	nop
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	bc80      	pop	{r7}
 800b74a:	4770      	bx	lr

0800b74c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	bc80      	pop	{r7}
 800b75c:	4770      	bx	lr

0800b75e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b75e:	b480      	push	{r7}
 800b760:	b083      	sub	sp, #12
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b766:	bf00      	nop
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bc80      	pop	{r7}
 800b76e:	4770      	bx	lr

0800b770 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b778:	bf00      	nop
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bc80      	pop	{r7}
 800b780:	4770      	bx	lr

0800b782 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b782:	b480      	push	{r7}
 800b784:	b083      	sub	sp, #12
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b78a:	bf00      	nop
 800b78c:	370c      	adds	r7, #12
 800b78e:	46bd      	mov	sp, r7
 800b790:	bc80      	pop	{r7}
 800b792:	4770      	bx	lr

0800b794 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bc80      	pop	{r7}
 800b7a4:	4770      	bx	lr

0800b7a6 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b7a6:	b480      	push	{r7}
 800b7a8:	b083      	sub	sp, #12
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b7ae:	bf00      	nop
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bc80      	pop	{r7}
 800b7b6:	4770      	bx	lr

0800b7b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bc80      	pop	{r7}
 800b7cc:	4770      	bx	lr
	...

0800b7d0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a0f      	ldr	r2, [pc, #60]	; (800b818 <UART_InitCallbacksToDefault+0x48>)
 800b7dc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a0e      	ldr	r2, [pc, #56]	; (800b81c <UART_InitCallbacksToDefault+0x4c>)
 800b7e2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a0e      	ldr	r2, [pc, #56]	; (800b820 <UART_InitCallbacksToDefault+0x50>)
 800b7e8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a0d      	ldr	r2, [pc, #52]	; (800b824 <UART_InitCallbacksToDefault+0x54>)
 800b7ee:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a0d      	ldr	r2, [pc, #52]	; (800b828 <UART_InitCallbacksToDefault+0x58>)
 800b7f4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a0c      	ldr	r2, [pc, #48]	; (800b82c <UART_InitCallbacksToDefault+0x5c>)
 800b7fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a0c      	ldr	r2, [pc, #48]	; (800b830 <UART_InitCallbacksToDefault+0x60>)
 800b800:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a0b      	ldr	r2, [pc, #44]	; (800b834 <UART_InitCallbacksToDefault+0x64>)
 800b806:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a0b      	ldr	r2, [pc, #44]	; (800b838 <UART_InitCallbacksToDefault+0x68>)
 800b80c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b80e:	bf00      	nop
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	bc80      	pop	{r7}
 800b816:	4770      	bx	lr
 800b818:	0800b73b 	.word	0x0800b73b
 800b81c:	0800b729 	.word	0x0800b729
 800b820:	0800b75f 	.word	0x0800b75f
 800b824:	0800b74d 	.word	0x0800b74d
 800b828:	0800b771 	.word	0x0800b771
 800b82c:	0800b783 	.word	0x0800b783
 800b830:	0800b795 	.word	0x0800b795
 800b834:	0800b7a7 	.word	0x0800b7a7
 800b838:	0800b7b9 	.word	0x0800b7b9

0800b83c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b848:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 0320 	and.w	r3, r3, #32
 800b854:	2b00      	cmp	r3, #0
 800b856:	d113      	bne.n	800b880 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	695a      	ldr	r2, [r3, #20]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b86c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	68da      	ldr	r2, [r3, #12]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b87c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b87e:	e003      	b.n	800b888 <UART_DMATransmitCplt+0x4c>
    huart->TxCpltCallback(huart);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	4798      	blx	r3
}
 800b888:	bf00      	nop
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8a6:	bf00      	nop
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	bf14      	ite	ne
 800b8ce:	2301      	movne	r3, #1
 800b8d0:	2300      	moveq	r3, #0
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b21      	cmp	r3, #33	; 0x21
 800b8e0:	d108      	bne.n	800b8f4 <UART_DMAError+0x46>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d005      	beq.n	800b8f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b8ee:	68b8      	ldr	r0, [r7, #8]
 800b8f0:	f000 f828 	bl	800b944 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	bf14      	ite	ne
 800b902:	2301      	movne	r3, #1
 800b904:	2300      	moveq	r3, #0
 800b906:	b2db      	uxtb	r3, r3
 800b908:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b910:	b2db      	uxtb	r3, r3
 800b912:	2b22      	cmp	r3, #34	; 0x22
 800b914:	d108      	bne.n	800b928 <UART_DMAError+0x7a>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d005      	beq.n	800b928 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	2200      	movs	r2, #0
 800b920:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b922:	68b8      	ldr	r0, [r7, #8]
 800b924:	f000 f823 	bl	800b96e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92c:	f043 0210 	orr.w	r2, r3, #16
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b938:	68b8      	ldr	r0, [r7, #8]
 800b93a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b93c:	bf00      	nop
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68da      	ldr	r2, [r3, #12]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b95a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2220      	movs	r2, #32
 800b960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b964:	bf00      	nop
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	bc80      	pop	{r7}
 800b96c:	4770      	bx	lr

0800b96e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b96e:	b480      	push	{r7}
 800b970:	b083      	sub	sp, #12
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68da      	ldr	r2, [r3, #12]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b984:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	695a      	ldr	r2, [r3, #20]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f022 0201 	bic.w	r2, r2, #1
 800b994:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d107      	bne.n	800b9ae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	68da      	ldr	r2, [r3, #12]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f022 0210 	bic.w	r2, r2, #16
 800b9ac:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2220      	movs	r2, #32
 800b9b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bc80      	pop	{r7}
 800b9c4:	4770      	bx	lr

0800b9c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b084      	sub	sp, #16
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9e8:	bf00      	nop
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	2b21      	cmp	r3, #33	; 0x21
 800ba02:	d13e      	bne.n	800ba82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba0c:	d114      	bne.n	800ba38 <UART_Transmit_IT+0x48>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d110      	bne.n	800ba38 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	881b      	ldrh	r3, [r3, #0]
 800ba20:	461a      	mov	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a1b      	ldr	r3, [r3, #32]
 800ba30:	1c9a      	adds	r2, r3, #2
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	621a      	str	r2, [r3, #32]
 800ba36:	e008      	b.n	800ba4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a1b      	ldr	r3, [r3, #32]
 800ba3c:	1c59      	adds	r1, r3, #1
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	6211      	str	r1, [r2, #32]
 800ba42:	781a      	ldrb	r2, [r3, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	3b01      	subs	r3, #1
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	4619      	mov	r1, r3
 800ba58:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10f      	bne.n	800ba7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68da      	ldr	r2, [r3, #12]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68da      	ldr	r2, [r3, #12]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	e000      	b.n	800ba84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ba82:	2302      	movs	r3, #2
  }
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3714      	adds	r7, #20
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bc80      	pop	{r7}
 800ba8c:	4770      	bx	lr

0800ba8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b082      	sub	sp, #8
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68da      	ldr	r2, [r3, #12]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800baa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2220      	movs	r2, #32
 800baaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bab6:	2300      	movs	r3, #0
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	2b22      	cmp	r3, #34	; 0x22
 800bad2:	f040 809b 	bne.w	800bc0c <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bade:	d117      	bne.n	800bb10 <UART_Receive_IT+0x50>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d113      	bne.n	800bb10 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bae8:	2300      	movs	r3, #0
 800baea:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb08:	1c9a      	adds	r2, r3, #2
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	629a      	str	r2, [r3, #40]	; 0x28
 800bb0e:	e026      	b.n	800bb5e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb14:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb22:	d007      	beq.n	800bb34 <UART_Receive_IT+0x74>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10a      	bne.n	800bb42 <UART_Receive_IT+0x82>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d106      	bne.n	800bb42 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	701a      	strb	r2, [r3, #0]
 800bb40:	e008      	b.n	800bb54 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb4e:	b2da      	uxtb	r2, r3
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	3b01      	subs	r3, #1
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d14a      	bne.n	800bc08 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68da      	ldr	r2, [r3, #12]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f022 0220 	bic.w	r2, r2, #32
 800bb80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68da      	ldr	r2, [r3, #12]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	695a      	ldr	r2, [r3, #20]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f022 0201 	bic.w	r2, r2, #1
 800bba0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2220      	movs	r2, #32
 800bba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d124      	bne.n	800bbfc <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68da      	ldr	r2, [r3, #12]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f022 0210 	bic.w	r2, r2, #16
 800bbc6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f003 0310 	and.w	r3, r3, #16
 800bbd2:	2b10      	cmp	r3, #16
 800bbd4:	d10a      	bne.n	800bbec <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60fb      	str	r3, [r7, #12]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	60fb      	str	r3, [r7, #12]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	60fb      	str	r3, [r7, #12]
 800bbea:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	4798      	blx	r3
 800bbfa:	e003      	b.n	800bc04 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	e002      	b.n	800bc0e <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	e000      	b.n	800bc0e <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800bc0c:	2302      	movs	r3, #2
  }
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
	...

0800bc18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68da      	ldr	r2, [r3, #12]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	430a      	orrs	r2, r1
 800bc34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	689a      	ldr	r2, [r3, #8]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	431a      	orrs	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	4313      	orrs	r3, r2
 800bc46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	68db      	ldr	r3, [r3, #12]
 800bc4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bc52:	f023 030c 	bic.w	r3, r3, #12
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	6812      	ldr	r2, [r2, #0]
 800bc5a:	68b9      	ldr	r1, [r7, #8]
 800bc5c:	430b      	orrs	r3, r1
 800bc5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	695b      	ldr	r3, [r3, #20]
 800bc66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	699a      	ldr	r2, [r3, #24]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	430a      	orrs	r2, r1
 800bc74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a2c      	ldr	r2, [pc, #176]	; (800bd2c <UART_SetConfig+0x114>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d103      	bne.n	800bc88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bc80:	f7fe fdc6 	bl	800a810 <HAL_RCC_GetPCLK2Freq>
 800bc84:	60f8      	str	r0, [r7, #12]
 800bc86:	e002      	b.n	800bc8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bc88:	f7fe fdae 	bl	800a7e8 <HAL_RCC_GetPCLK1Freq>
 800bc8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	4613      	mov	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	009a      	lsls	r2, r3, #2
 800bc98:	441a      	add	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bca4:	4a22      	ldr	r2, [pc, #136]	; (800bd30 <UART_SetConfig+0x118>)
 800bca6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcaa:	095b      	lsrs	r3, r3, #5
 800bcac:	0119      	lsls	r1, r3, #4
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4413      	add	r3, r2
 800bcb6:	009a      	lsls	r2, r3, #2
 800bcb8:	441a      	add	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	fbb2 f2f3 	udiv	r2, r2, r3
 800bcc4:	4b1a      	ldr	r3, [pc, #104]	; (800bd30 <UART_SetConfig+0x118>)
 800bcc6:	fba3 0302 	umull	r0, r3, r3, r2
 800bcca:	095b      	lsrs	r3, r3, #5
 800bccc:	2064      	movs	r0, #100	; 0x64
 800bcce:	fb00 f303 	mul.w	r3, r0, r3
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	011b      	lsls	r3, r3, #4
 800bcd6:	3332      	adds	r3, #50	; 0x32
 800bcd8:	4a15      	ldr	r2, [pc, #84]	; (800bd30 <UART_SetConfig+0x118>)
 800bcda:	fba2 2303 	umull	r2, r3, r2, r3
 800bcde:	095b      	lsrs	r3, r3, #5
 800bce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bce4:	4419      	add	r1, r3
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	4613      	mov	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	009a      	lsls	r2, r3, #2
 800bcf0:	441a      	add	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	fbb2 f2f3 	udiv	r2, r2, r3
 800bcfc:	4b0c      	ldr	r3, [pc, #48]	; (800bd30 <UART_SetConfig+0x118>)
 800bcfe:	fba3 0302 	umull	r0, r3, r3, r2
 800bd02:	095b      	lsrs	r3, r3, #5
 800bd04:	2064      	movs	r0, #100	; 0x64
 800bd06:	fb00 f303 	mul.w	r3, r0, r3
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	011b      	lsls	r3, r3, #4
 800bd0e:	3332      	adds	r3, #50	; 0x32
 800bd10:	4a07      	ldr	r2, [pc, #28]	; (800bd30 <UART_SetConfig+0x118>)
 800bd12:	fba2 2303 	umull	r2, r3, r2, r3
 800bd16:	095b      	lsrs	r3, r3, #5
 800bd18:	f003 020f 	and.w	r2, r3, #15
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	440a      	add	r2, r1
 800bd22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bd24:	bf00      	nop
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	40013800 	.word	0x40013800
 800bd30:	51eb851f 	.word	0x51eb851f

0800bd34 <calloc>:
 800bd34:	4b02      	ldr	r3, [pc, #8]	; (800bd40 <calloc+0xc>)
 800bd36:	460a      	mov	r2, r1
 800bd38:	4601      	mov	r1, r0
 800bd3a:	6818      	ldr	r0, [r3, #0]
 800bd3c:	f000 b802 	b.w	800bd44 <_calloc_r>
 800bd40:	20000380 	.word	0x20000380

0800bd44 <_calloc_r>:
 800bd44:	b570      	push	{r4, r5, r6, lr}
 800bd46:	fba1 5402 	umull	r5, r4, r1, r2
 800bd4a:	b934      	cbnz	r4, 800bd5a <_calloc_r+0x16>
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	f000 f835 	bl	800bdbc <_malloc_r>
 800bd52:	4606      	mov	r6, r0
 800bd54:	b928      	cbnz	r0, 800bd62 <_calloc_r+0x1e>
 800bd56:	4630      	mov	r0, r6
 800bd58:	bd70      	pop	{r4, r5, r6, pc}
 800bd5a:	220c      	movs	r2, #12
 800bd5c:	2600      	movs	r6, #0
 800bd5e:	6002      	str	r2, [r0, #0]
 800bd60:	e7f9      	b.n	800bd56 <_calloc_r+0x12>
 800bd62:	462a      	mov	r2, r5
 800bd64:	4621      	mov	r1, r4
 800bd66:	f000 fb83 	bl	800c470 <memset>
 800bd6a:	e7f4      	b.n	800bd56 <_calloc_r+0x12>

0800bd6c <free>:
 800bd6c:	4b02      	ldr	r3, [pc, #8]	; (800bd78 <free+0xc>)
 800bd6e:	4601      	mov	r1, r0
 800bd70:	6818      	ldr	r0, [r3, #0]
 800bd72:	f000 bc15 	b.w	800c5a0 <_free_r>
 800bd76:	bf00      	nop
 800bd78:	20000380 	.word	0x20000380

0800bd7c <sbrk_aligned>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	4e0e      	ldr	r6, [pc, #56]	; (800bdb8 <sbrk_aligned+0x3c>)
 800bd80:	460c      	mov	r4, r1
 800bd82:	6831      	ldr	r1, [r6, #0]
 800bd84:	4605      	mov	r5, r0
 800bd86:	b911      	cbnz	r1, 800bd8e <sbrk_aligned+0x12>
 800bd88:	f000 fbae 	bl	800c4e8 <_sbrk_r>
 800bd8c:	6030      	str	r0, [r6, #0]
 800bd8e:	4621      	mov	r1, r4
 800bd90:	4628      	mov	r0, r5
 800bd92:	f000 fba9 	bl	800c4e8 <_sbrk_r>
 800bd96:	1c43      	adds	r3, r0, #1
 800bd98:	d00a      	beq.n	800bdb0 <sbrk_aligned+0x34>
 800bd9a:	1cc4      	adds	r4, r0, #3
 800bd9c:	f024 0403 	bic.w	r4, r4, #3
 800bda0:	42a0      	cmp	r0, r4
 800bda2:	d007      	beq.n	800bdb4 <sbrk_aligned+0x38>
 800bda4:	1a21      	subs	r1, r4, r0
 800bda6:	4628      	mov	r0, r5
 800bda8:	f000 fb9e 	bl	800c4e8 <_sbrk_r>
 800bdac:	3001      	adds	r0, #1
 800bdae:	d101      	bne.n	800bdb4 <sbrk_aligned+0x38>
 800bdb0:	f04f 34ff 	mov.w	r4, #4294967295
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	bd70      	pop	{r4, r5, r6, pc}
 800bdb8:	20000924 	.word	0x20000924

0800bdbc <_malloc_r>:
 800bdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc0:	1ccd      	adds	r5, r1, #3
 800bdc2:	f025 0503 	bic.w	r5, r5, #3
 800bdc6:	3508      	adds	r5, #8
 800bdc8:	2d0c      	cmp	r5, #12
 800bdca:	bf38      	it	cc
 800bdcc:	250c      	movcc	r5, #12
 800bdce:	2d00      	cmp	r5, #0
 800bdd0:	4607      	mov	r7, r0
 800bdd2:	db01      	blt.n	800bdd8 <_malloc_r+0x1c>
 800bdd4:	42a9      	cmp	r1, r5
 800bdd6:	d905      	bls.n	800bde4 <_malloc_r+0x28>
 800bdd8:	230c      	movs	r3, #12
 800bdda:	2600      	movs	r6, #0
 800bddc:	603b      	str	r3, [r7, #0]
 800bdde:	4630      	mov	r0, r6
 800bde0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800beb8 <_malloc_r+0xfc>
 800bde8:	f000 f868 	bl	800bebc <__malloc_lock>
 800bdec:	f8d8 3000 	ldr.w	r3, [r8]
 800bdf0:	461c      	mov	r4, r3
 800bdf2:	bb5c      	cbnz	r4, 800be4c <_malloc_r+0x90>
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	f7ff ffc0 	bl	800bd7c <sbrk_aligned>
 800bdfc:	1c43      	adds	r3, r0, #1
 800bdfe:	4604      	mov	r4, r0
 800be00:	d155      	bne.n	800beae <_malloc_r+0xf2>
 800be02:	f8d8 4000 	ldr.w	r4, [r8]
 800be06:	4626      	mov	r6, r4
 800be08:	2e00      	cmp	r6, #0
 800be0a:	d145      	bne.n	800be98 <_malloc_r+0xdc>
 800be0c:	2c00      	cmp	r4, #0
 800be0e:	d048      	beq.n	800bea2 <_malloc_r+0xe6>
 800be10:	6823      	ldr	r3, [r4, #0]
 800be12:	4631      	mov	r1, r6
 800be14:	4638      	mov	r0, r7
 800be16:	eb04 0903 	add.w	r9, r4, r3
 800be1a:	f000 fb65 	bl	800c4e8 <_sbrk_r>
 800be1e:	4581      	cmp	r9, r0
 800be20:	d13f      	bne.n	800bea2 <_malloc_r+0xe6>
 800be22:	6821      	ldr	r1, [r4, #0]
 800be24:	4638      	mov	r0, r7
 800be26:	1a6d      	subs	r5, r5, r1
 800be28:	4629      	mov	r1, r5
 800be2a:	f7ff ffa7 	bl	800bd7c <sbrk_aligned>
 800be2e:	3001      	adds	r0, #1
 800be30:	d037      	beq.n	800bea2 <_malloc_r+0xe6>
 800be32:	6823      	ldr	r3, [r4, #0]
 800be34:	442b      	add	r3, r5
 800be36:	6023      	str	r3, [r4, #0]
 800be38:	f8d8 3000 	ldr.w	r3, [r8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d038      	beq.n	800beb2 <_malloc_r+0xf6>
 800be40:	685a      	ldr	r2, [r3, #4]
 800be42:	42a2      	cmp	r2, r4
 800be44:	d12b      	bne.n	800be9e <_malloc_r+0xe2>
 800be46:	2200      	movs	r2, #0
 800be48:	605a      	str	r2, [r3, #4]
 800be4a:	e00f      	b.n	800be6c <_malloc_r+0xb0>
 800be4c:	6822      	ldr	r2, [r4, #0]
 800be4e:	1b52      	subs	r2, r2, r5
 800be50:	d41f      	bmi.n	800be92 <_malloc_r+0xd6>
 800be52:	2a0b      	cmp	r2, #11
 800be54:	d917      	bls.n	800be86 <_malloc_r+0xca>
 800be56:	1961      	adds	r1, r4, r5
 800be58:	42a3      	cmp	r3, r4
 800be5a:	6025      	str	r5, [r4, #0]
 800be5c:	bf18      	it	ne
 800be5e:	6059      	strne	r1, [r3, #4]
 800be60:	6863      	ldr	r3, [r4, #4]
 800be62:	bf08      	it	eq
 800be64:	f8c8 1000 	streq.w	r1, [r8]
 800be68:	5162      	str	r2, [r4, r5]
 800be6a:	604b      	str	r3, [r1, #4]
 800be6c:	4638      	mov	r0, r7
 800be6e:	f104 060b 	add.w	r6, r4, #11
 800be72:	f000 f829 	bl	800bec8 <__malloc_unlock>
 800be76:	f026 0607 	bic.w	r6, r6, #7
 800be7a:	1d23      	adds	r3, r4, #4
 800be7c:	1af2      	subs	r2, r6, r3
 800be7e:	d0ae      	beq.n	800bdde <_malloc_r+0x22>
 800be80:	1b9b      	subs	r3, r3, r6
 800be82:	50a3      	str	r3, [r4, r2]
 800be84:	e7ab      	b.n	800bdde <_malloc_r+0x22>
 800be86:	42a3      	cmp	r3, r4
 800be88:	6862      	ldr	r2, [r4, #4]
 800be8a:	d1dd      	bne.n	800be48 <_malloc_r+0x8c>
 800be8c:	f8c8 2000 	str.w	r2, [r8]
 800be90:	e7ec      	b.n	800be6c <_malloc_r+0xb0>
 800be92:	4623      	mov	r3, r4
 800be94:	6864      	ldr	r4, [r4, #4]
 800be96:	e7ac      	b.n	800bdf2 <_malloc_r+0x36>
 800be98:	4634      	mov	r4, r6
 800be9a:	6876      	ldr	r6, [r6, #4]
 800be9c:	e7b4      	b.n	800be08 <_malloc_r+0x4c>
 800be9e:	4613      	mov	r3, r2
 800bea0:	e7cc      	b.n	800be3c <_malloc_r+0x80>
 800bea2:	230c      	movs	r3, #12
 800bea4:	4638      	mov	r0, r7
 800bea6:	603b      	str	r3, [r7, #0]
 800bea8:	f000 f80e 	bl	800bec8 <__malloc_unlock>
 800beac:	e797      	b.n	800bdde <_malloc_r+0x22>
 800beae:	6025      	str	r5, [r4, #0]
 800beb0:	e7dc      	b.n	800be6c <_malloc_r+0xb0>
 800beb2:	605b      	str	r3, [r3, #4]
 800beb4:	deff      	udf	#255	; 0xff
 800beb6:	bf00      	nop
 800beb8:	20000920 	.word	0x20000920

0800bebc <__malloc_lock>:
 800bebc:	4801      	ldr	r0, [pc, #4]	; (800bec4 <__malloc_lock+0x8>)
 800bebe:	f000 bb5f 	b.w	800c580 <__retarget_lock_acquire_recursive>
 800bec2:	bf00      	nop
 800bec4:	20000a68 	.word	0x20000a68

0800bec8 <__malloc_unlock>:
 800bec8:	4801      	ldr	r0, [pc, #4]	; (800bed0 <__malloc_unlock+0x8>)
 800beca:	f000 bb5a 	b.w	800c582 <__retarget_lock_release_recursive>
 800bece:	bf00      	nop
 800bed0:	20000a68 	.word	0x20000a68

0800bed4 <__sflush_r>:
 800bed4:	898a      	ldrh	r2, [r1, #12]
 800bed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed8:	4605      	mov	r5, r0
 800beda:	0710      	lsls	r0, r2, #28
 800bedc:	460c      	mov	r4, r1
 800bede:	d457      	bmi.n	800bf90 <__sflush_r+0xbc>
 800bee0:	684b      	ldr	r3, [r1, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	dc04      	bgt.n	800bef0 <__sflush_r+0x1c>
 800bee6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bee8:	2b00      	cmp	r3, #0
 800beea:	dc01      	bgt.n	800bef0 <__sflush_r+0x1c>
 800beec:	2000      	movs	r0, #0
 800beee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bef2:	2e00      	cmp	r6, #0
 800bef4:	d0fa      	beq.n	800beec <__sflush_r+0x18>
 800bef6:	2300      	movs	r3, #0
 800bef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800befc:	682f      	ldr	r7, [r5, #0]
 800befe:	6a21      	ldr	r1, [r4, #32]
 800bf00:	602b      	str	r3, [r5, #0]
 800bf02:	d032      	beq.n	800bf6a <__sflush_r+0x96>
 800bf04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf06:	89a3      	ldrh	r3, [r4, #12]
 800bf08:	075a      	lsls	r2, r3, #29
 800bf0a:	d505      	bpl.n	800bf18 <__sflush_r+0x44>
 800bf0c:	6863      	ldr	r3, [r4, #4]
 800bf0e:	1ac0      	subs	r0, r0, r3
 800bf10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf12:	b10b      	cbz	r3, 800bf18 <__sflush_r+0x44>
 800bf14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf16:	1ac0      	subs	r0, r0, r3
 800bf18:	2300      	movs	r3, #0
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf1e:	4628      	mov	r0, r5
 800bf20:	6a21      	ldr	r1, [r4, #32]
 800bf22:	47b0      	blx	r6
 800bf24:	1c43      	adds	r3, r0, #1
 800bf26:	89a3      	ldrh	r3, [r4, #12]
 800bf28:	d106      	bne.n	800bf38 <__sflush_r+0x64>
 800bf2a:	6829      	ldr	r1, [r5, #0]
 800bf2c:	291d      	cmp	r1, #29
 800bf2e:	d82b      	bhi.n	800bf88 <__sflush_r+0xb4>
 800bf30:	4a28      	ldr	r2, [pc, #160]	; (800bfd4 <__sflush_r+0x100>)
 800bf32:	410a      	asrs	r2, r1
 800bf34:	07d6      	lsls	r6, r2, #31
 800bf36:	d427      	bmi.n	800bf88 <__sflush_r+0xb4>
 800bf38:	2200      	movs	r2, #0
 800bf3a:	6062      	str	r2, [r4, #4]
 800bf3c:	6922      	ldr	r2, [r4, #16]
 800bf3e:	04d9      	lsls	r1, r3, #19
 800bf40:	6022      	str	r2, [r4, #0]
 800bf42:	d504      	bpl.n	800bf4e <__sflush_r+0x7a>
 800bf44:	1c42      	adds	r2, r0, #1
 800bf46:	d101      	bne.n	800bf4c <__sflush_r+0x78>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	b903      	cbnz	r3, 800bf4e <__sflush_r+0x7a>
 800bf4c:	6560      	str	r0, [r4, #84]	; 0x54
 800bf4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf50:	602f      	str	r7, [r5, #0]
 800bf52:	2900      	cmp	r1, #0
 800bf54:	d0ca      	beq.n	800beec <__sflush_r+0x18>
 800bf56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf5a:	4299      	cmp	r1, r3
 800bf5c:	d002      	beq.n	800bf64 <__sflush_r+0x90>
 800bf5e:	4628      	mov	r0, r5
 800bf60:	f000 fb1e 	bl	800c5a0 <_free_r>
 800bf64:	2000      	movs	r0, #0
 800bf66:	6360      	str	r0, [r4, #52]	; 0x34
 800bf68:	e7c1      	b.n	800beee <__sflush_r+0x1a>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	47b0      	blx	r6
 800bf70:	1c41      	adds	r1, r0, #1
 800bf72:	d1c8      	bne.n	800bf06 <__sflush_r+0x32>
 800bf74:	682b      	ldr	r3, [r5, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d0c5      	beq.n	800bf06 <__sflush_r+0x32>
 800bf7a:	2b1d      	cmp	r3, #29
 800bf7c:	d001      	beq.n	800bf82 <__sflush_r+0xae>
 800bf7e:	2b16      	cmp	r3, #22
 800bf80:	d101      	bne.n	800bf86 <__sflush_r+0xb2>
 800bf82:	602f      	str	r7, [r5, #0]
 800bf84:	e7b2      	b.n	800beec <__sflush_r+0x18>
 800bf86:	89a3      	ldrh	r3, [r4, #12]
 800bf88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf8c:	81a3      	strh	r3, [r4, #12]
 800bf8e:	e7ae      	b.n	800beee <__sflush_r+0x1a>
 800bf90:	690f      	ldr	r7, [r1, #16]
 800bf92:	2f00      	cmp	r7, #0
 800bf94:	d0aa      	beq.n	800beec <__sflush_r+0x18>
 800bf96:	0793      	lsls	r3, r2, #30
 800bf98:	bf18      	it	ne
 800bf9a:	2300      	movne	r3, #0
 800bf9c:	680e      	ldr	r6, [r1, #0]
 800bf9e:	bf08      	it	eq
 800bfa0:	694b      	ldreq	r3, [r1, #20]
 800bfa2:	1bf6      	subs	r6, r6, r7
 800bfa4:	600f      	str	r7, [r1, #0]
 800bfa6:	608b      	str	r3, [r1, #8]
 800bfa8:	2e00      	cmp	r6, #0
 800bfaa:	dd9f      	ble.n	800beec <__sflush_r+0x18>
 800bfac:	4633      	mov	r3, r6
 800bfae:	463a      	mov	r2, r7
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	6a21      	ldr	r1, [r4, #32]
 800bfb4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bfb8:	47e0      	blx	ip
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	dc06      	bgt.n	800bfcc <__sflush_r+0xf8>
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfc8:	81a3      	strh	r3, [r4, #12]
 800bfca:	e790      	b.n	800beee <__sflush_r+0x1a>
 800bfcc:	4407      	add	r7, r0
 800bfce:	1a36      	subs	r6, r6, r0
 800bfd0:	e7ea      	b.n	800bfa8 <__sflush_r+0xd4>
 800bfd2:	bf00      	nop
 800bfd4:	dfbffffe 	.word	0xdfbffffe

0800bfd8 <_fflush_r>:
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	690b      	ldr	r3, [r1, #16]
 800bfdc:	4605      	mov	r5, r0
 800bfde:	460c      	mov	r4, r1
 800bfe0:	b913      	cbnz	r3, 800bfe8 <_fflush_r+0x10>
 800bfe2:	2500      	movs	r5, #0
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	bd38      	pop	{r3, r4, r5, pc}
 800bfe8:	b118      	cbz	r0, 800bff2 <_fflush_r+0x1a>
 800bfea:	6a03      	ldr	r3, [r0, #32]
 800bfec:	b90b      	cbnz	r3, 800bff2 <_fflush_r+0x1a>
 800bfee:	f000 f8a9 	bl	800c144 <__sinit>
 800bff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d0f3      	beq.n	800bfe2 <_fflush_r+0xa>
 800bffa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bffc:	07d0      	lsls	r0, r2, #31
 800bffe:	d404      	bmi.n	800c00a <_fflush_r+0x32>
 800c000:	0599      	lsls	r1, r3, #22
 800c002:	d402      	bmi.n	800c00a <_fflush_r+0x32>
 800c004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c006:	f000 fabb 	bl	800c580 <__retarget_lock_acquire_recursive>
 800c00a:	4628      	mov	r0, r5
 800c00c:	4621      	mov	r1, r4
 800c00e:	f7ff ff61 	bl	800bed4 <__sflush_r>
 800c012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c014:	4605      	mov	r5, r0
 800c016:	07da      	lsls	r2, r3, #31
 800c018:	d4e4      	bmi.n	800bfe4 <_fflush_r+0xc>
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	059b      	lsls	r3, r3, #22
 800c01e:	d4e1      	bmi.n	800bfe4 <_fflush_r+0xc>
 800c020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c022:	f000 faae 	bl	800c582 <__retarget_lock_release_recursive>
 800c026:	e7dd      	b.n	800bfe4 <_fflush_r+0xc>

0800c028 <fflush>:
 800c028:	4601      	mov	r1, r0
 800c02a:	b920      	cbnz	r0, 800c036 <fflush+0xe>
 800c02c:	4a04      	ldr	r2, [pc, #16]	; (800c040 <fflush+0x18>)
 800c02e:	4905      	ldr	r1, [pc, #20]	; (800c044 <fflush+0x1c>)
 800c030:	4805      	ldr	r0, [pc, #20]	; (800c048 <fflush+0x20>)
 800c032:	f000 b89f 	b.w	800c174 <_fwalk_sglue>
 800c036:	4b05      	ldr	r3, [pc, #20]	; (800c04c <fflush+0x24>)
 800c038:	6818      	ldr	r0, [r3, #0]
 800c03a:	f7ff bfcd 	b.w	800bfd8 <_fflush_r>
 800c03e:	bf00      	nop
 800c040:	20000328 	.word	0x20000328
 800c044:	0800bfd9 	.word	0x0800bfd9
 800c048:	20000334 	.word	0x20000334
 800c04c:	20000380 	.word	0x20000380

0800c050 <std>:
 800c050:	2300      	movs	r3, #0
 800c052:	b510      	push	{r4, lr}
 800c054:	4604      	mov	r4, r0
 800c056:	e9c0 3300 	strd	r3, r3, [r0]
 800c05a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c05e:	6083      	str	r3, [r0, #8]
 800c060:	8181      	strh	r1, [r0, #12]
 800c062:	6643      	str	r3, [r0, #100]	; 0x64
 800c064:	81c2      	strh	r2, [r0, #14]
 800c066:	6183      	str	r3, [r0, #24]
 800c068:	4619      	mov	r1, r3
 800c06a:	2208      	movs	r2, #8
 800c06c:	305c      	adds	r0, #92	; 0x5c
 800c06e:	f000 f9ff 	bl	800c470 <memset>
 800c072:	4b05      	ldr	r3, [pc, #20]	; (800c088 <std+0x38>)
 800c074:	6224      	str	r4, [r4, #32]
 800c076:	6263      	str	r3, [r4, #36]	; 0x24
 800c078:	4b04      	ldr	r3, [pc, #16]	; (800c08c <std+0x3c>)
 800c07a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c07c:	4b04      	ldr	r3, [pc, #16]	; (800c090 <std+0x40>)
 800c07e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c080:	4b04      	ldr	r3, [pc, #16]	; (800c094 <std+0x44>)
 800c082:	6323      	str	r3, [r4, #48]	; 0x30
 800c084:	bd10      	pop	{r4, pc}
 800c086:	bf00      	nop
 800c088:	0800c28d 	.word	0x0800c28d
 800c08c:	0800c2af 	.word	0x0800c2af
 800c090:	0800c2e7 	.word	0x0800c2e7
 800c094:	0800c30b 	.word	0x0800c30b

0800c098 <stdio_exit_handler>:
 800c098:	4a02      	ldr	r2, [pc, #8]	; (800c0a4 <stdio_exit_handler+0xc>)
 800c09a:	4903      	ldr	r1, [pc, #12]	; (800c0a8 <stdio_exit_handler+0x10>)
 800c09c:	4803      	ldr	r0, [pc, #12]	; (800c0ac <stdio_exit_handler+0x14>)
 800c09e:	f000 b869 	b.w	800c174 <_fwalk_sglue>
 800c0a2:	bf00      	nop
 800c0a4:	20000328 	.word	0x20000328
 800c0a8:	0800bfd9 	.word	0x0800bfd9
 800c0ac:	20000334 	.word	0x20000334

0800c0b0 <cleanup_stdio>:
 800c0b0:	6841      	ldr	r1, [r0, #4]
 800c0b2:	4b0c      	ldr	r3, [pc, #48]	; (800c0e4 <cleanup_stdio+0x34>)
 800c0b4:	b510      	push	{r4, lr}
 800c0b6:	4299      	cmp	r1, r3
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	d001      	beq.n	800c0c0 <cleanup_stdio+0x10>
 800c0bc:	f7ff ff8c 	bl	800bfd8 <_fflush_r>
 800c0c0:	68a1      	ldr	r1, [r4, #8]
 800c0c2:	4b09      	ldr	r3, [pc, #36]	; (800c0e8 <cleanup_stdio+0x38>)
 800c0c4:	4299      	cmp	r1, r3
 800c0c6:	d002      	beq.n	800c0ce <cleanup_stdio+0x1e>
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	f7ff ff85 	bl	800bfd8 <_fflush_r>
 800c0ce:	68e1      	ldr	r1, [r4, #12]
 800c0d0:	4b06      	ldr	r3, [pc, #24]	; (800c0ec <cleanup_stdio+0x3c>)
 800c0d2:	4299      	cmp	r1, r3
 800c0d4:	d004      	beq.n	800c0e0 <cleanup_stdio+0x30>
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0dc:	f7ff bf7c 	b.w	800bfd8 <_fflush_r>
 800c0e0:	bd10      	pop	{r4, pc}
 800c0e2:	bf00      	nop
 800c0e4:	20000928 	.word	0x20000928
 800c0e8:	20000990 	.word	0x20000990
 800c0ec:	200009f8 	.word	0x200009f8

0800c0f0 <global_stdio_init.part.0>:
 800c0f0:	b510      	push	{r4, lr}
 800c0f2:	4b0b      	ldr	r3, [pc, #44]	; (800c120 <global_stdio_init.part.0+0x30>)
 800c0f4:	4c0b      	ldr	r4, [pc, #44]	; (800c124 <global_stdio_init.part.0+0x34>)
 800c0f6:	4a0c      	ldr	r2, [pc, #48]	; (800c128 <global_stdio_init.part.0+0x38>)
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	601a      	str	r2, [r3, #0]
 800c0fc:	2104      	movs	r1, #4
 800c0fe:	2200      	movs	r2, #0
 800c100:	f7ff ffa6 	bl	800c050 <std>
 800c104:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c108:	2201      	movs	r2, #1
 800c10a:	2109      	movs	r1, #9
 800c10c:	f7ff ffa0 	bl	800c050 <std>
 800c110:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c114:	2202      	movs	r2, #2
 800c116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c11a:	2112      	movs	r1, #18
 800c11c:	f7ff bf98 	b.w	800c050 <std>
 800c120:	20000a60 	.word	0x20000a60
 800c124:	20000928 	.word	0x20000928
 800c128:	0800c099 	.word	0x0800c099

0800c12c <__sfp_lock_acquire>:
 800c12c:	4801      	ldr	r0, [pc, #4]	; (800c134 <__sfp_lock_acquire+0x8>)
 800c12e:	f000 ba27 	b.w	800c580 <__retarget_lock_acquire_recursive>
 800c132:	bf00      	nop
 800c134:	20000a69 	.word	0x20000a69

0800c138 <__sfp_lock_release>:
 800c138:	4801      	ldr	r0, [pc, #4]	; (800c140 <__sfp_lock_release+0x8>)
 800c13a:	f000 ba22 	b.w	800c582 <__retarget_lock_release_recursive>
 800c13e:	bf00      	nop
 800c140:	20000a69 	.word	0x20000a69

0800c144 <__sinit>:
 800c144:	b510      	push	{r4, lr}
 800c146:	4604      	mov	r4, r0
 800c148:	f7ff fff0 	bl	800c12c <__sfp_lock_acquire>
 800c14c:	6a23      	ldr	r3, [r4, #32]
 800c14e:	b11b      	cbz	r3, 800c158 <__sinit+0x14>
 800c150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c154:	f7ff bff0 	b.w	800c138 <__sfp_lock_release>
 800c158:	4b04      	ldr	r3, [pc, #16]	; (800c16c <__sinit+0x28>)
 800c15a:	6223      	str	r3, [r4, #32]
 800c15c:	4b04      	ldr	r3, [pc, #16]	; (800c170 <__sinit+0x2c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1f5      	bne.n	800c150 <__sinit+0xc>
 800c164:	f7ff ffc4 	bl	800c0f0 <global_stdio_init.part.0>
 800c168:	e7f2      	b.n	800c150 <__sinit+0xc>
 800c16a:	bf00      	nop
 800c16c:	0800c0b1 	.word	0x0800c0b1
 800c170:	20000a60 	.word	0x20000a60

0800c174 <_fwalk_sglue>:
 800c174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c178:	4607      	mov	r7, r0
 800c17a:	4688      	mov	r8, r1
 800c17c:	4614      	mov	r4, r2
 800c17e:	2600      	movs	r6, #0
 800c180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c184:	f1b9 0901 	subs.w	r9, r9, #1
 800c188:	d505      	bpl.n	800c196 <_fwalk_sglue+0x22>
 800c18a:	6824      	ldr	r4, [r4, #0]
 800c18c:	2c00      	cmp	r4, #0
 800c18e:	d1f7      	bne.n	800c180 <_fwalk_sglue+0xc>
 800c190:	4630      	mov	r0, r6
 800c192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c196:	89ab      	ldrh	r3, [r5, #12]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d907      	bls.n	800c1ac <_fwalk_sglue+0x38>
 800c19c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	d003      	beq.n	800c1ac <_fwalk_sglue+0x38>
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	4638      	mov	r0, r7
 800c1a8:	47c0      	blx	r8
 800c1aa:	4306      	orrs	r6, r0
 800c1ac:	3568      	adds	r5, #104	; 0x68
 800c1ae:	e7e9      	b.n	800c184 <_fwalk_sglue+0x10>

0800c1b0 <iprintf>:
 800c1b0:	b40f      	push	{r0, r1, r2, r3}
 800c1b2:	b507      	push	{r0, r1, r2, lr}
 800c1b4:	4906      	ldr	r1, [pc, #24]	; (800c1d0 <iprintf+0x20>)
 800c1b6:	ab04      	add	r3, sp, #16
 800c1b8:	6808      	ldr	r0, [r1, #0]
 800c1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1be:	6881      	ldr	r1, [r0, #8]
 800c1c0:	9301      	str	r3, [sp, #4]
 800c1c2:	f000 fa5d 	bl	800c680 <_vfiprintf_r>
 800c1c6:	b003      	add	sp, #12
 800c1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1cc:	b004      	add	sp, #16
 800c1ce:	4770      	bx	lr
 800c1d0:	20000380 	.word	0x20000380

0800c1d4 <_puts_r>:
 800c1d4:	6a03      	ldr	r3, [r0, #32]
 800c1d6:	b570      	push	{r4, r5, r6, lr}
 800c1d8:	4605      	mov	r5, r0
 800c1da:	460e      	mov	r6, r1
 800c1dc:	6884      	ldr	r4, [r0, #8]
 800c1de:	b90b      	cbnz	r3, 800c1e4 <_puts_r+0x10>
 800c1e0:	f7ff ffb0 	bl	800c144 <__sinit>
 800c1e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1e6:	07db      	lsls	r3, r3, #31
 800c1e8:	d405      	bmi.n	800c1f6 <_puts_r+0x22>
 800c1ea:	89a3      	ldrh	r3, [r4, #12]
 800c1ec:	0598      	lsls	r0, r3, #22
 800c1ee:	d402      	bmi.n	800c1f6 <_puts_r+0x22>
 800c1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1f2:	f000 f9c5 	bl	800c580 <__retarget_lock_acquire_recursive>
 800c1f6:	89a3      	ldrh	r3, [r4, #12]
 800c1f8:	0719      	lsls	r1, r3, #28
 800c1fa:	d513      	bpl.n	800c224 <_puts_r+0x50>
 800c1fc:	6923      	ldr	r3, [r4, #16]
 800c1fe:	b18b      	cbz	r3, 800c224 <_puts_r+0x50>
 800c200:	3e01      	subs	r6, #1
 800c202:	68a3      	ldr	r3, [r4, #8]
 800c204:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c208:	3b01      	subs	r3, #1
 800c20a:	60a3      	str	r3, [r4, #8]
 800c20c:	b9e9      	cbnz	r1, 800c24a <_puts_r+0x76>
 800c20e:	2b00      	cmp	r3, #0
 800c210:	da2e      	bge.n	800c270 <_puts_r+0x9c>
 800c212:	4622      	mov	r2, r4
 800c214:	210a      	movs	r1, #10
 800c216:	4628      	mov	r0, r5
 800c218:	f000 f87b 	bl	800c312 <__swbuf_r>
 800c21c:	3001      	adds	r0, #1
 800c21e:	d007      	beq.n	800c230 <_puts_r+0x5c>
 800c220:	250a      	movs	r5, #10
 800c222:	e007      	b.n	800c234 <_puts_r+0x60>
 800c224:	4621      	mov	r1, r4
 800c226:	4628      	mov	r0, r5
 800c228:	f000 f8b0 	bl	800c38c <__swsetup_r>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d0e7      	beq.n	800c200 <_puts_r+0x2c>
 800c230:	f04f 35ff 	mov.w	r5, #4294967295
 800c234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c236:	07da      	lsls	r2, r3, #31
 800c238:	d405      	bmi.n	800c246 <_puts_r+0x72>
 800c23a:	89a3      	ldrh	r3, [r4, #12]
 800c23c:	059b      	lsls	r3, r3, #22
 800c23e:	d402      	bmi.n	800c246 <_puts_r+0x72>
 800c240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c242:	f000 f99e 	bl	800c582 <__retarget_lock_release_recursive>
 800c246:	4628      	mov	r0, r5
 800c248:	bd70      	pop	{r4, r5, r6, pc}
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	da04      	bge.n	800c258 <_puts_r+0x84>
 800c24e:	69a2      	ldr	r2, [r4, #24]
 800c250:	429a      	cmp	r2, r3
 800c252:	dc06      	bgt.n	800c262 <_puts_r+0x8e>
 800c254:	290a      	cmp	r1, #10
 800c256:	d004      	beq.n	800c262 <_puts_r+0x8e>
 800c258:	6823      	ldr	r3, [r4, #0]
 800c25a:	1c5a      	adds	r2, r3, #1
 800c25c:	6022      	str	r2, [r4, #0]
 800c25e:	7019      	strb	r1, [r3, #0]
 800c260:	e7cf      	b.n	800c202 <_puts_r+0x2e>
 800c262:	4622      	mov	r2, r4
 800c264:	4628      	mov	r0, r5
 800c266:	f000 f854 	bl	800c312 <__swbuf_r>
 800c26a:	3001      	adds	r0, #1
 800c26c:	d1c9      	bne.n	800c202 <_puts_r+0x2e>
 800c26e:	e7df      	b.n	800c230 <_puts_r+0x5c>
 800c270:	250a      	movs	r5, #10
 800c272:	6823      	ldr	r3, [r4, #0]
 800c274:	1c5a      	adds	r2, r3, #1
 800c276:	6022      	str	r2, [r4, #0]
 800c278:	701d      	strb	r5, [r3, #0]
 800c27a:	e7db      	b.n	800c234 <_puts_r+0x60>

0800c27c <puts>:
 800c27c:	4b02      	ldr	r3, [pc, #8]	; (800c288 <puts+0xc>)
 800c27e:	4601      	mov	r1, r0
 800c280:	6818      	ldr	r0, [r3, #0]
 800c282:	f7ff bfa7 	b.w	800c1d4 <_puts_r>
 800c286:	bf00      	nop
 800c288:	20000380 	.word	0x20000380

0800c28c <__sread>:
 800c28c:	b510      	push	{r4, lr}
 800c28e:	460c      	mov	r4, r1
 800c290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c294:	f000 f916 	bl	800c4c4 <_read_r>
 800c298:	2800      	cmp	r0, #0
 800c29a:	bfab      	itete	ge
 800c29c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c29e:	89a3      	ldrhlt	r3, [r4, #12]
 800c2a0:	181b      	addge	r3, r3, r0
 800c2a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2a6:	bfac      	ite	ge
 800c2a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2aa:	81a3      	strhlt	r3, [r4, #12]
 800c2ac:	bd10      	pop	{r4, pc}

0800c2ae <__swrite>:
 800c2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b2:	461f      	mov	r7, r3
 800c2b4:	898b      	ldrh	r3, [r1, #12]
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	05db      	lsls	r3, r3, #23
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	4616      	mov	r6, r2
 800c2be:	d505      	bpl.n	800c2cc <__swrite+0x1e>
 800c2c0:	2302      	movs	r3, #2
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2c8:	f000 f8ea 	bl	800c4a0 <_lseek_r>
 800c2cc:	89a3      	ldrh	r3, [r4, #12]
 800c2ce:	4632      	mov	r2, r6
 800c2d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2d4:	81a3      	strh	r3, [r4, #12]
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	463b      	mov	r3, r7
 800c2da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e2:	f000 b911 	b.w	800c508 <_write_r>

0800c2e6 <__sseek>:
 800c2e6:	b510      	push	{r4, lr}
 800c2e8:	460c      	mov	r4, r1
 800c2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ee:	f000 f8d7 	bl	800c4a0 <_lseek_r>
 800c2f2:	1c43      	adds	r3, r0, #1
 800c2f4:	89a3      	ldrh	r3, [r4, #12]
 800c2f6:	bf15      	itete	ne
 800c2f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c302:	81a3      	strheq	r3, [r4, #12]
 800c304:	bf18      	it	ne
 800c306:	81a3      	strhne	r3, [r4, #12]
 800c308:	bd10      	pop	{r4, pc}

0800c30a <__sclose>:
 800c30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c30e:	f000 b8b7 	b.w	800c480 <_close_r>

0800c312 <__swbuf_r>:
 800c312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c314:	460e      	mov	r6, r1
 800c316:	4614      	mov	r4, r2
 800c318:	4605      	mov	r5, r0
 800c31a:	b118      	cbz	r0, 800c324 <__swbuf_r+0x12>
 800c31c:	6a03      	ldr	r3, [r0, #32]
 800c31e:	b90b      	cbnz	r3, 800c324 <__swbuf_r+0x12>
 800c320:	f7ff ff10 	bl	800c144 <__sinit>
 800c324:	69a3      	ldr	r3, [r4, #24]
 800c326:	60a3      	str	r3, [r4, #8]
 800c328:	89a3      	ldrh	r3, [r4, #12]
 800c32a:	071a      	lsls	r2, r3, #28
 800c32c:	d525      	bpl.n	800c37a <__swbuf_r+0x68>
 800c32e:	6923      	ldr	r3, [r4, #16]
 800c330:	b31b      	cbz	r3, 800c37a <__swbuf_r+0x68>
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	6922      	ldr	r2, [r4, #16]
 800c336:	b2f6      	uxtb	r6, r6
 800c338:	1a98      	subs	r0, r3, r2
 800c33a:	6963      	ldr	r3, [r4, #20]
 800c33c:	4637      	mov	r7, r6
 800c33e:	4283      	cmp	r3, r0
 800c340:	dc04      	bgt.n	800c34c <__swbuf_r+0x3a>
 800c342:	4621      	mov	r1, r4
 800c344:	4628      	mov	r0, r5
 800c346:	f7ff fe47 	bl	800bfd8 <_fflush_r>
 800c34a:	b9e0      	cbnz	r0, 800c386 <__swbuf_r+0x74>
 800c34c:	68a3      	ldr	r3, [r4, #8]
 800c34e:	3b01      	subs	r3, #1
 800c350:	60a3      	str	r3, [r4, #8]
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	1c5a      	adds	r2, r3, #1
 800c356:	6022      	str	r2, [r4, #0]
 800c358:	701e      	strb	r6, [r3, #0]
 800c35a:	6962      	ldr	r2, [r4, #20]
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	429a      	cmp	r2, r3
 800c360:	d004      	beq.n	800c36c <__swbuf_r+0x5a>
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	07db      	lsls	r3, r3, #31
 800c366:	d506      	bpl.n	800c376 <__swbuf_r+0x64>
 800c368:	2e0a      	cmp	r6, #10
 800c36a:	d104      	bne.n	800c376 <__swbuf_r+0x64>
 800c36c:	4621      	mov	r1, r4
 800c36e:	4628      	mov	r0, r5
 800c370:	f7ff fe32 	bl	800bfd8 <_fflush_r>
 800c374:	b938      	cbnz	r0, 800c386 <__swbuf_r+0x74>
 800c376:	4638      	mov	r0, r7
 800c378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c37a:	4621      	mov	r1, r4
 800c37c:	4628      	mov	r0, r5
 800c37e:	f000 f805 	bl	800c38c <__swsetup_r>
 800c382:	2800      	cmp	r0, #0
 800c384:	d0d5      	beq.n	800c332 <__swbuf_r+0x20>
 800c386:	f04f 37ff 	mov.w	r7, #4294967295
 800c38a:	e7f4      	b.n	800c376 <__swbuf_r+0x64>

0800c38c <__swsetup_r>:
 800c38c:	b538      	push	{r3, r4, r5, lr}
 800c38e:	4b2a      	ldr	r3, [pc, #168]	; (800c438 <__swsetup_r+0xac>)
 800c390:	4605      	mov	r5, r0
 800c392:	6818      	ldr	r0, [r3, #0]
 800c394:	460c      	mov	r4, r1
 800c396:	b118      	cbz	r0, 800c3a0 <__swsetup_r+0x14>
 800c398:	6a03      	ldr	r3, [r0, #32]
 800c39a:	b90b      	cbnz	r3, 800c3a0 <__swsetup_r+0x14>
 800c39c:	f7ff fed2 	bl	800c144 <__sinit>
 800c3a0:	89a3      	ldrh	r3, [r4, #12]
 800c3a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3a6:	0718      	lsls	r0, r3, #28
 800c3a8:	d422      	bmi.n	800c3f0 <__swsetup_r+0x64>
 800c3aa:	06d9      	lsls	r1, r3, #27
 800c3ac:	d407      	bmi.n	800c3be <__swsetup_r+0x32>
 800c3ae:	2309      	movs	r3, #9
 800c3b0:	602b      	str	r3, [r5, #0]
 800c3b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ba:	81a3      	strh	r3, [r4, #12]
 800c3bc:	e034      	b.n	800c428 <__swsetup_r+0x9c>
 800c3be:	0758      	lsls	r0, r3, #29
 800c3c0:	d512      	bpl.n	800c3e8 <__swsetup_r+0x5c>
 800c3c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3c4:	b141      	cbz	r1, 800c3d8 <__swsetup_r+0x4c>
 800c3c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3ca:	4299      	cmp	r1, r3
 800c3cc:	d002      	beq.n	800c3d4 <__swsetup_r+0x48>
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	f000 f8e6 	bl	800c5a0 <_free_r>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	6363      	str	r3, [r4, #52]	; 0x34
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3de:	81a3      	strh	r3, [r4, #12]
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	6063      	str	r3, [r4, #4]
 800c3e4:	6923      	ldr	r3, [r4, #16]
 800c3e6:	6023      	str	r3, [r4, #0]
 800c3e8:	89a3      	ldrh	r3, [r4, #12]
 800c3ea:	f043 0308 	orr.w	r3, r3, #8
 800c3ee:	81a3      	strh	r3, [r4, #12]
 800c3f0:	6923      	ldr	r3, [r4, #16]
 800c3f2:	b94b      	cbnz	r3, 800c408 <__swsetup_r+0x7c>
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3fe:	d003      	beq.n	800c408 <__swsetup_r+0x7c>
 800c400:	4621      	mov	r1, r4
 800c402:	4628      	mov	r0, r5
 800c404:	f000 fc0f 	bl	800cc26 <__smakebuf_r>
 800c408:	89a0      	ldrh	r0, [r4, #12]
 800c40a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c40e:	f010 0301 	ands.w	r3, r0, #1
 800c412:	d00a      	beq.n	800c42a <__swsetup_r+0x9e>
 800c414:	2300      	movs	r3, #0
 800c416:	60a3      	str	r3, [r4, #8]
 800c418:	6963      	ldr	r3, [r4, #20]
 800c41a:	425b      	negs	r3, r3
 800c41c:	61a3      	str	r3, [r4, #24]
 800c41e:	6923      	ldr	r3, [r4, #16]
 800c420:	b943      	cbnz	r3, 800c434 <__swsetup_r+0xa8>
 800c422:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c426:	d1c4      	bne.n	800c3b2 <__swsetup_r+0x26>
 800c428:	bd38      	pop	{r3, r4, r5, pc}
 800c42a:	0781      	lsls	r1, r0, #30
 800c42c:	bf58      	it	pl
 800c42e:	6963      	ldrpl	r3, [r4, #20]
 800c430:	60a3      	str	r3, [r4, #8]
 800c432:	e7f4      	b.n	800c41e <__swsetup_r+0x92>
 800c434:	2000      	movs	r0, #0
 800c436:	e7f7      	b.n	800c428 <__swsetup_r+0x9c>
 800c438:	20000380 	.word	0x20000380

0800c43c <memmove>:
 800c43c:	4288      	cmp	r0, r1
 800c43e:	b510      	push	{r4, lr}
 800c440:	eb01 0402 	add.w	r4, r1, r2
 800c444:	d902      	bls.n	800c44c <memmove+0x10>
 800c446:	4284      	cmp	r4, r0
 800c448:	4623      	mov	r3, r4
 800c44a:	d807      	bhi.n	800c45c <memmove+0x20>
 800c44c:	1e43      	subs	r3, r0, #1
 800c44e:	42a1      	cmp	r1, r4
 800c450:	d008      	beq.n	800c464 <memmove+0x28>
 800c452:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c45a:	e7f8      	b.n	800c44e <memmove+0x12>
 800c45c:	4601      	mov	r1, r0
 800c45e:	4402      	add	r2, r0
 800c460:	428a      	cmp	r2, r1
 800c462:	d100      	bne.n	800c466 <memmove+0x2a>
 800c464:	bd10      	pop	{r4, pc}
 800c466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c46a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c46e:	e7f7      	b.n	800c460 <memmove+0x24>

0800c470 <memset>:
 800c470:	4603      	mov	r3, r0
 800c472:	4402      	add	r2, r0
 800c474:	4293      	cmp	r3, r2
 800c476:	d100      	bne.n	800c47a <memset+0xa>
 800c478:	4770      	bx	lr
 800c47a:	f803 1b01 	strb.w	r1, [r3], #1
 800c47e:	e7f9      	b.n	800c474 <memset+0x4>

0800c480 <_close_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	2300      	movs	r3, #0
 800c484:	4d05      	ldr	r5, [pc, #20]	; (800c49c <_close_r+0x1c>)
 800c486:	4604      	mov	r4, r0
 800c488:	4608      	mov	r0, r1
 800c48a:	602b      	str	r3, [r5, #0]
 800c48c:	f7fb fe77 	bl	800817e <_close>
 800c490:	1c43      	adds	r3, r0, #1
 800c492:	d102      	bne.n	800c49a <_close_r+0x1a>
 800c494:	682b      	ldr	r3, [r5, #0]
 800c496:	b103      	cbz	r3, 800c49a <_close_r+0x1a>
 800c498:	6023      	str	r3, [r4, #0]
 800c49a:	bd38      	pop	{r3, r4, r5, pc}
 800c49c:	20000a64 	.word	0x20000a64

0800c4a0 <_lseek_r>:
 800c4a0:	b538      	push	{r3, r4, r5, lr}
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	4608      	mov	r0, r1
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	4d05      	ldr	r5, [pc, #20]	; (800c4c0 <_lseek_r+0x20>)
 800c4ac:	602a      	str	r2, [r5, #0]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	f7fb fe89 	bl	80081c6 <_lseek>
 800c4b4:	1c43      	adds	r3, r0, #1
 800c4b6:	d102      	bne.n	800c4be <_lseek_r+0x1e>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	b103      	cbz	r3, 800c4be <_lseek_r+0x1e>
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	20000a64 	.word	0x20000a64

0800c4c4 <_read_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	4608      	mov	r0, r1
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	4d05      	ldr	r5, [pc, #20]	; (800c4e4 <_read_r+0x20>)
 800c4d0:	602a      	str	r2, [r5, #0]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	f7fb fe1a 	bl	800810c <_read>
 800c4d8:	1c43      	adds	r3, r0, #1
 800c4da:	d102      	bne.n	800c4e2 <_read_r+0x1e>
 800c4dc:	682b      	ldr	r3, [r5, #0]
 800c4de:	b103      	cbz	r3, 800c4e2 <_read_r+0x1e>
 800c4e0:	6023      	str	r3, [r4, #0]
 800c4e2:	bd38      	pop	{r3, r4, r5, pc}
 800c4e4:	20000a64 	.word	0x20000a64

0800c4e8 <_sbrk_r>:
 800c4e8:	b538      	push	{r3, r4, r5, lr}
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	4d05      	ldr	r5, [pc, #20]	; (800c504 <_sbrk_r+0x1c>)
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	4608      	mov	r0, r1
 800c4f2:	602b      	str	r3, [r5, #0]
 800c4f4:	f7fb fe74 	bl	80081e0 <_sbrk>
 800c4f8:	1c43      	adds	r3, r0, #1
 800c4fa:	d102      	bne.n	800c502 <_sbrk_r+0x1a>
 800c4fc:	682b      	ldr	r3, [r5, #0]
 800c4fe:	b103      	cbz	r3, 800c502 <_sbrk_r+0x1a>
 800c500:	6023      	str	r3, [r4, #0]
 800c502:	bd38      	pop	{r3, r4, r5, pc}
 800c504:	20000a64 	.word	0x20000a64

0800c508 <_write_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	4604      	mov	r4, r0
 800c50c:	4608      	mov	r0, r1
 800c50e:	4611      	mov	r1, r2
 800c510:	2200      	movs	r2, #0
 800c512:	4d05      	ldr	r5, [pc, #20]	; (800c528 <_write_r+0x20>)
 800c514:	602a      	str	r2, [r5, #0]
 800c516:	461a      	mov	r2, r3
 800c518:	f7fb fe15 	bl	8008146 <_write>
 800c51c:	1c43      	adds	r3, r0, #1
 800c51e:	d102      	bne.n	800c526 <_write_r+0x1e>
 800c520:	682b      	ldr	r3, [r5, #0]
 800c522:	b103      	cbz	r3, 800c526 <_write_r+0x1e>
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	bd38      	pop	{r3, r4, r5, pc}
 800c528:	20000a64 	.word	0x20000a64

0800c52c <__errno>:
 800c52c:	4b01      	ldr	r3, [pc, #4]	; (800c534 <__errno+0x8>)
 800c52e:	6818      	ldr	r0, [r3, #0]
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	20000380 	.word	0x20000380

0800c538 <__libc_init_array>:
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	2600      	movs	r6, #0
 800c53c:	4d0c      	ldr	r5, [pc, #48]	; (800c570 <__libc_init_array+0x38>)
 800c53e:	4c0d      	ldr	r4, [pc, #52]	; (800c574 <__libc_init_array+0x3c>)
 800c540:	1b64      	subs	r4, r4, r5
 800c542:	10a4      	asrs	r4, r4, #2
 800c544:	42a6      	cmp	r6, r4
 800c546:	d109      	bne.n	800c55c <__libc_init_array+0x24>
 800c548:	f000 fbda 	bl	800cd00 <_init>
 800c54c:	2600      	movs	r6, #0
 800c54e:	4d0a      	ldr	r5, [pc, #40]	; (800c578 <__libc_init_array+0x40>)
 800c550:	4c0a      	ldr	r4, [pc, #40]	; (800c57c <__libc_init_array+0x44>)
 800c552:	1b64      	subs	r4, r4, r5
 800c554:	10a4      	asrs	r4, r4, #2
 800c556:	42a6      	cmp	r6, r4
 800c558:	d105      	bne.n	800c566 <__libc_init_array+0x2e>
 800c55a:	bd70      	pop	{r4, r5, r6, pc}
 800c55c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c560:	4798      	blx	r3
 800c562:	3601      	adds	r6, #1
 800c564:	e7ee      	b.n	800c544 <__libc_init_array+0xc>
 800c566:	f855 3b04 	ldr.w	r3, [r5], #4
 800c56a:	4798      	blx	r3
 800c56c:	3601      	adds	r6, #1
 800c56e:	e7f2      	b.n	800c556 <__libc_init_array+0x1e>
 800c570:	0800d3f8 	.word	0x0800d3f8
 800c574:	0800d3f8 	.word	0x0800d3f8
 800c578:	0800d3f8 	.word	0x0800d3f8
 800c57c:	0800d3fc 	.word	0x0800d3fc

0800c580 <__retarget_lock_acquire_recursive>:
 800c580:	4770      	bx	lr

0800c582 <__retarget_lock_release_recursive>:
 800c582:	4770      	bx	lr

0800c584 <memcpy>:
 800c584:	440a      	add	r2, r1
 800c586:	4291      	cmp	r1, r2
 800c588:	f100 33ff 	add.w	r3, r0, #4294967295
 800c58c:	d100      	bne.n	800c590 <memcpy+0xc>
 800c58e:	4770      	bx	lr
 800c590:	b510      	push	{r4, lr}
 800c592:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c596:	4291      	cmp	r1, r2
 800c598:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c59c:	d1f9      	bne.n	800c592 <memcpy+0xe>
 800c59e:	bd10      	pop	{r4, pc}

0800c5a0 <_free_r>:
 800c5a0:	b538      	push	{r3, r4, r5, lr}
 800c5a2:	4605      	mov	r5, r0
 800c5a4:	2900      	cmp	r1, #0
 800c5a6:	d040      	beq.n	800c62a <_free_r+0x8a>
 800c5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5ac:	1f0c      	subs	r4, r1, #4
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	bfb8      	it	lt
 800c5b2:	18e4      	addlt	r4, r4, r3
 800c5b4:	f7ff fc82 	bl	800bebc <__malloc_lock>
 800c5b8:	4a1c      	ldr	r2, [pc, #112]	; (800c62c <_free_r+0x8c>)
 800c5ba:	6813      	ldr	r3, [r2, #0]
 800c5bc:	b933      	cbnz	r3, 800c5cc <_free_r+0x2c>
 800c5be:	6063      	str	r3, [r4, #4]
 800c5c0:	6014      	str	r4, [r2, #0]
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5c8:	f7ff bc7e 	b.w	800bec8 <__malloc_unlock>
 800c5cc:	42a3      	cmp	r3, r4
 800c5ce:	d908      	bls.n	800c5e2 <_free_r+0x42>
 800c5d0:	6820      	ldr	r0, [r4, #0]
 800c5d2:	1821      	adds	r1, r4, r0
 800c5d4:	428b      	cmp	r3, r1
 800c5d6:	bf01      	itttt	eq
 800c5d8:	6819      	ldreq	r1, [r3, #0]
 800c5da:	685b      	ldreq	r3, [r3, #4]
 800c5dc:	1809      	addeq	r1, r1, r0
 800c5de:	6021      	streq	r1, [r4, #0]
 800c5e0:	e7ed      	b.n	800c5be <_free_r+0x1e>
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	b10b      	cbz	r3, 800c5ec <_free_r+0x4c>
 800c5e8:	42a3      	cmp	r3, r4
 800c5ea:	d9fa      	bls.n	800c5e2 <_free_r+0x42>
 800c5ec:	6811      	ldr	r1, [r2, #0]
 800c5ee:	1850      	adds	r0, r2, r1
 800c5f0:	42a0      	cmp	r0, r4
 800c5f2:	d10b      	bne.n	800c60c <_free_r+0x6c>
 800c5f4:	6820      	ldr	r0, [r4, #0]
 800c5f6:	4401      	add	r1, r0
 800c5f8:	1850      	adds	r0, r2, r1
 800c5fa:	4283      	cmp	r3, r0
 800c5fc:	6011      	str	r1, [r2, #0]
 800c5fe:	d1e0      	bne.n	800c5c2 <_free_r+0x22>
 800c600:	6818      	ldr	r0, [r3, #0]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	4408      	add	r0, r1
 800c606:	6010      	str	r0, [r2, #0]
 800c608:	6053      	str	r3, [r2, #4]
 800c60a:	e7da      	b.n	800c5c2 <_free_r+0x22>
 800c60c:	d902      	bls.n	800c614 <_free_r+0x74>
 800c60e:	230c      	movs	r3, #12
 800c610:	602b      	str	r3, [r5, #0]
 800c612:	e7d6      	b.n	800c5c2 <_free_r+0x22>
 800c614:	6820      	ldr	r0, [r4, #0]
 800c616:	1821      	adds	r1, r4, r0
 800c618:	428b      	cmp	r3, r1
 800c61a:	bf01      	itttt	eq
 800c61c:	6819      	ldreq	r1, [r3, #0]
 800c61e:	685b      	ldreq	r3, [r3, #4]
 800c620:	1809      	addeq	r1, r1, r0
 800c622:	6021      	streq	r1, [r4, #0]
 800c624:	6063      	str	r3, [r4, #4]
 800c626:	6054      	str	r4, [r2, #4]
 800c628:	e7cb      	b.n	800c5c2 <_free_r+0x22>
 800c62a:	bd38      	pop	{r3, r4, r5, pc}
 800c62c:	20000920 	.word	0x20000920

0800c630 <__sfputc_r>:
 800c630:	6893      	ldr	r3, [r2, #8]
 800c632:	b410      	push	{r4}
 800c634:	3b01      	subs	r3, #1
 800c636:	2b00      	cmp	r3, #0
 800c638:	6093      	str	r3, [r2, #8]
 800c63a:	da07      	bge.n	800c64c <__sfputc_r+0x1c>
 800c63c:	6994      	ldr	r4, [r2, #24]
 800c63e:	42a3      	cmp	r3, r4
 800c640:	db01      	blt.n	800c646 <__sfputc_r+0x16>
 800c642:	290a      	cmp	r1, #10
 800c644:	d102      	bne.n	800c64c <__sfputc_r+0x1c>
 800c646:	bc10      	pop	{r4}
 800c648:	f7ff be63 	b.w	800c312 <__swbuf_r>
 800c64c:	6813      	ldr	r3, [r2, #0]
 800c64e:	1c58      	adds	r0, r3, #1
 800c650:	6010      	str	r0, [r2, #0]
 800c652:	7019      	strb	r1, [r3, #0]
 800c654:	4608      	mov	r0, r1
 800c656:	bc10      	pop	{r4}
 800c658:	4770      	bx	lr

0800c65a <__sfputs_r>:
 800c65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65c:	4606      	mov	r6, r0
 800c65e:	460f      	mov	r7, r1
 800c660:	4614      	mov	r4, r2
 800c662:	18d5      	adds	r5, r2, r3
 800c664:	42ac      	cmp	r4, r5
 800c666:	d101      	bne.n	800c66c <__sfputs_r+0x12>
 800c668:	2000      	movs	r0, #0
 800c66a:	e007      	b.n	800c67c <__sfputs_r+0x22>
 800c66c:	463a      	mov	r2, r7
 800c66e:	4630      	mov	r0, r6
 800c670:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c674:	f7ff ffdc 	bl	800c630 <__sfputc_r>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	d1f3      	bne.n	800c664 <__sfputs_r+0xa>
 800c67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c680 <_vfiprintf_r>:
 800c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c684:	460d      	mov	r5, r1
 800c686:	4614      	mov	r4, r2
 800c688:	4698      	mov	r8, r3
 800c68a:	4606      	mov	r6, r0
 800c68c:	b09d      	sub	sp, #116	; 0x74
 800c68e:	b118      	cbz	r0, 800c698 <_vfiprintf_r+0x18>
 800c690:	6a03      	ldr	r3, [r0, #32]
 800c692:	b90b      	cbnz	r3, 800c698 <_vfiprintf_r+0x18>
 800c694:	f7ff fd56 	bl	800c144 <__sinit>
 800c698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c69a:	07d9      	lsls	r1, r3, #31
 800c69c:	d405      	bmi.n	800c6aa <_vfiprintf_r+0x2a>
 800c69e:	89ab      	ldrh	r3, [r5, #12]
 800c6a0:	059a      	lsls	r2, r3, #22
 800c6a2:	d402      	bmi.n	800c6aa <_vfiprintf_r+0x2a>
 800c6a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6a6:	f7ff ff6b 	bl	800c580 <__retarget_lock_acquire_recursive>
 800c6aa:	89ab      	ldrh	r3, [r5, #12]
 800c6ac:	071b      	lsls	r3, r3, #28
 800c6ae:	d501      	bpl.n	800c6b4 <_vfiprintf_r+0x34>
 800c6b0:	692b      	ldr	r3, [r5, #16]
 800c6b2:	b99b      	cbnz	r3, 800c6dc <_vfiprintf_r+0x5c>
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	f7ff fe68 	bl	800c38c <__swsetup_r>
 800c6bc:	b170      	cbz	r0, 800c6dc <_vfiprintf_r+0x5c>
 800c6be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6c0:	07dc      	lsls	r4, r3, #31
 800c6c2:	d504      	bpl.n	800c6ce <_vfiprintf_r+0x4e>
 800c6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c8:	b01d      	add	sp, #116	; 0x74
 800c6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ce:	89ab      	ldrh	r3, [r5, #12]
 800c6d0:	0598      	lsls	r0, r3, #22
 800c6d2:	d4f7      	bmi.n	800c6c4 <_vfiprintf_r+0x44>
 800c6d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6d6:	f7ff ff54 	bl	800c582 <__retarget_lock_release_recursive>
 800c6da:	e7f3      	b.n	800c6c4 <_vfiprintf_r+0x44>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e0:	2320      	movs	r3, #32
 800c6e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6e6:	2330      	movs	r3, #48	; 0x30
 800c6e8:	f04f 0901 	mov.w	r9, #1
 800c6ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c8a0 <_vfiprintf_r+0x220>
 800c6f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6f8:	4623      	mov	r3, r4
 800c6fa:	469a      	mov	sl, r3
 800c6fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c700:	b10a      	cbz	r2, 800c706 <_vfiprintf_r+0x86>
 800c702:	2a25      	cmp	r2, #37	; 0x25
 800c704:	d1f9      	bne.n	800c6fa <_vfiprintf_r+0x7a>
 800c706:	ebba 0b04 	subs.w	fp, sl, r4
 800c70a:	d00b      	beq.n	800c724 <_vfiprintf_r+0xa4>
 800c70c:	465b      	mov	r3, fp
 800c70e:	4622      	mov	r2, r4
 800c710:	4629      	mov	r1, r5
 800c712:	4630      	mov	r0, r6
 800c714:	f7ff ffa1 	bl	800c65a <__sfputs_r>
 800c718:	3001      	adds	r0, #1
 800c71a:	f000 80a9 	beq.w	800c870 <_vfiprintf_r+0x1f0>
 800c71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c720:	445a      	add	r2, fp
 800c722:	9209      	str	r2, [sp, #36]	; 0x24
 800c724:	f89a 3000 	ldrb.w	r3, [sl]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f000 80a1 	beq.w	800c870 <_vfiprintf_r+0x1f0>
 800c72e:	2300      	movs	r3, #0
 800c730:	f04f 32ff 	mov.w	r2, #4294967295
 800c734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c738:	f10a 0a01 	add.w	sl, sl, #1
 800c73c:	9304      	str	r3, [sp, #16]
 800c73e:	9307      	str	r3, [sp, #28]
 800c740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c744:	931a      	str	r3, [sp, #104]	; 0x68
 800c746:	4654      	mov	r4, sl
 800c748:	2205      	movs	r2, #5
 800c74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c74e:	4854      	ldr	r0, [pc, #336]	; (800c8a0 <_vfiprintf_r+0x220>)
 800c750:	f000 fac8 	bl	800cce4 <memchr>
 800c754:	9a04      	ldr	r2, [sp, #16]
 800c756:	b9d8      	cbnz	r0, 800c790 <_vfiprintf_r+0x110>
 800c758:	06d1      	lsls	r1, r2, #27
 800c75a:	bf44      	itt	mi
 800c75c:	2320      	movmi	r3, #32
 800c75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c762:	0713      	lsls	r3, r2, #28
 800c764:	bf44      	itt	mi
 800c766:	232b      	movmi	r3, #43	; 0x2b
 800c768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c76c:	f89a 3000 	ldrb.w	r3, [sl]
 800c770:	2b2a      	cmp	r3, #42	; 0x2a
 800c772:	d015      	beq.n	800c7a0 <_vfiprintf_r+0x120>
 800c774:	4654      	mov	r4, sl
 800c776:	2000      	movs	r0, #0
 800c778:	f04f 0c0a 	mov.w	ip, #10
 800c77c:	9a07      	ldr	r2, [sp, #28]
 800c77e:	4621      	mov	r1, r4
 800c780:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c784:	3b30      	subs	r3, #48	; 0x30
 800c786:	2b09      	cmp	r3, #9
 800c788:	d94d      	bls.n	800c826 <_vfiprintf_r+0x1a6>
 800c78a:	b1b0      	cbz	r0, 800c7ba <_vfiprintf_r+0x13a>
 800c78c:	9207      	str	r2, [sp, #28]
 800c78e:	e014      	b.n	800c7ba <_vfiprintf_r+0x13a>
 800c790:	eba0 0308 	sub.w	r3, r0, r8
 800c794:	fa09 f303 	lsl.w	r3, r9, r3
 800c798:	4313      	orrs	r3, r2
 800c79a:	46a2      	mov	sl, r4
 800c79c:	9304      	str	r3, [sp, #16]
 800c79e:	e7d2      	b.n	800c746 <_vfiprintf_r+0xc6>
 800c7a0:	9b03      	ldr	r3, [sp, #12]
 800c7a2:	1d19      	adds	r1, r3, #4
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	9103      	str	r1, [sp, #12]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	bfbb      	ittet	lt
 800c7ac:	425b      	neglt	r3, r3
 800c7ae:	f042 0202 	orrlt.w	r2, r2, #2
 800c7b2:	9307      	strge	r3, [sp, #28]
 800c7b4:	9307      	strlt	r3, [sp, #28]
 800c7b6:	bfb8      	it	lt
 800c7b8:	9204      	strlt	r2, [sp, #16]
 800c7ba:	7823      	ldrb	r3, [r4, #0]
 800c7bc:	2b2e      	cmp	r3, #46	; 0x2e
 800c7be:	d10c      	bne.n	800c7da <_vfiprintf_r+0x15a>
 800c7c0:	7863      	ldrb	r3, [r4, #1]
 800c7c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c7c4:	d134      	bne.n	800c830 <_vfiprintf_r+0x1b0>
 800c7c6:	9b03      	ldr	r3, [sp, #12]
 800c7c8:	3402      	adds	r4, #2
 800c7ca:	1d1a      	adds	r2, r3, #4
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	9203      	str	r2, [sp, #12]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	bfb8      	it	lt
 800c7d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7d8:	9305      	str	r3, [sp, #20]
 800c7da:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c8a4 <_vfiprintf_r+0x224>
 800c7de:	2203      	movs	r2, #3
 800c7e0:	4650      	mov	r0, sl
 800c7e2:	7821      	ldrb	r1, [r4, #0]
 800c7e4:	f000 fa7e 	bl	800cce4 <memchr>
 800c7e8:	b138      	cbz	r0, 800c7fa <_vfiprintf_r+0x17a>
 800c7ea:	2240      	movs	r2, #64	; 0x40
 800c7ec:	9b04      	ldr	r3, [sp, #16]
 800c7ee:	eba0 000a 	sub.w	r0, r0, sl
 800c7f2:	4082      	lsls	r2, r0
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	3401      	adds	r4, #1
 800c7f8:	9304      	str	r3, [sp, #16]
 800c7fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7fe:	2206      	movs	r2, #6
 800c800:	4829      	ldr	r0, [pc, #164]	; (800c8a8 <_vfiprintf_r+0x228>)
 800c802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c806:	f000 fa6d 	bl	800cce4 <memchr>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d03f      	beq.n	800c88e <_vfiprintf_r+0x20e>
 800c80e:	4b27      	ldr	r3, [pc, #156]	; (800c8ac <_vfiprintf_r+0x22c>)
 800c810:	bb1b      	cbnz	r3, 800c85a <_vfiprintf_r+0x1da>
 800c812:	9b03      	ldr	r3, [sp, #12]
 800c814:	3307      	adds	r3, #7
 800c816:	f023 0307 	bic.w	r3, r3, #7
 800c81a:	3308      	adds	r3, #8
 800c81c:	9303      	str	r3, [sp, #12]
 800c81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c820:	443b      	add	r3, r7
 800c822:	9309      	str	r3, [sp, #36]	; 0x24
 800c824:	e768      	b.n	800c6f8 <_vfiprintf_r+0x78>
 800c826:	460c      	mov	r4, r1
 800c828:	2001      	movs	r0, #1
 800c82a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c82e:	e7a6      	b.n	800c77e <_vfiprintf_r+0xfe>
 800c830:	2300      	movs	r3, #0
 800c832:	f04f 0c0a 	mov.w	ip, #10
 800c836:	4619      	mov	r1, r3
 800c838:	3401      	adds	r4, #1
 800c83a:	9305      	str	r3, [sp, #20]
 800c83c:	4620      	mov	r0, r4
 800c83e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c842:	3a30      	subs	r2, #48	; 0x30
 800c844:	2a09      	cmp	r2, #9
 800c846:	d903      	bls.n	800c850 <_vfiprintf_r+0x1d0>
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d0c6      	beq.n	800c7da <_vfiprintf_r+0x15a>
 800c84c:	9105      	str	r1, [sp, #20]
 800c84e:	e7c4      	b.n	800c7da <_vfiprintf_r+0x15a>
 800c850:	4604      	mov	r4, r0
 800c852:	2301      	movs	r3, #1
 800c854:	fb0c 2101 	mla	r1, ip, r1, r2
 800c858:	e7f0      	b.n	800c83c <_vfiprintf_r+0x1bc>
 800c85a:	ab03      	add	r3, sp, #12
 800c85c:	9300      	str	r3, [sp, #0]
 800c85e:	462a      	mov	r2, r5
 800c860:	4630      	mov	r0, r6
 800c862:	4b13      	ldr	r3, [pc, #76]	; (800c8b0 <_vfiprintf_r+0x230>)
 800c864:	a904      	add	r1, sp, #16
 800c866:	f3af 8000 	nop.w
 800c86a:	4607      	mov	r7, r0
 800c86c:	1c78      	adds	r0, r7, #1
 800c86e:	d1d6      	bne.n	800c81e <_vfiprintf_r+0x19e>
 800c870:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c872:	07d9      	lsls	r1, r3, #31
 800c874:	d405      	bmi.n	800c882 <_vfiprintf_r+0x202>
 800c876:	89ab      	ldrh	r3, [r5, #12]
 800c878:	059a      	lsls	r2, r3, #22
 800c87a:	d402      	bmi.n	800c882 <_vfiprintf_r+0x202>
 800c87c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c87e:	f7ff fe80 	bl	800c582 <__retarget_lock_release_recursive>
 800c882:	89ab      	ldrh	r3, [r5, #12]
 800c884:	065b      	lsls	r3, r3, #25
 800c886:	f53f af1d 	bmi.w	800c6c4 <_vfiprintf_r+0x44>
 800c88a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c88c:	e71c      	b.n	800c6c8 <_vfiprintf_r+0x48>
 800c88e:	ab03      	add	r3, sp, #12
 800c890:	9300      	str	r3, [sp, #0]
 800c892:	462a      	mov	r2, r5
 800c894:	4630      	mov	r0, r6
 800c896:	4b06      	ldr	r3, [pc, #24]	; (800c8b0 <_vfiprintf_r+0x230>)
 800c898:	a904      	add	r1, sp, #16
 800c89a:	f000 f87d 	bl	800c998 <_printf_i>
 800c89e:	e7e4      	b.n	800c86a <_vfiprintf_r+0x1ea>
 800c8a0:	0800d3c4 	.word	0x0800d3c4
 800c8a4:	0800d3ca 	.word	0x0800d3ca
 800c8a8:	0800d3ce 	.word	0x0800d3ce
 800c8ac:	00000000 	.word	0x00000000
 800c8b0:	0800c65b 	.word	0x0800c65b

0800c8b4 <_printf_common>:
 800c8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8b8:	4616      	mov	r6, r2
 800c8ba:	4699      	mov	r9, r3
 800c8bc:	688a      	ldr	r2, [r1, #8]
 800c8be:	690b      	ldr	r3, [r1, #16]
 800c8c0:	4607      	mov	r7, r0
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	bfb8      	it	lt
 800c8c6:	4613      	movlt	r3, r2
 800c8c8:	6033      	str	r3, [r6, #0]
 800c8ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8ce:	460c      	mov	r4, r1
 800c8d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8d4:	b10a      	cbz	r2, 800c8da <_printf_common+0x26>
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	6033      	str	r3, [r6, #0]
 800c8da:	6823      	ldr	r3, [r4, #0]
 800c8dc:	0699      	lsls	r1, r3, #26
 800c8de:	bf42      	ittt	mi
 800c8e0:	6833      	ldrmi	r3, [r6, #0]
 800c8e2:	3302      	addmi	r3, #2
 800c8e4:	6033      	strmi	r3, [r6, #0]
 800c8e6:	6825      	ldr	r5, [r4, #0]
 800c8e8:	f015 0506 	ands.w	r5, r5, #6
 800c8ec:	d106      	bne.n	800c8fc <_printf_common+0x48>
 800c8ee:	f104 0a19 	add.w	sl, r4, #25
 800c8f2:	68e3      	ldr	r3, [r4, #12]
 800c8f4:	6832      	ldr	r2, [r6, #0]
 800c8f6:	1a9b      	subs	r3, r3, r2
 800c8f8:	42ab      	cmp	r3, r5
 800c8fa:	dc2b      	bgt.n	800c954 <_printf_common+0xa0>
 800c8fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c900:	1e13      	subs	r3, r2, #0
 800c902:	6822      	ldr	r2, [r4, #0]
 800c904:	bf18      	it	ne
 800c906:	2301      	movne	r3, #1
 800c908:	0692      	lsls	r2, r2, #26
 800c90a:	d430      	bmi.n	800c96e <_printf_common+0xba>
 800c90c:	4649      	mov	r1, r9
 800c90e:	4638      	mov	r0, r7
 800c910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c914:	47c0      	blx	r8
 800c916:	3001      	adds	r0, #1
 800c918:	d023      	beq.n	800c962 <_printf_common+0xae>
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	6922      	ldr	r2, [r4, #16]
 800c91e:	f003 0306 	and.w	r3, r3, #6
 800c922:	2b04      	cmp	r3, #4
 800c924:	bf14      	ite	ne
 800c926:	2500      	movne	r5, #0
 800c928:	6833      	ldreq	r3, [r6, #0]
 800c92a:	f04f 0600 	mov.w	r6, #0
 800c92e:	bf08      	it	eq
 800c930:	68e5      	ldreq	r5, [r4, #12]
 800c932:	f104 041a 	add.w	r4, r4, #26
 800c936:	bf08      	it	eq
 800c938:	1aed      	subeq	r5, r5, r3
 800c93a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c93e:	bf08      	it	eq
 800c940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c944:	4293      	cmp	r3, r2
 800c946:	bfc4      	itt	gt
 800c948:	1a9b      	subgt	r3, r3, r2
 800c94a:	18ed      	addgt	r5, r5, r3
 800c94c:	42b5      	cmp	r5, r6
 800c94e:	d11a      	bne.n	800c986 <_printf_common+0xd2>
 800c950:	2000      	movs	r0, #0
 800c952:	e008      	b.n	800c966 <_printf_common+0xb2>
 800c954:	2301      	movs	r3, #1
 800c956:	4652      	mov	r2, sl
 800c958:	4649      	mov	r1, r9
 800c95a:	4638      	mov	r0, r7
 800c95c:	47c0      	blx	r8
 800c95e:	3001      	adds	r0, #1
 800c960:	d103      	bne.n	800c96a <_printf_common+0xb6>
 800c962:	f04f 30ff 	mov.w	r0, #4294967295
 800c966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c96a:	3501      	adds	r5, #1
 800c96c:	e7c1      	b.n	800c8f2 <_printf_common+0x3e>
 800c96e:	2030      	movs	r0, #48	; 0x30
 800c970:	18e1      	adds	r1, r4, r3
 800c972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c976:	1c5a      	adds	r2, r3, #1
 800c978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c97c:	4422      	add	r2, r4
 800c97e:	3302      	adds	r3, #2
 800c980:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c984:	e7c2      	b.n	800c90c <_printf_common+0x58>
 800c986:	2301      	movs	r3, #1
 800c988:	4622      	mov	r2, r4
 800c98a:	4649      	mov	r1, r9
 800c98c:	4638      	mov	r0, r7
 800c98e:	47c0      	blx	r8
 800c990:	3001      	adds	r0, #1
 800c992:	d0e6      	beq.n	800c962 <_printf_common+0xae>
 800c994:	3601      	adds	r6, #1
 800c996:	e7d9      	b.n	800c94c <_printf_common+0x98>

0800c998 <_printf_i>:
 800c998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c99c:	7e0f      	ldrb	r7, [r1, #24]
 800c99e:	4691      	mov	r9, r2
 800c9a0:	2f78      	cmp	r7, #120	; 0x78
 800c9a2:	4680      	mov	r8, r0
 800c9a4:	460c      	mov	r4, r1
 800c9a6:	469a      	mov	sl, r3
 800c9a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9ae:	d807      	bhi.n	800c9c0 <_printf_i+0x28>
 800c9b0:	2f62      	cmp	r7, #98	; 0x62
 800c9b2:	d80a      	bhi.n	800c9ca <_printf_i+0x32>
 800c9b4:	2f00      	cmp	r7, #0
 800c9b6:	f000 80d5 	beq.w	800cb64 <_printf_i+0x1cc>
 800c9ba:	2f58      	cmp	r7, #88	; 0x58
 800c9bc:	f000 80c1 	beq.w	800cb42 <_printf_i+0x1aa>
 800c9c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9c8:	e03a      	b.n	800ca40 <_printf_i+0xa8>
 800c9ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9ce:	2b15      	cmp	r3, #21
 800c9d0:	d8f6      	bhi.n	800c9c0 <_printf_i+0x28>
 800c9d2:	a101      	add	r1, pc, #4	; (adr r1, 800c9d8 <_printf_i+0x40>)
 800c9d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9d8:	0800ca31 	.word	0x0800ca31
 800c9dc:	0800ca45 	.word	0x0800ca45
 800c9e0:	0800c9c1 	.word	0x0800c9c1
 800c9e4:	0800c9c1 	.word	0x0800c9c1
 800c9e8:	0800c9c1 	.word	0x0800c9c1
 800c9ec:	0800c9c1 	.word	0x0800c9c1
 800c9f0:	0800ca45 	.word	0x0800ca45
 800c9f4:	0800c9c1 	.word	0x0800c9c1
 800c9f8:	0800c9c1 	.word	0x0800c9c1
 800c9fc:	0800c9c1 	.word	0x0800c9c1
 800ca00:	0800c9c1 	.word	0x0800c9c1
 800ca04:	0800cb4b 	.word	0x0800cb4b
 800ca08:	0800ca71 	.word	0x0800ca71
 800ca0c:	0800cb05 	.word	0x0800cb05
 800ca10:	0800c9c1 	.word	0x0800c9c1
 800ca14:	0800c9c1 	.word	0x0800c9c1
 800ca18:	0800cb6d 	.word	0x0800cb6d
 800ca1c:	0800c9c1 	.word	0x0800c9c1
 800ca20:	0800ca71 	.word	0x0800ca71
 800ca24:	0800c9c1 	.word	0x0800c9c1
 800ca28:	0800c9c1 	.word	0x0800c9c1
 800ca2c:	0800cb0d 	.word	0x0800cb0d
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	1d1a      	adds	r2, r3, #4
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	602a      	str	r2, [r5, #0]
 800ca38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca40:	2301      	movs	r3, #1
 800ca42:	e0a0      	b.n	800cb86 <_printf_i+0x1ee>
 800ca44:	6820      	ldr	r0, [r4, #0]
 800ca46:	682b      	ldr	r3, [r5, #0]
 800ca48:	0607      	lsls	r7, r0, #24
 800ca4a:	f103 0104 	add.w	r1, r3, #4
 800ca4e:	6029      	str	r1, [r5, #0]
 800ca50:	d501      	bpl.n	800ca56 <_printf_i+0xbe>
 800ca52:	681e      	ldr	r6, [r3, #0]
 800ca54:	e003      	b.n	800ca5e <_printf_i+0xc6>
 800ca56:	0646      	lsls	r6, r0, #25
 800ca58:	d5fb      	bpl.n	800ca52 <_printf_i+0xba>
 800ca5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ca5e:	2e00      	cmp	r6, #0
 800ca60:	da03      	bge.n	800ca6a <_printf_i+0xd2>
 800ca62:	232d      	movs	r3, #45	; 0x2d
 800ca64:	4276      	negs	r6, r6
 800ca66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca6a:	230a      	movs	r3, #10
 800ca6c:	4859      	ldr	r0, [pc, #356]	; (800cbd4 <_printf_i+0x23c>)
 800ca6e:	e012      	b.n	800ca96 <_printf_i+0xfe>
 800ca70:	682b      	ldr	r3, [r5, #0]
 800ca72:	6820      	ldr	r0, [r4, #0]
 800ca74:	1d19      	adds	r1, r3, #4
 800ca76:	6029      	str	r1, [r5, #0]
 800ca78:	0605      	lsls	r5, r0, #24
 800ca7a:	d501      	bpl.n	800ca80 <_printf_i+0xe8>
 800ca7c:	681e      	ldr	r6, [r3, #0]
 800ca7e:	e002      	b.n	800ca86 <_printf_i+0xee>
 800ca80:	0641      	lsls	r1, r0, #25
 800ca82:	d5fb      	bpl.n	800ca7c <_printf_i+0xe4>
 800ca84:	881e      	ldrh	r6, [r3, #0]
 800ca86:	2f6f      	cmp	r7, #111	; 0x6f
 800ca88:	bf0c      	ite	eq
 800ca8a:	2308      	moveq	r3, #8
 800ca8c:	230a      	movne	r3, #10
 800ca8e:	4851      	ldr	r0, [pc, #324]	; (800cbd4 <_printf_i+0x23c>)
 800ca90:	2100      	movs	r1, #0
 800ca92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca96:	6865      	ldr	r5, [r4, #4]
 800ca98:	2d00      	cmp	r5, #0
 800ca9a:	bfa8      	it	ge
 800ca9c:	6821      	ldrge	r1, [r4, #0]
 800ca9e:	60a5      	str	r5, [r4, #8]
 800caa0:	bfa4      	itt	ge
 800caa2:	f021 0104 	bicge.w	r1, r1, #4
 800caa6:	6021      	strge	r1, [r4, #0]
 800caa8:	b90e      	cbnz	r6, 800caae <_printf_i+0x116>
 800caaa:	2d00      	cmp	r5, #0
 800caac:	d04b      	beq.n	800cb46 <_printf_i+0x1ae>
 800caae:	4615      	mov	r5, r2
 800cab0:	fbb6 f1f3 	udiv	r1, r6, r3
 800cab4:	fb03 6711 	mls	r7, r3, r1, r6
 800cab8:	5dc7      	ldrb	r7, [r0, r7]
 800caba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cabe:	4637      	mov	r7, r6
 800cac0:	42bb      	cmp	r3, r7
 800cac2:	460e      	mov	r6, r1
 800cac4:	d9f4      	bls.n	800cab0 <_printf_i+0x118>
 800cac6:	2b08      	cmp	r3, #8
 800cac8:	d10b      	bne.n	800cae2 <_printf_i+0x14a>
 800caca:	6823      	ldr	r3, [r4, #0]
 800cacc:	07de      	lsls	r6, r3, #31
 800cace:	d508      	bpl.n	800cae2 <_printf_i+0x14a>
 800cad0:	6923      	ldr	r3, [r4, #16]
 800cad2:	6861      	ldr	r1, [r4, #4]
 800cad4:	4299      	cmp	r1, r3
 800cad6:	bfde      	ittt	le
 800cad8:	2330      	movle	r3, #48	; 0x30
 800cada:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cade:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cae2:	1b52      	subs	r2, r2, r5
 800cae4:	6122      	str	r2, [r4, #16]
 800cae6:	464b      	mov	r3, r9
 800cae8:	4621      	mov	r1, r4
 800caea:	4640      	mov	r0, r8
 800caec:	f8cd a000 	str.w	sl, [sp]
 800caf0:	aa03      	add	r2, sp, #12
 800caf2:	f7ff fedf 	bl	800c8b4 <_printf_common>
 800caf6:	3001      	adds	r0, #1
 800caf8:	d14a      	bne.n	800cb90 <_printf_i+0x1f8>
 800cafa:	f04f 30ff 	mov.w	r0, #4294967295
 800cafe:	b004      	add	sp, #16
 800cb00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	f043 0320 	orr.w	r3, r3, #32
 800cb0a:	6023      	str	r3, [r4, #0]
 800cb0c:	2778      	movs	r7, #120	; 0x78
 800cb0e:	4832      	ldr	r0, [pc, #200]	; (800cbd8 <_printf_i+0x240>)
 800cb10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb14:	6823      	ldr	r3, [r4, #0]
 800cb16:	6829      	ldr	r1, [r5, #0]
 800cb18:	061f      	lsls	r7, r3, #24
 800cb1a:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb1e:	d402      	bmi.n	800cb26 <_printf_i+0x18e>
 800cb20:	065f      	lsls	r7, r3, #25
 800cb22:	bf48      	it	mi
 800cb24:	b2b6      	uxthmi	r6, r6
 800cb26:	07df      	lsls	r7, r3, #31
 800cb28:	bf48      	it	mi
 800cb2a:	f043 0320 	orrmi.w	r3, r3, #32
 800cb2e:	6029      	str	r1, [r5, #0]
 800cb30:	bf48      	it	mi
 800cb32:	6023      	strmi	r3, [r4, #0]
 800cb34:	b91e      	cbnz	r6, 800cb3e <_printf_i+0x1a6>
 800cb36:	6823      	ldr	r3, [r4, #0]
 800cb38:	f023 0320 	bic.w	r3, r3, #32
 800cb3c:	6023      	str	r3, [r4, #0]
 800cb3e:	2310      	movs	r3, #16
 800cb40:	e7a6      	b.n	800ca90 <_printf_i+0xf8>
 800cb42:	4824      	ldr	r0, [pc, #144]	; (800cbd4 <_printf_i+0x23c>)
 800cb44:	e7e4      	b.n	800cb10 <_printf_i+0x178>
 800cb46:	4615      	mov	r5, r2
 800cb48:	e7bd      	b.n	800cac6 <_printf_i+0x12e>
 800cb4a:	682b      	ldr	r3, [r5, #0]
 800cb4c:	6826      	ldr	r6, [r4, #0]
 800cb4e:	1d18      	adds	r0, r3, #4
 800cb50:	6961      	ldr	r1, [r4, #20]
 800cb52:	6028      	str	r0, [r5, #0]
 800cb54:	0635      	lsls	r5, r6, #24
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	d501      	bpl.n	800cb5e <_printf_i+0x1c6>
 800cb5a:	6019      	str	r1, [r3, #0]
 800cb5c:	e002      	b.n	800cb64 <_printf_i+0x1cc>
 800cb5e:	0670      	lsls	r0, r6, #25
 800cb60:	d5fb      	bpl.n	800cb5a <_printf_i+0x1c2>
 800cb62:	8019      	strh	r1, [r3, #0]
 800cb64:	2300      	movs	r3, #0
 800cb66:	4615      	mov	r5, r2
 800cb68:	6123      	str	r3, [r4, #16]
 800cb6a:	e7bc      	b.n	800cae6 <_printf_i+0x14e>
 800cb6c:	682b      	ldr	r3, [r5, #0]
 800cb6e:	2100      	movs	r1, #0
 800cb70:	1d1a      	adds	r2, r3, #4
 800cb72:	602a      	str	r2, [r5, #0]
 800cb74:	681d      	ldr	r5, [r3, #0]
 800cb76:	6862      	ldr	r2, [r4, #4]
 800cb78:	4628      	mov	r0, r5
 800cb7a:	f000 f8b3 	bl	800cce4 <memchr>
 800cb7e:	b108      	cbz	r0, 800cb84 <_printf_i+0x1ec>
 800cb80:	1b40      	subs	r0, r0, r5
 800cb82:	6060      	str	r0, [r4, #4]
 800cb84:	6863      	ldr	r3, [r4, #4]
 800cb86:	6123      	str	r3, [r4, #16]
 800cb88:	2300      	movs	r3, #0
 800cb8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb8e:	e7aa      	b.n	800cae6 <_printf_i+0x14e>
 800cb90:	462a      	mov	r2, r5
 800cb92:	4649      	mov	r1, r9
 800cb94:	4640      	mov	r0, r8
 800cb96:	6923      	ldr	r3, [r4, #16]
 800cb98:	47d0      	blx	sl
 800cb9a:	3001      	adds	r0, #1
 800cb9c:	d0ad      	beq.n	800cafa <_printf_i+0x162>
 800cb9e:	6823      	ldr	r3, [r4, #0]
 800cba0:	079b      	lsls	r3, r3, #30
 800cba2:	d413      	bmi.n	800cbcc <_printf_i+0x234>
 800cba4:	68e0      	ldr	r0, [r4, #12]
 800cba6:	9b03      	ldr	r3, [sp, #12]
 800cba8:	4298      	cmp	r0, r3
 800cbaa:	bfb8      	it	lt
 800cbac:	4618      	movlt	r0, r3
 800cbae:	e7a6      	b.n	800cafe <_printf_i+0x166>
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	4632      	mov	r2, r6
 800cbb4:	4649      	mov	r1, r9
 800cbb6:	4640      	mov	r0, r8
 800cbb8:	47d0      	blx	sl
 800cbba:	3001      	adds	r0, #1
 800cbbc:	d09d      	beq.n	800cafa <_printf_i+0x162>
 800cbbe:	3501      	adds	r5, #1
 800cbc0:	68e3      	ldr	r3, [r4, #12]
 800cbc2:	9903      	ldr	r1, [sp, #12]
 800cbc4:	1a5b      	subs	r3, r3, r1
 800cbc6:	42ab      	cmp	r3, r5
 800cbc8:	dcf2      	bgt.n	800cbb0 <_printf_i+0x218>
 800cbca:	e7eb      	b.n	800cba4 <_printf_i+0x20c>
 800cbcc:	2500      	movs	r5, #0
 800cbce:	f104 0619 	add.w	r6, r4, #25
 800cbd2:	e7f5      	b.n	800cbc0 <_printf_i+0x228>
 800cbd4:	0800d3d5 	.word	0x0800d3d5
 800cbd8:	0800d3e6 	.word	0x0800d3e6

0800cbdc <__swhatbuf_r>:
 800cbdc:	b570      	push	{r4, r5, r6, lr}
 800cbde:	460c      	mov	r4, r1
 800cbe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbe4:	4615      	mov	r5, r2
 800cbe6:	2900      	cmp	r1, #0
 800cbe8:	461e      	mov	r6, r3
 800cbea:	b096      	sub	sp, #88	; 0x58
 800cbec:	da0c      	bge.n	800cc08 <__swhatbuf_r+0x2c>
 800cbee:	89a3      	ldrh	r3, [r4, #12]
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cbf6:	bf0c      	ite	eq
 800cbf8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cbfc:	2340      	movne	r3, #64	; 0x40
 800cbfe:	2000      	movs	r0, #0
 800cc00:	6031      	str	r1, [r6, #0]
 800cc02:	602b      	str	r3, [r5, #0]
 800cc04:	b016      	add	sp, #88	; 0x58
 800cc06:	bd70      	pop	{r4, r5, r6, pc}
 800cc08:	466a      	mov	r2, sp
 800cc0a:	f000 f849 	bl	800cca0 <_fstat_r>
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	dbed      	blt.n	800cbee <__swhatbuf_r+0x12>
 800cc12:	9901      	ldr	r1, [sp, #4]
 800cc14:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cc18:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cc1c:	4259      	negs	r1, r3
 800cc1e:	4159      	adcs	r1, r3
 800cc20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc24:	e7eb      	b.n	800cbfe <__swhatbuf_r+0x22>

0800cc26 <__smakebuf_r>:
 800cc26:	898b      	ldrh	r3, [r1, #12]
 800cc28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc2a:	079d      	lsls	r5, r3, #30
 800cc2c:	4606      	mov	r6, r0
 800cc2e:	460c      	mov	r4, r1
 800cc30:	d507      	bpl.n	800cc42 <__smakebuf_r+0x1c>
 800cc32:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc36:	6023      	str	r3, [r4, #0]
 800cc38:	6123      	str	r3, [r4, #16]
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	6163      	str	r3, [r4, #20]
 800cc3e:	b002      	add	sp, #8
 800cc40:	bd70      	pop	{r4, r5, r6, pc}
 800cc42:	466a      	mov	r2, sp
 800cc44:	ab01      	add	r3, sp, #4
 800cc46:	f7ff ffc9 	bl	800cbdc <__swhatbuf_r>
 800cc4a:	9900      	ldr	r1, [sp, #0]
 800cc4c:	4605      	mov	r5, r0
 800cc4e:	4630      	mov	r0, r6
 800cc50:	f7ff f8b4 	bl	800bdbc <_malloc_r>
 800cc54:	b948      	cbnz	r0, 800cc6a <__smakebuf_r+0x44>
 800cc56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc5a:	059a      	lsls	r2, r3, #22
 800cc5c:	d4ef      	bmi.n	800cc3e <__smakebuf_r+0x18>
 800cc5e:	f023 0303 	bic.w	r3, r3, #3
 800cc62:	f043 0302 	orr.w	r3, r3, #2
 800cc66:	81a3      	strh	r3, [r4, #12]
 800cc68:	e7e3      	b.n	800cc32 <__smakebuf_r+0xc>
 800cc6a:	89a3      	ldrh	r3, [r4, #12]
 800cc6c:	6020      	str	r0, [r4, #0]
 800cc6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc72:	81a3      	strh	r3, [r4, #12]
 800cc74:	9b00      	ldr	r3, [sp, #0]
 800cc76:	6120      	str	r0, [r4, #16]
 800cc78:	6163      	str	r3, [r4, #20]
 800cc7a:	9b01      	ldr	r3, [sp, #4]
 800cc7c:	b15b      	cbz	r3, 800cc96 <__smakebuf_r+0x70>
 800cc7e:	4630      	mov	r0, r6
 800cc80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc84:	f000 f81e 	bl	800ccc4 <_isatty_r>
 800cc88:	b128      	cbz	r0, 800cc96 <__smakebuf_r+0x70>
 800cc8a:	89a3      	ldrh	r3, [r4, #12]
 800cc8c:	f023 0303 	bic.w	r3, r3, #3
 800cc90:	f043 0301 	orr.w	r3, r3, #1
 800cc94:	81a3      	strh	r3, [r4, #12]
 800cc96:	89a3      	ldrh	r3, [r4, #12]
 800cc98:	431d      	orrs	r5, r3
 800cc9a:	81a5      	strh	r5, [r4, #12]
 800cc9c:	e7cf      	b.n	800cc3e <__smakebuf_r+0x18>
	...

0800cca0 <_fstat_r>:
 800cca0:	b538      	push	{r3, r4, r5, lr}
 800cca2:	2300      	movs	r3, #0
 800cca4:	4d06      	ldr	r5, [pc, #24]	; (800ccc0 <_fstat_r+0x20>)
 800cca6:	4604      	mov	r4, r0
 800cca8:	4608      	mov	r0, r1
 800ccaa:	4611      	mov	r1, r2
 800ccac:	602b      	str	r3, [r5, #0]
 800ccae:	f7fb fa71 	bl	8008194 <_fstat>
 800ccb2:	1c43      	adds	r3, r0, #1
 800ccb4:	d102      	bne.n	800ccbc <_fstat_r+0x1c>
 800ccb6:	682b      	ldr	r3, [r5, #0]
 800ccb8:	b103      	cbz	r3, 800ccbc <_fstat_r+0x1c>
 800ccba:	6023      	str	r3, [r4, #0]
 800ccbc:	bd38      	pop	{r3, r4, r5, pc}
 800ccbe:	bf00      	nop
 800ccc0:	20000a64 	.word	0x20000a64

0800ccc4 <_isatty_r>:
 800ccc4:	b538      	push	{r3, r4, r5, lr}
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	4d05      	ldr	r5, [pc, #20]	; (800cce0 <_isatty_r+0x1c>)
 800ccca:	4604      	mov	r4, r0
 800cccc:	4608      	mov	r0, r1
 800ccce:	602b      	str	r3, [r5, #0]
 800ccd0:	f7fb fa6f 	bl	80081b2 <_isatty>
 800ccd4:	1c43      	adds	r3, r0, #1
 800ccd6:	d102      	bne.n	800ccde <_isatty_r+0x1a>
 800ccd8:	682b      	ldr	r3, [r5, #0]
 800ccda:	b103      	cbz	r3, 800ccde <_isatty_r+0x1a>
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	bd38      	pop	{r3, r4, r5, pc}
 800cce0:	20000a64 	.word	0x20000a64

0800cce4 <memchr>:
 800cce4:	4603      	mov	r3, r0
 800cce6:	b510      	push	{r4, lr}
 800cce8:	b2c9      	uxtb	r1, r1
 800ccea:	4402      	add	r2, r0
 800ccec:	4293      	cmp	r3, r2
 800ccee:	4618      	mov	r0, r3
 800ccf0:	d101      	bne.n	800ccf6 <memchr+0x12>
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	e003      	b.n	800ccfe <memchr+0x1a>
 800ccf6:	7804      	ldrb	r4, [r0, #0]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	428c      	cmp	r4, r1
 800ccfc:	d1f6      	bne.n	800ccec <memchr+0x8>
 800ccfe:	bd10      	pop	{r4, pc}

0800cd00 <_init>:
 800cd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd02:	bf00      	nop
 800cd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd06:	bc08      	pop	{r3}
 800cd08:	469e      	mov	lr, r3
 800cd0a:	4770      	bx	lr

0800cd0c <_fini>:
 800cd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0e:	bf00      	nop
 800cd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd12:	bc08      	pop	{r3}
 800cd14:	469e      	mov	lr, r3
 800cd16:	4770      	bx	lr
